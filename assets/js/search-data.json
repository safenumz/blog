{
  
    
        "post0": {
            "title": "[Recommender System] DeepFM Paper Implementation",
            "content": "DeepFM Paper Implementation . Configuration . import os import pandas as pd import numpy as np import torch import torch.nn.functional as F import torch.utils.data from torch.utils.data import DataLoader import tqdm . Dataset Loader . data_dir = &#39;../datasets/kmrd/kmr_dataset/datafile/kmrd-small&#39; data_filename = &#39;rates.csv&#39; data_path = os.path.join(data_dir, data_filename) . import torch.utils.data class KMRDDataset(torch.utils.data.Dataset): def __init__(self, data_path): data = pd.read_csv(os.path.join(data_path))[:10000] user_to_index = {original: idx for idx, original in enumerate(data.user.unique())} movie_to_index = {original: idx for idx, original in enumerate(data.movie.unique())} data[&#39;user&#39;] = data[&#39;user&#39;].apply(lambda x: user_to_index[x]) data[&#39;movie&#39;] = data[&#39;movie&#39;].apply(lambda x: movie_to_index[x]) # [user, movie, rate] -&gt; (user, movie, rate) data = data.to_numpy()[:, :3] self.items = data[:, :2].astype(np.int) # -1 because ID begins from 1 self.targets = self.__preprocess_target(data[:, 2]).astype(np.float32) self.field_dims = np.max(self.items, axis=0) + 1 self.user_field_idx = np.array((0, ), dtype=np.long) self.item_field_idx = np.array((1,), dtype=np.long) def __len__(self): return self.targets.shape[0] def __getitem__(self, index): return self.items[index], self.targets[index] def __preprocess_target(self, target): target[target &lt;= 9] = 0 target[target &gt; 9] = 1 return target . dataset = KMRDDataset(data_path=data_path) . print(dataset.item_field_idx) print(dataset.field_dims) print(sum(dataset.field_dims)) print(torch.nn.Embedding(sum(dataset.field_dims), 16)) print(torch.nn.Parameter(torch.zeros((1,)))) print(np.array((0, *np.cumsum(dataset.field_dims)[:-1]), dtype=np.long)) . [1] [466 532] 998 Embedding(998, 16) Parameter containing: tensor([0.], requires_grad=True) [ 0 466] . train_length = int(len(dataset) * 0.8) valid_length = int(len(dataset) * 0.1) test_length = len(dataset) - train_length - valid_length train_dataset, valid_dataset, test_dataset = torch.utils.data.random_split( dataset, (train_length, valid_length, test_length)) . train_data_loader = DataLoader(train_dataset, batch_size=16) valid_data_loader = DataLoader(valid_dataset, batch_size=16) test_data_loader = DataLoader(test_dataset, batch_size=1) . print(dataset.items) print(dataset.targets) . [[ 0 0] [ 0 1] [ 0 2] ... [465 15] [465 15] [465 338]] [0. 0. 0. ... 0. 0. 0.] . Model Structure . class FeaturesLinear(torch.nn.Module): def __init__(self, field_dims, output_dim=1): super().__init__() self.fc = torch.nn.Embedding(sum(field_dims), output_dim) self.bias = torch.nn.Parameter(torch.zeros((output_dim,))) self.offsets = np.array((0, *np.cumsum(field_dims)[:-1]), dtype=np.long) def forward(self, x): &quot;&quot;&quot; :param x: Long tensor of size ``(batch_size, num_fields)`` &quot;&quot;&quot; x = x + x.new_tensor(self.offsets).unsqueeze(0) return torch.sum(self.fc(x), dim=1) + self.bias class FeaturesEmbedding(torch.nn.Module): def __init__(self, field_dims, embed_dim): super().__init__() self.embedding = torch.nn.Embedding(sum(field_dims), embed_dim) self.offsets = np.array((0, *np.cumsum(field_dims)[:-1]), dtype=np.long) torch.nn.init.xavier_uniform_(self.embedding.weight.data) def forward(self, x): &quot;&quot;&quot; :param x: Long tensor of size ``(batch_size, num_fields)`` &quot;&quot;&quot; x = x + x.new_tensor(self.offsets).unsqueeze(0) return self.embedding(x) class FactorizationMachine(torch.nn.Module): def __init__(self, reduce_sum=True): super().__init__() self.reduce_sum = reduce_sum def forward(self, x): &quot;&quot;&quot; :param x: Float tensor of size ``(batch_size, num_fields, embed_dim)`` &quot;&quot;&quot; square_of_sum = torch.sum(x, dim=1) ** 2 sum_of_square = torch.sum(x ** 2, dim=1) ix = square_of_sum - sum_of_square if self.reduce_sum: ix = torch.sum(ix, dim=1, keepdim=True) return 0.5 * ix class MultiLayerPerceptron(torch.nn.Module): def __init__(self, input_dim, embed_dims, dropout, output_layer=True): super().__init__() layers = list() for embed_dim in embed_dims: layers.append(torch.nn.Linear(input_dim, embed_dim)) layers.append(torch.nn.BatchNorm1d(embed_dim)) layers.append(torch.nn.ReLU()) layers.append(torch.nn.Dropout(p=dropout)) input_dim = embed_dim if output_layer: layers.append(torch.nn.Linear(input_dim, 1)) self.mlp = torch.nn.Sequential(*layers) def forward(self, x): &quot;&quot;&quot; :param x: Float tensor of size ``(batch_size, embed_dim)`` &quot;&quot;&quot; return self.mlp(x) . class DeepFactorizationMachineModel(torch.nn.Module): &quot;&quot;&quot; A pytorch implementation of DeepFM. Reference: H Guo, et al. DeepFM: A Factorization-Machine based Neural Network for CTR Prediction, 2017. &quot;&quot;&quot; def __init__(self, field_dims, embed_dim, mlp_dims, dropout): super().__init__() self.linear = FeaturesLinear(field_dims) self.fm = FactorizationMachine(reduce_sum=True) self.embedding = FeaturesEmbedding(field_dims, embed_dim) self.embed_output_dim = len(field_dims) * embed_dim self.mlp = MultiLayerPerceptron(self.embed_output_dim, mlp_dims, dropout) def forward(self, x): &quot;&quot;&quot; :param x: Long tensor bof size ``(batch_size, num_fields)`` &quot;&quot;&quot; embed_x = self.embedding(x) x = self.linear(x) + self.fm(embed_x) + self.mlp(embed_x.view(-1, self.embed_output_dim)) return torch.sigmoid(x.squeeze(1)) . Train model . model = DeepFactorizationMachineModel(dataset.field_dims, embed_dim=16, mlp_dims=(16, 16), dropout=0.2) model . DeepFactorizationMachineModel( (linear): FeaturesLinear( (fc): Embedding(998, 1) ) (fm): FactorizationMachine() (embedding): FeaturesEmbedding( (embedding): Embedding(998, 16) ) (mlp): MultiLayerPerceptron( (mlp): Sequential( (0): Linear(in_features=32, out_features=16, bias=True) (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (2): ReLU() (3): Dropout(p=0.2, inplace=False) (4): Linear(in_features=16, out_features=16, bias=True) (5): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (6): ReLU() (7): Dropout(p=0.2, inplace=False) (8): Linear(in_features=16, out_features=1, bias=True) ) ) ) . criterion = torch.nn.BCELoss() # binary cross entropy optimizer = torch.optim.Adam(params=model.parameters(), lr=0.001, weight_decay=1e-6) . import tqdm log_interval = 100 model.train() total_loss = 0 tk0 = tqdm.tqdm(train_data_loader, smoothing=0, mininterval=1.0) for i, (fields, target) in enumerate(tk0): # fields, target = fields.to(device), target.to(device) y = model(fields) loss = criterion(y, target.float()) model.zero_grad() loss.backward() optimizer.step() total_loss += loss.item() if (i + 1) % log_interval == 0: tk0.set_postfix(loss=total_loss / log_interval) total_loss = 0 . 100%|██████████| 500/500 [00:00&lt;00:00, 759.82it/s, loss=0.598] .",
            "url": "https://safenumz.github.io/blog/ai/2022/11/05/ai-deepfm-implementation.html",
            "relUrl": "/ai/2022/11/05/ai-deepfm-implementation.html",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "[Recommender System] Neural Collaborative Filtering Paper Implementation",
            "content": "Neural Collaborative Filtering Paper Implementation . Configuration . import os import pandas as pd import numpy as np from matplotlib import pyplot as plt from sklearn.model_selection import train_test_split import math import torch from torch import nn, optim import torch.nn.functional as F from torch.autograd import Variable from tqdm import tqdm import warnings warnings.filterwarnings(&quot;ignore&quot;) . Load Dataset . KMRD 데이터셋 활용 | . def read_data(data_dir, data_filename): df = pd.read_csv(os.path.join(data_dir, data_filename)) train_df, val_df = train_test_split(df, test_size=0.2, random_state=7, shuffle=True) return train_df, val_df . data_dir = &#39;../datasets/kmrd/kmr_dataset/datafile/kmrd-small&#39; data_filename = &#39;rates.csv&#39; . train_df, val_df = read_data(data_dir, data_filename) . train_df.shape . (112568, 4) . train_df.head() . user movie rate time . 49270 5022 | 10048 | 10 | 1263194040 | . 21206 1391 | 10018 | 9 | 1311682500 | . 103762 23267 | 10071 | 10 | 1274965260 | . 60013 6952 | 10200 | 9 | 1245919800 | . 98439 20620 | 10111 | 9 | 1369739760 | . val_df.shape . (28142, 4) . fig, ax = plt.subplots(1, 2, sharex=&#39;col&#39;, sharey=&#39;row&#39;, figsize=(16, 5)) ax = ax.ravel() train_df[&#39;rate&#39;].hist(ax=ax[0]) val_df[&#39;rate&#39;].hist(ax=ax[1]) plt.show() . train_df[&#39;rate&#39;].describe() . count 112568.000000 mean 8.954703 std 2.104698 min 1.000000 25% 9.000000 50% 10.000000 75% 10.000000 max 10.000000 Name: rate, dtype: float64 . movies_df = pd.read_csv(os.path.join(data_dir, &#39;movies.txt&#39;), sep=&#39; t&#39;, encoding=&#39;utf-8&#39;) movies_df = movies_df.set_index(&#39;movie&#39;) movies_df.head() . title title_eng year grade . movie . 10001 시네마 천국 | Cinema Paradiso , 1988 | 2013.0 | 전체 관람가 | . 10002 빽 투 더 퓨쳐 | Back To The Future , 1985 | 2015.0 | 12세 관람가 | . 10003 빽 투 더 퓨쳐 2 | Back To The Future Part 2 , 1989 | 2015.0 | 12세 관람가 | . 10004 빽 투 더 퓨쳐 3 | Back To The Future Part III , 1990 | 1990.0 | 전체 관람가 | . 10005 스타워즈 에피소드 4 - 새로운 희망 | Star Wars , 1977 | 1997.0 | PG | . castings_df = pd.read_csv(os.path.join(data_dir, &#39;castings.csv&#39;), encoding=&#39;utf-8&#39;) castings_df.head() . movie people order leading . 0 10001 | 4374 | 1 | 1 | . 1 10001 | 178 | 2 | 1 | . 2 10001 | 3241 | 3 | 1 | . 3 10001 | 47952 | 4 | 1 | . 4 10001 | 47953 | 5 | 0 | . countries_df = pd.read_csv(os.path.join(data_dir, &#39;countries.csv&#39;), encoding=&#39;utf-8&#39;) countries_df.head() . movie country . 0 10001 | 이탈리아 | . 1 10001 | 프랑스 | . 2 10002 | 미국 | . 3 10003 | 미국 | . 4 10004 | 미국 | . genres_df = pd.read_csv(os.path.join(data_dir, &#39;genres.csv&#39;), encoding=&#39;utf-8&#39;) genres_df.head() . movie genre . 0 10001 | 드라마 | . 1 10001 | 멜로/로맨스 | . 2 10002 | SF | . 3 10002 | 코미디 | . 4 10003 | SF | . combined_genres_df = pd.DataFrame(genres_df.groupby(&#39;movie&#39;).apply(lambda x: &#39;/&#39;.join(x[&#39;genre&#39;])), columns=[&#39;genres&#39;]) combined_genres_df.head() . genres . movie . 10001 드라마/멜로/로맨스 | . 10002 SF/코미디 | . 10003 SF/코미디 | . 10004 서부/SF/판타지/코미디 | . 10005 판타지/모험/SF/액션 | . combined_castings_df = pd.DataFrame(castings_df.groupby(&#39;movie&#39;).apply(lambda x: list(x[&#39;people&#39;])), columns=[&#39;people&#39;]) combined_castings_df.head() . people . movie . 10001 [4374, 178, 3241, 47952, 47953, 19538, 18991, ... | . 10002 [1076, 4603, 917, 8637, 5104, 9986, 7470, 9987] | . 10003 [1076, 4603, 917, 5104, 391, 5106, 5105, 5107,... | . 10004 [1076, 4603, 1031, 5104, 10001, 5984, 10002, 1... | . 10005 [1007, 535, 215, 1236, 35] | . combined_countries_df = pd.DataFrame(countries_df.groupby(&#39;movie&#39;).apply(lambda x: &#39;,&#39;.join(x[&#39;country&#39;])), columns=[&#39;countries&#39;]) combined_countries_df.head() . countries . movie . 10001 이탈리아,프랑스 | . 10002 미국 | . 10003 미국 | . 10004 미국 | . 10005 미국 | . movies_df = pd.concat([movies_df, combined_genres_df, combined_castings_df, combined_countries_df], axis=1) movies_df.head() . title title_eng year grade genres people countries . movie . 10001 시네마 천국 | Cinema Paradiso , 1988 | 2013.0 | 전체 관람가 | 드라마/멜로/로맨스 | [4374, 178, 3241, 47952, 47953, 19538, 18991, ... | 이탈리아,프랑스 | . 10002 빽 투 더 퓨쳐 | Back To The Future , 1985 | 2015.0 | 12세 관람가 | SF/코미디 | [1076, 4603, 917, 8637, 5104, 9986, 7470, 9987] | 미국 | . 10003 빽 투 더 퓨쳐 2 | Back To The Future Part 2 , 1989 | 2015.0 | 12세 관람가 | SF/코미디 | [1076, 4603, 917, 5104, 391, 5106, 5105, 5107,... | 미국 | . 10004 빽 투 더 퓨쳐 3 | Back To The Future Part III , 1990 | 1990.0 | 전체 관람가 | 서부/SF/판타지/코미디 | [1076, 4603, 1031, 5104, 10001, 5984, 10002, 1... | 미국 | . 10005 스타워즈 에피소드 4 - 새로운 희망 | Star Wars , 1977 | 1997.0 | PG | 판타지/모험/SF/액션 | [1007, 535, 215, 1236, 35] | 미국 | . Dataset Loader . import pandas as pd from sklearn.model_selection import train_test_split class DatasetLoader: def __init__(self, data_path): self.train_df, val_temp_df = train_test_split(pd.read_csv(data_path), test_size=0.2, random_state=7, shuffle=True) self.min_rating = self.train_df.rate.min() self.max_rating = self.train_df.rate.max() self.unique_users = self.train_df.user.unique() self.num_users = len(self.unique_users) self.user_to_index = {original: idx for idx, original in enumerate(self.unique_users)} self.unique_movies = self.train_df.movie.unique() self.num_movies = len(self.unique_movies) self.movie_to_index = {original: idx for idx, original in enumerate(self.unique_movies)} self.val_df = val_temp_df[val_temp_df.user.isin(self.unique_users) &amp; val_temp_df.movie.isin(self.unique_movies)] def generate_trainset(self): X_train = pd.DataFrame({&#39;user&#39;: self.train_df.user.map(self.user_to_index), &#39;movie&#39;: self.train_df.movie.map(self.movie_to_index)}) y_train = self.train_df[&#39;rate&#39;].astype(np.float32) return X_train, y_train def generate_valset(self): X_val = pd.DataFrame({&#39;user&#39;: self.val_df.user.map(self.user_to_index), &#39;movie&#39;: self.val_df.movie.map(self.movie_to_index)}) y_val = self.val_df[&#39;rate&#39;].astype(np.float32) return X_val, y_val . Model Structure . from torch import nn, optim class FeedForwardEmbedNN(nn.Module): def __init__(self, n_users, n_movies, hidden, dropouts, n_factors, embedding_dropout): super().__init__() self.user_emb = nn.Embedding(n_users, n_factors) self.movie_emb = nn.Embedding(n_movies, n_factors) self.drop = nn.Dropout(embedding_dropout) self.hidden_layers = nn.Sequential(*list(self.generate_layers(n_factors*2, hidden, dropouts))) self.fc = nn.Linear(hidden[-1], 1) def generate_layers(self, n_factors, hidden, dropouts): assert len(dropouts) == len(hidden) idx = 0 while idx &lt; len(hidden): if idx == 0: yield nn.Linear(n_factors, hidden[idx]) else: yield nn.Linear(hidden[idx-1], hidden[idx]) yield nn.ReLU() yield nn.Dropout(dropouts[idx]) idx += 1 def forward(self, users, movies, min_rating=0.5, max_rating=5): concat_features = torch.cat([self.user_emb(users), self.movie_emb(movies)], dim=1) x = F.relu(self.hidden_layers(concat_features)) out = torch.sigmoid(self.fc(x)) out = (out * (max_rating - min_rating)) + min_rating return out def predict(self, users, movies): output_scores = self.forward(users, movies) return output_scores . class BatchIterator: def __init__(self, X, y, batch_size=32, shuffle=True): X, y = np.asarray(X), np.asarray(y) if shuffle: index = np.random.permutation(X.shape[0]) X, y = X[index], y[index] self.X = X self.y = y self.batch_size = batch_size self.shuffle = shuffle self.n_batches = int(math.ceil(X.shape[0] // batch_size)) self._current = 0 def __iter__(self): return self def __next__(self): return self.next() def next(self): if self._current &gt;= self.n_batches: raise StopIteration() k = self._current self._current += 1 bs = self.batch_size return self.X[k * bs:(k + 1) * bs], self.y[k * bs:(k + 1) * bs] . def batches(X, y, bs=32, shuffle=True): for x_batch, y_batch in BatchIterator(X, y, bs, shuffle): x_batch = torch.LongTensor(x_batch) y_batch = torch.FloatTensor(y_batch) yield x_batch, y_batch.view(-1, 1) . Train model . def model_train(ds, config): device = torch.device(&#39;cuda:0&#39; if torch.cuda.is_available() else &#39;cpu&#39;) X_train, y_train = ds.generate_trainset() X_valid, y_valid = ds.generate_valset() print(f&#39;TrainSet Info: {ds.num_users} users, {ds.num_movies} movies&#39;) model = FeedForwardEmbedNN( n_users=ds.num_users, n_movies=ds.num_movies, n_factors=config[&#39;num_factors&#39;], hidden=config[&#39;hidden_layers&#39;], embedding_dropout=config[&#39;embedding_dropout&#39;], dropouts=config[&#39;dropouts&#39;] ) model.to(device) batch_size = config[&#39;batch_size&#39;] num_epochs = config[&#39;num_epochs&#39;] max_patience = config[&#39;total_patience&#39;] num_patience = 0 best_loss = np.inf criterion = nn.MSELoss(reduction=&#39;sum&#39;) criterion.to(device) optimizer = optim.Adam(model.parameters(), lr=config[&#39;learning_rate&#39;], weight_decay=config[&#39;weight_decay&#39;]) result = dict() for epoch in tqdm(range(num_epochs)): training_loss = 0.0 for batch in batches(X_train, y_train, shuffle=True, bs=batch_size): x_batch, y_batch = [b.to(device) for b in batch] optimizer.zero_grad() # with torch.no_grad() 와 동일한 syntax 입니다 with torch.set_grad_enabled(True): outputs = model(x_batch[:, 0], x_batch[:, 1], ds.min_rating, ds.max_rating) loss = criterion(outputs, y_batch) loss.backward() optimizer.step() training_loss += loss.item() result[&#39;train&#39;] = training_loss / len(X_train) # Apply Early Stopping criteria and save best model params val_outputs = model(torch.LongTensor(X_valid.user.values).to(device), torch.LongTensor(X_valid.movie.values).to(device), ds.min_rating, ds.max_rating) val_loss = criterion(val_outputs.to(device), torch.FloatTensor(y_valid.values).view(-1, 1).to(device)) result[&#39;val&#39;] = float((val_loss / len(X_valid)).data) if val_loss &lt; best_loss: print(&#39;Save new model on epoch: %d&#39; % (epoch + 1)) best_loss = val_loss result[&#39;best_loss&#39;] = val_loss torch.save(model.state_dict(), config[&#39;save_path&#39;]) num_patience = 0 else: num_patience += 1 print(f&#39;[epoch: {epoch+1}] train: {result[&quot;train&quot;]} - val: {result[&quot;val&quot;]}&#39;) if num_patience &gt;= max_patience: print(f&quot;Early Stopped after epoch {epoch+1}&quot;) break return result . data_dir = &#39;../datasets/kmrd/kmr_dataset/datafile/kmrd-small&#39; data_filename = &#39;rates.csv&#39; data_path = os.path.join(data_dir, data_filename) dataset = DatasetLoader(data_path) . config = { &quot;num_factors&quot;: 16, &quot;hidden_layers&quot;: [64, 32, 16], &quot;embedding_dropout&quot;: 0.05, &quot;dropouts&quot;: [0.3, 0.3, 0.3], &quot;learning_rate&quot;: 1e-3, &quot;weight_decay&quot;: 1e-5, &quot;batch_size&quot;: 8, &quot;num_epochs&quot;: 3, &quot;total_patience&quot;: 30, &quot;save_path&quot;: &quot;params.data&quot; } . model_train(dataset, config) . TrainSet Info: 44554 users, 594 movies . 33%|███▎ | 1/3 [00:22&lt;00:44, 22.32s/it] . Save new model on epoch: 1 [epoch: 1] train: 4.282606438265097 - val: 4.0021843910217285 . 67%|██████▋ | 2/3 [00:43&lt;00:21, 21.93s/it] . Save new model on epoch: 2 [epoch: 2] train: 3.695007214637341 - val: 3.7426116466522217 . 100%|██████████| 3/3 [01:06&lt;00:00, 22.07s/it] . Save new model on epoch: 3 [epoch: 3] train: 3.2749883148887515 - val: 3.700655937194824 . . {&#39;train&#39;: 3.2749883148887515, &#39;val&#39;: 3.700655937194824, &#39;best_loss&#39;: tensor(75152.9219, device=&#39;cuda:0&#39;, grad_fn=&lt;MseLossBackward0&gt;)} . Test . def model_valid(user_id_list, movie_id_list, data_path): dataset = DatasetLoader(data_path) processed_test_input_df = pd.DataFrame({ &#39;user_id&#39;: [dataset.user_to_index[x] for x in user_id_list], &#39;movie_id&#39;: [dataset.movie_to_index[x] for x in movie_id_list] }) # 학습한 모델 load하기 my_model = FeedForwardEmbedNN(dataset.num_users, dataset.num_movies, config[&#39;hidden_layers&#39;], config[&#39;dropouts&#39;], config[&#39;num_factors&#39;], config[&#39;embedding_dropout&#39;]) my_model.load_state_dict(torch.load(&#39;params.data&#39;)) prediction_outputs = my_model.predict(users=torch.LongTensor(processed_test_input_df.user_id.values), movies=torch.LongTensor(processed_test_input_df.movie_id.values)) return prediction_outputs . movie_id_list = [10253, 10102, 10007] user_id = 11242 user_id_list = [user_id] * len(movie_id_list) pred_results = [float(x) for x in model_valid(user_id_list, movie_id_list, data_path)] result_df = pd.DataFrame({ &#39;userId&#39;: user_id_list, &#39;movieId&#39;: movie_id_list, # &#39;movieName&#39;: [movieName_dict[x] for x in movie_id_list], # &#39;genres&#39;: [genres_dict[x] for x in movie_id_list], &#39;pred_ratings&#39;: pred_results }) result_df.sort_values(by=&#39;pred_ratings&#39;, ascending=False) . userId movieId pred_ratings . 1 11242 | 10102 | 4.948718 | . 2 11242 | 10007 | 4.815145 | . 0 11242 | 10253 | 4.800036 | .",
            "url": "https://safenumz.github.io/blog/ai/2022/11/03/ai-neural-collaborative-filtering-implementation.html",
            "relUrl": "/ai/2022/11/03/ai-neural-collaborative-filtering-implementation.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "[Recommender System] Deep Neural Networks for YouTube Recommendations",
            "content": "Deep Neural Networks for YouTube Recommendations . . Abstract . . YouTube는 가장 크고 정교한 상업 추천시스템 | 딥러닝을 적용하고 성능이 dramatic하게 향상됨 | Two-stage information retrieval dichotomy를 소개 Deep candidate generation model | Deep ranking model | . | 거대한 추천 시스템을 구축할 때의 인사이트도 함께 제시 | . Introduction . YouTube 추천은 수많은 사용자에게 개인화된 컨텐츠 추천을 해야될 책임이 있음 | 추천시스템 구현시 고민 사항 Scale YouTube의 수많은 사용자와 코퍼스를 다루기 위해서 효율적인 서빙과 특화된 추천알고리즘이 필요 | . | Freshness YouTube에는 매분매초 수많은 영상이 업로드 되고, 추천시스템은 새롭게 올라오는 컨텐츠와 사용자의 행동에 적절하게 대응해야 함 | 잘 만들어진 영상과 새로운 컨텐츠 사이에서 적절하게 적용 및 반영할 수 있어야 함 | . | Noise Sparsity와 수많은 외부요인으로 사용자 행동을 예측하기 어려움 | Implicit feedback을 적절히 사용하고, poorly structured metadata도 활용할 수 있어야 함 | . | . | . System Overview . . Candidate Generation과 Ranking 부분으로 나눌 수 있음 | Candidate Generation Input: 사용자의 YouTube 히스토리 | Output: 사용자와 관련 있을만한 영상 집합 | 협업필터링을 사용하고, 시청기록, 검색키워드, demographics 정보를 활용 | . | Ranking Model 영상과 사용자 features로 각 영상에 대해 점수를 매김 | . | 학습할 때, offline metirc(precision, recall, ranking loss 등) 활용 | (라이브) A/B 테스트를 통해 최종 알고리즘을 선택 | . Candidate Generation . Non-linear generation of factorization technique | . Recommendation as Classification . $ large P(w_t = i , | , U, C ) = displaystyle {e^{v_{i}u} over sum_{j in V}e^{v_{j}u}} $ . $u in mathbb{R}^N$: high-dimensional user-embedding | $v_j in mathbb{R}^N$: 개별 video의 embedding | $C$: context | 사용자와 context의 vector u를 학습하여 영상을 시청할 확률을 학습하는 Softmax Classifier | Sparse한 Explicit feedback과 많은 implicit feedback을 활용 | Negative Sampling을 통해 효율적인 학습을 함 | . . Model Architecture . 다음의 embedding을 모두 concat | 사용자의 시청기록 (embedded video watches) | 사용자의 검색기록 (embedded search token) | geographic embedding | 추가 meta 정보 (age, gender 등) | . Heterogeneous Signals . Continuous와 categorical features를 deep neural network에 사용할 수 있음 | 보통 새로운 영상은 사용자가 선호하는 경향을 보임 | Age feature는 영상 콘텐츠의 시간 정보 | . Label and Context Selection . . 추천시스템은 surrogate problem(실제 상황과 evaluation metric 차이)를 항상 고려해야 함 | 유튜브 이외 데이터도 학습데이터에 포함해야 함 | 사용자의 가중치를 동일하게 하기 위해 사용자의 학습데이터 수를 고정 | 무작위로 아이템을 선정하여 예측하는 것보다 특정 시점 기준으로 예측하는 것이 더 효과적 | . Experiments . . Features 수와 depth에 따라 달라지는 성능을 비교 | . Ranking . Ranking에서는 영상과 사용자 사이의 관계를 표현하는 features를 많이 사용해야 함 | Candidate generation과 비슷한 모델 구조를 사용 | Categorial과 continuous features를 사용 | 사용자의 이전 행동을 고려하여 이이템과의 interaction을 모델링 해야 함 | 각 features에 대한 feature engineering이 필요 Embedding Categorical features | Normailizing Continous features | . | 사용자가 선택한 아이템과 그렇지 않은 아이템의 expected watch time을 예측하는 것이 목표 | . . Conclusions . YouTube 영상 추천시스템은 candidate generation과 ranking 부분으로 나눠져 있음 | Deep collaborative filtering 모델은 더 많은 특징과 interaction을 반영할 수 있음 | Age feature를 추가하여 time-dependent한 부분을 반영하고 watch time이 증가함을 확인 | Embedding categorical features와 normalized continuous features을 활용 | 여러 층의 신경망은 수많은 features 사이의 non-linear interactions를 효과적으로 모델링 할 수 있음 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/11/02/paper-deep-youtube.html",
            "relUrl": "/paper/2022/11/02/paper-deep-youtube.html",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "[Finance English] Big Tech Earnings | Bloomberg Surveillance (2022.10.25)",
            "content": "Big Tech Earnings . The day to day volatility is mind boggling. . Traders here a whiplash. . And I think that’s true of people across the market. . We do think we’ll begin to see some moderation in inflation. . It’s clearly been surprising to the upside. . Month after month, I think investors are waiting for the other shoe to drop. . Have the markets seen their bottom? We’re all talking about the risk of recession. . But markets sell to me. . Don’t have it priced in. . The market is back in charge. . This is Bloomberg Surveillance with Tom Keene, Jonathan Ferro and Lisa Abramowicz life from New York City for our audience worldwide. . Good morning. . Good morning. . This is Bloomberg Surveillance on TV and radio alongside Tom Keene and Lisa Abramowicz Jonathan Ferro. . Equity Futures Negative T.K. . by four tenths of one per cent today. . All of big tech earnings kicking off later after the Big Sur currencies and other issue soon. . Equities got some free time today is going to look at as Microsoft shares, as Google’s share, as you say. . I got to stop tonight about 8:00 p.m., his time and look at that performance. . It starts today. . We were all on to Thursday, which is one of the busiest days of the year. . Did you see HSBC coming down? I read a part of London lost. . Your visions are moving in the wrong direction and they are a Chinese subset. . And I read every word of our report and HSBC, and you really wonder if that’s what’s coming down the pike. . The the follow on from a China with 3 percent GDP. . Chinese equities yesterday got absolutely hammered this morning again. . Lisa, renewed currency weakness for China. . How much is this going to really, really influence the policy when we’re talking about this yesterday? This isn’t going to necessarily be the check that it was at the United Kingdom simply because Xi Jinping doesn’t seem to care as much about the market response. . Still, I do wonder what businesses are going to do. . I mean, it’s HSBC continued to double down in China or do an increasing number of companies start moving away because it just isn’t necessarily economically sound to take a 736 40. . What you make of that WTNH right now, 736 40 Joel Weber just brought it up and it’s well outside to standard deviation. . Let’s review this. . Is it fixed? Is it floating? No. . The currency is managed around a band and right now we are definitely unmanaged on the Chinese currency. . I’m going to call John right now to a log access here in real China in real time. . You can do that in the Bloomberg terminal. . And there’s convexity in China. . There’s an acceleration here of yuan. . We’ve seen at terminals today, we’re selling terminals. . Give us an idea. . Let’s get to the price action this morning. . Good morning to you and good morning to the sales team here at Bloomberg as well. . Equity futures look like this. . Sunny S&amp;P 500 big sack reporting a little bit later after the close futures negative four tenths of one per cent on the S&amp;P, down about 15 points year or two lower by five or six basis points for 1837. . The euro still stuck beneath parity, 98 65, negative a tenth of 1 per cent. . And in a moment, some we’ll catch up with Yotam Rochester. . He’s looking at dollar and potentially 160. . 160 is the number in his note this morning. . Everybody recalibrating their in servos later on from Deutsche Bank. . It’s going to be interesting here to look at that. . I’m going to call it idiosyncratic story, but folded much in with Jordan. . John, is Sterling a 113 18 as we go to the Suna speech here in 30 minutes or so? It’s a massive. . Now what for the United Kingdom? We’ll keep it on that in about 25 minutes time, 30 minutes time. . Look at a crude 83 30 on WTI, Lisa, negative one point five per cent today. . I think it’s fair to say that the week starts today. . Right. . I mean, this is a massive week. . And today we start with the tech earnings, as well as a number of economic data points, including some of the house pricing data. . The S&amp;P CoreLogic case Schiller Index coming out at 9 a.m. . along with some F each at a house price data. . How much do you see a rollover in house prices and how quickly does this bleed into runs? Yesterday, Joel Weber saw Red start to come down actually quite significantly. . But it’s not going to trickle into the CPI for kind of quite a while. . So at what point does it matter to the Fed? At 1 p.m., we get the U.S. . selling forty two billion dollars of two year notes. . Who shows up? Right now, we’re seeing those yields continue to climb. . Can we breach that four and a half percent and sell it at that level? And how many people start piling in? Because perhaps this is the peak, as we heard yesterday. . Some are speculating today that earnings after the bell include Microsoft and Alphabet. . Microsoft is expected to see the slowest growth in sales going back to 2007 17. . Alphabet arguably more interested in John, because that’s the advertising tool, right? That’s the snap other side of the story. . Are we seeing advertisers start to pull back? Could that be a sign of some kind of broader trend in the economy? Alisa, thank you. . Looking for the earnings a little bit later, getting earnings right now on U.P.S.. . Here are some other numbers for you. . Revenue in line. . APAC beats some for the third quarter, 296 versus 265 year over year. . The estimate was to 85. . Adjusted EPS coming in at two ninety nine, reaffirming the outlook as well. . Some reaffirming the full year outlook this morning. . And this is important, again, on a logistics basis, a national basis with Federal Express is well, Julian Emanuel has his revenue model modeling right now up eight point eight percent revenue. . That’s. . That inflation induced revenue growth, you’re you’ve seen corporations. . That’s a big number. . Looking forward to GM added a bit later. . Some really want to find out what the tone is at this auto market in this country, given what’s happening with interest rates right now. . Tom Keene, you imagine going out and buying a new car? How much that’s going to cost you? Well, I think the interest rate story is profound and occurring with this leader has a global story on what the interest rate impact is on central banks. . The interest rate impact on their car is a three year depreciation year, maybe a four year depreciation. . And we haven’t even talked, as Lisa just alluded to, to a 7 percent mortgage. . What does that do in American? What’s it in the United Kingdom? I mean, no problem for autos, though, specifically. . I wonder if we go from undersupply to oversupply just like that in a space of 12 months. . That’s something UBS indicated potential. . Well, just a few weeks ago, we don’t talk enough about it, but this is the David Rosenberg theory. . There is a camp with Mr. . Rosenberg of Toronto that you’re going to see a rapid path to disinflation. . We saw that not once, John, but twice 1947 to 1953. . Stochastic up you go, inflation gloom. . Down you go. . Looking forward to those numbers a little bit later this morning, a Matt Miller going to catch up with the CEO of GM later on in this program. . We’re gonna catch up with John in Rochester now, the NFL strategist over at Nomura and Jordan. . I teased it a little bit earlier, a few minutes ago. . Let’s go there. . I saw the number 160 and dollar yen next to it in your note. . Walk us through it. . Well, that wasn’t my view, John. . It was the view from clients this time last week. . On Monday, I’ll sit next to you guys in that table. . So we met clients around the New York area and Connecticut as well. . And we’re looking for 155 at Nomura in dollar. . And I think at this Bank of Japan intervention, what you’ve clearly seen over the past, let’s say twelve hours, an extreme lack of volatility. . Now we’re in a 40 pit range where the previous two weeks have been a big volatile in terms of that march up to nearly 152, then that near 6 yen swing down on the intervention on Friday done during New York hours when liquidity was very thin. . And just after that Wall Street Journal article talking about the Fed becoming perhaps a bit more dovish in terms of when they will slowdown rate hike. . So I think we’ve had some temporary setbacks for that long dollar, dollar and trade. . But the fundamentals are still pretty clear, John, that the US interest rates are rising. . The Japanese are not. . That is your long dollar, dollar and carry trade. . But for me, on the fundamental side, from the trade side, the dollar yen is likely to keep rising from Japanese imports as this winds are going out and buying LNG, buying coal, buying oil, even though energy prices are cooling down seasonally as we get into winter. . Those prices should accelerate, pushing dollar and higher towards 155. . Another have the honor of a formal tea at the Bank of Japan with all the pomp and circumstance is different than the Fed folks at the Fed. . You’re over at Starbucks and you’re paying for it. . That’s how they do it in America. . Jordan, give us an insight on the debate at the Bank of Japan. . Is a Carol Massar only or is it actually a debate? They’re like there is a B.O. . here at Fed. . There’s definitely a debate Kuroda is, of course, representing the rest of the bank, Japan, when he speaks on their behalf. . But he is also the guy in charge. . And when we get to March and April, the question for clients is crowed as time comes to an end. . Who will be the next to lead the bank? Japan. . And will that lead to policy change? And if you look at rates, markets, rates, markets would tell you, yes, we think that something will change at least on the 10 year parts to the. . Will the band’s be wider on the yield curve control? Will they give it up altogether on the 10 year move it to the 5? If you look at the Japanese GDP curve, even 10 is below 10 years are trading above the sorts of levels set by the 10 year yield curve control. . So the markets are challenging the bank, Japan as we speak. . They’re holding onto that 10 year. . But the rest of the curve is pricing a change in policy to come. . And is the message so far for this year? Jordan, that currency vigilantes will win that we’re seeing that when it comes perhaps eventually to Japan, although it hasn’t happened yet. . And then it has come already to Great Britain, where you see a little bit more upside at least versus where you used to with the pound. . Indeed. . Well, for the Jenny used to be everyone’s risk off hedge of choice. . The only clients I’ve met who are long the yen are using in their portfolio as their potential risk off in case we get dollar weakness. . And as you’ve seen over this past year, that just hasn’t worked. . The fundamentals really did change for the yen compared to the global financial crash. . The carry trade still drives the power. . It does track U.S. yields quite well. . But on the trade side now, the trade deficit is not your risk off currency of choice when this is a risk off driven by energy prices. . And then for the UK, I think the UK is the canary in the coal mine for everybody around the world. . Even for the US. For Janet Yellen. . For the Fed. . You don’t want to do UK seems to be the conclusion from talking to foreign policy makers when it comes to budgetary constraints. . Don’t push it. . And also when it comes to interest rates, don’t suddenly get dovish and allow inflation to run hot. . I know we were just talking about the previous section used car prices. . I think they will continue to fall perhaps quite aggressively. . But labor markets are really tight and the risk now is the second round effects for services and that’s a lot harder to tame than inflation dragon. . So I think for the time being, the Fed’s go to 75, then they’ll do 75 again, then slow down into the new year. . That Wall Street Journal talked about the idea of perhaps slowing down to 50s come December. . That’s the debate for the dollar right now. . That’s why euro and cable have become quite boring to trade. . It’s. . Everyone’s waiting for this Fed meeting next week. . Yeah, I think the message will be, nope, we’re going ahead. . We’re still staying hawkish and the dollar will rally and Christmas and then waiting for the CPI print the week after that. . Jordan Awesome. . NIKKEI company, as always. . John Rochester of Nomura. . John, I was talking about dollar yen there and the intervention from the Bank of Japan. . The team here at Bloomberg broke down the data. . Four fifths of the weakness in the Japanese currency this year has come outside of Japanese trading hours, and that’s why the intervention from the BMJ time is coming. . Guess what? Outside of Japanese trading hours. . It’s just completely clumsy and it comes back to core theory. . And I guess some people can support their core theory, but shows people are saying, you got to be kidding me. . One thing Jordan mentioned there. . It’s absolutely critical is everyone’s looking at liquidity within the system, using the United Kingdom as the example. . And the F are A or a house much akin to labor or a house of another time and place is spiking up and is right at the moving average from the pandemic level. . Jordan said RTX got boring, rather boring. . I don’t think that anyone’s got ISE to 150 dollar. . Maybe it’s boring now relative to what we’ve seen over the last few months, in fact, the whole of this year. . Coming up, John Barron of BlackRock. . Looking forward to catching up with him in the next hour. . A comment from him on the midterms and the importance of it in about an hour from now. . Looking forward to that conversation live from New York City this morning. . Good morning. . This is Bloomberg. . Keeping you up today with news from around the world with the first word. . I’m Lisa Mateo in the U.K., where she soon CAC spent the summer predicting that Liz Truss would trash the UK with her plans if she became prime minister. . Well, now his prize for being right is a chance to fix the damage trust caused her neck. . We’ll meet King Charles, the third today to formally replace trust. . It’s a rapid turnaround for Suna, who lost a trust in the race for the job. . Bloomberg has learned that Adidas plans to end its partnership with Kenya West in recent weeks. . The rapper and designer has made controversial statements, including anti-Semitic posts on social media that’s turned his easy line into a lightning rod for criticism. . It’s estimated the brand is accounted for up to 8 percent of Adidas sales. . The US won’t change its stance toward China as a result of Xi Jinping seizing more power. . Advisers are still trying to set up a meeting between President Biden and the Chinese leader at the conclusion of the Communist Party Congress last week. . Gee placed allies in top posts and pave the way for a third five year term. . NATO is increasingly concerned that Russia’s desperation over battlefield failures in Ukraine may lead to the Kremlin to escalate the war. . And that could involve a massive attack on a target like a dam or even a weapon of mass destruction. . NATO says that for now, there’s no sign Moscow is actually preparing for such an attack. . An instant messaging service, WhatsApp says it’s fixed, an issue that’s cause of widespread outage. . Tens of thousands of users reported disruptions, including not being able to send messages or connect to the server. . WhatsApp is owned by metal platforms, global news 24 hours a day on air and on Bloomberg Quicktake. . Powered by more than twenty seven hundred journalists and analysts and more than 120 countries. . I’m Lisa Matteo. . This is Bloomberg. . I can’t think of a Mark Gurman more consequential election that I’ve been involved in and we’ve been involved in. . You know, whether we maintain control of the Senate and the House is a big deal. . And so far, we’re running against the tide and we’re beating the tide two weeks away from the midterms. . The president of the United States live from New York City has the price action this morning. . And good morning to you. . Your equity mark is slightly negative on the S&amp;P 500 coming off the back of a big day of gains on the S&amp;P, a day of gains of more than one full percentage point to kick off the trading week with down about a half of 1 per cent this Tuesday morning. . It was a lower by six basis points for 1795 on a 10 year euro on negative a tenth of 1 percent, 98, 67. . And before we get deep into U.S. . politics, UK politics in about 15 minutes from now. . So we should hear from the new prime minister along as she sooner. . The player as he won’t be surrounded by supporters of that. . That’s nice. . And the solitary and alone. . Let you take a breath. . On this particular moment, it’s Tom Keene, three prime ministers and three cups of coffee. . Very difficult to implement austerity in a cost of living crisis in many places around the world. . Interesting. . We’ll talk a lot about this Lizzie BURDEN. . I know it loses at 10 Downing Street a bit less in about 10 minutes. . Yes, very good right now. . We will catch up with Annmarie Horden in Washington. . We are two weeks away. . It is Tuesday, two weeks away from an election. . Emory got 18 ways to go. . Here’s a political he leads. . Go back and forth. . And what I sense out here is a measure of apathy. . Give us your summary of what turnout looks like in the character of apathy in both parties. . We a lot of the polls and you could see that more than 50 percent and a lot of them say that they intend to go out to vote. . They want to go out to vote. . When you think about apathy, there does seem to be a sense from voters that there is this frustration when it comes to the economy right now. . And that continues to show up in every single poll across the board, whether it’s a question on the economy or inflation. . Those are the top priorities. . The issue is there’s not a lot the government can do to fix that right away. . Right. . The Democrats commonly say this is a global issue. . That is true. . They try to back away from some of the legislative measures they took that maybe the Republicans say added to inflation. . But overall, the world is dealing with inflation. . This is something that is is difficult for the current administration to try to defend, even though they are doing that. . But when you think of apathy, that’s where it’s coming from. . How can the growing impact my life? And this is what I’m struggling with. . And across the board, it’s gas prices. . It’s grocery bills. . And it’s paying for housing and rent to the candidates and the political experts. . Do they trust the polls? It’s a great question, a lot of people say you cannot trust the polls, President Biden yesterday speaking at the DNC headquarters says you cannot trust the polls because the polls have been wrong before. . You were just talking about really soon at the polls were wrong in United Kingdom during Brexit. . The polls have been wrong here in the United States. . But at the moment, what you are seeing and what is typical, especially for mid-term elections, is that the polls are they are getting closer and they’re getting more narrow as we head into the final 14 days. . We should also note that a lot of people off already even voted. . Right. . There’s been early voting for weeks in this country. . It’s been really difficult to balance the domestic and the international and Marie, but the international has really hung over everything when it comes to the domestic politics. . How much what do you make of the fact that certain Democrats are pressuring President Biden to speak with Vladimir Putin at this tenuous moment, two weeks ahead of the election? It’s an interesting moment because we also heard similar rhetoric regarding Ukraine from the Republicans. . Last week, Kevin McCarthy, the leader, the Republican leader of the House, likely will be the next speaker of the House if there is going to be a red wave in terms of the House talking about they’re not going to be a blank check for Ukraine, that there is not just going to be this constant funding for Ukraine while people are dealing with kitchen table issues every day and potentially going into a recession. . Now you have progressives saying maybe we should start negotiating with Russia to make sure that there is a diplomatic path forward for Ukraine. . The White House is saying there is not going to be any negotiations with Russia unless that is what Ukraine wants. . They constantly say nothing about Ukraine without Ukraine. . We should know that the progressives did come out and say we are not against with the Biden administration is doing. . But they do want this path forward in terms of diplomacy. . And that’s as a number of issues are mounting on. . What I’m looking forward to is in December, when there potentially needs to be more spending, whether it’s military, financial, humanitarian aid, that the Bush administration is likely going to push for Ukraine. . Is there going to be more pushback not just from these Republicans, but also within their own party? How much of this is also being driven just by the inflationary outlook and what is what’s going to happen with gas prices heading into the winter? It’s a great question, because, Lisa, what’s coming up at December 5th? That’s when those EU sanctions are going to bite, which means it’s going to be incredibly challenging, even if you want to be able to accept Russian crude on the global oil market. . You can’t because maybe the shipper or the insurance company comes from a European which are dominate in this sector, whether it’s a Cypriot or a Greek ship. . It’s going to be challenging to get this crude around, which is why you saw at the last G7 they discussed a price cap that at this moment is a very contentious issue, because if they cannot get this price cap aboard, allowed this Russian crude to flow, that means that this Russian crude is likely going to only stay in Russia and potentially be shut ins. . And that is just going to elevate this price at a very difficult time. . Jonathan said it yesterday, though. . What they have going for them right now in Europe and even in the United States is the fact that is an incredibly warm out and potentially it’s going to be a warm winter. . MH Thank you. . Dan RTS, let’s pick it up right there. . Happy being talked about. . Gas prices in Europe down by more than 70 percent from the August peak ticket, down by more than 70 percent and today down by a couple of tenths of one percent. . But to see them back at ninety nine is their luck in nine. . Normally it’s warmer. . So whether it’s the weather and they’ve got the supply, they got the storage up to be specific. . So they met their storage targets ahead of schedule. . We brought those headlines along the way of the last couple of months and then we started to hit some warmer weather as the cooler period starts to click in some. . So October has been a whole lot harder. . We may start to bear in mind some day it can get pretty cold in parts of Europe, even in October. . So that’s the good news so far. . And we’ll see if that continues. . But Sandy, that’s contributed to a lower gas price in Europe over the last week or so. . Mr. . Rosenberg, earlier and there’s a whole school of thought here gaming out a sustained inflation, whatever the level is, whatever the country. . And there’s a lot of people saying the microeconomics of the system clicks in and down. . You come to some form of disinflation that consistently some about a month ago, I think we were all tremendously concerned about industry getting shut down, rolling shutdowns throughout Europe, rolling blackouts throughout Europe. . And Lisa, now maybe you can park that for a moment, but no idea if that starts to reemerge as a conversation that weeks to come. . But still, we need to have a conversation about next winter and the winter after that and whether they can repeat the trick of getting that storage up to capacity where they want it to be in about twelve months from now. . So right now, one thing that I’ve been reading about is how there’s almost a glut of natural gas. . Some of these storage units. . So at what point do we start talking about how much of this has been priced into euro area valuations that have been completely beaten up? Gas prices right now, 98 handle in the Netherlands, still European benchmark, I mean. . It’s impressive. . Gee. . You know, the earnings aren’t that good. . We’ll talk about that. . Three hours away from the open about life from New York, good morning to you. . Your Tuesday morning price action looks a little something like there. . Sunny S&amp;P 500. . Negative a third of 1 percent after some big gains to kick off the trading week. . Yesterday on the S&amp;P, on the Nasdaq were down about two tenths of 1 percent. . This is how the bond market shaping up. . On Friday, we had a little look at 460 on a two year. . This Tuesday morning, we’re down another 4 basis points to 446 64. . They stay on the front end and go over to the other side of the pond, to the U.K., the gilts, the two year, two year bond yield in the U.K yesterday down 37 basis. . Covid biggest move in 30 years themselves. . Simone Foxman biggest as well. . The big move, lower down another 4 basis points this morning. . Seen that the new prime minister about to speak to them in about four minutes time. . The attention that shifts from him ready to the budget and then over to the Bank of England in about a week from now. . Your thoughts on this. . And John, I’m going to go to what we’ve done with Draghi at Davos and all. . Is this guy a technocrat like Draghi or is there something different here in the political equation? I think it would be wrong to call him a technocrat at this point. . Some what’s interesting to me actually at this point is whether the chancellor is Jeremy Hunt and whether we actually get the budget in the way we thought within the budget at the end of this month. . And what that looks like, do they go even further when it comes to spending cuts, further austerity? Possibly a loser here. . But, John, one final question. . Where does Mr Gove fit into this? Who is Michael Gove and where does he fit into the form? Probably a question for Felicity Burton and Ricci soon himself. . Tom Mackenzie, you read this. . I’m looking at GM right now. . Covid ended with EPA asset 225. . Any estimate at 189? Yeah, pretty much the other way. . But Mary Barra will join us later. . Matthew Miller will be speaking to her. . Let’s do this right now. . We need to go to 10 Downing Street. . Lizzie Burdon is there for this historic moment. . There have been many moments, Lizzie. . What will be the distinction today as he walks from the door to the podium versus when an optimistic Liz Truss walked to the podium weeks ago? What’s the key distinction this morning? To me, the key distinction between Russia seen I can lose trust is that he is a pragmatist and he has proved that throughout the pandemic. . He was actually accused of being a socialist, so generous with his pandemic support programs like the furlough scheme. . And indeed, he raised taxes to pay for healthcare, even though fundamentally he says that he is a tax cutter. . And European leaders are going to be hoping that that pragmatism trumps poses to Brexit as well. . Really soon, it’s really going to have to keep that in check on both taxes. . Unbreakable. . If he wants to keep the Tory right on his side and that along with the other employees who put him in power, not the party membership, not the public, and say that coalition is going to be fragile and and crucial. . There’s, you know, a lot of people on this side of the Atlantic that just want to stop talking about the UK and British politics. . Let’s get through the next couple of weeks. . Do we get a budget deal at the end of the month? And when the bank giving the meets, will they have a deeper understanding of how many Spanish spending cuts will actually get from this prime minister? Well, we’ve already heard from various Bank of England deputy governors in recent days, and they say the Bank of England, the Treasury have already been talking, even though reticent spokesmen will not yet confirm that the Chancellor is going to be Jeremy Hunt. . Although it looks increasingly likely or whether the day is going to be October the thirty first. . In soon knock more than any prime minister would be aware of the effect of surprising the markets. . And so you can probably expect that he is going to confirm who his chancellor will be and what the date of that budget will be later this afternoon, along with the rest of the cabinet. . Let’s how difficult is it for issuing a snack to issue cuts in words with respect to spending, given the fact that he is very wealthy, that he doesn’t necessarily represent the mainstream in any kind of populist way? I struggled to hear you say that, but in terms of this, the difficult job that lies ahead for rescue dog, even though he’s had two runs at being prime minister, the characterisation in the national press today is that the easy part is over now the difficult decisions begin. . But Labor leader Ken Starr has already characterizing it as austerity 2.0. . It’s very, very difficult politically. . But the good news for Russia, Su Keenan, is that he’s always said that it was going to be difficult, that he’s going to be honest with the public. . In fact, he resisted the temptation to say, I told you so interested nomics was imploding. . But he has laid the foundations to deliver these difficult decisions. . The thing is, he’s going to have a cabinet full of ministers who are going to want to bring back on money to spend on their pet projects. . And when he’s got to hold this coalition together, he’s not going to just want to disappoint anyone. . Test for the prime minister announced. . Some lecterns out in front of Number 10 Downing Street. . It’s his first appearance as prime minister to direct address the public in the UK to say he’s on time. . Well, he’s got to. . Is he going to be one of those prime ministers that late all the time? Well, that would be a Bill Clinton record call doing a Bill Clinton in Samoa. . You know, I don’t know your president, but it’s in that camp to take him. . Yeah. . My my head is spinning on his job. . Do you have a sense here as we await Russia’s sooner, that this is finally stability or is it going to be in the next two, three weeks the same chaos? Tracy Alloway. . There is a hope that this man is going to be the face of stability. . And Tom, I mentioned this and it might sound snarky, but I think it’s a hope for a lot of people in this market that after today, T.K., we can stop talking about the UK. . What does he have to do? To Lizzie’s point, we still need to work out who the chance is going to be. . Michelle, it’s gonna be Jeremy Hunt. . If that’s the case, okay. . That man needs a deeper understanding of what the fiscal approach is going to be and then it’s on to the bank having the new help from that. . So we just get back to where they were and we can move on from all of this and move on from it quickly. . The fact of the matter is that the British people, T.K., won’t move on from it quickly because this cost of living crisis that we’re talking about worldwide at the moment is dominating in the United Kingdom as well. . Interest rates are going to have to go higher. . Mortgage costs are getting more expensive and a cost of living time is going in the wrong direction. . Real rates are moving up there. . And as we heard from Jordan, Rochester’s United Kingdom, just OUTFRONT of many other nations in the struggle. . I’m Bloomberg Radio. . We welcome you. . A shot of 10 Downing Street with a different podium than the trust podium, more stark, more corporate. . I will editorialize and off on the port side, rather, on the starboard side. . The right side of the door is Mr. . Su Keenan will come out. . Is Lawrence the cat with his back to the door? Because there’s a rumor. . Will Mr Sonic live at 10 Downing Street when you’re that fence? Well, there we go. . I guess that was in the Zeitlin. . How many prime ministers has got camp out left town in the last few years? Lazy. . Can I just come to you quickly before the prime minister walks out? What is the governor of the bank having to want to hear today? Don’t worry about the stability he’s been promised. . He wants to know who the chancellor is and when this when this budget is going to be. . And if he can confirm that it is Jeremy Hunt and it’s now October the 1st first as expected. . The markets that we have today and the governor, I’ll be happy. . Ultimately, he wants cooperation between the economic institutions of the UK. . And we heard from the chief economist Hugh Pelle earlier taking a veiled, thinly veiled swipe at the trusts administration for really undermining the Office for Budget Responsibility and the Bank of England. . You would hope that that’s going to end now with this administration. . Thirty seven minutes after the hour. . Futures at negative 12 and the VIX. . Hundred thirty is of note here. . Earnings coming out. . We’ll get to that in a moment. . Lizzie, I want to sneak this in. . If I can. . And very importantly, John will hopefully go to IRNA on time. . Prime minister here. . Lizzie, will he tour the country? Will he like King Charles after the funeral? Will he? Will he go to Wales? Will he go to those cities that were labor and became conservative? Will he go to Scotland? What does a new PM do? I’m sure he will in his constituency, don’t forget up north in Yorkshire. . I think he might be the first prime minister from a Yorkshire constituency. . Correct me if I’m wrong. . He obviously took over. . You’ll know this, Tom from William Hague. . But he’s going to need to strengthen the union, because this chaos in the Tory party has only given Nicola Sturgeon, the leader of the Scottish National Party, confidence. . And he’s also going to have to charm the red wall seats that put Boris Johnson into office with such a landslide. . At the moment, it looks like the Tories will be wiped off the electoral map when they come to a general election. . So his message has been unite or die. . He’s going to have to unite the country as well as the party. . Unspoken, John, is he’s a allowed he’s 40 some years old. . He’s the youngest prime minister from 1812. . It’s an impressive statesman way back. . He’s very close to talk to love. . He’s a he’s a kid. . I think only a few years younger than Tony Blair was when he became. . Okay. . Thank you. . But you look at the John Tucker, see that as American politics and 42 a show. . It’s like in Finland, in Estonia. . This is could be Speaker Pelosi’s child. . I’m with you. . It’s show. . Houses everywhere. . You went there, right? Did it. . Leslie, we talked a lot about this being a parliamentary democracy that the leader of the Conservative Party needs to be able to govern the party within parliament. . Lisa, let’s talk about the party membership of the Conservatives. . Is this their guy? No, we wouldn’t know Audrey, because it never got to that I’m sure many of the membership were annoyed about that. . It could have ended up being so divisive. . It didn’t have to go to the membership. . But I don’t think it’s wise to say that he would have lost Patty Lawton because perhaps the membership would have had buyer’s remorse after putting trust into number 10. . But I’m sure that the party MP is grateful that we didn’t have to go through the drama, the psychodrama of a leadership election put out to the membership yet again, because this is it. . I mean, I’ve just been stood here seven weeks ago. . You’ll forgive me if I’ve got a bit of deja vu. . It’s unbelievable to me that we’ve been doing this the way we have. . I’ve said a few times we’ve got a system to deal with it. . This is the system to deal with it. . I do wonder if the certain aspects of the policies announced by Jeremy Hunt, the chancellor, who we expect to be the chancellor in the weeks and months to come. . Tom, certain aspects that you might have to revisit, the number one that I’m thinking of is the idea that you only offer support to offset the energy pain through to April of next year. . I just wondered, T.K., whether that’s something they have to revisit pretty early on if the crisis after energy supplies continues. . There’s this word that’s propped up, I’ll say Sunday, maybe Saturday, but austerity and the new definition of austerity and the fundamental thing, John, as you mentioned earlier, may be Lisa, you mentioned it. . It is austerity within a higher nominal rate regime. . People at home, they don’t care about fancy bow tie, real read stuff. . They’re looking at higher nominal rates across everything they do. . The former government, the former leader, to be specific, less trusts tried to do something different some and it failed. . Markets weeded out very, very quickly. . And I just want to see what the options are available for any government right now facing down a cost of living crisis, high inflation in places like the United Kingdom. . What they can actually do? How much fiscal space is there to help out the people of countries like the United Kingdom? I believe we’ve lost Lizzy Burdett has some numbers in Berkeley Street. . Let’s go to Lawrence CAC. . You think, Larry? You think Larry’s got something to say on that probe? Sure. . Well, she said it’s deja vu over. . Can you imagine the jar do the right? Oh, honestly, seeing this one a few times, we all have we are waiting for the British prime minister, Rishi, soon that when he walks out of that door, he will do so as the leader of the Conservative Party and of the leader of the United Kingdom. . When those comments begin, we’ll bring those comments to you. . Take care. . We also need to talk about the earnings that are coming out. . And I will say, Ali DAX is something coming to talk about briefly, Adidas. . They have been silent for weeks on the relationship with Kenya West. . And finally this morning, they come out and Satish, they are terminating the partnership with Kenya. . No. . After the anti Semitic comments from him over the last couple of weeks. . Lisa, many people incredibly disappointed estate in this company this long to make this comment. . Wasn’t he responsible for about 8 percent of their sales or some something like that? And they’re saying that they’re going to take a write down. . The media fact is, two hundred and forty four forty six point five million dollar hit to net income in the current fiscal year. . You’re right. . It took them a long time because he’s pivotal to their sales. . At what point does this become, though, a deal breaker, given some of the recent shenanigans? Isn’t that disappointing, though, for companies that preach all of this stuff about diversity and inclusion? Do you get comments like that and they go silent for weeks because he’s key to their sales? Isn’t that absolutely ridiculous? Think about how many times companies want to distance themselves from certain individuals because they’ve done certain things, whether it’s drugs, steroids, performance enhancing drugs about to step away and then you get anti-Semitic comments by someone key to your company and you say nothing for weeks about it. . OK. . Just to be completely transparent. . This was a discussion at the dinner table because there were certain members of the family who really like Konya West’s music. . And can they keep listening to it? And they had this whole debate trying to rationalize it. . And he just said, you know what? You either have a credo or you have some sort of ethic that you follow or you don’t. . And that’s the bottom line. . That stock is down by about 4 percent in the premarket somewhat. . It’s talk about GM as well. . General Motors, that quarter adjusted EPS 225 estimate 180 night revenue just a little bit lighter. . Nothing overly concerning in this going into a conversation and interviewed some with the leader of GM a little bit later in the next hour and 15 minutes or so. . She’ll be sitting down with Matt Miller Alix Steel. . It’s a beast of its own. . And I’m going to give a major shout out to my colleague over at Citigroup, which I think was way out front on this, the absolute mediocrity of GM and the surge that we saw up through the pandemic and frankly, a roll over to revisit the mediocrity of 2018. . The 10 year annual return that Mary Barra has had to be challenged by is five point zero six percent, five percent a year. . Shareholder return. . Can you rationalize that given an auto company granted pandemic. . Granted national issues. . Granted technology issues and the rest. . But you just wonder, when is it safe to say they get dramatic where they start developing free cash flow like some of the Europeans? That Germanic? Yeah, I mean, it’s like Mercedes or BMW and and the rest. . I don’t know. . But I just there’s always a spin here. . There’s always something new. . They’re mentioned and electric vehicles today, they’re going to increase production and they’re OK. . Great. . Where’s the shareholder return? That’s what I just I’m looking for it at 5 percent per year. . You want the new excuse? Right now, 3M, 3M, the company sees full year adjusted EPS at ten dollars, 10 cents to 10, 35. . Previously they had seen 10, 30 to 10, 80. . What do they blame in drumroll, the uncertain macro environment and Rameau, the US dollar that we’ve got, that’s going to be the CAC. . But at some point there is some truth to this, right? I mean, the appreciation is pretty dramatic. . And how much are international companies from the U.S. . really going to suffer as a result? But this is the second downgrade to its outlook so far this year for 3M. . How many of these multinationals have to do that before there’s some sort of bigger sense? And how much really visibility do we have about how long this is going to continue for and really how much is has to do with the dollar? I mean, I can tell you’re somewhat skeptical, John, about whether no excuse for something else. . You know, drum roll. . Could it possibly be? I’m just saying, I’m not surprised. . Okay. . That’s all I’m saying. . I’m not surprised. . We’ll keep an eye on the earnings for you. . We understand the prime minister still not arrived at Number 10 Downing Street. . When he gets them. . We have that address. . We’ll bring that to you. . Okay. . The prime minister running late for an audience with the king. . A little bit earlier this morning. . This is a new king. . And know I don’t I’m not privy to the short meetings of an ancient queen. . But you wonder if this is a new style of King Charles where there’s a substantial conversation. . I don’t know. . I believe we’re following the now up the mountain from Buckingham Palace. . So we’re not doing it. . You want to do that? Let’s to come back and listen. . Not acceptable. . I really don’t want to do this kind of thing. . So, you know, I’ll have. . This week it. . Going to be who was going to pick him up within the autumnal glow. . All right. . The lead in just a moment. . Lisa, though, goes past horse guards parade. . I can’t hold on to Westminster. . There’s this ceremony today. . It’s at Number 10 Downing Street. . Tried to excuse. . It’s dumb. . I mean, I’ve been I’ve been living for this moment, Lisa, for 20 years. . Have you? It’s really as if everything has been built up to this. . Follow the car from the palace. . Do you love this guy? I mean, I know he married into a lot of money in that. . But how did he make his money? Was he a classic investment banker at Goldman? That kind of background, he came, you know. . You know, my design. . But he wasn’t like chief economist. . Let’s be clear. . He was a dealmaker. . Well, but this is the reason why it’s gonna be difficult for him to make some severe cuts to spending at a time of austerity given his own largesse. . I’m just wondering how that’s going. . I don’t buy into that. . But we’ve had we’ve had huge filthy rich people back centuries that have run things. . I mean, is it uncommon to have somebody being read and there’s loaded. . There’s levels of loaded. . But is it is. . So what? That he’s that wealthy and whose families are wealthy? Looks like they just come past Trafalgar Square. . So would you want him to stop at Greggs? I thought we went to this pick pick up some guy. . That’s when the prime minister actually arrives at Number 10 Downing Street. . Bring those comments to you. . Take you in to carry on following the car. . Well, I think we’re done. . I don’t think we have a choice. . Maybe. . Maybe their views of the buses are stopping, of course, here. . They they promenade back to 10 Downing Street, where Lizzie BURDEN is. . I want to get back to earnings in to say the tech earnings today. . And I think, Lisa, you mentioned this in your brief. . Google is the real first look at the future of digital advertising, which is a growing part of Amazon’s business. . And of course, there’s others out there. . And my problem is we conflate Google and was SNAP. . We can play Google and with Facebook. . And I just think that’s off the mark and then get a little look at Microsoft after the close as well. . So very important. . Big names then on to Thursday keeps open about Thursday. . First ISE huge. . You want to talk about tech. . Did you see the tech names in China yesterday? Absolutely hammered. . Alabama by T.J. . Dell at one point yesterday were all down about 20 percent. . I did a fancy chart of Alibaba and the plunged is the right word, John. . But back to a long term support line of where they’ve been for years that they go through to a crisis low. . No. . But they’re certainly back to a support that speaks ill of the equity markets and the trust in the new regime. . Let’s touch base with undercurrent on some of this, the Bloomberg chief Asia economic correspondent. . And we saw the events over the weekend. . We saw the fallout in this market. . And let me tell you, when the affects market ended, it continues. . Yeah, it does continue, at least with the currency, say you can point to fundamentals there, John. . The sell off in yuan was delayed. . It’s not clear that the authorities are allowing it to weaken. . We’re seeing it go back to levels both onshore and onshore. . We haven’t seen in some cases at all. . In fact, now that does, of course, affect the strong U.S. . dollar, but it does reflect what’s going on in China. . Sentiment is very negative and turning even more negative post Congress. . There’s no sign of a pivot on Covid zero. . No sign of a pivot on the real estate story either. . So that’s what’s happening in the equity stories. . I got to jump in. . The prime minister of the United Kingdom, Richie, soon act addressing the British people. . Let’s take a listen. . I’ve just been to Buckingham Palace and accepted His Majesty the King’s invitation to form a government in his name. . It is only right to explain why I’m standing here as your new prime minister. . Right now, our country is facing a profound economic crisis. . The aftermath of Covid still lingers. . Putin’s war in Ukraine has destabilised energy markets and supply chains. . The world over. . I want to pay tribute to my predecessor, Liz Truss. . She was not wrong to want to improve growth in this country. . It is a noble aim, and I admired her restlessness to create change, but some mistakes were made not born of ill will or bad intentions. . Quite the opposite, in fact. . But mistakes nonetheless. . And I have been elected as leader of my party and your prime minister in part to fix them. . And that work begins immediately. . I will place economic stability and confidence at the heart of this government’s agenda. . This will mean difficult decisions to come. . But you saw me during Covid doing everything I could to protect people and businesses with schemes like furlough. . There are always limits. . More so now than ever. . But I promise you this I will bring that same compassion to the challenges we face today. . The government I lead will not leave the next generation, your children and grandchildren with a debt to settle. . That we were too weak to pay ourselves. . I will unite our country not with words, but with action. . I will work day in and day out to deliver for you. . This government will have integrity, professionalism and accountability at every level. . Trust is earned and I will earn yours. . I will always be grateful to Boris Johnson for his incredible achievements as prime minister. . And I treasure his warmth and generosity of spirit. . And I know he would agree that the mandate my party earned in 2019 is not the sole property of any one individual. . It is a mandate that belongs to and unites all of us. . And the heart of that mandate is our manifesto. . I will deliver on its promise a stronger NHS, better schools, safer streets, control of our borders, protecting our environment, supporting our armed forces, levelling up and building an economy that embraces the opportunities of Brexit, where businesses invest, innovate and create jobs. . I understand how difficult this moment is. . After the billions of pounds, it cost us to combat Covid after all the dislocation that caused in the midst of a terrible war that must be seen successfully to its conclusions. . I fully appreciate how hard things are, and I understand too that I have work to do to restore trust. . After all, that has happened. . All I can say is that I am not daunted. . I know the high office. . I have accepted and I hope to live up to its demands. . But when the opportunity to serve comes along, you cannot question the moment, only your willingness. . So I stand here before you ready to lead our country into the future. . To put your needs above politics. . To reach out and build a government that represents the very best traditions of my party. . Together we can achieve incredible things. . We will create a future worthy of the sacrifices so many have made and fill tomorrow and every day thereafter with hope. . Thank you. . Rishi Su Keenan, British prime minister there the message, pretty simple, difficult decisions to come for the UK economy. . Mistakes have been made. . I’m here to fix them from New York City for our audience worldwide on TV and radio. . This is Bloomberg Surveillance with Tom Keene and Lisa Abramowicz. . Some Jonathan Ferro NIKKEI. . Pretty blunt to the point that tough decisions to come Dani Burger carefully worded. . I thought, you know, moving from the past to the very recent present, Twitter lit up as some of these phrases were mentioned. . But I do think, John, from many people, this is the first time they’ve heard the prime minister speak working to restore trust, Lisa, quote. . After all that has happened, trying to ride out some of the goodwill that he built over the Covid era and how much they did to extend some of the aid to individuals and including the furlough program. . How far does that get this administration at a time of potential austerity in the face of higher heating bills and just all in higher cost? He didn’t use the word austerity. . The message, isn’t it? We will not leave it to the next generation with debt to Satya Nadella. . Ultimately, Lisa, they’re going to go hard Jonathan Ferro. . And this is the difficult thing. . How do you effect an economy in optimism at a time when that’s going to mean some serious declines in the economic output of this nation? Some people talking about this as the world’s sixth biggest economy. . For now, we have heard that from economists were how delayed do you project a feeling of strength into the future? Less about an outside number, 10 Downing Street. . Let’s head over to Lizzie. . Now, Lizzie, you’ve followed that address by the British prime minister. . It went on for several minutes or so. . Talk to us about the reaction in the U.K. . so far. . Well, the reaction behind the black doll was raucous applause, really? I was trying to push hard on the reset button that he did pay tribute to Boris Johnson and Liz Truss, but brutally, very clearly. . He said that trust under trust. . Mistakes were made. . And he also took a swipe at Boris Johnson, saying that now is the time for professionalism, accountability, integrity. . But he still needs to draw that thread of continuity between himself and Boris Johnson because he is riding on Johnson’s Monday here. . And that’s why he’s underscored his commitment to the manifesto from 2019. . He was referring to Brexit levelling up the National Health Service. . All the pledges that he needs to deliver on if he wants to be elected by the electorate in two years time, January 2025 at the latest. . But ultimately, as you say, is a realistic message. . That’s the message that he was trying to deliver throughout his leadership campaign in the summer. . This was kind of his moment to say, I told you so. . He resisted the temptation until he’s been stood in front of that black door. . He didn’t say it well to us. . Atomics was imploding. . But now, yeah, he’s going to have to make some really, really tough decisions and harder yet because of the damage trust trust bequeathed him. . Leslie, how important is it for issues to now not to be speaking to fellow employees, but to the general population? For example, in two years time to actually see some programs through after such tumult out with three prime ministers so far this year? Well, yeah, he’s got a big job on his hands. . He needs to unite the party, but also the country. . And that goes hand-in-hand with steering Britain out of this economic crisis, because, as you say, he’s going to have to choose between tax rises and spending cuts. . And if he goes too hard on the tax rises, he’s going to alienate the Tory right. . And they’ve put him in to number 10. . So it’s very difficult. . And as you say as well, he’s going to have to appear he’s going to have to convince the public that he’s genuinely empathetic of that situation. . When he’s the word that is overwhelmingly associated with vicious eunuch surveys show is not that he’s the youngest prime minister in over 200 years or that he’s the first British Asian in office. . Is the fact that he’s rich. . And I think that is interesting when you contrast that with American politics, where that seemed to serve Donald Trump well, it was almost giving him credibility Alisyn. . Wonderful to hear from you, Lucy Burton. . Outside number 10 Downing Street, minutes after hearing from the British prime minister really soon. . The message, the headline. . Difficult decisions to come from New York. . Let’s wait for the price action for you on the S&amp;P 500 slightly negative. . We’re down a quarter of one per cent on the S&amp;P with a big DAX earnings. . Still to come. . Futures are negative just a little bit. . Yields are lower by 7 basis points 417 32 and the earnings keep coming through. . And I can tell you, Coca-Cola out just moments ago, raising their full year guidance, full year adjusted organic revenue. . Now looking at plus 14 percent to plus 15 per cent on the estimate had been positive, thirteen point four percent. . Better numbers from Kodak moments ago nailed it. . And this has to do with pricing persistency. . Can you raise prices into inflation? Julian Emanuel has modelled eight point eight percent revenue lift. . And here’s Coke just as a quick. . Blush, John, I meant to say leading the way a revenue beat a well, organic revenue up 16 per cent, the estimate, Lisa. . Nine point eight one. . And that’s even including a five to six percent currency headwind. . So it wasn’t an excuse even though they did a nod to it, which is sort of your question of it’s one thing to blame the effects issue. . It’s another to say that’s the reason for the disappointment. . Reaffirming your outlook is as good as a beat these days. . I would suggest GM did that as well about 15, 20 minutes ago. . Leaks from a catch of the CEO in about an hour from now. . Yeah, that’s one of the things that are going to be watching to to whip through some of the other things that we’re looking at today. . We got a slew of economic data, including August, U.S., FHA, FAA, a house price index, as well as the S&amp;P CoreLogic 20 City Index. . How much do you start to see those prices roll over? And what’s the lead time really into the core CPI measures that we look at? 1 p.m., the U.S. . is selling 42 billion dollars of two year notes. . Who shows up for these bond auctions? It looks attractive for some. . And others say perhaps it has to go five higher for looking at a 5 percent Fed funds rate for a year or more. . And today, the earnings do continue after the bell. . We are sort of drum beating to Microsoft and Alphabet, given that those account for such a huge proportion of the overall index. . And Microsoft, I believe, John, is expected to come in with the lowest sales increase going back to 2017. . So how much does that really give a guide for where we are right now? A couple of names. . So we’ll have something to say about foreign exchange up short stuff a little bit later this afternoon. . Then the big names like Apple coming up on New Year’s Day. . I think it’s like 2, 3 percent as sort of the typical average model. . And we’re clearly out over there for even 6 percent. . You may have a few that are 7 or 8 percent substantial. . We get lucky this morning. . Jump out around a table with us, the head of the BlackRock Investment Institute and formerly so much more than that. . John, fantastic to catch up with you, sir. . I read the weekly note from the BlackRock Investment Institute that came out just yesterday. . And you talked about the significance of the midterms. . And you guys don’t think they’re that significant in the future returns over the next several months. . Why? First of all, it’s so great to be here. . You know, we think the usual playbook for the midterm is that, you know, if you have divide guard, divided government or a house, as it tends to be a boost for markets. . But as anything else this time around them and usual playbooks don’t apply. . We think the main stories about their foretold recession that we’re going to have we believe in in the current in the next year. . And as a result, we think that this is the second sideshow. . The important for the future of the country in everything. . But in terms of markets, we don’t think that’s an important driver. . Swap lines, front, center or major discussion at the meetings in Washington here a week or so ago. . Give us BlackRock estimate of how countries will have to go to the Fed given the global power shortage, the liquidity that are out there is seen in FRB or the US. . Yeah. . You know, the important thing is here we are. . We’re seeing the most rapid tightening of financial conditions in a in a generation in a very long time. . We haven’t seen really the cracks yet appear on the system. . It’s remarkable to see all of the strengthening of the U.S. . dollar you’ve seen. . We’re not like the knock on a thing or cracks where we have seen under circumstances. . I think that creates a level of anxiety that was really clear at the IMF. . A lot of conversation about how we shore up the system in that context, swap line will be a will be a key key tool potentially in that environment. . But I think so far what is really surprising is that, you know, it’s been very stable despite despite what we’ve done all your academics at Princeton and your work with the Bank of Canada. . If we believe it’s non-linear, is we disinflation? Do you think we can succeed? That was stability or they’re going to be instabilities witness with Damian. . Sorry. . As today we looked at a Colombia piece going from ninety eight down to sixty three and a price of bun. . That’s a crack. . I think it’s very hard to see something that’s going to be a smooth landing in any way. . That’s true for the economy. . That’s true for the financial market in this context. . That’s why, you know, we think we’re not a clear path towards over a tightening of monetary policy, but it’s going to be very rocky. . We’re underweight equities, you know, as bearish as we’ve ever been, I guess, in terms of broad risk taking in this moment at some point is going to change. . But the reason is really because that tightening is it could be non-linear, as you say. . And we haven’t seen Manus Cranny. . I think the U.K. . we’ve seen over the last month is like an accelerated peak in the future. . And I think that’s that’s what we need to guard against. . John, if you believe in a hard landing, why not buy treasuries here? Huh? That’s a that’s a great question, and that’s another aspect of the current environment where the playbook, the typical playbook might not be applying. . We don’t think is going to apply. . We are going to see a recession, but it’s gonna be a recession. . The context where inflation is going to be under control and it’s a foretold recession. . It’s really the recession caused by monetary policy readied as a way by which inflation will get under control. . And as a result, when we get to that recession, you won’t see the typical reaction of yields falling and bonds playing the safety role. . So the typical playbook of go find refuge in bonds in this recession, I think won’t apply. . This part of the reason why perhaps the stability that you talked about, the surprising resilience of markets is almost a headwind to them because it won’t necessarily stop the rising rate environment. . It won’t necessarily change where we are in a wholesale value. . How high can yields go and stay for a prolonged period of time before something breaks in the financial system? So in our estimates, like if we go to 5 percent as now, we kind of assume for early next year, this is a world where we’re going to see a very significant slowdown of activity, decline activities 2 percent. . We think as a minimum of GDP, it’s 3 million jobs that will need to be lost in that context. . So in the world where 5 percent is sustained and I think in the world like this, the financial system leverage as it as it is, we’ll start to see some some response. . And that’s the. . So 5 percent is is where we’re heading. . We don’t think we can go much further than that. . That’s why over the course of the first half of next year, we’re going to see central banks having forced into some stopping pause before they can go further. . John, you said recession foretold. . I’m interested by that phrase. . You’ve also talked about the appropriate time horizon to bring inflation back to Target. . And I think you’ve explained conveyed your disappointment that central banks aren’t having that discussion a whole lot more. . Does it have to be this way? I think what is very interesting in the U.N. . and we we’ve written about this is the fact that, you know, there’s years used to be two sides to any decision in central banking. . Like it’s not typically obvious what you have to do. . And I think this enviroment is as tricky as it has ever been. . I mean, I don’t think there’s been any short, sharp tradeoff that we have to deal with. . You know, we have to go back to 70s. . And the 70s was a different situation altogether. . There’s a tendency to apply to apply the playbook of the 70s, but we’re not in the 70s. . And so this lack of two sided debate on what’s going to happen or nuance is troubling. . And that’s why we think that we are going to get over tightening. . That’s honestly the outcome that ought to be. . But I think it’s happening at some point, think that the pressure to force it will be pretty, pretty strong. . And we’ve seen that in the U.K., right. . I mean, we’ve seen the Senate version. . You go in one direction. . Markets will put some pressure and I think we’ll see some force pause. . That’s not great for credibility. . I think it’s better for central banks to be on the front foot. . And, you know, I’ve signaled that there are some nuances here we might need to deal with, but this is not the situation we’re in. . So I think we’re gonna be forced into, you know, a wake up call. . And and we’ll look at a pause, but one that has been forced as opposed to being quickly here. . And I could go for an hour with you on this. . There was a guy named Bernanke who e-mailed you when you were a kid and said, do you want to try for a speech at Princeton? You talked about it the day he won the Nobel Prize. . What did he and Anna Schwartz and Milton Friedman do? So we didn’t repeat a depression. . Well, I think the key lesson of the Great Depression that Anna Schwartz and Friedman at first, like more from an anecdotal perspective or documenting that the depression was. . And that Ben Bernanke and others have a more formalized was that if you tighten monetary policy as the economy is is is going down, you create this financial accelerator dynamic to the banking systems that we’re doing right now and with and with bank runs. . And I think that was very much in his mind when 2000 came out. . It was interesting in the speech he gave in 2002 in the anniversary of Friedman that he said, we heard you won’t do it again. . That was that was a reference to the Depression. . He thought he was abusing his status at the time, but not his future status. . He was he was he was a governor, but became chairman afterwards. . The thing, though, is that this time I don’t think this is the playbook. . This is not the playbook for the current situation. . This is not a demand driven financial crisis bank run story. . This is a massive supply shock that we’re dealing through. . I’m not sure that those lessons apply right now. . So that was, what, 2008 and the city for 20 20 and after the jump by van of BlackRock jump. . Fantastic to have you with us in the studio in New York. . Thank you, sir. . And we’re still trying to unwind some of those policies from the Bernanke. . Yes. . It’s amazing to see the ECB came out and had to basically come up with this new tool, TPA, that we had. . The Bank of England had to step into the gilt market. . We’ve had to be OJD that’s had to intervene in our facts in South Korea. . Earlier this week, some also had to do something on the credit side. . The government had to announce, make an announcement that said when I just want that t CAC. . We tried to step back from this era. . How many more times central banks will have to step back in? They’re going to be very subtle. . And you go from Damian says sorry yesterday to John Bell today in its extremely fluid right now. . John and I frankly think the original theories don’t work. . Here’s doctor events as it’s a supply shock. . Shock. . Would you like to be a central banker again? Do you fancy that? Not really. . No, I think the Montreal Canadiens didn’t think so. . Leave that to others. . Well, coming up on this program, Mary Barra, the chairman and CEO of General Motors, looking forward to that. . Matt Miller going to catch up with her in about an hour from now from New York this morning. . Good morning. . Well, this is pulling back. . Keeping you up to date with news from around the world with the first word. . I’m Lisa Mateo in the UK. . Ricci Sue CAC has formally become prime minister. . Snake addressed the nation outside Number 10 Downing Street after meeting with King Charles a third. . He said that mistakes were made by his predecessor, Liz Trust, and he promised to place economic stability and confidence at the centre of his agenda. . The US won’t change its stance toward China as a result of Jinping seizing more power. . Advisers are still trying to set up a meeting between President Biden and the Chinese leader at the conclusion of the Communist Party Congress last week. . Gee placed allies in top posts and paved the way for a third five year term. . NATO was increasingly concerned that Russia’s desperation over battlefield failures in Ukraine may lead the Kremlin to escalate the war, and that could involve a massive attack on a target like a dam or even a weapon of mass destruction. . NATO says that for now, there is no sign Moscow is actually preparing for such an attack. . Adidas has ended its partnership with Yay! The rapper and designer formerly known as CAC West. . In a recent weeks, they has made controversial statements, including anti-Semitic posts on social media that stirred his easy line of sneakers into a lightning rod for criticism. . Adidas says that ending the deal would mean a negative impact of close to 250 million in net income. . And U.P.S. says it’s on track to meet its financial targets for the full year. . The package courier is trying to manage through a slump in peak season demand that has rattled the shipping market. . U.P.S. is third quarter earnings beat estimates. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts and more than 120 countries. . I’m Lisa Matteo. . This is Bloomberg. . Don’t take a pause at one point. . Conditions around the road tell you it’s rational to take a pause because any three months doesn’t matter much. . But American consumers, eventually the excess money they have is running out. . That’ll probably happen sometime mid-year next year. . And then we’ll know more about what’s going on, gas prices, more kind of thing. . Jamie Time in the J.P. . Morgan CEO. . Hello from New York. . To monitor the price action, looks like this going into the open. . Empowered equity futures slightly negative through much of this morning. . We stay that we’re down a third of 1 percent. . Yields are lower by 7 basis points on a 10 year, 417 32. . Any affects market. . Euro dollar, slightly weaker. . Euro in the mix here, negative zero point once six per cent on that currency pound 98, 58. . I can tell you the Italian prime minister used her first speech this morning, guys, to lawmakers in Italy to absolutely slam the ECB. . How much of this are we going to see across Europe and across the United States? It’s a mystery. . We don’t know if the Federal Reserve. . We’ve seen it from Senator Sanders and Senator Warren. . You imagine we’ll see a whole lot more if the economy starts to roll over and unemployment in the elections as well. . And this is what Prime Minister Maloney had to say to the decision to raise borrowing costs, quote, is considered by many to be a rash choice, which runs the risk of impacting banking credit to families and businesses. . And Lisa, she went on and she went on Emma Chandra. . And how much of this is driven by that anger that austerity was really placed on Italy, was placed on Greece, was placed on some of these nations by the ECB, by the European region at a time when Germany is kind of front running some of this these issues. . I mean, how much is that part of what’s fueling some of the additional anger toward these policies? T.K., we’re going to see a lot more of this. . I think I think it’s fair to say and again, a chart is not my chart of the year, but close here is the measurement of the Bloomberg financial conditions in Europe is an absolute outlier. . Can’t say enough how restrictive their stances. . Given the mathematics and comments here on bond buying as well. . Here’s the quote for you that is compounded by the decision already made by the central bank to end beginning on July 122. . The program to buy back bonds on the open market, which creates further difficulties for member states that have elevated public debt. . Well, we will see. . And of course, through Thursday’s ECB, wrote Jihye Lee, it is very lucky for 75 from the ECB. . Yeah. . Oh, he’s an easy 75. . Then what? After that? After that is after the midterm elections. . Annmarie Horden joins us again, our Bloomberg Washington correspondent Amery at the White House. . And I guess the basic ideas of president yesterday giving pep talks and that what does the president of the United States do in the next two weeks? What he’s gonna doing is gonna do his best to try to rally Democrats to get out and vote. . Try to rally independents to make sure they’re reaching out as well to the youth vote, which was critical in the presidential election. . But also, Tom, you have to think he will only go campaign, of course, if those candidates want him alongside him. . You have very different views from some of these candidates that are really running in some of these tight races and critical races like John Fetterman in Pennsylvania has really embraced President Biden. . But then, of course, you have the Democratic Senate candidate in Ohio that has wanted to keep a very large wide distance from the president, actually looking at outreach to other members of his party, like Senator Manchin. . So the president is obviously going to walk that line. . But he’s going to continue to tout. . And he said this a few times yesterday, that the Democrats are fiscally responsible and that the Republicans want to do are mega, mega trickle down. . This is a line that he continues to say and I imagine the next 14 days that will only ramp up. . It goes to the apathy we talked about in the last hour. . What does the turnout look right now? I mean, I’m going to editorialize in the presidential election. . Mr. . Trump got more votes and he got the last time around. . But nevertheless, there was this huge turnout for President Biden. . Do you expect the same kind of dynamics again? Well, midterms obviously have less of a turnout in presidential elections. . But at the same time, you do have really important issues that are coming up on every single poll that may force people to want to get out to vote. . And obviously, that is going to be the economy. . That is inflation. . We don’t know what turnout will end up being until the very end. . Tom, you made a great point the last hour that do people even trust the polls? What we saw from the presidential election with former President Don Trump and then, of course, candidate Hillary Clinton, that the polls really got that wrong. . A lot of this has to do with the fact that there is potentially a bias that Democrats are more honest in polls and some Republicans actually shy away. . But we already have voting underway and there should be a robust turnout. . A lot of that also depends on a state of play of that election day. . The weather and things like that can affect whether or not people are going to go out and actually vote. . Enraged John’s point earlier, how much is a Federal Reserve becoming part of the electoral conversation in terms of them going too fast, too far and torpedoing the economy? I think for us in the financial markets and the individuals we talked to, it’s incredibly important, I think, for everyday Americans. . It’s not so much the Fed, but what the Fed is doing that is impacting their everyday lives. . So what does this mean for their mortgage rates? Is it actually taming inflation, having an impact on energy prices, a potential other prices going up, consumer prices like groceries and rent, but also the fact that does this mean if they’re going too fast, are they going to be blaming the Fed or like many do, blame the current administration? If we do end up in a recession, which if you look at Bloomberg Economics latest projections, it is one hundred percent. . It is basically we will be in a recession effectively at some point the next twelve months. . Dan RTS, Emory, thank you. . We basically heard that from jump out five months ago as BlackRock on this program in the shower. . It was 15 minutes, got some it basically said the same thing about next year. . The recession is already baked it. . That’s what you gonna get. . Or at least a slowdown. . Do we need a recession? I mean, I I’ve always been in the camp, John. . If you have 1 percent GDP, that’s not good enough for a huge body of Americans. . I don’t need an NBER recession. . What I have here is, is Dr. . BOVESPA mentioned is a massively restrictive set of central banks guessing due an economic slowdown. . This is they go to engineer the slowdown. . Isn’t that the problem, politically speaking, to Lisa’s question, to produce up to debt? I mean, the Columbia yesterday, I’m looking at the 10 year United Kingdom piece here now. . And it’s basically it’s basically back 13 years. . I mean, it’s a it’s a whole it’s Disney. . It’s a whole new world. . They said there’s been some some big losses in this market pick up on the destiny and the fairy tales. . It’s been out of someone in the markets for a long, long time. . And we’re trying to step back from that. . It comes with pain. . Well, and this to your point, Tom, you said that there’s so much pain in the bond market and yet jump over is not buying treasuries yet. . He sees yields going even higher because we still have it’s inflationary when it finished 5 percent. . Yeah, it’s a little fun. . Yes. . Citigroup to Anderson Harsh. . Just put this out, saying that home price data is going to show you do see a decline in housing prices. . But the wage data that we get in Friday could show upward pressure on inflation from wages indicating that wage spiral. . So this is the sort of push pull of where we are in inflation right now. . Can you make the argument that we’ve priced in the bulk of the rate hike cycle? If you look at pricing at 5 percent, then of course, you can probably make that argument. . Can you make the argument with pricing the consequences if that rate hike cycle? Tom, I don’t think anyone’s making the argument right now. . We’re also going to do a large recession. . Losses while we’re talking nowhere and nowhere else. . Yet the only in the world, six or seven standard deviation. . How that’s possible on UK, you. . Just ignore your colleagues. . I do. . I ignore him. . Complete just job shots at Rishaad Salamat has a six standard deviation ten year give. . You told him that? I told him that. . Live from New York City is the price action this Tuesday morning. . Good morning to you. . Futures negative a little more than a tenth of 1 percent. . No drama on the S&amp;P, on the NASDAQ, almost unchanged, positive by about a tenth of 1 percent after the close. . Later close to 18 percent called it about 18 percent of the Nasdaq 100 reporting in just two names. . Microsoft being one, Alphabet being the other will look out for that a little bit late. . So go to the close in the bond market. . So tense and 30, some say come with it. . Iconic Google, too. . I have no idea why I just called alphabet. . Towns and cities look like this in the bond market. . Your yield on a two year full. . Forty five. . Fifty six back on Friday. . We had a little look at 460 and then we backed away. . Backed away on some of the Fed speak. . The idea that we get this stepped down from seventy five days to twenty five. . We heard from Jordan, Rochester, Nomura. . He’s not looking for that step down. . No more. . And the team looking for 75 basis points for the Federal Reserve, this meeting and 75 basis points from the Federal Reserve at the next meeting. . One other thing Nomura and Jordan Rochester had to say was that the moment for him, certain currency pairs are getting a little bit boring and boring. . It’s welcome. . When you’re talking about Sterling Capel is where we say a little bit of outperformance. . The pound against the US dollar within 10 today, the pound right now at about 113, 25 and some. . I think we’re all hoping we get boring good quickly in the gilt market after we saw a move of more than 30 basis points lower at the front end of the yield curve. . Yesterday on Tuesday, the biggest one day move lower in about 30 years. . For governor, barely, John, it has improved, but the needles barely moved. . Let’s be clear. . The prime minister and his team understand those Bloomberg Markets. . We’ve got to be sure that the prime minister has a Bloomberg terminal at 10 Downing Street. . What he’s got is five, six, even seven standard deviation moves. . And that’s untenable. . He’s got to fix that. . And we’ve got to work out his chance to it’s going to be we assume it’s going to be Jeremy Hunt. . Got to fill out that cap. . That’s true. . He’s got to work out what the budget looks like. . And then for Governor Bailey, it’s over to the governor, right? The Bank of England. . Does he need to do a whole lot more than he had to the last time they met? And does he need to do less than he had to do maybe in about two weeks ago? Tom, a lot’s changed in the U.K. . in the last several weeks, that’s for sure. . Year to year in the U.K., about three thirty nine. . That’s the cross asset price action. . It’s got some single names we can do that with. . Lisa. . Lisa? Hey, John is affirming full year guidance. . The new beating of estimates. . That’s really the question that I have after some of the morning’s earnings. . We got U.P.S., forget General Motors, but with a firming up full year guidance. . Those stocks both popping more than 4 percent, nearly 5 percent for General Motors, four and a half percent for U.P.S.. . How much have analysts had traders downgraded some of their expectations? And Tom, you were talking about that. . They’re basically affirming or just making estimates is basically akin to beating in an environment like the one that we’re currently in. . Yeah, that’s you. . These are challenging stories. . U.P.S., I’m not going to conflate their 3M and GM, but they’re managing the message list every 90 days. . And what our viewers and listeners do as you look at shareholder return, which has been a challenge. . U.P.S. different than FedEx has actually provided much more negative guidance. . 3M, however, the second downgrade in terms of full year forecast based on F X headwinds, second downgrade this year, that is not really being received particularly well in the market, down two point four percent per ton. . This really speaks to what we’ve seen more generally since the earnings have forgotten, which is that misses are pondering and just affirming is beating. . And, you know, beats aren’t necessarily being rewarded if they don’t have any visibility that far into the future. . Thank you, Lisa. . Right now, good visibility on foreign exchange. . Joining us was really sharp knowledge, particularly one on your end today, George Servos, global head of VFX research at Deutsche Bank. . George, I’m going to pivot on you. . There’s six ways to go here. . I go to go to Thursday and the ECB meeting. . What will President Legarde do to the euro off of her decision to lift a presumed 75 beeps? Good morning, Tom. . So I think the answer is probably not much. . The 75 basis points hike is widely discounted. . It’s as you expected. . But critically, if you look at what’s been going on this year, currencies have not really been very correlated to interest rate differentials. . It’s been a lot more about the dollar. . Safe haven, risk premium. . Some of the very large geopolitical risks, whether in Russia or China. . So I wouldn’t really expect the ECB to have a sustained impact on the euro, which is something it has struggled to have for the last few meetings as well. . George, I they stop the growth outlook when it comes to Europe. . Just how fast do you and the team expect things to get in Europe and how quickly? Well, it’s interesting you mentioned the growth outlook, John, because if you look at the euro, it really behaves as a pro cyclical currency. . So for the euro to be strengthening, you need growth expectations to be bottoming out and then recovering. . I don’t think we’re at that stage yet. . We obviously got the PMI is just a few days ago with another downside surprise. . So we do have a recession in Pennsylvania. . I suspect it may not be as bad as some of the more extreme forecasts that are out there, because so far at least, the weather has been quite favorable. . So if you’re looking at the nat gas situation, the tension that seems to be easing. . But no question about it. . Europe is going through a sharp slowdown and that is definitely a big headwind for the euro. . George, given the developing trade dynamics, the structural shift in the way the energy is supplied towards Europe, do you see some kind of structurally weaker euro in the years to come relative to what we saw in the year before? I think you can make the argument. . The problem is it’s impossible to fully understand where the equilibrium level of energy prices are. . If you take natural gas as an example, back in August, we were essentially three times as high. . If you plug in the energy prices at the moment in terms of what it means for the external accounts, the deficit is going to be half where it was in terms of peak. . So I think there’s still huge uncertainty in terms of the equilibrium level of oil and more importantly, not gas prices. . But if they stay as elevated or go back to where they were during the September period, we would be talking about a structurally weaker level of the euro for sure, other to build on, which I’m saying we’ve seen a lot of turmoil in China as well. . And China has a bigger play on the German economy, the biggest economy in the euro region. . And we’re seeing foreign flows just flood out of that nation now at a record pace. . How much does that feed into this feeling that structurally the euro will be weaker and that this will lead to weaker growth in your region now and in three years from now? Well, it’s interesting that you mentioned China, because if you look at the renminbi, it’s now actually weaken more than the euro has over the course of a year, and this is without facing a war in the footsteps, so to speak, or as big of a negative commodity shock. . So the main point I’d make on exchange rates is the dominant driver has very much been the broad dollar, which has pushed currencies weaker relative symmetrically with the exception of the yen and extreme policy that I would say the combination of China weakness plus the commodity price issues in Europe do definitely point to more structural headwinds as far as European growth goes for the next few years. . You mentioned the yen and you put a note overnight that I thought was fascinating. . Basically saying it’s broken and talking about yield curve control and talking about the whole plan that Japan is trying to stick to. . Does this mean that you think we might not see some sort of massive breach, some sort of dramatic shift in policy that’s just going to be a slow burn as expressed in an ongoing weakening yen and not necessarily leading to this disruption on a global level? Some people were afraid of. . It’s a very interesting dynamic in Japan. . In some sense, it’s the biggest monetary experiment in history taking place. . But if you look at the dynamics for a couple of things that are worth noting. . The first one, as you said, is apart from those free bonds at the back of Japan, its targets and everything else is essentially decoupled. . So we’re no longer essentially in a hilltop control framework. . We’re just in a specific bond CAC framework for its specific bonds, but everything else. . If you look at swap levels in terms of swap spreads and the swap yields are implying everything’s already started to adjust. . The other point is the Bank of Japan now effectively owns the entirety of those or that near entire tier of those specific funds they’re targeting. . So the point is, even if the cap goes, the only institution that will face losses on those bonds of the Bank of Japan itself. . So I do think it will be disruptive. . But the way it’s being managed and the way the markets de facto control, in any case, it may mean it’s less disruptive than some of the more extreme scenarios that people are putting out. . George, you went back 40 years and there have been five, including this one, manufactured surges in Japan of inflation. . They’ve been manufacturing inflation up. . We go to 3 percent. . Inflation is there. . Inflation now is corrodes, inflation manufactured and is it a fiction? So so far, it’s been imported inflation and very high commodity prices have helped, the very weak yen has helped. . And what he’s trying to do and I think this is why people will surprised that it’s the first genuine attempt to shift the entire inflation regime. . He’s trying to make that feed into wages, into core services. . And if you look at the data, it is slowly starting to work. . So Core Services Corp. . is starting to move wider. . So maybe he will go down in history as the first Japanese central banker that’s able to move Japan out of this low inflation equilibrium. . And if that happens, I think it would be a very, very globally significant event in the sense that the last bastion of disinflation, so to speak, will have ended. . George, can I ask a stupid question? What happens when a central bank loses money? That’s a very interesting and important question. . I think the answer is fairly straightforward, at least from my perspective, not much. . So we already have the RBA, for example, running negative equity because they’re losing money as the price of those bonds people have gone down. . The Fed is is essentially also losing money on its QE portfolio. . But when we look at the balance sheet of a central bank, we have to remember it’s very different from any sort of private sector institution because the central bank prints its own money. . So, yes, there are discussions around loss of potential credibility that central banks would need to be recapitalized. . But at the end of the day, these are all balance sheet technical questions. . I think in practice, it doesn’t really mean anything they charge. . Wonderful to hear from you, sir. . As always, good to catch you up, mate. . George, south of Alice, they have Deutsche Bank out of London. . Isn’t a hedge fund managers dream, T.K.? What happens when you lose money? Not much. . So, yeah, I’ll let you tell. . That’s the size of the institution. . And I’m really at the heart of what Allan Meltzer did for years in history of the Fed. . They’re just that big where if they lose money, it’s one big. . So what I would state and occur out with a superb article today with a team General Ando and others worldwide on the challenge is that central banks have and I know I think it’s critical. . Then again, these the debt price movements I’m seeing are not normal. . I thought your perspective on Japan was really important. . I’ve often criticized the BMJ. . I’ve got the head in the sand operation ostrich chef when assets hike in their stock, that doing nothing. . I truly believe this is a once in a lifetime opportunity to reset inflation expectations higher and good luck to them. . Let’s see if this works out. . Equity futures right now are negative. . On the S&amp;P. . We’re down about a tenth of 1 per cent life from New York. . This is CAC. . Keeping you up to date with news from around the world with the first word. . I’m Lisa Matteo Ricci. . Sumac has formally taken over as prime minister of the UK. . Standing outside Number 10 Downing Street soon promised to fix the mistakes made by his predecessor, Liz Trust. . He said the UK faces a profound economic crisis and that will mean difficult decisions to come. . A group of progressive House Democrats urged President Biden to seek peace talks with Russia to bring about an end to the war in Ukraine. . But within hours, lawmakers backpedaled and issued a statement supporting the White House policy. . The Biden administration has rejected the idea of negotiating with Russia without Ukraine’s approval. . Florida’s Republican Governor Ron DeSantis has declined to say whether he’ll run for president in 2024. . In a debate, Democratic challenger Charlie Crist accused him of being too distracted by a bid for the White House. . Polls show DeSantis leads Crist, a member of Congress and former governor so far. . Rising interest rates haven’t hit General Motors business. . The automaker’s third quarter profit beat estimates on record revenue. . GM also reaffirmed its guidance for the year. . Company’s U.S. . auto sales soared 24 percent during the three month period and General Electric cut its full year profit target despite strong cash performance in the third quarter. . High costs in the struggling wind operations added to the ongoing challenges with labor and the supply chain. . GS Renewable Energy Division saw operating losses balloon to nine hundred and thirty four million in the last quarter. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries. . I’m Lisa Mateo. . This is Bloomberg. . I think the thing people really need to focus on the most is how long does the Fed keep that that funds rate really high. . So let’s say up to 5 percent. . We think it’s going to be a long time, six plus months, maybe a year. . That’s going to hurt equities. . We think that’s going to hurt risk. . That was my Schumacher. . That club had a macro strategy at Wells Fargo. . Fantastic catch out with him. . The attention turns from fixed income to earnings a little bit later. . Numbers from alphabet and numbers from Microsoft. . After the close, your market looks like this going into the open and found about one hour and 42 minutes away. . Equity futures dancy tenths of 1 percent on the S&amp;P. . Yo, it’s had a much, much lower now down nine basis points. . Tom, your yield on a 10 year for 15, 20 to watch yields and what price? Thank you for the huge response yesterday when I was going mental about price matters. . It’s not just about yield someone that knows that. . As Robert Tip, chief investment strategist, head of Global Bonds at PJM, where they’re really exceptional record of trying to find total return. . Robert, I look at the corporate, not the full faith and credit total return, but the Bloomberg corporate total return index. . And it’s something in the vicinity of a draw down of a negative 21 percent on price. . Do you just assume with Fed action that we enjoy bond prices lower and yields higher? I think the Fed is bringing us a gift here. . I think we’re having a regime shift and I think at the Fed, you know, the one that’s really been in the lead in the cycle is Bullard. . And I’m sure you remember his paper in 2016 about regime shifts. . You know, these markets, we don’t slowly go from this environment to that one. . And it’s a little bit different than six months ago, John. . And actually, we could be jumping back to an equilibrium that’s much more normal. . You know, the Fed funds rate the last 50 years has averaged 5 percent. . And right now, everyone is convinced that if the Fed does over four inches towards 5 percent, there’s going to be a hard landing. . But fear corporate bonds, if they inch over 4 percent and slow down and see how things are going. . There’s a lot of yield out there right now. . Long corporate bonds. . And it’s a real horse race as to whether, you know, those yields are peaking. . Those returns are a bottoming out here. . I mean, you have a nameless bond. . This is somebody’s reported earnings today. . Doesn’t matter who it is. . And they’re enjoying a four point one percent piece out 10 years, make it nine years. . And they’ve also enjoyed a 30 percent drop in price. . Robert, tell our listeners and viewers how they handle duration if they’ve enjoyed double digit losses in bonds. . Do you come in short duration or do you go out long duration to try to pick up coupon? Well, I think we’ve normalized here. . I think this is an environment where people are supposed to be at some kind of a strategic bridge position in terms of their asset allocation, and that includes duration. . I mean, we have been in a period driven by central banks targeting unnaturally high inflation rates. . I mean, it wasn’t that long ago, 20, 19, even in 2020. . Sure. . Paul was talking about 25 years of failure to get inflation up to 2 percent. . And they haven’t. . Interest rates are incredibly low. . But now that’s changed. . And with Covid, with all that terrible things that have happened. . One positive is they’re resetting interest rates higher. . And so I think that, you know, five, 10 years from now, when we look back, inflation will be lower than it is now. . Growth will probably be lower than it has been certainly the last couple of years. . And this will a bit of reset. . So whether. . Exactly. . You know, 4 percent, four and a half percent, five percent. . What’s going to be that peak level of rates? I don’t know. . But I think we’re in the zone of that peak in terms of interest rates. . But it’s not going to be an up and all the way back down unless something unforeseen happens. . This is a setup kind of like ninety four ninety five where rates go up, they stabilize. . Now that ends up boosting bond returns for the long run. . The bond returns perhaps in investment grade corporates as you are talking about, what about just in 10 year treasuries at a time when people are talking about normalizing at higher yields. . I think long duration, high quality, like 10 year treasuries. . It’s more balanced. . I think that, you know, if the Fed funds rate ends up going up to four and a quarter, four and a half, and the Fed at that point is saying, yeah, I mean, we’re kind of indifferent here, but we need inflation to come down. . And so if anything, that probably means that we maybe hike gap if that’s the case. . I think you’re going to have a little bit of a burn on the yield curve where those long yields that are lower than the short yields are going to be under pressure to move higher, to pay people compensation to take that duration. . Because of the uncertainty, to Tom’s point about price down in some of these corporate bonds that have coupons of 4 percent that were sold, say, a year two years ago and now have all in yield of something like 8 percent, 9 percent, 10 percent. . How much does that become a credit problem for these companies in a year when they have to start refinancing? Yes, so I think the whole dollar price. . The big dollar price changes, it creates mental problems for investors in terms of figuring out the right things to do. . And in terms of issuers, it creates less of a problem in the immediate future than you would imagine. . So on the issuer side, to your question, where it takes a long time for corporate debt structures, cost of capital to change the bonds, mature very slowly and they they issue and it’s incremental. . And if you’re in a world that’s going to support. . 4 percent 10 year treasury for the long run here. . That’s probably a pretty high nominal growth economy. . And they’re gonna get by. . But if it can’t be a plus now, it’s gonna be a negative, but it’s a very slow burn. . The dollar price thing for investors, you know, it’s shocking. . You know, when you have a reset like we had before, from very high yields to very low yields, you get a one time jump in dollar prices where, you know, your bond future may be closer to 200 than 100 and it stays there for a long period of time. . It doesn’t really have any bearing on necessarily where things are going to go. . I think that’s the case with a lot of these bonds that are now at very, very deep discounts. . If we’re roughly in the yields on that, we’re going to be and then they’re going to very slowly take their time moving back to par. . But I think, you know, that shouldn’t distract you from the real valuation question, which is, is the yield right or not? Rob. . Awesome to hear from you. . Robert said that if PJM fixed income on this bond market bonds today firmer, looking pretty solid, actually yields lower by 8 basis points on a 10 year to 416. . At the front end of the curve on TV is that five basis points to 4 45. . We need to talk about the earnings. . And for Q3 it was always going to be about the guidance. . And what we’ve had this morning was a razor hold holding account, a race from Coca-Cola, a hold reaffirm any outlook from GM and a cut from 3M. . Tom, a little bit early this morning, very mixed so far today. . Jason Kelly Anna Edwards talked about this yesterday, but she was stunning when she talked about one in five companies maybe have the glory of decent cash flow, decent margins, decent revenue. . That’s Coca-Cola. . I would suggest maybe it’s not even one in five. . It’s even more narrow than that. . And we’ll see that narrowness today with Google and Microsoft this afternoon. . You know, I can see at the corner of my just sort of loitering gown in the distance. . Matt Miller, can I drop by the studio and catch up on the GMC? I’ve got the answers to my bitcoin floating around is that they do. . They float around. . Float around. . Okay. . Let’s get tonight. . It’s at that depth, the knowledge, its analysis of crypto here. . Matt Levine out with a ISE or very holding Bloomberg Businessweek like a massive take on bitcoin. . I’ll read it because I’m there because it’s a room because Levine Then I see Matt on camera. . It’s great that a little package, you know, has a digital. . Finally, I’ve got time for Dow Jones. . How much should we panic? Tons. . Tons to finally get on camera for a crypto. . The day to day noise is exceptionally high right now, and it’s really disturbing for a lot of investors, this type of volatility is something that we think you’ll see still for the next couple of quarters. . I think there’s more work to do here before the Fed really believes that short rates are offering a positive real yield. . I think the thing people really need to focus on the most is how long does the Fed keep that funds rate really high? I think the time has come for them to take a slower pace of rate hikes and wait and see what kind of shape the economy is in. . This is Bloomberg Surveillance with Tom Keene, Jonathan Ferro and Lisa Abramowicz. . Good morning, everyone. . This is Bloomberg Surveillance, Jonathan Ferro, Lisa Abramowicz and Tom Keene. . We welcome all of you on Bloomberg Radio and Bloomberg Television, the common theme of the earnings season from industrial America this morning John. . Right over to where we are with tech this afternoon is dollar ramification alphabet. . Microsoft coming up a little bit later in effects is a brand new excuse available to see. . It is worldwide and 3M is taking that opportunity to play. . Thanks, Tom. . It’s a real deal. . The dollar is a whole lot stronger. . And if you’re an international company that she had some, it makes a difference if you based here in the United States are some domestics. . Liz Ann Sonders with a great chart from Schwab’s showing that domestic company outperformance versus multinational international is well, the conversation Jordan, Rochester and George Savalas that we had earlier is just simply not about yen. . It’s about a holistic thing, the developing cum economies, the EMR economies, and there’s real dynamics out there. . Any company the rest of the world wants this fed to slow down the step down, no question. . A step the bling bling down 50 is that we are going to bleep down. . Nemo is not looking for that. . They reckon 75 for the next meeting and then another 75. . Then why do we all agree to it? We all agree 75. . I get it. . ECB and that to me, it’s the. . Then what? Well, and then at what point if they do pause, right. . Let’s say they do a step down and they get to four and a half percent. . Hold on a second then say anything. . I didn’t say it. . But if they don’t say anything, if they don’t do anything further, is the further path going to be another rate hike, as we heard from Robert Tip because of the inflationary pressure? Any call on the Fed is at the mercy of the CPI data and we get another CPI print Tom Keene a couple of weeks time. . And nation to nation, it’s a huge variance as well as jumbo events had earlier in June to stagger to the data here with inflation tied to the yield right now, 10 year yield four point one six percent, the real yield comes back from that 182 down to one 58. . Everything linked together off that key inflation report. . Yep. . And not just in Europe, in the United States as well. . Senator, time for this market worldwide this year and maybe beyond it to 2023. . Let’s wait for the price action for you. . Just briefly on the S&amp;P 500, slightly negative for much of this morning. . No drama, though. . We’re down about 13 on the S&amp;P with self-doubt by a third. . If 1 percent yields on a 10 year lower negative down 8 basis points on a 10 year to 416. . And in the affects market, T.K., softer euro here just a little bit weaker, 98, 63 on euro dollar. . If you’re a student of the Midwest and you had parents that were industrial on your college list was the West Point of manufacturing and engineering. . It was called General Motors Institute, now Kettering. . And never did they know that one of their students would come out to provide leadership for General Motors is Mary Barra. . And Matt Miller brings us to her today, the engineer from the General Motors. . And I’m looking forward to it, Mary. . Thanks so much for joining us. . Really appreciate it on such a busy day for you. . Let me pick up where these guys left off and ask you about the stronger dollar. . Obviously, the lion’s share of your revenue comes here in the U.S., but you still buy purchase a lot of parts in your supply chain from outside of the country. . Is a stronger dollar a tailwind for you? Well, I think, you know, there’s a lot of pressures right now when you look at commodity cost transportation, it’s just one of the elements and that we’re facing is not as significant for as it is for other companies, just based on our strong position in North America. . But we continue to to monitor and be impacted by each of these factors. . Rates obviously a huge factor as well. . We’ve seen it impacting other lenders. . And I’m wondering how it’s impacting GM Financial. . Where we are seeing GM Financial get back to you, I would say historically strong performance, I think we had especially strong performance last year and the year prior due to the strength of used cars pricing that’s coming down with interest rates, we are seeing a little softening on leasing. . But overall, GM F is performing very well. . You know, the CEOs of JP Morgan and Goldman Sachs both this morning have said they see a recession as likely for the U.S. . I’m wondering your view, you have a unique position. . What’s the economy look like to you? How. . How is it unfolding? And car sales specifically. . Well, I’m gonna let calling a recession to the economists, not to not my expertise, but what I’ll tell you what we are seeing and we’re seeing still very strong demand for our products. . We’re seeing strong average transaction pricing that we we continue to be able to build on. . And so we are starting to see inventory build just a little bit, but well below levels that were in the past. . So overall, we’re still seeing a very strong consumer for our products. . And, you know, we’re watching carefully all the different signs. . But right now, it’s still very strong. . But what about inflation and the pressure on margins? I mean, does the stronger dollar balance that out? Are you seeing a big inflation in rise in the costs that you need to pay out for parts? And is that sort of squeezing your margins here? Well, we have. . Yes. . We have seen, you know, commodities, logistics. . You know, we work with our suppliers to make sure that we have a very healthy supplier base. . So all of those factors we tend to work to offset and we predicted this year would be about a 5000 or excuse me, 5 billion dollar impact. . And we are seeing that. . But we have worked effectively to find offsets. . And that’s part of our overall equation for this year, which is allowing us to still maintain guidance. . One big boost is going to be the Inflation Reduction Act, at least. . UBS says they see the IRA as very generous. . They say it has the potential to make the US a global Eevee battery hub. . How do you see the Inflation Reduction Act for GM? Well, General Motors was already investing in North America or in the United States, for instance. . You know, we have a battery plant in Ohio that’s ramping right now. . We have two others, one in Michigan, one in Tennessee that are also ramping. . So we were making the investments because we wanted to make sure we had a resilient supply chain. . After we’ve lived through so much disruption over the last few years. . So as the ISE came into was passed and we’re looking now for Treasury to set the rules, we think we’re very, very well-positioned. . And we do believe that the benefits of Iowa are either they will drive stronger adoption with the American consumer. . So we think it’s going to do exactly what was intended to do. . And we’re well positioned to benefit and and work with our consumers to make sure they have an Eevee that’s affordable, that they can really enjoy the benefits of NTV. . Are you still on track to sell a million of these in 2025 and beyond? We absolutely are. . You know, when you look at the lineup that we have, you starting with the Hummer to the lyric to now that the Chevy Silverado, even we just last week launched the GMC Sierra. . Evey along with the Chevrolet Blazer Eevee and the Equinox TV. . I think we’re gonna be well-positioned covering the important segments in the portfolio to reach that million unit level by 2025. . You do get a huge boost also from big truck margins, and I imagine that helps you to fund the TV business and get towards that target. . If we have a recession and you see sales of those big trucks as big ISE trucks drop, can you continue to fund the easy boost? We very much believe where we have a strong enough balance sheet and the strength of the business. . When you look at the truck, we have truck leadership. . We’ve had it since 2020 and we just did a major refresh to our light duty, full size trucks. . We have strong SUV as well. . And now the heavy duties we just revealed they’ll be next year. . So we think our product portfolio is going to position as well in the truck market. . I would also say midsize crossovers are very strong as well. . And the truck consumer, especially the full size truck consumer, they generally are not they don’t shop as many segments as maybe other customers of other segments do. . So we think we’re well-positioned and obviously will moderate based on what happens from an economy into a consumer buying perspective. . You know, earlier this year, people were asking if we were going to get back to a 17 million SAAR. . Now I’m hearing people ask if we’re going to go down to a 12 million SAAR. . What do you expect for car sales next year? Well, we know because of all of the economic conditions around the globe. . You know, we are looking and we’re planning for a more modest level. . We’re still going to protect for the upside because we don’t know our next year. . But you know where it can really depress levels right now because of all the semiconductor shortages and other supply chain issues. . So we think there’s an opportunity to go up ever so slightly next year. . But we’re going to be very conservative as we plan for next year. . But be ready, Dad, to take advantage if there is upside and there’s still a lot of unknowns. . We’ll provide more information on how we view 2023 and early next year. . All right, Mary, thanks so much for joining us. . Real pleasure talking to you on earnings day. . General Motors chief executive officer Mary Barra. . Mark Gurman. . Matt Miller. . Just awesome, as always. . Tell me this. . I’ve been willing to ask this question for you of you for ages. . How green is a nine thousand pound Hummer? Avey Just how green is that? Well, I suppose in in what sense do you mean there are zero tailpipe emissions? So it’s so super great. . Right. . Talk about how much goes into making a now 9000 pound Hummer, 80. . Then tell me about how much damage that does to the roads. . Tell me about the tire wear as well. . How much rubber will need to put on these cars? Just how green are these vehicle? And when you have that, the life of the vehicle, the damage it does to the road, the new tires that you’re going to need? Well, a madam is here to argue with. . Electricity is generated by coal. . That’s a problem as well. . But I think that people like Mary and it across the industry are looking for solutions to the climate crisis that we face. . So, yes, there are problems you could see or you could make the argument that it’s not much more green than Silverado. . It’s even bigger. . It’s even heavier. . But at least they’re making some headway in that direction. . Wouldn’t I be better off buying a smaller gas auto that’s un-American seems dangerous. . Would you want to drive around in a small winter? Wouldn’t that be more great if I hit you in Michael Barr? This is the ridiculous part of this conversation. . Is this just a fad that doesn’t really address what we need to address? I think it’s a piece of a might get if you’re selling motor cars. . I get that clearly. . And you can get the credits from the government to do so. . Americans love the elephant in the room here. . Americans do love going about it. . Right. . We’re ready, guys. . What they like on. . You know, I hate to say you shouldn’t drive big trucks. . I’m just here to say that this green branding golf them seems to miss the mark a little bit. . I don’t disagree. . I don’t either. . T.K. . costs one hundred and ten thousand dollars. . I can afford it. . No. . Anyway, some snowfall is coming. . And our chief investment strategist says see if eight from New York. . This is pulling back. . And I love my Honda Civic for keeping you up today with news from around the world with the first word. . I’m Lisa Matteo Ricci. . Soon, CAC has formally taken over as the prime minister of the UK sitting outside Number 10 Downing Street. . Soon, that promise to fix the mistakes made by his predecessor lost trust. . He said the UK faces a profound economic crisis and that will mean difficult decisions to come. . NATO is increasingly concerned that Russia’s desperation over battlefield failures in Ukraine may lead the Kremlin to escalate the war. . That could involve a massive attack on a target like a dam or even a weapon of mass destruction. . NATO says that for now, there is no sign Moscow is actually preparing for such an attack. . Adidas has ended its partnership with Yay! The rapper and designer formerly known as Konya West. . In recent weeks, B.A. . has made controversial statements, including anti-Semitic posts on social media. . Now that’s turned his Yeezy line of sneakers into a lightning rod for criticism. . Adidas says that ending the deal will mean a negative impact of close to 250 million in net income. . Global news 24 hours a day on air and on Bloomberg Quicktake, powered by more than 20 700 journalists and analysts in more than 120 countries. . I’m Lisa Matteo. . This is Bloomberg. . What people say they’re doing with their money and what they’re actually doing with their money. . I still think the gap between those two things is quite is quite wide here that flows, for example, are still pretty aggressive in both equities and bonds. . Chris, for owner of Strategic ISE, can I just say with colder the air, you gave it to pre maturity day on a curve inversion. . I think up there is that cool from Chris on dollar yen looking for 150 when we were at 115 and we closed at 115 last Thursday. . Oh, go 15. . Yeah. . He was way out front on that. . Yeah. . He gave it to my. . Well Senator. . At least you’re not alone because Mike Wilson of Morgan Stanley. . No one who’s long. . How bearish view on U.S. . stocks has materialized this year was ranked the best portfolio strategist in the latest Institutional Investor Survey. . Congratulations to Mike. . Triple limiting cash. . You should check it. . Award Palmer Cash Tom Keene. . I’m not sure if that warrants somebody from Governor Bailey’s team said how do you handle leveraged versus what we’re going to see this week from Biogen, a Bank of England and of course, the ECB on Thursday. . Please stay with us through the week on earnings and we’ll be talking about the afternoon earnings as well, such as Microsoft and Google today. . Right now, we readjust on the equity markets with Sam Stovall, chief investment strategist at CFR. . Always good to speak to him. . Sam, Julian, Emmanuel, keep score on a daily basis in every core of what we see and what he sees as a modeled eight point eight percent revenue growth. . How do you with all your experience, your star system, it’s S.F. . are a what does eight point eight revenue growth or whatever the number is going to be. . How does that distil down through the income statement to free cash flow? And then on the share price. . Well, good morning, Tom. . Thank you for the easy question. . Basically, what we’re looking for this year, or at least in the third quarter, is a 10 percent gain in revenues for the S&amp;P 500. . And that compares with 2 percent earnings growth. . Profit margins likely to slip a bit about seven and a half percent. . But when you look beneath, in a sense, the surface, the 10 percent growth really is driven by the energy sector as well as the communication services, consumer discretionary categories. . CAC is really expected to show only about a 5 percent gain in revenues. . We’re seeing a theme of alpha of individual stock selection. . Is this a time is within tumult? Now, is this a time in the era of individual stock selection, sector selection or get out of the market selection? Well, I think that you one could say that we are getting to the point where we might be looking toward the market and sectors, because as you probably are well aware of, you know, the Stock Traders Almanac calls November through April the best six months of the year. . And my seasonal rotation strategy will switch from the defensive staples and health care to the cyclical discretionary industrials, materials and tech at the end of October. . So historically, we are in the best period. . The sweet spot for the market, October of mid-term election years through October of the year after I have posted an average total return of 21 percent since World War 2 and has risen 100 percent of the time. . Sam, was the distinction for you between a bear market rally and the beginning of more sustainable economic and market cycle? Kailey Leinz. . Well, I would tend to say that you’ve got to see some factors that really confirm that the move higher to make it something that’s more like the beginning of a new bull market rather than simply a bear market rally. . One of the things we have not seen is a sharp capitulation in a sense, the increase in volatility. . I look at a rolling 15 day average between percentage of high and low for the S&amp;P 500. . Normally we peak in a bear market environment above two standard deviations. . Right now, we’re pretty much hugging the average. . So the volatility, the fear, the capitulation has really not been there yet. . And I think we probably need to see that before we can say that this bear market is over. . So how do you view the whole step down that we’ve been talking about or this idea that the Fed could decelerate its rate hikes, which is one reason some people have given as a narrative to the gains that we’ve seen over the past week. . Do you buy into that, that if the Fed is compelled to slow the pace of rate hikes, that’s a positive for stocks? Well, I think if they’re compelled, it could be for for reasons that are more ominous. . We have seen since World War 2 that whenever we’ve had a year on year change and CPI exceeding six and a half percent, remember, we hit nine point one percent in June. . We have had not only a bear market, but also a recession and that these bear markets fell further and lasted longer than bear markets without recessions. . So I would tend to say that real concern is when we do acknowledge that we are in recession. . How deep will it be? And therefore, it was an earlier low in October, the low or simply a low. . And I would tend to say it’s a low because I’m looking for something closer to about 30 to 100 on the S&amp;P 500 that might end up toward the end of the first quarter of next year. . I sent. . Thank you, Sam Stovall of CSR. . Right. . Sounds like some semblance of this could go on for another 6 9 months. . Yeah, something like that, at least at the rally could in this sort of speaks to this idea that, OK, it’s a bear market rally, but let’s ride it. . Right. . How many people are basically saying that? Well, my most insane because they’re concerned that they get beaten up by being too bearish, at least in the near term. . Chris Howard-Smith once had it right the first time. . And then let’s put it forward. . I tell you what, this game is tough. . It’s not a criticism of Chris Epps. . I mean, he’s very clear about that upfront. . Chris was talking about the weakness in earnings to come in the first half of 2003. . He brought that forward. . And now it just feels like people are Christian to back out. . People are pushing it back now. . This cycle’s just moved at such a speed that so hard to keep up with. . I think people are still guesses that we saw a rise. . This is a cycle. . Well, someone did it again. . Is it two? Yes. . Or is it they tend to fall ISE back to what Jumbo Vince said. . It is completely away from any demand structure. . It’s in the textbooks. . It’s all pandemic supply side dynamic. . And that tells me it’s not a cycle. . It’s original. . What I’ve heard is that because we’ve only had a couple of years of this post pandemic, we haven’t at the time to build up excess. . And I guess, Tom, to your point, it depends on the starting point. . Do you think this thing began, started after the pandemic or do you include the. . Ten years before the pandemic as well. . Well, the people who said that there weren’t excesses in the financial system are the same people saying that this could be a slow burn. . That was Robert Tip. . That was jumbo VAT. . Basically saying there will not be the trigger for financial stability at rates at four and a half percent. . And that they could stay there for longer, which will reset the concept of corporate valuations and corporate leaders on Microsoft today. . And what I’m doing is just going back and comparing where we are now to 2019 preshow damage. . And that’s that’s the the elite group of equities that have been able to improve on that. . You look skeptical. . I just think what we’ve seen from central banks, we already seeing the intervention. . So this idea that it’s going to be this slow bleed, the police had to step back in and buy gilts. . The PIIGS had to intervene in the affects market. . The ECB had to come up with this transmission protection instrument. . That’s not been tested yet. . Talk about South Korea, similar story, obviously, but they’ve had to step back and do something on the credit side. . And I just wonder who’s next. . Okay. . Jacob Rees-Mogg just quit. . I speak news to. . 60 minutes away from the opening bell, live from New York City. . Good morning to you. . The price action shaping up as follows as we approach that opening bell equity features slightly negative on the S&amp;P, but down four tenths of one percent. . We are down 14 points, 10 of RTX this morning. . As for the guidance, you got a race from Coca-Cola hold reaffirming from GM at a cut from 3M after the close a little bit later, you’ll hear from Alphabet A Microsoft getting to all of that. . The bond market support, if you slow it down 8 basis points on a 10 year slump to four point twenty six percent in America right now. . Let us look at possibly your Book of the Year. . My Book of the Year for the first time ever. . I did it so early in the year on the shock of the war and Vladimir Putin and what we saw Putin’s world is my Book of the Year. . But look at this short, readable mega threads, mega threats. . Nouriel Roubini, crisis economics coming out of the crisis now this shockingly readable. . Nouriel Roubini joins us for the entire half hour. . I’m going to go back. . I want to give people a little vignette of years in my relationship. . We’re sitting in a wood paneled Davos like bar, and there’s a very famous secretary of treasury sitting somewhat near us. . And you and I walked through the excesses of 0 5 0 6. . And you nailed 2008. . Are we there again? Yes, we’re here again. . But in addition to the economic, monetary and financial risks and there are new ones now we’re going towards stagflation like we’ve never seen since the 70s. . In the book, I point out that there are also geopolitical risk like we are on a confrontation. . We have some revisionist powers like China, Russia, Iran, North Korea that are challenging the geopolitical order that the U.S. . and the West. . And that’s going to lead potentially to conflict. . There are environmental risks that are very severe. . There are health risks coming from pandemics. . And there is a relation between global climate change and pandemics. . There are technological risks coming from a machine learning, robotic automation, destruction of jobs. . There’s a backlash against globalization. . And we’re going to go to a world that is the global ISE. . There are political risk with polarization and where radical extremist party of the extreme right and extreme left coming to power both in advanced economies and in emerging markets. . And on top of it, we have amount of the debt like we’ve never seen before. . Explicit that, well, that’s what it is. . Right. . Where is the confluence of all these mega threats? Let us forget that Lipski at IMF was heated about the debt buildup on the back of your book. . You’ve got a guy named Rogoff from Harvard, Bremmer of Eurasia. . Dr. . El-Erian from Cambridge. . Martin. . Wolf, always wonderful at the FTSE. . And at the very top, the quote of the season from Taleb, The Gravity’s Return to the Physics. . We’ve got a higher real yield now. . We’ve got a risk free rate now. . What are the ramifications in our economic system that the gravity is returned to our physics? Well, there were many insolvent agents in the economy goes private and public debt as a share of GDP has gone from 20 percent to 350 globally between 2000 and today. . In advanced economies, more like 420 and rising in the U.S. . is now higher than after the Great Depression and after World War Two. . And we’re not out of a Great Depression or a major war. . And until now, even if you had zombie households, corporates, banks, shadow banks, governments, countries that were bailed out there were bailed out during the global financial crisis. . Zero policy rates, negative quantities of credit easing it even during the Covid crisis, many of them were fragile. . They were bailed out again. . We went back to get even more of the same this time around. . Instead, it’s different because we have so much debt and central banks like the Fed have to increase interest rates to fight inflation so that zombie institutions are going to go bankrupt. . That’s why not only we’re going to have inflation and stagflation, but whatever stagflation or that crisis in the 70s, we had negative supply shock 73 79, but with very low debt ratios. . So we didn’t have a debt crisis in advanced economies with one in Latin America, Argentina, Mexico, Brazil borrowed too much in the 70s. . All Volcker jacked up interest rates 20 percent. . They went bankrupt after the GFC. . We had the debt problems, mortgages, they had housing that bank that and where the debt crisis by was a negative aggregate demand shock and therefore we had lost elation and deflation. . Today we have the worst of the 70s with that massive amount of stagflation, very negative supply shock in the book. . Identify eleven new ones over the medium term and at the same time where that ratio like we have never seen before. . So we get stagflation. . That’s great. . Don’t give us the eleven themes. . John Tucker will be zero. . I was waiting for the 11th. . Did you use this phrase in there? I could tell you this in the sound bite about the left and I’m not going to give you said zombie institutions. . Yeah. . Where are they? And are you talking about countries now and not companies? Not households, not private balance sheets? Are you talking about country sufferance? Well, there are plenty of. . Is that in trouble in emerging markets? We know what has happened in Lebanon. . What has happened in Zambia? What has happened in Sri Lanka and there is about 40 of them that the IMF and the World Bank said that they are on the verge of having that crisis severe, that crises because of what’s happening. . And look what happened to the United Kingdom that now is starting to be placed in like an emerging market with the fiscal stimulus reckless, forcing the Bank of England essentially to monetize it, and then the currency falling and rates going much higher until they reverse themselves. . So it has happened in Greece. . It’s happening in the UK, could happen in Italy, of course, where a large number of not only emerging markets that are threatened, but also of advanced economies of various IBEX. . So over the last 10 years, we’ve had a series of countercyclical circuit, right? Yes. . Fiscal had the capacity to do that. . Yes. . Central banks had the capacity to do that. . Now, seemingly, we’re questioning the capacity of those institutions, central banks, sovereigns, to be able to do so this time around. . You offer solutions in this book to what are they? Well, for every one of these mega threads, there is a solution. . But then there are two final chapter one about a dystopian future where all these threads materialize. . They feed on each other. . And it is not just the end of the world economy could be even global war. . And there is a less dystopian future in chapter twelve where we have the policies nationally and internationally that leads us to a better outcome. . The problem is there are both domestic political constraints and geopolitical and political constraints to achieving the best solution. . And I’ll give you an example of global climate change domestically in this country. . Half of the country doesn’t believe in it, too. . There is a conflict between generation. . The young people care about the future of the elite class at the international level. . There is a free rider problem. . If a country cuts emissions to zero, nobody else does it. . Then they don’t get benefit then only the cost. . Not because of geopolitics. . Well, timing India and China. . You should cut their emissions RTS in the next 20 years. . We create the problem. . In the last 200 years, 90 percent of the stock of emission came from advanced economies. . Nowhere is that them don’t grow dumb, become rich because that is a problem. . It’s through the flow of new emissions coming mostly from China and India. . So there are four elements of conflict, two domestic and international that they essentially imply that we’re not going to find that ISE solution. . So there’s lots of greenwashing going, wishing, giving fig leaves. . Lots of CSG is just talk and no action. . Glasgow cop was just a total failure in or slow motion train wreck, which goes to your point, John, about electric vehicles and I around a vehicle. . It hasn’t happened. . Is in the United States because they’re green. . There is an issue, though, going forward where the central banks and whether a lot of your thesis scenario is predicated on their inability to go through with what they need to do to get inflation down. . Is that your base case? Is that the most likely outcome? Yeah. . Right now, all central banks are playing tough and talking tough and acting tough, hawkish because they have a problem of credibility. . But in my view, there are two problems. . One probably is that if they tried to get to 2 percent inflation, that caused a recession. . And this recession is not going to be short and shallow is not going to be gone, then it is not going to be claimed that he is not gonna be two quarters of negative growth. . Then inflation collapses and they can rise again in the book. . Explain all the reasons why he’s going to be a severe recession because of the debt ratio. . Because we are going into fiscal and monetary tightening. . And at the same time, you not only have an economic crash, you’re going to have also fiscal crash. . We’re not only in fiscal dominance in this game of chicken between Treasury and Central Bank, worrying what the folks at the Bank of International Settlement call a debt trap that is so much private and public debt that if central banks try to fight inflation, they cause a crash of financial markets and not just the stockmarket. . That’s the least important credit market bond markets and that crash and financial crash feeds on the economic crash and vice versa. . And therefore, they’re going to win power. . And they’re gonna blink. . And the first one was the Bank of England. . The Fed is going to do the same. . This is going to do the same. . Have you been surprised that we haven’t seen some sort of catalyst, some sort of financial stress so far, given how quickly and quickly the Fed has already hiked rates? Well, we have not yet seen it. . Some people worried there is some major financial institution not in the US may go bust. . I think that the financial strains are gonna become more severe because right now the Fed is on the way to go from 3 towards 5 percent. . You already have a stock market down 25 percent. . NASDAQ given more public reads 33 percent. . You have the crush of Mimi of spark, bubble of the creep, the bubble, private equity, venture capital growth. . Everything is down, credit is down. . Leverage, the market is shutting down, the yellow market shutting down. . And the only thing they used to be safe there were governance bonds. . Now the prices correlate that positive equities because when inflation is rising, you lose money and your equity side loses money on your bond side. . Yields have gone from 1 to 4 and the price action downwards on bond has been worse than in equities. . 30 percent losses or any 60, 40, 70, 30 or this part of the portfolio lost money on both hands. . There was nowhere to wait. . Even cash give you a negative real return because of inflation that alternatives they can protect against this tail risk, but they are not the traditional ones. . You’re a man of high conviction. . We know that. . You’ve also got some very smart friends get any pushback to this book that’s convinced you? Absolutely. . Anything makes you rethink how bad things might be and possibly made you think that possibly they could turn out better than you think. . Honestly, everyone was raided an any level as I. . The threats you’re talking about, they’re all too real. . Of course, that may be solution to them. . And I discussed them chapter by chapter in the final chapter about the less dystopian future. . But think of it this way. . I have gray hair. . I grew up in the 60s, 70s in Ian. . In Italy. . At that time, did I ever hear about climate change? A concept that worried about the nuclear ward. . After that, the town within Soviet U.S., there was nothing there worried about destroying most jobs, wearing the ISE winter with a stable democracy. . We didn’t have pandemics. . Last time around was 1918. . We had low debt ratios with law implicit debt because there was no aging population and all unfunded liabilities. . There were no major financial or economic crises. . This is a quantum shift. . There was a period in 1945 and the mid 80s that was something of a stable period global prosperity, welfare, peace and so on today. . These are threats that did not exist. . And those threats are more similar to the periods in 1918 1945 when with World War One, where were to get it, their passion threatened. . War. . Financial crises. . Inflation. . But inflation. . Deflation. . Nazis. . Fascists in Germany. . Italy. . France. . Spain. . And and Japan. . And World War 2. . And then where? The Holocaust? And then where? The Korean War? Yeah. . As as Neil Fergus on on Bloomberg is saying right now in his column this week, he says We’ll be lucky if you repeat the 1970s because it’s more possible we end up lagging, then came forth, meaning is talking about World War 3. . I love Neil, but can we be clear? That wasn’t a column. . That was a book on Bloomberg opinion. . Wasn’t if you read that he said it so long. . How low can you town, Neil? Columns are short. . I love this column because, you know, he’s speaking about it. . He’s speaking about the fact that it’s a meaningful chance that we’ve fallen, flicked and I write about in my own book. . There’s a chapter about the new Cold War between us. . And these are abusing his power. . And I say it could end up into a fatwa. . It’s a significant risk, no doubt. . Fantastic. . As always. . Know everybody’s going to stick with it. . I’ve got to go to go and get a drink after that and get ready for the next show. . OK. . And not be too depressing if you got a favorite quote yet in that book. . No. . You know, the last two lines lost to laugh because you know, why care? You know, I the last two words. . Our names are in it. . No, no. . The last one ISE of knowledge of is your name. . But the last two lines of the book is about the threat. . There we go. . We are Nouriel Roubini, staying here until, in fact. . Keeping you up today with news from around the world with the first word. . I’m Lisa Mateo. . Shares of UBS are rising. . The Swiss bank posted quarterly profit that beat estimates due to surging interest rates and cost control. . That will enable UBS to confirm a plan to return about 5.5 billion to investors this year. . And also deal liquidity in the market because there is a limit to what we can do. . Year today to last Friday, we were at four point six. . We will continue at the same level of speed. . So we should be getting certainly over the 5 billion towards the five and a half. . Commerce is leading the effort to boost automation, slimmed down management ranks and expand. . UBS has presence in US global news 24 hours a day. . I’m Lisa Matteo. . This is Bloomberg. . We likely likely have a recession in the US. . Going to have, I think most likely a recession, we might be in a recession. . And so until you get to that point that you see a change, whether it’s in labor, the demand side, you’re going to see central banks continue to move on that trajectory. . The economist from Goldman Sachs or Chief Executive Officer David Solomon, their point, talking, pontificating on a recession as well. . Of course, he’s got good advice. . Jan Hatzius, which helps as well. . Tom Keene Lisa Abramowicz. . We celebrate and continue with normal Roubini of Roubini Macro Associates, but far more of the new book must read mega threads. . I really can’t say enough about its terminus, its brevity. . It really is timely whether you agree with his caution. . And as he says very clearly, the final chapter of the book is how we get to an optimistic future. . I want to go to the past and I was so pleased that you mentioned on page 37 your colleague Alberto Alix Steel. . I still can’t believe we lost him. . It’s such a young age. . You two looked at the politics of our economic system, Roubini and Albert Alberto, our senior. . I want to bring it forward to where we are now, which is a massive dollar shortage in central banks. . They’ve got a plan, but they’re going to be overrun by a global dollar shortage. . Any. . And frankly, in developing economies is well. . Is there a dollar shortage now in is that the catalyst for central banks to blink is going to be one of the cartels? That is a dollar shortage. . And the reason interest is in United States is particularly dramatic for GM. . Labor terms of trade shock, those that are importing commodities, they have had a rise in interest rates because of what the Fed does and they have their own domestic inflation and the weakening of the currency that increases the real value in local currency over there on that. . So for them, it is a perfect storm. . Some of them have a lot of reserves. . Some of them don’t have reserves. . Some of them receive IMF money. . But that is right now, if it’s thinking of the dollar is implying even further tightening of financial conditions in the rest of the world. . Now, I think that eventually the dollar is going to have to fall very sharply because webre twin fiscal and current account deficits in other advanced economies, you have a fiscal deficit. . But if a current account surplus and now we’re essentially using the dollar as a tool of national security and foreign policy, what a weapon izing it. . We saw sanctions against Russia, against Iran, North Korea, China, where starting, by the way, the CAC war with China, economic water, these what will be sanctioned, the must for dollar weakness. . How do we get there? Forget about this plaza that goes bananas. . Laugh. . It is going to be essentially the Fed, the wimping out. . Once you see a severe recession ending up mean, that means blinking, right? Yeah. . Blinking. . They’re going to blink and wimped out because you’ll have a severe recession wimp. . I have a new financial mega threat out. . Well, either you are a hot hardcore, you are a wimp pencil or a dove in this case, but that’s gonna happen. . And once the Fed is going to essentially prevent an economic and financial crisis or tried to prevent it by essentially stop raising rates, even inflation is too high, then the dollar is going to start off sharply weaken. . That’s going to be the trigger for the raising of the dollar is, of course, the tight monetary policy. . A viewer wrote in and wants to know what you’re doing with your money. . Considering that it seems pretty bleak out there, you know, you just stuff it into a mattress. . No, you don’t stuff it in the mattress because then even cash loses money because of inflation. . There are three solutions to the problems of inflation the basement of fiat currency, political and geopolitical risk and environmental risk. . Solution number one is to have very, very short term treasuries that are just in ingrates and don’t have the price action of long bonds that they’ve had fall in their price. . Secondly, you want to be in two tapes, even if tapes right now have not yet done well because inflation expectations are not yet the young course. . I think you want to go into gold and precious metal again. . Gold has not done very well because you had tight monetary policy, a strong dollar. . But if central banks are going to blink and without gold, there’s going rise in value. . Those are the rising value also because they’re enemies of the U.S. . are subject to sanctions. . China and I was worried that a trillion dollars of reserves in dollar to move to other things. . If you’re in Japan, they can be seen as the only thing that cannot be seized as gold. . Of course, not in the vault in New York or London, but in Beijing or in Moscow and so on. . And finally, appropriate types of real estate that that environmentally resilient because real estate compared to equities in a recession does well because you have more pricing power for rents and so on. . So a combination of these assets provide you in a optimized way a hedge against some of these tendencies. . On the flip side, you’ve always been brilliant on leverage in the system. . Um, credit. . And we’ve heard from one fund manager after another that there is resilience in this corporate credit sector, even with the debt that they have, even with the low coupons that they’re currently paying, that will reset higher. . Do you disagree? Do you think that people are overly sanguine? And about the upcoming credit cycle. . Yeah, right. . Right before the Covid crisis, the Fed was writing reports on financial stability, pointing out the leverage of the corporate sector. . Of course, high yield and fallen angels. . But then during Covid, these folks should have gone bust. . But they were bailed out. . We bought even high yield that you remember commercial paper and everybody under the sun. . So these zombies were bailed out and the excesses of having leverage loans, seizure laws, cough light got even worse and people have got even more in debt that this time around. . The party’s over. . Because the Fed for now will have to raise rates. . Does that sort of situation got to becoming possible? You get the double whammy for those corporates. . You get a piano because income is going to fall because of a recession and you’ll get that problem with that servicing initial rising and therefore then being corporate debt crises, one way avoided during the GFC and during the Covid crisis is snoring. . Now they see a low in leverage or a market are shutting down right now. . I want to get to Chapter 12. . You talk about a more optimistic future, utopian future. . You started by quoting the economist Yogi Berra. . I thought that was very good. . You’ve got a write in there about predictions and Yogi in the future and all that. . How do you get from Yogi Berra to a more optimistic future? Well, the model optimistic future starts. . We’ve essentially technological innovations like, for example, I don’t think we’re gonna be renewable. . Maybe fusion fusion happens. . Then you can have unlimited amount of essentially energy, a cheap cause. . We’ve no greenhouse gas emissions. . We look like we are. . However, only 15 to 20 years away from fusion become a reality. . If it comes faster than we can increase the economic pie, we’re gonna reduce the cost of energy, going to stop greenhouse gas emissions. . We can grow more. . What about our fractured or fractured political system, whether it’s pure Italy in the turn there to the right or what we see in the election year coming up in two weeks, how do we get B on this fractured political system? For now, we’re going to go to a world that is even more divided domestically. . There’s more polarization, there’s lack of partisanship, and it’s happening. . I mean, you have authoritarian regimes in power. . You have Putin in Russia. . You have Erdogan in Turkey. . You have Kozinski in Poland. . You have Orban in Hungary. . You have meloni neatly. . You have these Nazi Swedish Democrats now in Sweden. . You have the Brexit phenomenon. . You have the Trump phenomenon. . And he Latin America used to be only Venezuela, Argentina, populists of the left. . But in the last two year old Chile, Ecuador, they rule Colombia. . He’s got to be either the right or the left. . Turns out a little less. . So that’s where we’re going, unfortunately, is a world that is not liberal democracy. . If you sold the movie rights, you know, not. . DiCaprio, who love playing Roubini nor Roubini, where there’s the book. . Is that Mega Threats? Maybe a documentary. . Yeah, exactly right. . Tony, dangerous trends that imperil our future and how to survive them. . Do we survive the day? Yeah, we did. . Well, it’s still it’s 855 a.m.. . So I think in New York City and we survive the day, we could say that coming up for you to be about. . There was very good, perhaps. . Richard Haass, when he comes on later, we’ll give us a sense of what mentioned by your Roubini. . Exactly. . Exactly. . And who read the book and gave it a huge endorsement. . He’ll be on Bloomberg Television later today. . He is, of course, president of the Council on Foreign Relations. . Good morning. .",
            "url": "https://safenumz.github.io/blog/english/2022/10/30/bloomberg-surveillance.html",
            "relUrl": "/english/2022/10/30/bloomberg-surveillance.html",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "[Recommender System] Recommending What Video to Watch Next: A Multitask Ranking System",
            "content": "Recommending What Video to Watch Next: A Multitask Ranking System . . Contributions . 영상 추천을 위한 End-to-end Ranking system 제안 | 랭킹 문제를 Multi-objective learning 문제로 풀고, 모든 objective에 대해 성능을 향상시키기 위해 Multigate Mixture-of-Experts 구조로 확장 Multi-task Learning | . | Wide &amp; Deep 모델 구조를 적용하고, position bias를 줄임(mitigate) | 실제 서비스에서 영상 추천 시스템을 평가하고 효과를 입증함 | . Model Architecture . . User Engagement Objectives: 유저의 클릭(binary classification)과 시청시간(regression) | User Satisfaction Objectives: Like(binary)와 Rating(regression) | . . 추천 랭킹 순위(positive features)와 device info(other features)를 활용하여 selection bias 정보를 추가 | 사용자는 화면에 보여지는 영상 중 가장 상단에 위치한 영상을 주로 선택하는 경향이 있음 | Position bias를 없애서 더 좋은 성능을 얻을 수 있음 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/10/11/paper-multitask-youtube.html",
            "relUrl": "/paper/2022/10/11/paper-multitask-youtube.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "[Recommender System] Session-based Recommendation with RNN",
            "content": "Session-based Recommendation with RNN . . Abstract . . RNN을 추천시스템에 적용 | Short session-based 상황에서 Matrix Factorization은 정확도가 떨어짐 | Item-to-item 추천 방식을 short session에서 활용하기도 함 | RNN-based 방식을 통해 session-based 추천시스템을 구현할 수 있음 | RNN의 ranking loss를 변경하여 Session-based recommendation task에서 좋은 성능을 얻을 수 있음 | . Introduction . 현재까지 대부분의 session-based 추천은 간단한 방법을 사용할 수 밖에 없었음 User profile을 사용하지 못하고 item간 유사도, co-occurrence 등을 활용 | E-commerce 분야에서 특히 session-based 추천을 적용하기 어려웠음 | . | 주로 사용되는 모델은 factor model과 neighborhood method 임 Factor model은 user profile이 없기 때문에 session-based 추천문제를 풀 수 없음 | Neighborhood method는 유사도와 co-occurrnece 기반이기 때문에 session-based 추천에서 적절히 사용할 수 있음 | . | . RNN의 sequential한 특징 덕분에 session-based 추천에 활용할 수 있음 | Sparse한 sequential 데이터를 모델링하고 추천시스템에 RNN을 적용 | 새로운 ranking loss를 task에 맞게 다시 제안 | 학습할 때, 사용자가 웹사이트에 들어왔을 때 하는 첫번째 클릭 = initial input | 이전 클릭에 따라 사용자는 다음 클릭을 연이어서 진행함 = output | . | 위의 click-stream 데이터셋을 활용하는데, 데이터 사이즈와 scalability가 매우 중요 | . Recommendations with RNNs . . Customizing the GRU Model . . Input: Actual state of the session | Output: item of the thext event in the session | State of the session의 정의 Item of the actual event: one-hot vector | Events in the session: weighted sum of these representations | . | . Session-Parallel Mini-batches . . 기존 RNN batch 방식을 적용할 수 없음 Session 길이가 매우 다름 | 시간 변화에 따라 session이 어떻게 생겨나는지를 학습하는 것이 목적 | . | Session-parallel mini-batchs 방법을 선택 | Session은 모두 독립이며, hidden state를 reset 함 | . Sampling on the output . 매 step 마다 모든 item에 대해서 점수를 계산하는 것은 비효율적임 | 아이템 중 subset만 뽑아서 점수를 계산하는 것이 좋음 | 다음과 같이 sampling할 때는 popularity를 고려해야 함 아이템이 존재하는지 몰랐기 때문에 관심 갖지 않음 | 유명한데도 안봤다면 좋아하지 않을 가능성이 높음 | . | 따라서 mini-batch에서 다른 학습데이터를 negative example로 활용 | 이는, mini-batch에서 다른 학습 데이터에 아이템이 존재할 likelihood는 popularity와 비례함 | . Ranking Loss . Pointwise: 각 아이템에 점수를 매김 | Pairwise: 유저가 선택한 아이템과 그렇지 않은 아이템을 고르고, 유저가 선택한 아이템을 선택하지 않은 아이템보다 더 선호할 확률을 최대화 함 | Listwise: 모든 아이템에 점수와 랭킹을 부여하고 랭킹을 바탕으로 정답과 비교 | 그러나 논문에서는 Pairwise Loss가 가장 성능이 좋다고 함 BPR(Bayesian Personalized Ranking) | TOP1: relative rank of the relevant item | . | . Experiments . Dataset RSC15: e-commerce 사이트의 click-stream 데이터 | YouTube-like OTT: 특정 시간 이상 비디오를 시청한 이벤트 데이터 | . | Evaluation RSC15sms 매 event마다 모든 item에 대해 ranking 측정. 반면 OTT는 상위 30,000개만 ranking 측정 | Recall과 MRR(Mean Reciprocal Rank)을 측정 | . | Baseline POP: Poularity-based | S-POP: Most popular items on current session | Item-KNN | BPR-MF | . | . . Best Parameters for GRU4Rec | . AdaGrad &gt; RMSProp | LSTM, RNN 보다 GRU가 더 우수 | Session이 그렇게 길지 않기 때문에 single layer GRU도 충분 | GRU의 사이즈를 키우는 것은 도움됨 | 세션의 모든 이전 이벤트를 input으로 사용하는 것은 이전 하나만 넣는 것에 비해 성능향상 없음, GRU 역시 long short term memory 이슈가 있기 때문 | . . Baseline method 결과 | . . GRU4Rec 결과 | . Conclusions . Session-based Recommendation with Recurrent Neural Network(GRU)를 제안 | Session-based Recommendation을 위한 다음과 같은 방법을 제안 Session-parallel mini-batches | Mini-batch based output sampling | Ranking Loss function | . | 이 task에 대해 다른 baseline보다 성능이 우수함을 확인 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/10/09/paper-session-based-rnn.html",
            "relUrl": "/paper/2022/10/09/paper-session-based-rnn.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "[Recommender System] Joint Training of Ratings and Reviews With Recurrent Recommender Networks",
            "content": "Joint Training of Ratings and Reviews With Recurrent Recommender Networks . . Abstract . . 평점과 리뷰 데이터를 모두 활용하여 추천시스템을 만듬 | Recurrent 모델 구조를 활용하여 user와 item의 다양한 component를 얻어내고자 함 | IMDB 데이터셋을 활용하여 모델 성능에 대한 실험을 진행 | . Introduction . 현재까지 추천시스템에 대한 연구는 다음과 같은 제한사항이 있음 모델 예측 정확도는 실제 평점을 예측하는 것보다 주로 데이터셋을 나누고 테스트셋에 대한 평가가 이루어짐 | Recurrent Recommender Networks(RRN)은 RNN 모델 구조로 user와 item 변화 등을 파악할 수는 있으나 리뷰의 시간적 변화 등을 제대로 포착하지는 못함 | 리뷰 데이터를 활용한 추천시스템은 자연어처리 최신 기술과 훨씬 뒤떨어져 있음 | 이전 연구에서 Bag-of-words 모델은 제한적으로 리뷰를 이해할 수 있게 됨 | 추천시스템에서 리뷰 데이터를 많이 사용하기 어려운 이유는 기존 텍스트 데이터에 비해 unstructured하고 diverse됐기 때문 | . | . Contributions Joint Generative Model: 리뷰와 평점을 결합한 Joint 모델 구조를 제안 | Nonlinear nonparametric review model: user와 movie의 state dynamics를 학습하면서 시간 변화에 따른 리뷰의 변화를 파악할 수 있음 | Experiments: 시간 흐름과 함께 평점과 리뷰를 함께 모델링해서 IMDB 데이터셋에 대해 좋은 성능을 얻을 수 있었음 | . | . Recurrent Recommender Network . . Left: Time-independent recommendation model | Right: Time-dependent recommendation model | . . Recurrent Recommender Networks | User에 대한 state evolution은 user가 이전에 평점을 준 영화와 관련 있음 | Movie의 파라미터는 이전 시간에서 평가한 사용자와 영화의 인기도에 따라 다름 | . . Dynamic User and Movie State user/item 평점 과거 데이터를 input으로 사용해서 state를 update 함 | 영화를 관람하고 좋아요/싫어요 등으로 인한 User(또는 영화) 상태 변화를 모델링할 수 있음 | . | Rating Emissions 시간에 따라 변하는 $u_{it}$ 또는 $m_{jt}$를 각각 고정된 $u_j$ 또는 $m_j$로 보완할 수 있음 | 이는 사용자의 장기적 선호 또는 영화 장르와 같은 시간에 따라 크게 변하지 않는 요소에 대한 내용을 반영 | $r_{ij} = f(u_{it}, m_{jt}, u_i, m_j) := , &lt; tilde{u_{it}}, tilde{m_{jt}}&gt; + &lt; u_i + m_j &gt; $ | . | Review Text Model Character 단위 LSTM 네트워크를 활용 | 이 네트워크는 평점 모델과 동일한 user/item의 latent 상태를 반영 | Bottleneck 층 $x_{joint,i,j}(=x_{ij})$에서 user/movie의 정적인 정보와 동적인 상태 모두 합치게 됨 | . | . . Training and Prediction . 학습 (Training) Accurate ratings와 Accurate review를 예측하는 것이 목적 | Minimize $L := displaystyle sum_{(i,j) in D_{train}}[( hat{r_{ij}}( theta) - r_{ij})^2 - lambda sum_{k=1}^{n_{ij}}log(Pr(o_{i,j,k}| theta))]$ | $D$는 (i, j) 쌍의 학습데이터, $ theta$는 모든 모델 파라미터, $n_{ij}$는 user i가 movie j에 쓴 리뷰 글자 수, $ lambda$는 accurate rating과 accurate review를 예측하기 위한 가중치로 사용됨 | . | 예측 (Prediction) 예측된 미래 상태에 따라 평점을 예측 | 최근 평점을 input으로 사용하여 상태를 업데이트하고 새롭게 예측된 상태를 통해 평점을 예측 | . | . Experiments . . k-core of IMDB 데이터셋에 대해 평가를 진행한 결과 | RRN이 다른 baseline 모델보다 더 좋은 성능을 나타내고, RRN(rating+text)이 성능을 더욱 향상 시킴 | 이는 평점과 리뷰의 통계적인 내용을 공유하는 것이 latent factor를 모델링하는데 더 많은 정보를 제공한다는 것을 뜻함 | User/item 요소를 사용하거나, 사용하지 않았을 때 text modeling perplexity를 비교했으며, 3.3442에서 3.3362로 향상됨을 알 수 있음 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/10/02/paper-recurrent-recommender.html",
            "relUrl": "/paper/2022/10/02/paper-recurrent-recommender.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "[Recommender System] Training Deep AutoEncoder for Collaborative Filtering",
            "content": ". Abstract . . AutoEncoder는 deep할수록 일반화하는 성능이 더 우수 | Negative 부분을 포함한 non-linear activation fuction은 학습에 매우 중요한 부분 | Dropout과 같은 Regularization을 사용하여 overfitting을 방지할 수 있음 | . Model . . Loss Function $MMSE =$ $ displaystyle{m_i * (r_i -y_j)^2} over displaystyle sum_{i=0}^{i=n}m_i$ | $m_i$는 rating이 0이면 0, 아니면 1 | $y_i$는 predicted rating | . | Dense re-feeding Sparse한 x로 $f(x)$와 loss를 구함 (forward pass) | Gradient와 weight를 update 함 (backward pass) | $f(x)$로 $f(f(x))$를 구함, 둘다 dense 함 (second forward pass) | Gradient와 weight를 다시 update 함 (second backward pass) | . | . Experiment . . 여러 종류의 Activation function에 대한 실험 | . . . Dropout 실험 (Regularization 효과 검증) | . . Re-feeding 효과 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/09/30/paper-deep-autoencoders.html",
            "relUrl": "/paper/2022/09/30/paper-deep-autoencoders.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "[Finance English] Fed Day | Bloomberg Surveillance (2022.09.21)",
            "content": "Fed Day . We’re gonna see tightening through the back end of the year into the middle of next year and then quantitative tightening, QT continues in the background. . It’s unsustainable to have the Fed hiking rates at a very rapid rate doing QT with the economy slowing. . There is some thought that we’re getting to peak hawkishness but that’s not going to move the market. . Now the bigger risk than tail risk aspects are going to be really European energy crisis and how mid-term elections got this year. . Do you think the slowdown could be more significant. . Many economists are expecting this is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . It is Fed decision day Wednesday. . From New York City for our audience worldwide is not going to catch on is it. . Okay. . Good morning. . Good morning. . That’s more syllables. . This is Bloomberg Surveillance live on TV and radio alongside Tom Keene and Lisa Abramowicz. . Some Jonathan Ferro features RTX third of one percent. . We’re looking for another 75 basis point hike later on. . Market’s very dynamic in his decision this afternoon starts drawing a dominant constant here in a moment. . John affects markets says it all but I’m sorry I’m going to push it aside for the real yield. . Everyone out there noting that finally the real yield matters and I’ll get to Japan slides. . So straight off the top. . The 10 year bond Japan’s hasn’t traded for two days for the first time since nineteen ninety nine. . Before we get carried away with the Fed Reserve the bank giving to the S&amp;P tomorrow the bee the gone nowhere it seems. . Well Norah 143 99 yen and maybe it ought to be at a 1 5 to 45 but everybody’s afraid they’re going to act to make yen stronger. . What it really speaks to John is what’s shifted in the last few days. . And I’m sorry this will infect the press conference this afternoon. . It gives way more than the major peers here against dollar. . That’s got to get everyone’s attention at the press conference. . It’s got our attention already in a massive way. . At least the amount of work this Fed has done in such a small amount of time. . Fed funds has gone from the middle of March at about zero to six months later basically at 3 per cent a little bit later on. . What’s that done. . Hike in 75 basis points. . We went from the end of 2015 zero. . Three years later we got to 2.5 per cent of Fed funds. . Just think about how much it took last time over three years over three years to get there and this time about six months to do even more. . So are we there yet. . I mean I think that that’s the question. . People are looking for some kind of answer. . How high are they going to go. . What’s their dot plot. . People like to be looking at that even though inside a cringe and feel like this is a completely moving target and doesn’t give you any real information. . But nonetheless people will be targeting it and it’ll be guiding the markets post a Fed meeting. . But how much can we talk about a 4.5 percent Fed funds rate a four point seventy five percent Fed funds rate as we heard from Bob Michael Barr on your show yesterday with JP Morgan Asset Management. . What was fiery. . Yes he was 4.5 treasuries. . He’s talking up 750 basis point spreads. . And he’s basically saying wait for the recession have patients. . We’re not there yet. . Wait for until then. . Big cash position was interesting to me is he flicked at the divergence within his own team when it comes to credit when it comes to the fact that finally getting Yellen to times real yield point to the fact that you’re getting 8 percent on credit he’s having. . Just wait right to your point John. . It could go up to 12 percent because we have not been in a recession. . And this really shows how difficult this situation is for investors who really haven’t seen this scenario for decades. . He talked about generational divide within the bank. . He said to the people that lived the 1980s on the trading floor had a very different opinion about where this was heading compared to the natural bank coming out of the financial crisis. . John ISE strikes a bit. . Dog is strongly strongly agree that there’s a generational memory here that a lot of people don’t have. . It’s new territory for a huge percent of our viewers and listeners. . Let’s get into this market right now. . Futures up by about a third of 1 per cent on the S&amp;P 500 on the NASDAQ 100 up a tenth of 1 per. . So many messages this morning about Fed day performance over the last 18 months. . This from the Bloomberg team. . The S&amp;P 500 index has risen after eight out of the last 10. . Decisions. . Lisa I think a lot of people are aware of that now. . And I wonder what that means for the Fed day performance today. . Yeah I wonder if people are going to look past this one to perhaps half a month a month after which tends to be quite different considering that people usually take two weeks to really understand what Fed Chair Jay Powell actually says because he usually has come out with hawkish proclamations and people don’t adjust until they realize oh wait they’re serious about it. . So we’re going to get something of the same today at 10:00 a.m. . Here’s what I’m watching. . Bank CEOs including Jamie Dimon of JP Morgan Brian Moynihan of Bank of America as well as others are coming to Capitol Hill to testify before the House Financial Services Committee. . A lot of this will be trying to get some sound bites for different advertisements for different political candidates. . But how much do we get a real assessment of how much inflation is biting into the average consumer. . We are going to hear a lot of questions about inflation. . How much do we get a sense. . Yes of course the politicians are going to ask the banks what can you do about this. . But how much do they give a sense that really there is hurt that is spreading more rapidly than perhaps the real time or lagging data really as capturing today is there too at the U.N. . General Assembly. . I will not call it anger. . I really agree with you touched on and I actually was struggling with how many mistakes we were discussing anger and whether that’s an appropriate denomination just now. . You know I kind of agree. . President Biden is speaking at ten thirty five and he’s meeting with UK Prime Minister Liz Truss at what 15 PM. . What did you call it. . AC It’s going to be frosty. . Yeah it’s going to be. . There’s some I do. . I’m just suggesting it might Dani Burger. . They’re dealing with certain issues are having to deal with Northern Ireland. . And a couple of other issues and of course her plan that she’s unveiling isn’t necessarily ingratiating her with a lot of economists certainly locally in the United Kingdom as well as here in at 2:00 p.m. . there is the FOMC rate decision. . I hear it’s FOMC rate decision on Wednesday followed by a press conference with Jay Powell. . Real yield. . Yes. . But the dollar dynamics are really telling. . And John we’re seeing the dollar strengthen to the most going back to 2002. . Yes. . This is a Europe story with the European situation getting a little bit worse at least in the perception of the IBEX market. . How much does this cause real disruption. . And I’m going to be focused on that. . What a shock. . Lisa thank you. . Appreciate it. . Joining us now just a fantastic lineup today and it will climax with former vice chair Rich Clarity a little bit late so we can kick things off with Dom Constant right now. . They had a macro strategy at Mizzou of America’s Dome. . At the epicenter of your work you’re expecting inflation to fall and fall so much more quickly than people expect. . Don why is that your position. . The main thing on the inflation side is that you have profit margins expanded through Covid and are still very very high which means all of the cost inflation has actually been passed through house prices and then prices have gone up even more because of that expansion. . And you can break it down in the GDP data and show that for 10 percent inflation about 4 percent or so is cost and about 6 percent is due to profits actually expanding. . So that actually means a soft landing is actually still likely because companies can sort of cut back on those profits and still bring down inflation without necessarily having to fire people as rapidly as you might otherwise think. . And what they end up doing is they end up tolerating very weak productivity relatively strong employment. . You can still get lower inflation and it’s a soft landing. . Ironically though it’s just a bit tougher to get inflation down. . You need to work on obviously tightening financial conditions and raising real interest rates where we are now. . If all central banks are exposed by definition what is their best their most efficient best policy. . Given the stochastic nature of up inflation and the sharp disinflation. . What’s their best practice right now. . I mean this is tough. . I mean it’s tough for me is partly in the US for example the housing market obviously a lot of people locked in interest rates you know. . Okay. . They’re not gonna be moving house but you know interest rate impacts on slowing spending when also there wasn’t very much equity extraction in the first place. . Just makes it all very tough. . I think it’ll take time. . I think time is probably what you need. . And the Fed is finally only just really moving through the neutral rate now and getting restrictive. . So I think the message from the Fed is policy rates and real rates. . Yes those are the things they need to get up but they have to keep them there which is kind of the message. . So it’s not really a story about zooming them up aggressively and then reversing. . It’s more story about getting to a steady level of restriction and just being patient and trying to convince people that they’re taking the medicine for their own good and things will at some point normalize. . Just how lonely do you feel in your soft landing car right now. . Very good actually. . I mean it’s soft landing. . Doesn’t mean the Fed doesn’t have to raise rates and doesn’t have to maintain rates. . And the curve could stay very inverted for a while. . What it means is that the employment losses if you like are somewhat capped as inflation comes down. . And so you might well see unemployment rise to 4.5 5 maybe in 5 5 percent. . But in the end inflation really ought to come down quite a lot. . It doesn’t mean you have to take unemployment significantly higher and unravel everything that kind of was achieved in the post Covid period. . Dani Burger. . I was just wondering how much pushback you’re getting and whether you think that a hard landing whatever that means maybe higher unemployment maybe negative GDP growth whether that’s baked into equities and then you should go a long risk because you have a more optimistic view than the rest of the world. . Well I think I mean I think the the hard landing story kind of links to you know very deep losses in real GDP and obviously a very sharp increase in the unemployment rate and a kind of collapse in profits. . So the soft landing still gives you a very weak GDP maybe not as weak. . I mean you could be bumbling along zeros and small negatives. . You just don’t get the big increase in unemployment. . You just get the very bad productivity growth in the back of it and profit margins on the main thing they come in. . But I just look at operating earnings and say look if if in the peak they might have been over 200 they’re going to trend is like 180. . They come down towards trend but a hard landing that come much lower. . So it’s not great news for equities but it’s not a complete disaster. . So that’s the way I’d put it. . And and financial conditions you know are going to stay tight for a while. . So it’s gonna be a bit frustrating. . So there are nuances to the differences between hard and soft. . Thank you for joining us today. . Customer at Mizzou of America’s brand. . I mentioned that Chairman Powers addressing the news conference won’t stand anything like what we just heard in the last five minutes. . Probably not. . He’s going to talk about the need to get it rates higher that they’re not that close. . They’re going to keep going perhaps halfway there perhaps less than halfway there depending on whether J.P. . Morgan Asset Management or perhaps more than halfway. . If you’re taking a look at some of the pushback that they’re going to hard he’s going to have to come out and be hawkish. . Otherwise massive undermining and credibility and bearish on the economy potentially. . Chairman Power talked about the pain talked about the pain in that Jackson Hole speech time. . I went back over it last night. . And in that paragraph those couple of sentences where he talked sentences we talked about pain. . I just wonder if it’s captured by the forecast today because in a previous round of forecasts it wasn’t really it’ll never look at the forecast. . You know John I don’t believe in the dark plot this time. . It matters. . I make an exception for Allison. . Michael McKee will break that down. . It really matters a lot. . It. . Are you going to be looking at the dark like Tom. . No the case will not be looking at the dark. . That doesn’t matter. . I consider a. . Mistake but John the forecast today really matter. . I’m proud of it. . Thank you just for opening the summit. . Can I just tell you you’re so on on UNGA. . It’s disgrace. . And it reminds me of the Blue Swede redo of B.J. . Thomas hooked on a feeling 30 50 years ago where they open up Hugo. . You know what you do when you talk about a complex that accompanies that team mate that band. . I’m not going to go Chuck go. . You really not believe that I’m even a it inside of me. . Yeah. . Is a disgrace. . It’s the United Nations general as well said some. . Thank you. . So what. . I suggest that I take charge. . Good to have you back. . Features up two tents from Haiti. . OK this is pulling back. . Tom Keene Mack in full force keeping you up today with news from around the world with the first word. . I’m Lisa Matteo. . Vladimir Putin declares it a fight to the death with the U.S. . and its allies. . He is calling up three hundred thousand reserve troops in a major escalation of the war in Ukraine who also hinted at the use of nuclear weapons. . He said that the U.S. . and its allies want to destroy Russia. . A Ukrainian counter offensive in the last few weeks has dealt Russian troops their worst defeats since the early months of the conflict. . The Federal Reserve is poised to raise interest rates today to the highest level since 2008 and it’s likely to forecast that there will be further increases for the third straight meeting. . Policymakers are expected to raise rates by 75 basis points. . Fed Chair Jerome Powell is expected to stress the Fed’s resolve to curb inflation. . That’s near a 40 year high. . The Bank of Japan is trying to cap upward pressure on yields before a policy decision later this week. . The central bank announced an unscheduled bond buying operation. . The OJ governor Rico Kuroda has emphasized his determination to maintain rock bottom interest rates even though many other developed nations are increasing them. . British Prime Minister Liz Truss reportedly will cut the rates of stamp duty for home purchases. . That’s according to the Times of London. . The newspaper says stress will announce a measure Friday as part of a budget to stimulate the UK economy. . Global news 24 hours a day on air and on Bloomberg Quicktake. . I’m Lisa Mateo. . This is Bloomberg. . Such votes referendums do not have any legitimacy. . Therefore they don’t change the nature of the conflict. . This will only further worsen the situation. . Therefore we need to provide more support for Ukraine. . Jens Stoltenberg the NATO Secretary-General with Bloomberg’s Annmarie Horden from New York City this morning. . Good morning Tom Keene. . Lisa Abramowicz and Jonathan Ferro counting down to a Fed decision with equity futures just about positive up a quarter of one per cent on the S&amp;P on the Nasdaq up a tenth of 1 percent. . Yields coming back from multi-year highs on a 10 year DAX basis points 353 77 a dollar stronger euro dollar some negative a half of 1 per cent 99 25 as the Russian leader mobilizes even more troops. . Years ago I was on the bottom of a hotel in Chicago with Gloria Laureate Thomas showing the giant of game theory and war. . And one of the six people here simply said the doctor Schelling. . How two wars in nowhere like this morning does this matter with us. . Annmarie Horden here in the game theory of Vladimir Putin you have a wonderful history here based out of London of studying Russia. . You went to Vladivostok on my right down there and a few others long ago. . How do you respond as a journalist to these threats of nuclear war from Mr. . Putin. . Well I think he’s just upping the ante yet once again. . I mean we’ve seen him do this already before this threat of nuclear weapons. . But clearly he is making this move as he sees Ukrainian forces make inroads in Ukraine. . They went from they were able to capture. . I mean we’re talking about the size of Delaware Rhode Island level of Kiev. . Now he is going to have these sham referendums in Donetsk Rouhani. . This is the Donbass region. . He said he always wanted to have and then her side and zapped region that will connect him to Crimea. . And by doing that he is calling up reservists. . And this is how he’s making a play to the Russian people. . And at the same time telling the West I am prepared to take it to that threat level that would make everyone incredibly uncomfortable. . Every single military expert I have spoken to says it’s just a threat. . He would never do anything short term medium term long term nuclear issues. . I’m not an expert on it. . Every single guest says it’s unthinkable. . But we’ve had we’ve been at that spot before haven’t we. . Right. . And he’s done the unthinkable. . Right. . Not everyone also thought including President Lansky that he would even make inroads into Ukraine the way he did. . What I would say is and this is on background from someone who really understands the Russian apparatus had told me that the reason why he does not think Putin would ever go for the button on nuclear weapons is because he is not sure if his military would carry it out. . And at that point his reign would be over. . Anne-Marie a lot of people are talking about the European response the potential United States response to put up the potential for there to be for example jets sent over to Ukraine as a possible response to an escalation by Russia. . How united have people seemed in your discussions at the U.N. . General Assembly Council. . Well at this moment they’re incredibly united. . And what else can you say. . Right. . Putin is having sham referendums. . And then at the same point he’s telling all of the West to be on guard. . Do not call my bluff. . Those were his words last night. . So what you have is the United States the NATO secretary general all of these countries all of shots all of these leaders especially on the bilat having bilat this week alongside the U.N. . General Assembly having an An. . And this gives it almost a new impetus to have that fresh unity that for all of this week going into this meeting the big question was whether or not they’re able to remain united going into the winter. . This almost forces their hand to make sure they can make that case to their own economies and societies. . I’m looking right now at natural gas prices that ticked higher on the back of this news. . You see Brent crude ticking higher on the back of this news. . What’s the case for why that is really happening given that a lot of the bad news has already been accounted for and priced in. . Well just more geopolitical risk if there’s a if there’s a nuclear war on the markets. . Obviously this is something the markets are watching. . They thought potentially at some point there could be peace negotiations especially when you had Ukraine making up some of this territory in a very successful counter-offensive. . So this is just going to add to the geopolitical risk. . Also we need to really unwrap what is going to happen this winter in Europe and what we’re hearing right now. . Overnight Germany has taken unipolar. . They nationalized it. . I spoke to the Qatar foreign minister yesterday. . Schultz will be in Doha on Sunday. . They are still trying to make sure they have enough natural gas to get them through this winter. . And obviously the following in the following winter. . I am just thinking about the president’s address a little bit later this morning. . Do you expect him to address some of these issues. . Hundred. . The president is really going to make his speech about something we’ve heard him talk about before democracy’s verse autocracies and he’s gonna talk about the quote naked aggression. . According to his national security adviser Jake Sullivan briefing reporters yesterday in terms of what Russia is doing in Ukraine. . And here’s something else the president is set to do. . He’s set to talk about the principles that work for all countries and that pushes back against aggressors who seek to threaten course and intimidate their neighbors or to violently attack them. . He’s likely going to call out Russia which is on the Security Council which makes you question can the U.N. . really do anything. . It’s a very good point. . Annmarie Horden here in D.C. . and I thank you for the U.N. . General Assembly. . This tweet just came at some moments ago from Horseshoe laughs on Twitter. . I agree with your detest of the UNGA acronym. . Yeah the doctrine to call mature institutions by their proper name. . So you’re going to stop calling Tom Keene CAC now. . Oh no no. . You can call me NIKKEI John Micklethwait. . You are mature but to say this is a sure thing. . My mother called me T Kirk so I frankly loved it when I hear T.K.. . My mother called me T.K. . My father called me you John. . Team coverage in London. . It was very important that all of us were steeled for what went on with the show drama of the funeral the mourning of a weakened line. . And you know frankly I had to drill deeper into the culture of London. . And so I migrated north Annmarie Horden helping me out here on the move up. . And oh my word it was team coverage from London. . That was your view. . That was my view. . Larry King. . This is a John explained the majesty of Mr Sun coming in and scoring three goals in like 13 minutes. . That’s how you get a player team to fight. . You put them on the bench and then you bring him off the bench. . NIKKEI summit affair. . Even he had something to prove and those first two goals in that hat trick. . So we’re just absolutely awesome. . Can you describe the moment Tom your first English Premier League. . I loved it. . I teared up except every bartender and cigar bar. . I went to their Arsenal fans. . I don’t I don’t understand why a game to go to some 6 2. . Yeah. . Complain about low scoring games and you got 6 2 game is your debut appearance. . Yeah it was fascinating to see. . I saw the VAR in action which I still don’t understand. . I saw penalty shortstop that was taken back and on and on. . But what I really saw were the British people. . It was it was stunning. . John Micklethwait when they sing God Save the King. . It was just like to go on say it. . Best sport in the world. . Best board in the world. . Thank you Tom. . Mr Leavy I really like the actor just absolute after me not the world. . A song Paul Allen. . No I’m on board. . Okay. . Thank you. . Go Spurs. . Thank you Spurs. . Thank you Arsenal. . Now he’s going to start back at the top with the Spurs. . Life from New York City this morning gets more and it gets the price action on this fat decision day features positive by quarter of 1 percent on the S&amp;P. . You’re all familiar with the statistics of the Fed day decision price action blend that breaking them down for you in the last 10 Fed decisions eight of them. . This market has rallied and you’ve seen some big moves so far this year. . I got to push back against that view this time around. . The NASDAQ positive by just a tenth of 1 percent in the bond market massive changes at the front end and a yield curve on Taylor Riggs right now. . 395 25 came very very close to 4 percent in yesterday’s session. . We started the year at about 76 basis points twelve months ago. . The 2 year was at 21 basis points. . We even started the month at about 349. . We just keep adding more and more weight to the front end to the curve. . It’s been the theme so far of the year the 10 year old side. . I think this is the eighth consecutive week the yields have been climbing 350 377 on a 10 year. . Yields come in just a couple of basis points. . It hasn’t just been the United States though. . Well let’s take a global snapshot. . What’s happened to the global bond market and look at core government bonds exclusively. . We can take a look at a 10 year Treasury bond 300 basis points year to date a 10 year bond. . Remember on a 10 year bond we started the year in negative territory. . We’re now plus 200 basis points to about 188. . And some you’ll notice something that sticks out like a bit of a sore thumb for the. . Okay. . Oh this is barely a 10 year change ATP because they’ve kept that thing capped Tom at around 25 for radio right now. . This is three point five. . Germany one point nine. . Japan zero point three. . And John it really speaks to the impossibility Japan is in its state. . Can they keep setting this out. . Can I keep saying this out as the pressure continues to build and we’ve been exploring this in the last week or so. . What would happen if the BMJ abandoned that yield curve control story to the rest of that bond market bought. . It’s just it’s just it’s got to be played out through its foreign exchange and you’re seeing it. . And what has happened here folks in the last two or three days is again yen has not gone 144 45 right now. . Tougher Yvonne Man 143 90 stabilizing in the 1 40s. . Tom is probably not what they are. . How can fall through the rest of this year. . Very good. . We will continue here right now and with the Federal Reserve coverage today and look for us this afternoon we’re really ready for this was Michael McKee of course in the press conference. . Peter Hooper joins us now to say he’s global head of economic research at Deutsche Bank. . Barely describes his contribution to economics and how he and David focus land led in research in this crisis. . I’m going to state. . I may be wrong on this. . They discuss recession first. . Dr. . Hooper thank you so much for joining us today. . I want to go to the Deutsche Bank reach and particularly the work of Michael Spencer in Tokyo and the Pacific Rim that you people have done for decades and decades. . And I just wonder simply when I look at E.M. . currency give way on this day of the Federal Reserve for Chairman Powell is he going to be overcome by events. . Chairman Powell is got one mission that to do with inflation certainly is putting pressure on other countries but strong dollar is adding to inflation pressures just about anywhere you look at this point. . But that’s not going to deflect. . Chair Powell on his mission. . We’re going to hear a hawkish message today. . Probably going to drive the dollar further. . Is it a hawkish message towards neutrality or are we at an even general equilibrium. . And today do we become restrictive. . Now 75 basis points today is not going to put us in restricted territory given where inflation inflation is. . Given how tight the labor market is. . My my colleague Matt was there. . He did a great piece last week indicating why we need to get close to 5 percent. . You have to add not just the inflation picture but but the tightness of the labor market that Howard has been talking about as being central to this inflation problem. . I mean labor market we’ve seen the NAIRU running above 5 percent in the five and minutes given given all the various indicators you look at the tightness of the labor market we’re just way beyond the norm on a lot of different metrics not least of which is where look where wage wage inflation is now. . Peter that call from Matt last week we’ll read that piece close to 5 percent on Fed funds. . Let’s stick into that. . The pushback that I got when I put out that research on behalf of you guys and a lot of people sent messages to Lisa to my staff to Tom and basically said how on earth can we live with four and half nevermind five. . What does the economy look like with five percent Fed funds. . The economy is going into recession here. . We’re not expecting it tells the middle of next year perhaps a little sooner but that’s part of the way you’re going to have to ease up on this labor market in order to ease up the labor market. . You can’t bring down vacancies by themselves. . Historically it’s never happened. . You’re going to have to see the unemployment rate go up. . It’s going to have to get above 5 percent in order to deal with inflation with the inflation problem we have here. . So you know financial conditions have not been helping out until until we get to the reversal in the CPI for the August numbers. . But we have further to go. . And the Fed is going to have to push harder. . It’s going to have to get up into a restrictive range which we think is certainly a 4 percent plus for right now. . Peter it sounds like Deutsche Bank has been getting more bearish generally on the global economy as well as how far central banks will have to go. . Earlier this morning at your bank put out an estimate for European GDP revising it downward to negative two point two percent for next year from zero point three percent of a decline basically a deeper recession in Europe. . Have you had the same kind of revision to the U.S. . view based on how far the Fed has to go to stymie inflation from here. . Well so in Europe the European hit hit not just by the inflation problem and tightening by the ECB but obviously the cut off of Nord Stream wine has had a major impact. . We revised our growth rate for Germany down from 1 minus 1 percent to minus 4 percent next year. . Mark Wall our chief economist for Europe as you say put out a very nice piece this morning indicating the spillover from Germany and the rest of Europe being somewhat affected by the gas cutoff is enough to certainly put us in recession. . Now that that is a modest negative for the U.S. . but it’s certainly not enough to put Powell off course at this point that the inflation problem is going to be there. . It’s going to continue in this tight labor market continues until we see some some real slowdown in the U.S.. . Peter I guess I’m trying to gauge the depth of the recession that you see in the United States. . You do say a 5 percent in a real neutral interest rate. . You also are looking at unemployment 4 above 5 percent. . You’ve a sense of the duration not only of how long rates will stay there but also of how long we will be in a negative growth higher unemployment kind of environment. . Well we expect growth has slowed noticeably in the first half next year. . I mean part of what’s happening here is we’ve seen this rotation of spending from goods where production was ginned up substantially. . Now that’s shifting over to services. . Inventories are running up. . We’re going to have to see some inventory adjustment first half next year which will certainly begin to slow things down. . Then we think that this war chest of savings that the households is supporting the households will begin to run down enough for consumer spending to begin to begin to slow by the middle of next year. . We’re anticipating negative growth for the second half next year minus three and a half percent at an annual rate in the third quarter. . Another negative not quite as deep in the fourth quarter. . And then beginning to come back in 24. . So it’s a relatively moderate relatively brief recession. . The Fed begins to reverse course on its rates because it because that slowdown is going to help bring inflation down and allow it to reverse course. . Something that’s not in its current forecast at this point. . Peter is the recession spread evenly across America. . Does a certain part of the public face the Deutsche Bank recession call and others can escape its grasp. . Well it’s is always a way if you will. . I mean there are a wide wide range of income distribution and certainly lower income households. . We’re gonna be hit harder. . We’ll be hit more on the job front. . That’s the unfortunate part of this. . But I think given the recession is going to be consumer driven that will tend to be more broadly based than something that initially a big housing crunch. . But yes this will be a broad based recession. . It’s not going to hit all some big kills in that paid a fantastic way to work the rate work at Deutsche Bank over the last few weeks in fact for most of this year. . Peter Hooper the Deutsche Bank Securities Tom that call on narrowband somewhere close to stunning 5 per cent. . Right. . I wonder where the Fed is on that and what it means for their unemployment projections that ultimately need to factor in higher unemployment get inflation lower if he believes it’s close to 5. . That’s a lot of work to be done. . Not then they reject of another time and place. . And I argue and all you need to know is the first two letters are not accelerating. . It’s the quiet point is calculated with some unobservable data points. . It’s something people enjoy flunking on economic exams. . But it’s the quiet point you have to get to to get the slowdown done. . And to have it above 5 percent is something a huge body of people have never experience. . I wonder whether at least they’re forecasting because you ran the Fed’s got unemployment three point seven twenty three three point nine. . They’re going to 24 a four point one. . They don’t have the luxury of young you Lazare of UCLA and Deutsche Bank. . They’ve got a spin a message if you will. . This is true of every single institution. . Folks have got to spin a message that’s appropriate and gradual with Deutsche Bank. . There’s a suddenness to it. . And those forecasts are set to be updated later a little bit later this afternoon. . I want to see what they are. . I especially want to understand how high they expect to have to go because of the resilience in the economy. . And every different analyst who I’ve spoken to has said that right now this economy has been able to withstand higher rates better than so many people had expected because companies had termed out debt because individuals hadn’t taken on as much debt because people had locked in fixed rate mortgages. . All of these things that make it a less easy transmission of monetary policy forcing the Fed to go further. . How are they going to recognize that and how that’s going to put forced their hand with a lag effect that we can’t really see right now. . They are the two major questions right now. . How much higher rates need to be to bring down growth and how much slower growth needs to be to break down inflation. . That’s going to be a key feature in a conversation around the Federal Reserve a little bit later and a key feature of our conversation with the former vice chair Richard Florida. . Joining us straight after the Fed decision. . And then he’s gonna stick around for the news conference which I just think is incredibly cool. . It’s gonna catch up with us after the news conference with Chairman Pound and break what he thinks down ISE a gallon on some. . It’s going to be fast. . And what an honor to have him here. . He’s the academic from Columbia with massive monetary shock. . First question for me John has to know. . Are they making it up as they go. . You will get the first question of two tenths of one percent on the S&amp;P. . Live from New York this is pulling back. . Keeping you up to date with news from around the world with the first word. . I’m Lisa Matteo. . Vladimir Putin is threatening to escalate the war in Ukraine even further. . Putin is calling up hundred thousand reserve troops and vowed to use all means necessary to defend Russian territory. . He also hinted at the use of nuclear weapons. . Meanwhile the Kremlin is moving swiftly to annex parts of Ukraine occupied by Russian forces. . The feds ready today to hike again and to send a hawkish message for the third meeting in a row. . Policymakers are expected to raise interest rates by 75 basis points. . That would bring rates to the highest levels since 2008. . Chair Jerome Powell is likely to hammer home that he believes further rate hikes are needed to tame inflation. . European Central Bank President Christine Legarde says borrowing costs will rise more in the months ahead. . Speaking in Frankfurt Lagarde said the ECB has taken major steps to tackle inflation and she expects to raise interest rates further over the next several meetings. . The special master in the Donald Trump documents case is skeptical of some of the former president’s arguments. . Federal Judge Raymond Dearie pushed back on the Trump lawyers position that they didn’t need to detail any alleged declassification of highly sensitive records. . He said the Justice Department had presented evidence that several of the documents were classified. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries. . I’m Lisa Mateo. . This is Bloomberg. . We saw such high increases due to speculation over the geopolitical situation and some of the other issues that we’re now seeing a kind of backing off of that. . I mean I think one hundred and twenty barrels 120 dollars a barrel was too high for the supply demand situation. . And so we’re seeing that back up. . But into catch up with Anna Edwards senior fellow at the Atlantic Council a lot from New York this is Bloomberg counting it down to a Fed decision with equity futures just about positive up a third of one per cent call it that quarter of 1 per cent on S&amp;P up a tenth of 1 per cent on the NASDAQ 100 yields lower by a couple of basis points 353 77 euro weaker euro dollar negative a half of 1 percent to 99 26. . I can tell you the Swedish currency is getting absolutely battered again for a fifth straight session. . Weaker against the U.S. . dollar. . Might sound leftfield but just give me a second. . Some the BRICS bank count yesterday with a 100 basis point blank and we’re still getting currency weakness. . City Tanaka’s of City published just moments ago and he said a continuation of the sell off in risk assets due to the eurozone. . Strong economic headwinds and the Fed’s tightening path will maintain significant pressure on both the Norwegian currency and the Swedish currency as well against the dollar. . And many of these central banks Tom they share the same concern at the moment. . It’s going to be the bank having this turn tomorrow hiking into a slowdown and struggling to get any traction in the affects market. . You have to look the paper up Joan. . It’s a good 25 years old a brilliant paper from I believe the Peterson Institute. . And John it’s about watching 30 and 40 currency pairs at once. . That’s a little hard to do. . But there is a value to looking at Nike Starkey or a dollar Swede and the rest. . I mean you’ve got to look at all these pairs dynamically. . Do you have a guesstimate of where we’re going. . There’s a similar experience at the moment some against the U.S. . dollar that’s for sure. . And sending the Federal Reserve is not their problem. . Yes everybody else. . I just wondered some for how much longer that might be the case. . For those of you unfamiliar DAX. . Why is the core an ancient index. . Bloomberg Dollar Index is better math one ten point five seven and D X Y is a shock and particularly a shock to the nations of commodities. . CONOR Hick joins us now head of research at EDF Man in his just brilliant on the soft something we don’t talk enough about. . CONOR the impact of a strong dollar on commodity nations commodity. . E.M. . how large is it. . Huge huge I mean if you think about only six months ago when the war began in Ukraine. . Everything went up whether it was energy grains. . They all went up. . And that was because it’s highly inflationary then inflation may start in the US mid to high end U.S. . dollar. . That U.S. . dollar then caused that whole commodity elevation to just come collapsing down. . And now we’re back to pre-war levels. . So you had a dollar impact on commodities a very intact and reinvest and invest correlations as intact as ever. . My training used to always pivot to Indonesia and Brazil on dollar strength. . Are they of interest. . Well yes Indonesia will save palm oil massive producer oil exporter and coal is low until Brazil. . I mean take it from a soft commodities. . You cannot underestimate the impact of the Brazilian drought on all of these commodities. . So what we’re seeing today is the strong dollar is causing to be around to weaken. . That in turn is putting pressure on things like coffee sugar soy beans all the major Brazilian exports iron ore even. . But it’s not just that. . I mean I think today commodities are reacting. . They were positive initially because of the inflation story. . But now they’re coming off because the inflation story has moved to a recessionary story. . And obviously that’s not great for commodities. . Worse for metals and energy arguably less so for soft. . But it still it still isn’t. . It does have a dampening effect. . Sure. . The focus so very much on the energy story especially for Europe as they face off with a potentially catastrophic winter depending on the meteorologists reports that we get. . I’m wondering from your perspective if the answer is what Germany is now doing which is to nationalize energy companies does that help support things any more concrete way or does it just basically put a Band-Aid over the actual bill at some of these countries are facing. . Yes. . So I think in my opinion it’s a Band-Aid because the reality is that none of this is providing additional supply. . So we have a supply demand mismatch right now and the energy crisis. . So we either take our demand. . So you have to ration demand. . And I can’t see Germany effectively rationing the demand. . And suddenly in the UK they’re actually subsidizing the demand. . That doesn’t even talk about some things on the supply side. . I’m thinking I don’t see them investing or allowing more natural gas to come out. . So I don’t see this as fundamentally altering the situation too much. . And I think this this can go on for a while with us. . When you say this can go on for a while there is a question of how much has already been priced in in terms of what is to come for this winter. . And then there is a question as John’s highlighted many times of the duration of how long how many years we face off with this lack of supply in the face of demand. . What’s your view on both of those. . So with time you know humans are very negative and markets are adaptive. . So with time what’s going to happen is as long as prices continue to provide this pain pressure you will stop seeking adaptation. . So you will move towards alternatives when your body will become more efficient. . So that’s definitely what will happen with time overnight. . You’re not gonna get that. . So I think it’s fake to me. . What you are saying is we need that pain pressure to continue for a little bit. . You want more turf to materialize these kind of actions. . Only then when we start seeing a proper diversification both in terms of demand and also supply so we can stop relying less on natural gas relying less on Russia and even rely less on Ellen. . GM understanding that the LNG carriers on the streets are going through the roof. . They’re struggling to get hold of ships. . So it’s a multitude of problems are not going to be fixed overnight. . This is going to take a while kind of hack that of 80 and F man. . Thank you CONOR as always. . Several winces maybe Lisa perhaps even longer. . And for many officials in Europe I think that’s the reality they’ve got to confront. . The problem is is that each nation has its own energy situation its own energy crisis. . It’s completely different. . So how do they come up with a cohesive plan especially when you have such differing political interests heading into this winter. . It’s really complicated. . You’re seeing that expressed to the euro. . But a homebase for me I know have birth funding UK situation. . Fascinating. . Time to see what this new prime minister’s got to take in the UK and this new chancellor as well. . That punish some very interesting things. . A lot of people are worried about housing prices at the moment and they’re now looking at cutting a transaction tax when you buy a house term. . So let’s see what happens there. . They seem little and there’s sort of sprinkling them out of course off the shock of the death of the queen and a new king and a new government as well. . But John a pregnant question here. . Does she have the support of her party to shift the support of the country till. . That’s the big question. . I think she’s got the support of her party right now and the party membership. . If that went to a general election would she get the mandate to do the kind of things that this party is going to do to let the coming months. . Let’s frame it as we did with Peter Hooper in decline. . This is not year to date but very close. . I took it from the peak year in January or February. . ADX way down a good amount. . JP Morgan Emerging Market Index down is well they’re done 8 or 9 percent. . And then John there’s the emerging market of the United Kingdom down I believe 17 percent. . Having a very difficult time yet today. . That’s for sure. . Futures positive let’s call it a quarter of 1 per cent on the S&amp;P on the NASDAQ up a tenth of 1 percent. . A Federal Reserve decision just around the corner. . And they’re set to hike interest rates again by 75 basis points. . From New York. . This is pulling back. . We’re going to see tightening through the back end of the year into the middle of next year and then quantitative tightening Kuti continues in the background. . It’s unsustainable to have the Fed hiking rates at a very rapid rate. . We’re doing duty with the economy slowing. . There is some thought that we’re getting to peak hawkishness but that’s not going to move the market. . Now the bigger risk than tail risk aspects are going to be really European energy crisis and how mid-term elections does this year. . Do you think the slowdown could be more significant. . Many economists are expecting this is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . One more big rate hike just around a corner perhaps even more than that. . A life from New York City for our audience worldwide. . Good morning. . Good morning. . This is Bloomberg Surveillance on TV and radio alongside Tom Keene and Lisa Abramowicz. . Jonathan Ferro features positive a quarter of 1 per cent on the S&amp;P T.K.. . The consensus view another 75. . Coming right up. . There it is. . And then what will happen after that. . And as Peter Hooper of Deutsche Bank told us this is just neutrality. . This is not a restrictive Wednesday. . You may get that in the last two meetings of the year. . But I think John all agree that even with this move today we’re nowhere near finished and then we get the forecast. . Will they forecast the risk of a hard landing in the U.S. . economy. . No they will forecast in a measured gradual way. . They’re a public institution and they’re number one they’ll never say it. . But the number one goal is to control the message and not instill fear. . They’re not going to go to the fear that we see from so many houses. . Elisa the chairman talked about that pain in his Jackson Hole speech. . He talked about pain that might have to develop to get inflation back down. . Will they capture some of that pain in that summary of economic projections. . That’s going to be something people are looking for for the credibility of the Federal Reserve not just for the United States. . I’m curious if they reflect the pain being felt around the world how they’re gauging the international influence on the United States when they start to care about the dollar. . They’re probably not going to talk about that but that has to be a niggling point on the outskirts of Jay Palace mind considering some of the pushback they’ve gotten for the likes the World Bank and the IMF. . Bank of England tomorrow Swiss National Bank. . Tomorrow they have a convening as well. . At the moment Lisa tough spots for them. . Those three and maybe more so for departure. . How about this for signaling they actually engaged in an unannounced bond purchasing program overnight to support the yield peg where it is. . You haven’t a trading in Japanese bonds for two days. . The first time has happened going back to 1999. . It is not a market. . They are doubling down. . And it’s sort of surprising to me the yen hasn’t given away to new weakness bottoms. . Right. . We were talking about this earlier. . He said people are scared to go against the Bank of Japan to go against Japan and Japanese resolve to keep things where they are and potentially up and everything if they change that. . But right now wow what an outlier and what a ticking time bomb that really is. . Staff to date him to two days to the Japanese 10 year government. . Bond has not traded for two days to translate this for non sophisticates. . They are doing a theory. . It’s no different than China’s doing with Covid. . They’ve got a theory but there’s no published background. . Richard Clare and John and all of the studies in Illinois under his excellence at Columbia never has read a paper that shows that theory can work on market central planning. . Let’s see how it works out. . Futures positive a quarter of 1 per cent on the S&amp;P. . Good morning. . She will Carnegie dance with fat decision. . With futures on the Nasdaq up by almost a tenth of 1 per cent yield to lower by couple of basis points to 353 97. . That has not been the trend. . It’s been your attire your attire your time on a two year lease. . So we came very close to 4 percent. . People really expecting a lot from this meeting but also beyond. . And that is the reason why the dot plot might matter to some people why it could move markets significantly at a time when people want to understand is this Federal Reserve moving close to the Deutsche Bank projection a potentially close to 5 percent neutral rates or end rates for the Federal Reserve. . All right. . 10:00 a.m. . bank CEOs including Jamie Diamond of J.P. . Morgan and Brian Moynihan of Bank of America are heading to the hill there and be testifying before the House Financial Services Committee. . A lot of theater. . Curious to hear what they say about inflation how it’s affecting consumers consumer lending. . Are they getting more restrictive in how often they are lending considering the fact that potentially people are going to have a harder time paying it back in the face of higher prices for basic day to day costs. . Today is day two at the U.N. . General Assembly. . Traffic is sufficiently. . It completely clogged up in New York City. . President Biden will be speaking at ten thirty a.m. . and then he is going to be meeting with UK Prime Minister Liz Truss at 115 PM. . Here is to hear how that meeting goes. . Not just because of some of the tensions with respect to Northern Ireland as well as U.S. . Britain. . British trade policies but also this pushback about some of her fiscal policies. . Does he address what she’s doing. . Is there some sort of coherence with the U.S. . support of the United Kingdom. . Heading into also a potentially difficult winter at 2:00 p.m. . this is the main event the FOMC rate decision followed by a press conference by Fed Chair Jay Powell. . A lot of questions. . You were talking about John whether he’s going to acknowledge some of the weakness that may be required according to some people if we get inflation down or for getting inflation down. . I’m watching the dollar. . We’re looking at a dollar that is the strongest going back to 2002. . Yes this is a euro story. . Yes this is a British story. . But this is also very much a Federal Reserve story. . When do they start to care about this is not a positive in reducing imported inflation but a negative John. . Because what it does to the rest of the world will eventually rebound in some form on U.S. . corporations as well as just generally the U.S. . economy. . I’ve been enjoying the steady traffic report when you continue that. . Do you want that. . Sure. . I mean if we really keep going down the track. . Right. . Yeah. . You said you have you know definitely barriers on the road. . There are barriers. . Dump trucks tumble. . John I got out. . I got out. . But when you let me out eight blocks away from our office here in midtown and the police stopped me. . And of course I had a tantrum. . I said do you know where I’m at. . No. . Did. . They put me in a police car drove me out to the George Washington Bridge who said Walk. . See you later. . See. . Do you know who you know who I am. . That’s such a t CAC doesn’t burn up by the George Washington Bridge. . It’s beautiful. . On the way to New Jersey. . Tom Mackenzie. . Yeah it’s about to walk back to our office here as a if you look at Englewood Cliffs. . I did. . I was like over there. . OK. . I’d like to talk about the Dow alone. . OK. . All right. . Oh my God. . You know they to what they do. . Yeah I’ve heard they talk about it a lot on that side of the bridge. . I’ve got no idea why futures are up on the S&amp;P. . But by T 10 measures up. . I mean Larry Hines joins us now global CIO for Street State Street Global Advisors. . Larry 75 expected today. . That’s what you’re looking for. . Can you guide us to November. . Do you expect to get that done. . It’s today. . Well it’s going to be hard to define what November brings because the Fed continues to be really focused on the emerging data. . So I think that they’re going to keep their cards close to their best. . We think that 75 today is almost a certainty. . And we actually do think that 50 is more likely for the balance of the year. . But the problem is that as long as they keep seeing this intractable inflation pressure for the data they will be compelled to act more decisively. . Larry where do I hide. . I mean stays true to such a fabulous institution on sector analysis factor analysis diversifying into subsets and what not to do. . Where do I hide if I’m worried about what not to do right here. . Well the best place is cash and for the first time in many many years. . Cash is actually giving you a bit of a return. . So in our globally diversified portfolios we’ve actually taken that cash position to about 10 percent. . And interestingly we’re not just taking it out of the equities we’re actually taking out of bonds as well. . So we’re a bit more balanced in where we’re underweight. . Laurie can we develop that a little bit more. . Which bonds are you talking about. . Duration 10 year 30 year Treasury yields. . Because you see those yields even going higher from here. . Or are you talking corporate credit in the face of some sort of downturn. . Yeah actually much more focused on corporate credit and being a bit underweight there. . We’re sort of neutral duration curiously enough but it’s a bit more barbell. . So cash plus long duration because we actually are concerned that we will have a much more aggressive fed and that will create a much more contractionary than recessionary environment. . That again is not our core call but work conditions that we have a little bit of optionality if we’re a little bit off on that Larry away from your room. . But let me go there to the income statement. . Are there dynamics or control blocks down the income statement earnings or free cash flow. . Or is this really about a diminished revenue story. . Well at this point in time we don’t feel like corporations are necessarily under pressure. . They’ve got relatively large caches of cash. . They actually are navigating the inflationary environment pretty well in terms of being able to pass on some increases to consumers being able to reconfigure their operating models and things of that nature. . So we’re in oh by the way in the high yield indices especially we could actually be on the verge of some upgrades because we had a lot of downgrades as we headed Jacobus. . So they’re actually the fundamentals there are not particularly prickly. . The problem is until we know what terminal rates are on the Fed Plaza it’s hard to know how to discount those future cash flows. . It’s the equity market. . Until then just totally unbearable. . The reason I ask this Larry is it just seems to me every time we rally get a host of people to say this is not the Fed not what the Fed wants. . They want financial conditions to remain tie in with cap to the Fed purchase. . Now a Fed Co. . Now when does that change. . Well curiously not but I was a little surprised to see this as well. . We’ve actually seen net inflows into equities. . So you still have had people dipping in buying the dips. . Perhaps it’s some of it’s rebalancing because of course equities and bonds have been down but actually equities have been down more. . But it’s also a little bit of this fear of missing out again because what we all know is that at some point markets become a leading indicators of future economic growth. . And so if we do have a recession or a contraction at some point we get past that. . So it’s still a very unsettled market in the range of outcomes is quite large. . Larry I know that a stay straight. . Larry one of the best. . Thanks for being with us. . Thank you very much. . At least that’s the problem a lot of people have with this market. . Remember David Kostin of Goldman Sachs coming into the summer who’s basically just said we’ll be kept it through the summer. . The Fed’s told you the playbook. . They want tight financial conditions. . That means an equity market account running too much. . I hear that Neel Kashkari has been watching that very closely. . Nina basically set the climate to outlast didn’t he. . On the did not. . Yes I was in town. . And Tracy Alloway basically said look we actually would be happy to see stocks sell off a little bit more. . Well we get the same kind of message from Jay Powell today. . Does he comment on financial conditions accurately reflecting or perhaps not reflecting as much. . What they’re hoping to achieve. . Could I just suggest as a fossil that if you get rates back to where they are and has not seen Taleb said brilliantly in the last number of days you know what we’ve been living is physics with our gravity and we’re finally back to gravity some form of risk free rate. . John can I suggest life goes on like you know rates go up then. . Pete spin in trust. . I’m with you. . We talked about adapting and adjusting yesterday. . Did you just because you went hey so we thought we’d bring it up. . You know there were so many world leaders lined up at Gatwick I couldn’t get down with it. . And I just think yeah got to get going. . I’m not a big fan of Gatwick. . I’m not either. . The drive was Amanda Lang Gatwick. . I had three cars with me. . It never had fits. . It took a month to Kate’s account with the surveillance. . Wondered who then goes up. . Sun goes down. . Companies adapt. . Wilson’s going to talk about that. . Yes sir. . It’s going to start in a justice sketch in a May delay. . The interview is going to join us in 50 minutes now from New York. . This is pulling back. . Keeping you up to date with news from around the world with the first word. . I’m Lisa Matteo. . Vladimir Putin declares it a fight to the death with the U.S. . and its allies. . He is calling up 300 thousand reserve troops in a major escalation of the war in Ukraine who also hinted at the use of nuclear weapons. . He said that the U.S. . and its allies want to destroy Russia. . A Ukrainian counter offensive in the last few weeks has dealt Russian troops their worst defeat since the early months of the conflict. . The Federal Reserve is poised to raise interest rates today to the highest level since 2008 and it’s likely to forecast that there will be another increase. . Now for the third straight meeting policymakers are expected to raise rates by 75 basis points. . Fed Chair Jerome Powell is expected to stress the Fed’s resolve to curb inflation. . That’s near a 40 year high. . The Bank of Japan is trying to cap upward pressure on yields before policy decision later this week. . The central bank announced an unscheduled bond buying operation DOJ. . Governor how did he go. . Kuroda has emphasized his determination to maintain rock bottom interest rates even though many other developed nations are increasing them. . It’s the latest foreign takeover of a British tech company. . France’s Schneider Electric has agreed to buy out minority shareholders in industrial software company Aviva Group. . It’s a deal that values VEBA at ten point eight billion dollars. . Schneider already owns 59 percent of the VEBA global news 24 hours a day on air and on Bloomberg Quicktake powered by more than 20 700 journalists and analysts and more than 120 countries. . I’m Lisa Matteo. . This is Bloomberg. . Howard policy regarding China on Taiwan has not changed. . We adhere to the one China policy. . Having said that we are concerned about China’s stated ambitions course of behavior. . There is no reason to threaten Taiwan in the way that China does. . Fantastic conversation with Jens Stoltenberg the NATO secretary general and Olympics Amari Hotel and life from New York City on this fact decision day with some key and Lisa Abramowicz some Jonathan Ferro features are positive. . Two tenths of one percent on the S&amp;P on the Nasdaq basically unchanged. . Now yields come down about 2 basis points 354 36 got a stronger much much stronger in G10 euro dollar negative five or six tenths of one per percent just about holding on to 99 not some euro dollar. . Ninety nine sixteen euro weakness this morning off the back of some strong words from the Russian leader. . Yeah your weakness. . Really critical. . Lisa pick this up. . I missed it to be blunt. . Point 9 9 1 6. . Anything under point nine nines a huge deal and we are there. . We’ll continue to monitor that again. . The vic’s 27 showing 24 to 27 in the last number of days. . Tension. . We will continue now on Russia and on their leader. . Annmarie Horden joins us here as we just simply rip up the script. . And I do so. . Anne-Marie in February announcing my Book of the year which was Angela Stent Putin’s World. . With all that’s going on here how would you judge how what I’m gonna to call the hard right of Russia or the center of Russia or what I’d call the liberal left of Russia. . How do they adapt to the comments of the last 24 hours. . I mean they get in line. . What happens when you don’t. . Yes Russia does have domestic politics. . You see that. . Whether it’s the Communist Party in the Duma which John and Lisa and I spoke about yesterday they’re the ones that came up in February and said we should recognize as separate entities Luhansk and Donetsk. . And then Putin went in announces a special military operation. . It was also the head of the Communist Party that said we should now be calling this a war. . After that counteroffensive that may have led Putin to want to actually make these moves because now he could put reservists on the ground in these territories if he sells to the Russian people that the these are legal Russian territory as the reservists. . I mean maybe it’s an unfair question to you but in your reporting well they also have contractors. . I know what a reservist is in Tulsa Oklahoma. . What’s a reservist in the euro mountains. . It’s individuals that joined the Russian military that are not being used right now. . You have to remember that Russia is also using a lot of contractors in this war and they’re not going for a full fledged conscription but they are calling up 300000 mature. . Count them as reserves. . This is putting the backs up of Russian everyday Russian individuals domestically. . This is going to be a bit more challenging for Putin. . Emery is there any coincidence or any overlap with the fact that Xi Jinping just met with Vladimir Putin and now this move of possibly calling up some of its reservists. . It’s the first thing email I woke up to this morning from a viewer who said Putin making this move after he just met with Xi Jinping. . And remember it was earlier this year that these two leaders said that their friendship has quote unquote no limits. . What do we have also this morning. . You have a seminar a military seminar. . Xi Jinping is telling that seminar to focus on preparing for war. . You also have Kyodo newspaper saying that at the party Congress next month which is this is an incredibly critical for a Xi Jinping that he is going to talk about his plan for reunification with Taiwan. . Now potentially these two items were discussed amongst each other because Putin doesn’t have a lot of friends right now. . He has Beijing. . He’s getting some ammunition from North Korea and the Iranians. . That’s really yet when it comes to pure potential friends at this moment. . What’s the U.S. . doing in response to Xi Jinping I mean this is coming at a pretty fraught moment on multiple levels. . Well Jake Sullivan the president’s national security adviser yesterday said that the U.S. . has one. . China policy has not changed. . But we heard for the fourth time from the president yet again to go a little bit more off script when it comes to Taiwan. . And that 60 Minutes interview really astonishing what he said not so much that they would just send warplanes and military. . He was asked unlike Ukraine would you send U.S. . personnel military men and women. . And he answered yes. . It couldn’t be more direct. . Amari thank you AMH. . Here in New York City for the U.N. . General Assembly Tom Reuters reporting that this morning I heard you squeeze in UNGA Reuters reporting early this morning. . You thought that was going to slide. . Come on. . I am. . How did you get to the box before we get completely derailed. . Just report from Reuters this morning that one way flights Tom san and gout after this announcement. . One way flights from Russia. . So direct flights from Moscow to Istanbul in Turkey to Armenia as well destinations where Russians can enter without a visa. . They’re sending out some of the back of this. . It’s very fluid and our news flow. . And that’s why I’m looking at more and more of the European journalists coverage that we’re seeing from Bloomberg and from other sources as well. . Jonas. . I’ll be honest John I just think it’s simply off the American radar slammed in this morning obviously but it bears almost careful scrutiny. . Absolutely. . Is that an escalation. . Lisa. . I think part of the markets e treating it as such as such an escalation. . The euro weaker off the back of some of this. . We saw the haven flow in the early part of the European session. . Is Vladimir Putin doubling down. . Right now it’s raising questions about what else he could do. . It does also though raise this issue. . And Anne-Marie is touched on this very well which is popular support of this. . Right. . It’s different when you have to actually go to war versus sit there and sort of hear the propaganda in terms of what the war is accomplishing. . I wonder how much the popularity or some of the issues they’re in are affecting some of the job owning both when it comes to Russia as well as China. . Just based on the fact they’re heading into a people’s Congress meeting that is coming at a pretty fraught time. . Also politically and from a social perspective due to the lockdowns readjusting our growth expectations lower. . I saw your note from Deutsche Bank earlier this morning. . Now we’re getting real about what a recession in the eurozone at least is going to look like. . Yeah it was pretty depressing. . I got to be honest. . And the bar is pretty high for me to get depressed but it really was depressing to see them downgrade their forecast for growth from negative zero point three percent negative two point two percent and saying that there is potential for further downside because of the potential for a really cold winter. . How much does this really get affected one way or another if there is an escalation does that really affect the gas supplies. . Because a lot of people are just discounting them altogether. . Can we just compare and contrast that with the ECB own forecasts for 2023. . What’s the growth there at positive zero point nine per cent for 2023. . And Tom you’ve got Deutsche Bank saying it’s going to be negative 2. . Yeah 2 and precedent. . The guard was asked a lot about this in a news conference. . Where’s the recession in the forecast. . You said it wasn’t in the base case. . Should it be in the base case. . Because Italian or most people for most people right now it is the base case for Europe. . We’re moving in real time. . And as we talk about these trends things like neutrality and know John the lift up in German yields is a different quality of lift up than America because of their more tepid nominal GDP and their lack of technology as an economy piece and leaving behind the negative interest rate era and moving on some with much much higher yields in Europe and beyond features positive two tenths on the S&amp;P on the Nasdaq 100 basically unchanged on this Fed decision day yields lower by 2 basis points. . Your 10 year 353 ninety seven. . Is this a buy for Mike Collins and a team at PJM. . We’ll ask him next. . Life in New York City this morning. . Good morning on this decision day. . Here is your equity market just about positive by a little more than a tenth of 1 percent on the S&amp;P on the Nasdaq negative zero point zero three percent. . You know the numbers. . I’ll talk about them again if the last 10 Fed decisions on eight of them. . This market has rallied. . Can this market rally if Chairman Pound brings out the Jackson Hole speech once more and just read it verbatim once again we’ve got word today as bond markets done a ton of work already. . Twelve months ago we were at twenty one basis points on a two year. . Right now three point ninety six per cent yields come in by about a half a basis point on a 10 year down 2 basis points to 354 36. . A big change though over the last two months. . Your tie your tie yields so much higher in the U.S. . and elsewhere. . Let’s pick out a place where yields are not so much higher this year. . Let’s look at Japan. . Look at what’s happened with the bond market and look about happened with the currency. . Or rather I should rephrase that. . Look at what hasn’t happened with the bond market and look at what has happened with the currency you know to Betty climb this year relative to what we’ve seen elsewhere. . They’ve kept them pinned lower caps trying to sit on them. . A tenure in Japan at about 25 26 basis points and look at what’s happening with the currency. . Because of that some we’ve had a 25 percent move on dollar yet. . That’s a monster movie. . Let’s stay on that for Bloomberg Radio folks 144 17 is a huge deal on year and it’s finally giving way to a weaker yen just in the last 10 minutes ago. . So John and you know you look where the level is 145 146 a dialogue changes Tom. . Even the central banks that have moved they’re still struggling. . Look at Sterling 113. . Look at the Swedish currency. . Even with the wrecks bank delivering a 100 basis point hike against the dollar right now Tom is a tough tough go to get some kind of traction in the effects market even if you are hiking if you’re doing what the Bank of Japan is not doing. . Sterling intraday low. . John 113 5 11 12 is essentially unimaginable except for there right now. . Jack can I mentioned in our travels of the last three days for all of us we have finally broken through on the index that matters the Bloomberg total return United States aggregate index something in all the bonds. . Lisa knows this better than me. . Guess what you do low price in the index through the June low. . A difficult moment I think late tonight both looking forward to the conversation with Mike Collins and page him to see if this difficult moment is a big buying opportunity. . That’s across asset price action. . Want to get to a single name with you. . We can do that now with Lisa. . Hey Lisa. . Hey John. . So you know Tom’s been talking a lot about companies adapting and adjusting and how they do really deal with the situation that they’re dealt with. . And there are three stories today that really highlight to me how they are doing this. . And that is cutting jobs and cutting jobs at a corporate level. . Take a look at Gap. . Their shares are dramatically underperforming. . The broader market down 48 percent so far year to date. . Just announced that it’s cutting 500 corporate jobs in San Francisco New York in Asia. . This comes after their partnership with the former Canyon West fell apart. . It comes as a Ford downgraded some of their forecasts in August. . How much does this really tell a story for retail. . How much is this idiosyncratic. . Then take a look at Boeing. . This is a manufacturer of big planes. . They just said they’re going to outsource some of their finance and accounting jobs to India. . Their shares are lower by almost by more than 27 percent so far year to date. . It shows how people are trying to reduce costs in different creative ways perhaps cutting jobs perhaps outsourcing. . Not exactly the jobs that they used to outsource. . They still are hiring some engineers locally. . Just sort of shows the shifting winds and encompass the housing market. . A company that really depends on online sales has been absolutely decimated this year. . Those shares down more than 70 percent so far year to date. . The CEO coming out and saying that it was going to be cutting more jobs particularly in the technology sphere and that there’s more to come. . There’s some losses associated with this. . Again Tom you’ve been talking about adopting and adapting and adjusting. . That’s going to lead to the pain that we’re hearing from Fed Chair Jay Powell. . But where’s the 30 year mortgage here in like a week or two of six point two percent goes out Lisa to the gap. . And I think this is really important is one of the ideas here that’s new with a risk free rate is we finally these zombie d zombie fi zombie companies do they finally go out of existence after a 12 13 year gift which it’s full circle. . Back to your point about corporate credit. . Have we fully accounted for some of that pain in that market considering the fact that there has been the repricing that you pointed to but potentially there could be more to come. . Very good. . We will continue right now on this on corporate credit with Michael Collins senior portfolio manager of PJM Fixed Income. . Michael what I notice here and I understand the messiness of it let’s forget that yield up. . We all know that Chairman Powell deal that today but in many cases praise very. . Very very down. . And we’re seeing in the Bloomberg total return aggregate index the old Lehman Barclays indices as well. . What is the significance of new low price. . Are those aggregate indices. . Yeah Tom is as you point out has really been nowhere to hide this year in fixed income I mean and in our shop we’ve got three big things right. . We’ve kind of stepped aside on a duration meaning taking our our long positions down to neutral. . We’ve taken credit risk way down. . We’ve generally been a little long the dollar but that has not been enough to protect investors from that big trend down in prices. . The good news is as you know when bond prices are down below par with which they all are really for the first time I can think of in my career Tom we’re seeing the bonds across the board across all of our portfolios trading at big discounts to par. . And as you know as long as they don’t default. . As Lisa pointed out they end up back at par. . Right. . So. . So you actually had this really positive long time opportunity in fixed income which we haven’t had for for well over a decade. . Michael I look at the mantra of the real yield the whole professional study of the inflation adjusted yield. . Explain to mere mortals why the real yield matters. . Yeah I mean that is the world’s discount rate right. . I mean I’m always surprised when when people say wow I can’t believe stocks and bonds are both selling off at the same time this year. . And I tell them as well you just wait until you see real estate and private debt and other assets that that haven’t sold off because they’re not actively traded. . They’re not mark to market every day. . Wait for those shoes to drop because when the discount rate the world’s discount rate which is really real treasury yields by and large goes up as much as it has as much as you know a couple hundred basis points. . All asset prices have to come down. . And the question really is have they come down enough at this point. . Well let’s get into that right now Mike. . We caught up with our good friend Bob Michael Barr of J.P. . Morgan Asset Management yesterday. . I asked him about high yield. . He said not yet. . Patience spreads need to get somewhere close to 750 basis points. . That Treasuries need to get somewhere close to 4.5. . The Fed funds could push 5 percent. . Any of that resonate with you right now Mike. . Would you take the other side of that trade. . Yeah you know I’ll take a little bit of the other side on the rate thing. . I think we’re much closer on the rate side. . Right. . Our view is that the rates are going to crest and come down first and then credit spreads and equities will will continue to widen and sell off before they settle down. . But I think we’re really getting close to a point Jonathan where the likelihood of the Fed and most other central banks overshooting significantly on the upside and having to reverse course. . I know the whole concept of the pivot you know was in vogue a couple of months ago. . And now people are pushing that aside. . And wow as they keep pushing these rates up at the same time that global growth you know risk is coming down. . Earnings are coming down. . As Lisa points out the faults are probably going to go off. . Geopolitical risk continues to to elevate. . Wow. . And inflation globally is really kind of rolling over. . And I think it’s going to be probably a lot lower in a year from now. . Just as all of those things are happening these central banks are jacking up rates ad nauseum. . And I think that’s a real recipe for a big reverse course on the rate side on the credit side. . I think you’re right. . I mean earnings we’ve done a lot of work on earnings expectations going forward. . And I think they’re going to keep coming down. . Right. . And people don’t talk enough about the dollar and the impact on that for U.S. . companies for their competitiveness further repaid Patriot earnings. . The labor costs continue to put pressure on margins. . And as Lisa pointed out you know you’re starting to see layoffs finally happen. . So I think there’s a little more downside in credit before. . Before you jump in with both feet. . This is all really mess here. . Michael I wonder just to put it all together quickly if you could give us a sense of how you play this the conviction behind buying certain discounted bonds taking the other side above Michael but also acknowledging what you see coming. . Yeah I mean you stick with you stick with higher quality credit right and presumably that’s what a big active shop with 140 panelists. . Liza Right. . And that’s really our bread and butter. . And this is an opportunity in the market where where everything is kind of sold off right in unison just to some extent. . And there are real lot of relative value opportunities. . You can buy really high quality credits at really big yields really big spreads low dollar prices. . So there is a lot of opportunity there without taking a lot of credit risk. . And we’ve taken our credit is down. . But the yields that we’re seeing across the board in the bonds we own the high quality bonds we own the portfolios we manage are really big. . So I mean you don’t have to take a lot of credit risk. . Ultimately you’ll want to do that dip down and credit it but it’s definitely too early. . Just so I think like for the rest of the day and get it right. . If you’ve been down this 10 year 350 Mike. . Yeah we we we haven’t yet. . We’re we’re we’re dead neutral here. . Jonathan then. . But but again that is going to be the the big the first trade really out of the gates here. . And maybe you have to wait for for today. . The Fed is going to probably sound pretty hawkish today even though they’ve done a good job on Fed days. . I know we’ve talked about this on the program before. . Typically the days the Fed meets in the days Jerome Powell speaks that the equity markets tend to go up. . So they do a good job of getting investors off the ledge a little bit. . But but you know those that dot plot is going to be ugly. . I think a lot of it’s probably priced in and the markets are braced for it. . But there will be an opportunity I would bet the next couple of quarters to really start getting long duration. . We’ll catch up and talk about it. . My comments that a feature. . Thank you Mike. . Now’s not the time Tom. . But he did give you a sequence of events a sequence of what he would buy and when and why he’d find them before others have trouble with the sequence. . I thought it was really intelligent from Mike Collins. . But what was the sequence of events twelve months ago. . Things like Treasury’s first because it’s gonna get hammered. . This Fed will have to back away but a more straightforward folio. . Sent us out with a note to a 60 40 tonne this year. . Not nice teachers. . It’s a triple average cash a quarter of 4 percent. . If I take cave outperformed everyone this year. . Congrats. . The Chancellor called me back. . Can you run a portfolio at the Treasury. . Somebody suffers all cash. . Sterling. . Oh yes. . No. . Well that’s a really important point. . You had you know from New York this is pulling back. . Keeping you up today with news from around the world with the first word. . I’m Lisa Matteo. . Vladimir Putin is threatening to escalate the war in Ukraine even further. . Putin is calling up three hundred thousand reserve troops and vowed to use all means necessary to defend Russian territory. . He also hinted at the use of nuclear weapons. . Meanwhile the Kremlin is moving swiftly to annex parts of Ukraine occupied by Russian forces. . The feds ready today to hike again and to send a hawkish message for the third policy meeting in a row. . Policymakers are expected to raise interest rates by 75 basis points. . That would bring rates to the highest level since 2008. . Chair Jerome Powell is likely to hammer home that he believes further rate hikes are needed to tame inflation. . European Central Bank President Christine Lagarde says borrowing costs will rise more in the months ahead. . Speaking in Frankfurt Lagarde said the ECB has taken major steps to tackle inflation and she expects to raise interest rates further over the next several meetings. . China says it has the patience to bring someday bring Taiwan under its control. . Now a government official said that what he calls Taiwan compatriots realize the future is in unification. . That contrasts with polling in Taiwan showing skeptical views for Beijing. . Beyond Meat has suspended Chief Operating Officer Doug Ramsey. . He was arrested on charges that he beat a man’s nose during a fight after a college football game in Arkansas. . It’s another blow for the plant based protein company which cut its revenue forecast last month. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries. . I’m Lisa Matteo. . This is Bloomberg. . I thought that I would never get to 4 percent but I’ve changed that view. . They certainly will. . And probably by the end of this year I think they’re going to have to go higher at the beginning of next year. . But then I think they’ll pause. . I also think they’ll slow down their rate hikes the further they get away from the neutral rate. . I was making Green the global chief economist of the Con Institute. . Many people share that view. . That’s the change for the consensus view in the last three months or so. . Most people now looking for that forehand on this market price for something close to 4.5. . The Fed decides in several days time life from NATO. . OK this is Bloomberg Surveillance equities up by a third of 1 per cent on the S&amp;P and the Nasdaq 100 up by a little more than a tenth of 1 percent yield to labor by 3 basis points on a 10 year 350 358 good effect decision statement of course a news conference with Chairman Powell and some forecasts and a dot plot in the mix as well. . We do. . It’s going to be absolutely fascinating because we’re thrilled. . The former vice chairman Richard Clarke will join us here in a number of hours as well. . Vincent Reinhart he’s chief economist at Dreyfus in Melbourne. . But on this historic day for Central Bank Mr Clare Dr Clare would suggest that Mr Reinhart is a must listen. . Vincent Reinhart invented modern research in Washington at the Fed for Alan Greenspan and has a terrific perspective on forecasts. . Maybe not dot plots. . We won’t blame him for that. . Vince thank you so much for joining today. . I went back and I did a Google search of the Fed blinks and there’s any number of days where this is part of the Zeit Geist. . When does the central bank blink. . When do they stop a theory to go the other way. . When the policy choice gets harder right now. . Here’s the bad news. . This is the easy part of central banking because they are so far away from their inflation goal. . Jay Powell wakes up in the morning and says inflation is too high. . He worries as he goes to bed at night. . C inflation is still too high. . Policy choices raise rates. . It will get harder when you have to top out where you raise rates right. . Inflation is closer to goal and the unemployment rate is rising. . This the end date managers I said of a certain vintage Vince that we’re sort of used to higher interest rates like an actual risk free rate. . We’ve all been there before. . Does the media and the Zeit Geist of Wall Street do they overplay the world’s coming to an end. . Given a march to neutrality just about every time don’t they. . The fact is that there are long cycles in rates. . We’ve been here before. . The Fed goes through tightening any tight tightening spells and easing spells and. . Pauses and we’re just tightening spell. . It is going to have to last longer. . That’s a consequence of being slow out of the starting gate. . You’ll have to go higher. . That’s a consequence of being slow at the starting gate. . But this time next year we’ll be talking about what how long will the Fed be pausing. . And so we were just speaking with Peter Hooper of Deutsche Bank who sees neighbor who or the neutral that the end rate for Fed funds rates to be at near 5 percent possibly exceeding that. . We’re hearing more people call for a greater likelihood of that kind of pain that kind of rate backdrop for a prolonged period of time. . Do you agree. . Yes I think Terry Powell agrees with Peter as well. . Remember at the last press conference chair Powell pointed to the estimates for natural rate and said that his committee’s his own view was higher. . Well generally when the chair is saying his own view is higher it tells you the committee is going up. . So I would expect that the summary of economic projections will see a higher natural rate. . And importantly they have to go above their natural rate in order to create some slack that slows inflation. . So the base is rising and the overage relative to that base is falling higher given they started late. . Vincent what do you expect the unemployment rate to be in those projections. . How much of a downside how much more of a potential recession case do you see starting to leak out in some of this forward look from the Fed today. . Well the part to worry about is central banks were always incremental. . They always don’t weigh out all the bad news. . So I would expect the unemployment rate to go up. . I would expect less of an immaculate decline. . Inflation as has been the case more than a simple summary of economic projections but I still think there’ll be more akin to reality. . It’ll be worse than what they say. . So rather than an unemployment rate at or above the natural rate as it is within the last couple of months I would expect to see the unemployment rate go forward ahead in their forecast. . I would expect the unemployment very to be at the point next year. . Wow. . Vince you’re on the same side as Deutsche Bank then Vincent Reinhart of Dreyfus and Mellon potentially four five percent unemployment to Eddie to say that today. . Do you think Lisa in the projections because right now that something close to full on unemployment does it really matter. . I mean I think from it from a strategic point of view people are going to be looking to see whether they pull a Bank of England and they give a dose of honesty. . But does it really matter if they reflect that in their forward projections if there is a general sense that they bring growth lower and they bring the inflation rate higher they bring their rates higher then you’re basically you can extrapolate what you want it from that. . We’ll catch up with Diane Swonk a little bit later from KPMG. . And thank Diane said the last few summary of economic projections. . We’ve had the last few set of forecasts. . We’ve had Tom from this fund of research. . She’s called them aspirational fanciful I think was the phrase gone. . It used as well. . Maybe we’ve migrated from fanciful here in the last X number of weeks John. . Four week moving average on jobless claims that come out weekly. . You take a four week moving average you know the math two hundred twenty four thousand. . That is so far not from a five percent unemployment rate. . I just find the whole conference Tom. . That’s the point. . Deutsche Bank is making. . This is what Magnus said. . Peter trying to say that to get inflation lower bites into this economy you need rates much higher. . That’s that. . That’s that. . That’s the position. . Okay. . We witnessed it. . I mean every airline’s packed. . I don’t know if the airlines are going to make money. . We’ve got certain Uber bulls like Jim Glassman of J.P. . Morgan saying look here’s where the consumer is right now. . They’ve got a tough task. . If the theory is we’re hearing on the show are to play out and then we’ve got Mike Wilson of Morgan Stanley Tom he’s just been right. . Right right. . For the whole of 2012. . Right. . Right. . To be bearish on this equity market the equity market is where it is with the VIX at twenty six point nine seven John. . And you know the classic rule is there’s no thanks till 30 and you may get on Mike Wilson 30 on VIX. . The damage is in the bond market. . John the institutional mass Lisa knows this better than me. . The institutional mass that is losing money daily in the bond market is unmeasurable. . I’ve never seen in my lifetime it’s piling up in a big way at least with FedEx came out last week. . I think we both thought the same thing. . We both thought of Mike and the colleagues making on antics that we’ve had the right shock and now we’re going to see the consequences of it. . And what is the read through to job cuts. . And I say that as we look for a path to get to that greater area a few less slack in the labor market. . We talk about a four and a half to five percent unemployment rate and you start to wonder how quickly. . Are these forecasts getting downgrades and our gap is Boeing is a you know some of these companies that are coming out compass are those outliers. . Or is that going to be much more common. . What would make my Wilson constructive on this equity market again. . You can ask. . The man from Morgan Stanley joins us next. . Looking forward to our futures. . Up four tenths of one percent on the S&amp;P on this Fed decision day with Tom Keene Lisa Abramowicz and Jonathan Ferro futures a positive. . From New York Adam Radio seen on TV. . This is Bloomberg Surveillance. . What’s been really the engine here has been the strength of the labor market. . The strength of the consumer. . Then June 17 below is not that far away from here. . It’s not a heroic call to say that anymore. . We’re also not convinced that the data is going to be bad enough that it’s going to take us down through new lows for the back end of the Fed. . We’ll have to shift and or we’re just going to go into a deeper recession than we may already be in. . The Fed funds rate will overcome the rate of inflation. . That’s when the Fed has done enough. . This is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . Good morning everyone. . Jonathan Ferro. . Lisa Abramowicz. . Tom Keene. . On Thursday. . So much to talk about. . Richard. . Clara will join us the former vice chairman of the Fed to lead our Fed coverage today. . John I want to switch from the Fed to the stock market with Mike Wilson coming up. . There is a toxic brew out there. . There’s blood on the street and Mike’s got it right. . Oh yeah. . He’s dead. . Right. . Dead on. . Basically look for the right shock and now look for the earnings concern. . And are we starting to see that with companies like FedEx like Ford in the last week off the Gulfstream. . What I notice is the Bloomberg total return bond index. . John it is through to new lows breaching the June lows that we’ve seen the 60 40 Bloomberg index down 17 percent from the peak. . There’s nowhere to hide. . Bob Michael Barr J.P. . Morgan. . Tom says it’s going to get worse. . He’s looking for Fed funds maybe to get close to 5 percent for treasuries at 4.5 and for high yield spreads to go somewhere close to 750. . His message is not to buy yet to wait to be patient to wait for a recession that he thinks is coming soon. . She was expert at unknown. . I said who is that woman in print. . Lisa Abramowitz expert on the spread market. . Lisa the spread market always says so much. . What’s it say this morning as we go to Mike Wilson saying there’s a little more fear it’s just be getting around the edges but not getting carried away. . And there is a question of what exactly it’s pricing in because it’s still far below some of the heights are the other times when we’ve seen not only rate hiking but also credit fears. . When does this problem this goes directly to Mike Wilson. . When does the issue with rates bleed over to an economic pain story. . We’ve seen that play out in certain equities. . Have we seen it fully play out in credit. . You know J.P. . Morgan at least J.P. . Morgan Asset Management. . But Michael that aside like how he doesn’t think that we’ve seen enough not the equity research and investment banks that you reply. . I mean. . Well I mean out of that zero hedge message me a moment ago and asked if Bob. . Bob Michael Barr spoken to Macca recently. . Let’s read between the lines. . I’m not here. . Okay. . In the guys are running here. . I’m going to get the daily check going if we need to get to Mike Wilson for Global Wall Street. . Unreal. . On television. . And John Effect speaks volumes. . It is the litmus paper of the system. . Yen up through 144 fractionally. . Euro visited new weakness in sterling. . We couldn’t support a john on our trip there. . I try. . You tried 30 40 fucking a snapshot of foreign exchange right now on a stronger against everything. . With the exception of the Swiss franc a sad defensive thinks out euro dollar negative six tenths of one percent and just about holding on to ninety nine on euro dollar ninety nine. . 0 8 yields down 3 basis points. . They’ve been so much higher recently over the last few weeks in fact for the 10 year the last two months 352 seventy on a 10. . Yet some futures just a bit firmer up a third of 1 percent on the S&amp;P. . It is so true that the media the financial media loves to look at strategists who say are you’re right or wrong you’ve failed you’re done. . The reality is the way strategists are used on Wall Street and no one has given more guidance this year in the last 12 months. . And Michael Wilson CIO and chief U.S. . equity strategist at Morgan Stanley because it’s been a consistent and cogent message of beware the future. . Mike we are now where we have a Mike Wilson stock market. . And what I note is you mention it is picked over. . I can’t find scale. . There’s not enough to choose from. . Where do I hide. . Yeah. . Well thanks Tom appreciate your kind words. . I mean look I think the I mean the market is picked over because this is where we are in the evolution of this bear market. . Essentially when bear markets began they always go after the High Flyers you know things that are kind of ridiculously priced or where their earnings risk is as more evident. . And that’s what happened really kind of earlier this year late last year quite frankly really began almost a year ago and out. . But as you kind of go through people didn’t. . Hi it’s like the water rises. . You go to the higher part of the mountain. . And so it really is kind of crammed into the same stuff just kind of waiting for some conclusion to the story. . Either we avoid a recession and move forward of a soft landing or we down and we clear the decks and then we can move forward from there. . We’re kind of more in the second camp because our view on earnings is just so negative. . Whether we have a recession or not all of our top down models which are pretty good are telling us that you know the spread between our forecast and the actual forecast by the street would mean bottoms up is has never been wider. . It’s only time it’s been as wide as you know in 0 8 and then back in 0 1. . And we know what happened there. . So the earnings story is what we’re focused on. . I mean the Fed is important still. . Obviously they’re not getting off the gas here on their hawkishness and nor should they. . But that’s pretty priced to me. . I wouldn’t be surprised if today we get some relief quite frankly led by the bond market after the Fed does their thing. . Maybe stocks can rally one more time but the end game for us is all about the earnings and the growth now. . And we’re you know we’re just not optimistic there for the next six to 12 months. . And net value price pretty quickly see growth steady 400 is the base case 50 percent probability. . Mike 3000 the back case recession scenario 40 percent probability. . I put out this research that quote on Twitter in the last week and a lot of people wanted to know why the other 10 percent. . Mike IBEX the 10 percent. . Yeah that’s that’s the mystery. . Now I mean it’s pretty straightforward. . I mean the Bolt case is just not that probable. . I think you know November and we talked about this as you recall gentlemen the Bolt case was Goldilocks. . And we said well you know the probability of Goldilocks looks pretty unlikely. . So we bought case. . You know we can flex that from you know zero or not really. . 05 that 20 percent were you know sort of 5 to 10 percent now. . But the bull case is not in the latter. . Goldilocks it’s kind of a soft landing for the economy. . However that’s not a soft landing for earnings. . So you know our bolt case is not much different from our from our base case. . I mean we think we think maybe you don’t make new lows in the Bolt case but there’s an upside. . Okay. . Over the next six months. . And that’s really how we manage money. . I mean we we look at risk reward and you know at thirty nine hundred and the risk reward is probably five to one. . You know on the downside is sort of the sort of the middle of our of our viewpoint and that’s at the S&amp;P level. . Let me just clear because Tom asked a question which is you know this is the part of the bear market. . We should be looking for individual stocks that you want to own coming out of this. . Some are priced appropriately where you want to take that risk. . But look what happened this week with Fed Ex. . I mean clearly that wasn’t priced. . So you gotta be really careful thinking oh well everyone knows this. . It’s already priced and you get hit over the head and the stock’s down 20 percent. . So that’s you know everybody has their own risk tolerance. . They have their own work. . And you know we have our own focused list as well. . We’re staying defensively oriented. . We’re not reaching for cyclicality or you know kind of crazy growth stocks yet. . We think it’s premature for that. . But we’re getting closer. . I mean we think we’re within a couple of months probably. . So there’s an issue with how long this is going to last. . We were speaking yesterday with Chris Brown. . You talked of a lost decade of profits on the headline level for the S&amp;P. . Just based on the fact that yields are going remain higher inflation is going to be greater. . Do you agree or do you think they’re going to get a rebound on the other side of this six months 12 months down the line. . Yeah I mean I think we will get a rebound but we are view for a while now has been we’ve moved out of the monetary policy dominated world to a fiscal dominant policy world. . And what that means is that the Fed is no longer in other central banks quite frankly can no longer smooth over the edges the way they have historically because inflation while maybe it’s going to come down in the next six months which is our core view it’s not going away it’s going to be dormant and then we’ll re accelerate again in the next upturn. . What’s going to happen. . Lisa I think is that you’re going to clear the decks and up on expectations on growth that you can then have a week celebration and that will be driven by the natural ebbing and flowing of supply and demand but also more aggressive fiscal policy. . I think it’s interesting to note in the last month I mean fiscal policy has been turned down like a spigot again. . Right. . We have this debt forgiveness program here. . We have the 200 billion pound stimulus for energy subsidies in the UK which is equivalent to a trillion dollars in a U.S. . economic standpoint. . So it’s kind of interesting when you have kind of raised worry about inflation but the fiscal policy is working counter productively to the monetary tightening. . But that’s the way I think we’re living in now. . And you have to understand that because it’s not all bearish. . It will be a time when fiscal picks it up again next year even though monetary can’t do its job as has been doing in the past. . And in the Fed’s job in my view and the ECB is you. . It’s abuse job in my view. . Their main job going forward is to be funding the government whatever the government decides to spend. . They will have to fund implicitly very similar to the 40s analog that we’ve been using. . Mike just one final question and I think it’s lost in the conversations I often see with you that it’s not just about an index level code with even the team. . There is some single name stuff in the mix too. . Could you help us with just a call right now something you do like in this equity markets something that has worked these sticking with. . Yeah. . I mean I think like the managed care stocks have been terrific. . Mean that’s an area that you know these are either gross DAX and they don’t they know they’re not priced as gross DAX. . They never happen because of concerns about perhaps regulatory oversight and things like that. . But you know health care in general I would argue is an area of the market where you have pent up demand from the pandemic as opposed to payback in demand like for technology spending or consumer goods and for whatever reason is still trades really cheaply. . And once again it goes back to this idea that there may be fear about real pricing controls and things like that. . But that’s to me that’s a fair pitch. . And you know that that’s an area we’ve had a lot of exposure be it on pharma managed care some of the cheaper areas of private health care. . And I think that continues to work. . Other area would be say integrated energy companies where they’re more defensively oriented not so dependent on the price deck. . They pay great dividend and you get some commodity exposure you know as a hedge against your inflation staying sticky or high. . But the overriding message John as you know this year if must have been defensive earnings stability operational efficiency boring type metrics. . But you know it’s been working nicely and I think it will continue until we get the trough in this bear market. . It’s been working in a tough tough year. . Congrats to you. . And that same Mike Wilson so far for 2022. . Just absolutely brilliant. . Mike Wilson of Morgan Stanley T.K. . a man whose code along with his team really ready well for the year so far. . Yeah. . What’s important is how they dovetail. . And I really can’t say enough about the fractious nature of Morgan Stanley research. . I love John how they’re argumentative and visibly argumentative. . You saw that was Zentner moving from transitory to a more difficult inflation along with pretty much everyone has some sound from that. . Futures future’s up four tenths of one percent on the S&amp;P. . It is Fed decision day for our audience worldwide. . Heard on radio seen on TV. . This is Glenn Beck. . Keeping you up to date with news from around the world with the first word. . I’m Lisa Mateo. . Vladimir Putin declares it a fight to the death with the U.S. . and its allies. . He’s calling up three hundred thousand reserve troops in a major escalation of the war in Ukraine who also hinted at the use of nuclear weapons. . He said that the U.S. . and its allies want to destroy Russia. . A Ukrainian counter offensive in the last few weeks has dealt Russian troops their worst defeats since the early months of the conflict. . The Federal Reserve is poised to raise interest rates today to the highest level since 2008. . And it’s likely to forecast that there will be further increases for the third straight meeting. . Policymakers are expected to raise rates by 75 basis points. . Fed Chair Jerome Powell is expected to stress the Fed’s resolve to curb inflation. . That’s near a 40 year high. . The Bank of Japan is trying to cap upward pressure on yields before a policy decision later this week. . The central bank announced an unscheduled bond buying operation DOJ. . Governor hurry go. . Kuroda has emphasized his determination to maintain rock bottom interest rates even though many other developed nations are increasing them. . And Amazon’s cargo airline is growing at the slowest pace since the start of the pandemic. . Researchers with the DePaul University’s Chaddock Institute of Metropolitan Development say the number of flights on the company’s air freighters rose just three point eight percent between March and September. . The e-commerce giant has already closed or delays plans for dozens of warehouses. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts and more than 120 countries. . I’m Lisa Mateo. . This is Bloomberg. . I think it’s unsustainable to have the Fed hiking rates at a very rapid rate doing Kuti with you know the economy slowing at some stage of the game. . The Fed will have to shift and or you know we’re just going to go into a deeper recession than we may already be. . Kathy Jones that of Charles Schwab governments that Fed decision that a bit later this afternoon futures hang up. . I said if 1 percent on the S&amp;P on the Nasdaq up a tenth of 1 percent. . Max Kanter of HSBC just published in Hetchy. . When touts I lose we retain our maximum underweight in equities. . If growth continues to hold up central banks will have to do more to slam the brakes putting pressure on valuations. . And he goes on to say. . But if activity disappoints quickly falling growth and earnings expectations will also be bad for risk assets. . Tellme tails. . I lose heads. . You win. . Can we stayed in London over that long duration of wonderful stay there amid the sadness for England. . Max Kuttner was our gloomiest guest. . I think it was. . He was also a bit of a highlight at the same time. . Thomas tried to catch up with him like Mike Wilson clip me but right through to 2020. . Anyone tried to get me brought the walk round my slipped. . Right. . It takes a while my Mikey. . Thank you Carrie. . Have you. . Thanks. . Let’s just go around the room. . Maybe not. . It’s true. . And also her grand banks 40 42 as if that’s what it says John. . Gloomy but right. . Is that what he says. . Bumper sticker over boat right now. . Michael McKee with us here as we go forward into the Fed meeting. . And again Richard Claire is scheduled to be with us which is wonderful. . Mike I have such a respect for your ability to drill down into this minutia. . I just am unable to do it. . Which of the forecast. . Which of the dots. . What is the item you will look for first when they release that stuff this afternoon. . Well I think we’re going to be looking at the median dot which does come out in the S&amp;P as well as on the dot plot. . Because what people want to know on Wall Street is how fast are they going to get to terminal and what do they think. . Terminal is. . And then the third question is how long is it going to stay there. . So all three questions will be sort of answered in one line on the economic projections. . Then we’ll also look at unemployment because the Fed has got a forecast under its dot plot what it thinks unemployment will be. . And that sort of tells you what they think is acceptable in terms of unemployment. . If if it follows the book and unemployment goes up so far they haven’t had a whole lot of luck pushing that up to the top. . For those of you on radio you’re advantaged right now because we just showed the dot plot. . It looks like the landing effort at JFK and a blizzard Michael McKee. . Beyond that there will be the questions today. . It’s unfair to say what is a question you will ask. . What does he not want to say in the press conference today. . Oh he doesn’t want to say anything about a possible pivot one way or another whether he uses that word or another. . He doesn’t want to suggest that the Fed is in any way going to back off at least for a year maybe longer. . We’ll see in the dot plot how long they keep rates up. . You look at what Fed funds futures are pricing and they see the Fed starting to cut rates in May of 2023. . And that is exactly the feeling the Fed doesn’t want to encourage. . They want people who think the Fed is going to get rates up and keep them there until inflation goes down. . Mike does the Fed have a serious credibility problem. . I don’t think so. . It’s kind of funny the comment you were leading in with about heads I lose tails you win is kind of an admission that the Fed is going to do what it’s going to do. . And they’re looking at how that’s going to impact asset classes. . I think they do need to follow through. . If they were to back off at any sign of weakness in the economy then they would have a credibility problem. . But so far when you look at the inflation expectations they’re relatively anchored. . They’re actually coming down a little bit. . So I think people are have bought into the Fed’s program at this point. . One of the biggest unknowns right now is how long it’s going to take for this economy to truly feel higher rates. . And the reason why this is important is because some people argue that the Fed won’t know if they dramatically overshoot until it’s too late. . How much are people gaming out the length of time that duration it takes before we start to see the ramifications of a 4 percent Fed funds rate. . Well you’ve got sort of two camps out there one that thinks the Fed can maybe bring us in for a soft landing. . And if it doesn’t it’ll be a mild recession and it’ll come probably later next year. . And there are others who think they’ve already gone too far and we’re going to head into the teeth of recession fairly soon. . And you see that reflected in those Fed funds futures. . But the problem for the Fed is the data they watch to see where they are is backward looking and the effects of their policies is forward looking with the lags. . So they’ve got to try to extrapolate between the two. . And it isn’t easy. . And that is a question on my list for Jay J. . How are you going to know where you are and whether or not you’ve gone too far and CAC. . They have always said well we know how to deal with inflation. . So if if inflation went up too high we would know what to do. . We could pivot right away. . But what if the opposite is true. . The economy starts to really fall and the Fed doesn’t know that’s happening yet. . Mark McKay thank you. . Mike thank you very much. . And looking forward to the news conference with Mike McKenna’s conference later on the Fed. . SHUGG the Fed decides least we talked about that anyway. . Is the Fed being emboldened by a lagging indicator. . I mean basically that’s the issue at a time when you start to see the Fed ex ISE of the world come out and say things are moving so quickly they have to readjust their forecasts. . FedEx might be dealing with some specific issues that has to do with FedEx and FedEx alone. . But we’re also seeing it from other companies. . At what point does that become relevant for the Fed. . Is that data that they’re going to track. . And Annmarie Horden said he just published he said a hawkish surprise would be power suggesting upcoming hikes remain larger in size or that neutral policy rates have migrated higher. . A less likely deficit outcome would be pound emphasizing that policy rate increases were slower pause at some point some once again the news conference often about emphasis of the Fed chair and also the markets going to be watching. . And we’re going to correlate all that into 2 p.m. . here on equities bonds currencies commodities. . John moments ago Euro Swiss he made a dash to news with strength. . I would suggest if Russia fears Putin fears and that. . But we’re at a point where dollars on the cusp of breaking out we’re not there yet. . But can you imagine dollar strength into the press conference. . I can’t because we’ve seen it right now. . Let’s say right now one 77 111 potentially going into this VIX y same thing. . Yeah. . Euro dollar just clinging on to ninety nine sterling Lisa 113 levels that if we’d mentioned at the start of the year I would have laughed and pointed that out just yesterday in yesterday’s conversation. . That’s right. . What credit does Chris Brown was. . He said in the commercial break you said John I watched bank one of our interviews out of the shadows. . I don’t know. . Here we go. . I said 150 on telly and you laughed at me. . And guess what. . We’re not at 150. . Good jobs said he said you totally missed it. . We’re only at 144. . A terrible cold. . It’s going to keep everything that you’re going to stick to it. . He’s a great coach. . Let’s give it to Chris. . 143 98 on. . He and Michael Pond’s going to join us from Barclays. . Just a moment here. . A dollar just holding on to ninety nine negative seven tenths of one percent. . This is pulling back. . Live from New York City this morning. . Good morning to you. . Just about positive on the S&amp;P for half of 1 percent on the S&amp;P 500 futures up on the Nasdaq my third of 1 percent. . Oh so pushing higher yields pushing lower by 4 basis points on a 10 year 350 to 60 euro dollar just about holding on to 99 99 0 6. . That currency peg negative six tenths of one per cent. . Some real lift on a strength out there in the mix. . Shout out to post say on Twitter. . We can rename the program simple. . In fact the Brit the bad and the bow tie right away to start the day. . Thank you. . Thank you very much for that. . I think that works. . We should rename the podcast The Brit the band the bow tie. . You know we could do that. . I think the podcast that works as well as in IBEX beautifully digital product. . And in fact over the years you know the digital products becoming more and more important including podcasts. . We’re working on that every day with Scott Havens and we move forward on that. . Now that we’ve all returned. . Right now we return to what started the program years ago which is speak to people that actually spend 24/7 on something narrow and excellent. . David Rosenberg passing inflation maybe Steven Englander in his brilliant work on cross rates and effects. . One of those some years ago was Michael Pond. . His fancy title now as head of global inflation linked research at Barclays far more accurately. . He is truly expert. . With the exception maybe of Ian Lincoln at BMO on full faith and credit. . And he joins us today Michael Pond. . If I look at the real yield and I look at two partial differentials of the nominal yield and some measurement of inflation which matters right now it’s the real yield that matters. . And it’s moved up a lot over the summer. . The market was was not really buying into the Fed’s resolve to hike rates enough to slow the economy and getting inflation down. . Since Jackson Hole though really yields have have soared particularly at the front end where they were almost at at zero earlier this month. . Now they’re above 1 percent. . When we look at short and forward so the markets move a lot and really accepted the hawkish tone of the Fed. . So if I look not at the 10 year real yield but Michael parties go shorter to maybe the two year if you agree with me on that from a negative 300 basis points conversion to a positive 164 basis points that’s a hugely linear jump condition. . How do other asset classes react to the Michael Pond world. . Well risk assets do not love higher yields that are not supported by strong growth. . Really we’re where real yields are rising here is because the Fed has become much more hawkish trying to slow the economy. . And that’s in part why risk assets have been on the back foot since Jackson Hole. . So the Fed’s trying to get the economy in a position where inflation comes down and then it can take its foot off the off the brake a little bit and allow growth to go back up to where we think we’re years from that. . The Fed’s resolve is strong here. . That was clear at the at the Jackson Hole speech by by Chair Powell ripping up this go off the script then and channeling his inner Volcker risk assets have responded. . But now they’re at the point where perhaps they’ve overreacted. . You know obviously we’ll we’ll get the message from the Fed that’s on the hawkish side. . But markets are already prepared for a very hawkish Fed. . So it’s a delicate balance today. . Before we veer too far into that they might be prepared for a hawkish Fed. . There’s a question of how quickly that leads to economic integration and we can get there. . But I want to sit on this idea right now of what it means to have a Volcker ISE Federal Reserve particularly with real rates at the highest levels going back to 2011. . Do you foresee ever again in the next few decades this Federal Reserve going back to zero interest rates. . It’s very possible. . You know we thought that the market was pricing in too much of too high of a probability of strong Fed cuts. . And next year in late summer those that basically had been taken out as appropriate. . But we certainly if you look at the housing market and say the housing market becomes a sign of the broader economic outlook it then then we could be in trouble here and the Fed would have to respond putting its dull hat back on. . We think we’re not likely to enter that that regime but it’s certainly possible that we enter a recession. . They’ve had has to recover. . You know backtrack and send rates right back to zero. . Well OK. . So this is sort of the big attention right now in bond markets particularly on the long end with your tenure yields at the highest levels that they’ve been going back years and years. . And yet some people including Michael Collins from PJM Fixed Income earlier are saying it’s unclear whether it’s really time to pounce because there could be more. . Is this the last time. . We’ll see real yields of this level because this Fed is poised to make some sort of turn in the not too distant future. . I think it 100 percent depends on the path of core inflation readings and the labor market. . That’s why the Fed is reacting so hawkish. . Lee here they’ve done quite a bit. . Some parts of the economy is has begun to slow such as the housing market. . But the latest print on core CPI was point six. . And labor markets clearly remain quite quite quite quite robust at a three point seven percent unemployment rate. . The Fed really needs to see a slowdown in the monthly pace of inflation readings particularly on core and a weakening of the labor market again. . The chair talked about inducing pain in the economy again channeling his inner Volcker in order to get inflation down. . So the Fed has to do a lot more to get get the economy where it wants. . Michael you embrace a dual mandate and I get that. . You know we could talk all day about jobless claims. . This and the other thing are true mean Dallas. . Maybe the chairman will bring that up today. . He’s got another mandate which is the credibility that he said but just up against political realities. . If we get a Barclays recession if we get a Barclays sort of recession does that become a third mandate for this chairman. . Well the Fed is absolutely trying to make sure it retains credibility particularly with CAC when it comes to inflation fighting. . So one of the reasons why it’s being so hawkish here is to make sure that inflation expectations don’t get out of control because that’s when the Fed fears an inflationary spiral where inflation is high. . People expect it to be high and it just feeds on itself. . So one of the things the Fed is trying to do here is make sure that high inflation itself doesn’t lead to higher inflation expectations. . So it’s trying to maintain its credibility. . And if we look at break evens if we look at surveys such as that from the New York Fed or the University of Michigan the Fed is doing a good job on that front and it’s able to ignore any political issues with it with a slowdown. . John I’m sorry politics matters here. . It’s going to matter tomorrow for Bank of England. . It’s going to matter today for Chairman Paul. . So I don’t disagree. . And I think Michael this is going to be the difficult part. . How do they convince people that high unemployment is a price worth paying for lower inflation. . Easy to say that now but when people actually start to see materially higher unemployment how difficult do you think this is going to get. . Well that’s why the S&amp;P the survey of economic projections or the dots if you will all be so important today. . When we get the statement when we look at the statement one of things we’ll be looking at is the unemployment rate path. . So you know the ACP is supposed to be the economic outlook under a path of of perfect monetary policy. . And if the unemployment rate remains elevated in their forecasts that’s a signal to the market that they’re willing to tolerate decently higher unemployment rates in order to get inflation down. . That’s a message that the Fed has been sending. . But we’ll really be looking at the S&amp;P to confirm that. . Michael just real quick here I’m wondering what your projection is for how quickly inflation will come down that headline CPI at the end of this year at the end of next. . We’re fairly optimistic that it will start to slow particularly with the October reading in part because of technical reasons at least in CPI. . But even beyond that again we’ve seen signs in commodities and shipping rates in an ag related futures. . Corn wheat etc. . that many price pressures have peaked. . Wages though are keeping inflation high and that’s the key to inflation really rolling over. . Michael just quickly what are you talking about in terms of levels going to end the year at 6 percent at 4 percent. . What do we got. . We think we’ll we’ll certainly come down from that when it comes to headline inflation in part because of the strong decline in gasoline prices since since March. . But core can remain sticky. . So while we think will slow and inflation readings but certainly well above where the Fed would like them. . A punt if. . Please. . Thank you. . I have one. . Barclays went very quiet when this interview started. . I can tell you the commercial break. . It was this beautiful but yes. . Hum. . Coming off the trading floor. . ISE Barclays. . Tom wasn’t it fantastic as they put it thanks to Michael to see your manager in a memo today Bondeson was surveillance so they should just hide and seek. . It’s just beautiful. . Just like old mr. . Yeah. . And frankly for Q4 and into next year that’s a big debate John. . The Guardian in London and the acclaimed Ian Frazier one of the great authors and thinkers of economics in your United Kingdom. . I love what he resurrects from Ronald Reagan. . Trickle down economics. . John is that what you are observing. . Yeah. . You should probably have a look at the modern Wolf piece in the Financial Times as well because it was pretty scathing and was about. . I’m from this conservative government. . Well you know this is out there and in real time and you know frankly for our American listeners and viewers what goes on to morrow has a profound effect on what goes on in America. . We get a bank having the right decision and a many but. . I’ve got no idea. . John I met his son. . Start. . That’s what next. . Guess what. . You Matt Miller. . That’s important. . So that’s important. . No idea if Martin wrote this headline in the FTSE but at least the economic consequences of less trusts was the headline of that piece in the FTSE yesterday. . Well Danny Blanchflower over at Dartmouth he put this out. . Pretty predictable isn’t it. . David Ingles OK. . Yes. . But he said you know he said many interviews. . He’s discussed these disastrous economic policies of less trust as he said. . And he said that they’re in total disarray but it seems inadequate as pronouncements get worse daily. . I have never in my 50 years of doing economics seen anything as bad as this. . I want to see the complete package. . Looks like the two that we’ve heard of fear and in the cap on banker bonus says that’s going to get the wrong kind of headlines than the one that we heard of in the last 24 hours was on reducing stamp duty which anyone not familiar was just the transaction tax the pay when you buy purchase or a house in the UK time and that’s at different levels relative to how much that property costs. . Let’s see what the the complete package actually looks like. . Yeah. . You know when I was looking in Knightsbridge yesterday. . That’s why I came back a day late. . You know they said maybe the transaction tax would be gone. . You trying to buy to Kate. . Well you know that you can go on stamp duty. . Just Google it and have a look at how much you’d have to pay property taxes. . Sure. . Is it like real real money. . Yeah. . I mean you need the real money to begin with. . To find the Haslinda Amin is real money to one of five sterling or here in a very rich 113 store. . Are you waiting for it to decline a little bit more. . Yes. . Oh yeah OK. . Euro dollar ninety nine twelve. . But a stronger dollar in the mix. . Equity markets firmer. . Yields are lower. . All of this going into the Fed a little bit later looking forward to a Fed decides surveillance special a little bit later. . Do not miss this with the former vice chair Richard Clara in the studio with the three of us breaking down the decision and going over the news conference table. . Do you want any more than that drama. . Isn’t it just fantastic. . On Saturday and Chairman Powers going to cut. . He’s no he’s not calling. . And his job is only here to see Brad Stone. . He doesn’t care about it. . Doesn’t care about us. . He said to see Lisa of course. . From New York this is Bloomberg. . Keeping you up to date with news from around the world with the first word. . I’m Lisa Matteo. . Vladimir Putin is threatening to escalate the war in Ukraine even further. . Putin is calling up three hundred thousand reserve troops and vowed to use all means necessary to defend Russian territory. . He also hinted at the use of nuclear weapons. . Meanwhile the Kremlin is moving too swiftly to annex parts of Ukraine occupied by Russian forces. . The feds ready today to hike again and to send a hawkish message for the third meeting in a row. . Policymakers are expected to raise interest rates by 75 basis points and that would bring rates to the highest level since 2008. . Chair Jerome Powell is likely to hammer home that he believes further rate hikes are needed to tame inflation. . European Central Bank President Christine Lagarde says borrowing costs will rise more in the months ahead. . Speaking in Frankfurt Lagarde said the ECB has taken major steps to tackle inflation and she expects to raise interest rates further over the next several meetings. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than 20 700 journalists and analysts and more than 120 countries. . I’m Lisa Matteo. . This is Bloomberg. . There is some thought that we’re getting to pick hawkishness but that’s not going to move the market now. . It’s the earnings that are good to move the market in a realistic reset of where we’re going in this. . Alicia Levine there on the equity markets at the NY Mellon well she’s just given us so much insight particularly with her math foundations before we move to events with United Nations General Assembly. . Lisa I think we’ve got to look at what’s moving in the market. . And just one idea off of what John was mentioning on the Bank of England tomorrow. . If you take the sterling Lisa and you extrapolate it out the weakening has been so rapid that we see a one point one zero ninety nine extrapolation in a cup of good British coffee September 29. . I find that extraordinarily Emma Chandra the fact that people are talking about the potential for parity at a time where there is a one two whammy punch of an economic backdrop on forcing the Bank of England to raise rates and then a fiscal plan that has endless spending and tax cuts that’s leaving a lot of people wondering where the foreign investment is going to come from. . We’ll continue to monitor this. . And of course we go to our full reserve coverage this afternoon with Richard Clarett. . And we’re just honored the vice chairman would choose to give us extended comments. . I’m sure he’ll be delicate there and a delicate moment for Chairman Powell. . Right now it is a delicate moment for anyone ever in climate. . I will not mince words. . Michael Bloomberg who signs my paycheck has been a world leader and saying forget about the big picture and look at the smaller tactical realities. . He provided leadership at Paris a number of years ago on this with the mayor of Paris as a dog though and does again today with the earth shock prize. . Francine Lacqua was covering the story and will be part of selected panels there. . France. . Francine this is the effort of the Prince of Wales. . He is distracted with the sadness of his family. . What did the prince what did Prince William bring to the Earth Shot Prize Innovation Summit. . Well Tom this is about I think rallying the troops. . This is about finding small innovations as you say that could actually make a real difference in real world economies. . So this is very much at the city level. . This is incubators. . This is about getting funding to the right place. . But remember we’re here in New York. . And the overarching idea is that yes we see more and more climate disasters. . We see of course what’s burning. . We see the forest burning. . We see no water in the Rhine which is a whole host of problems. . But if you’re a leader and you focus of course on world poverty inflation the war in Ukraine this may not be appropriate anymore for you. . How is this prize in the work of Prince William changed because of the war because of the surge in energy not the threat to ESG but the idea of climate debate on a back foot due to the price of commodities and coal. . How has it changed the summit. . Well it’s changed it enormously. . And I think the biggest story to come out of the U.N. . in general was President Biden today meeting to attend the meeting to actually really laid out some of the groundwork ahead of COP 27 in Egypt saying actually had no longer time to go to that meeting. . Of course he said envoys but it’s not exactly the same thing as having the top boss and saying this is still a priority. . Again if you look at energy concerns if you look at the cost of living crisis there is a real concern which actually the United Nations director general addressed right at the start of NGO yesterday was a climate still needs to be left front and center. . The other question is that of course King Charles the third. . I know you were in London for 10 days covering of course the funeral of her his dear mother Queen Elizabeth. . It was a real spearhead in this. . And if you look at the U.K. . with all the concerns about you know sustainability that even have an energy minister who is not the biggest champion. . Let’s put it that way of climate change efforts. . It’s possible that the king has to step down for anything vocal and to really you know try and push this climate change agenda printing. . How has the shortage in commodities or maybe not the shortage but the higher demand on certain commodities changed the conversation in terms of what commodities will be necessary for the innovations to cleaner energy. . So this is one of the conversations that I used to have for example with the Glencore chief executive for last four years. . I mean remember they still have coal mines but a lot of these big miners and we saw some of the efforts for example from Fortescue keep on saying look it’s all well and good to transform some of these transition economies into something greener. . But you need cobalt you need some of the components that of course are needed not only not releases but some of the technology needed. . And he used to say the fact of the matter is that the government has not prepared for this. . He wasn’t talking about one specific government. . He said the U.S. . is not. . Feared for this. . The UK won even the Eurozone is not prepared with time. . And if there is still commitment from not only countries but private and public partnerships then you could see a lot of the mining companies again really ramping up some of the cobalt and some of the minerals really needed to use these components. . But again it’s about commitment and it’s about the money to be able to make sure that these places are secure. . Francine thank you so much. . Greatly appreciated from the Plaza Hotel and the Earth Shot Prize Innovation Summit as well. . And the time that we’ve got left here Lisa I think we have to frame back to just an absolutely tumultuous 2022. . It seems like we’ve lived two or three years just going through the years today. . And my great observation Lisa is we’re at a point where we’re not even to neutral yet based on all the experts we talked to. . It’s shocking. . And just to give you a sense of that more than a dozen central bank meetings and rate decisions will be had in the next 24 hours. . As we look out at all of these nations dealing with something very new relative to the past decade or two which is inflation. . And one way to kind of look at this reset this regime change that we’ve been talking about. . Thomas take a look at the total amount of negative yielding debt outstanding. . This is now becoming obsolete. . Save for Japan. . We now have one point nine trillion dollars of negative yielding debt outstanding according to Bloomberg indexes. . Just give you some perspective. . That was eighteen point four trillion dollars of negative yielding debt in December of 2010. . These are flows of money in the flows to stabilize. . We had this is try to get this up right now just from the beginning of the year. . It’s not year to date but it’s close enough to the peaks that we’ve had. . Lisa the Pacific Rim X Japan which is a fiction we all understand that a 9 percent depreciation the JP Morgan emerging effects indices which is more complex an 8 percent depreciation. . Those are big figure numbers in foreign exchange and for the United Nations and frankly for Chairman Paul. . Yeah. . An extreme visual version that John was showing earlier of 25 percent depreciation of the Japanese yen and the more violent example here. . But yeah especially the emerging nations. . How do you deal with also a double whammy of both higher commodity prices and importing inflation. . The fact that those commodities are paid for in dollars that are getting stronger becomes a very difficult equation especially as we head into a two year yield three point nine five percent. . That’s what I want to hear at 2 p.m. . and on to 230 in a press conference. . Lisa in fixed income what will you watch. . I mean what’s the real yield. . I’ll see how much people are expecting the Fed to stay out in front of inflation and not provide the same kind of accommodation that they have in the past. . And also just in terms of risk appetite how much if we priced in. . Right. . I mean basically if you get real yields continuing to climb that continues to make triple evers all cash. . You look good to some people who might make it to your 30s spread. . Wow. . Yeah. . Negative 41 basis points. . I did not realize at least. . This funny. . Isn’t that the greatest inversion going back. . Kate I have to look at that. . I I failed. . I didn’t do the math. . Maybe I’ll get it right by 2:00 p.m. . this afternoon. . Again we are honored that Dr. . Claire will join us in the 2:00 p.m. . hour. . Stay with us. . This is Bloomberg. .",
            "url": "https://safenumz.github.io/blog/english/2022/09/21/bloomberg-surveillance.html",
            "relUrl": "/english/2022/09/21/bloomberg-surveillance.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "[Recommender System] AutoRec: AutoEncoder Meets Collaborative Filtering",
            "content": "AutoRec: AutoEncoder Meets Collaborative Filtering . . Abstract . . Autoencoder를 Collaborative Filtering에 적용 | MovieLens와 Netflix 데이터셋에 대해서 좋은 성능을 입증 | . Introduction . . Autoencoder를 Collaborative Filtering에 적용한 논문 | 최근 Vision과 Speech 분야에서 성공을 거둔 neural network를 적용한 논문 | Representation과 computation에서 모두 장점이 있음 | . The AutoRec Model . . $u in U = {1, ..., m} to r^{(u)} = (R_{u1}, ..., R_{un}) in mathbb{R}^n$ | $i in I = {1, ..., n} to r^{(i)} = (R_{1i}, ..., Rmi) in mathbb{R}^m$ | . . Reconstruction error of input $r in mathbb{R}^d$ | . . Observed rating만 학습에 사용 | Regularization term을 통해 overfitting을 방지 | 각 $r^{(i)}$는 Backpropagation에서만 observed inputs에 대해서 가중치를 업데이트 | . . Predicted rating을 구함 | . RBM-CF와 비교 RBM-CF는 restricted Boltzmann machine을 사용한 일반화된 확률 모델이지만, AutoRec은 discriminative하고 autoencoder를 활용한 모델 | RBM-CF는 log likelihood를 최대화하고, AutoRec은 RMSE를 최소화함 | 학습할 때, RBM-CF는 대조발산(Boltzmann machine), AutoRec은 비교적 빠른 gradient-based 역전파를 사용 | RBM-CF는 discrete rating에 적합하고 각 rating 값에 대해 파라미터를 추정하지만, AutoRec은 더 적은 parameter가 필요하고, overfitting될 확률이 낮음 | . | MF와 비교 MF는 linear representation이지만, AutoRec은 non-linear | MF는 user, item 모두 latent space에 두지만, (item-based) AutoRec은 item만 embed 함 | . | . Experiments . . Item-based가 user-based 보다 성능이 우수함, Item 데이터가 더 많기 때문 | Hidden layer의 non-linearity가 효과가 있음 | AutoRec이 모든 baseline에 대해서 더 우수한 성능을 보여줌 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/09/21/paper-autorec.html",
            "relUrl": "/paper/2022/09/21/paper-autorec.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "[Recommender System] DeepFM: A Factorization-Machine based Neural Network for CTR Prediction",
            "content": "DeepFM: A Factorization-Machine based Neural Network for CTR Prediction . . Abstract . . Click Through Rate(CTR)을 예측하는 모델 | Low와 High-order interactions 모두 학습할 수 있음 | Factorization Machine의 장점과 Deep Learning의 장점을 모두 합친 모델이 DeepFM | 추가 feature engineering 없이 raw feature를 그대로 사용 | 벤치마크 데이터와 commercial 데이터에서 모두 실험을 완료 | . Introduction . CTR: user가 추천된 항목을 click할 확률을 예측하는 문제 CTR(estimated probability)에 의해 user가 선호할 item 랭킹을 부여 | . | Learn Implicit Feature Interaction App category와 Timestamp 관계: 음식 배달 어플은 식사시간 근처에 다운로드가 많음 | User gender와 Age 관계: 남자 청소년들은 슈팅과 RPG 게임을 선호 | 숨겨진 관계: 맥주와 기저귀를 구매하는 사람들이 많음low와 high-order feature interaction을 모두 고려 Explicit과 Implicit features를 모두 모델링할 수 있음 . | . | . &#49440;&#54665; &#50672;&#44396; . Generalized Linear Model(ex. FTRL)[McMahan et al., 2013] 당시 성능은 좋은 모델이었으나, High-order feature interaction을 반영하기 어려움 | . | Factorization Machine[Rendle, 2010] Latent vector간의 내적을 통해 pairwise feature interaction 모델링 | Low와 high-order 모두 모델링이 가능하지만, high-order의 경우 complexity가 증가 | . | CNN and RNN for CTR Prediction[Liu et al., 2015; Zhang et al., 2014] CNN-based는 주변 feature에 집중하지만, RNN-based는 sequential해서 더 적합 | . | Factorization-machine supported Neural Network(FNN), Product-based Neural Network [Qu et al., 2016; Cheng et al., 2016] | Neural Network 기반으로 high-order 가능하지만 lower-order는 부족 | Pre-trained FM 성능에 의존할 수 있음 | . | Wide &amp; Deep [Cheng et al., 2016] Low와 high-order 모두 가능하지만, wide component에 feature engineering이 필요 | . | Contiributions . . DeepFM이라는 모델 구조를 제안 Low-order는 FM, High-order DNN | End-to-end 학습 가능 | . | DeepFM은 다른 비슷한 모델보다 더 효율적으로 학습 가능 Input과 embedding vector를 share 함 | . | DeepFM은 benchmark와 commercial 데이터의 CTR prediction에서 의미있는 성능 향상을 이룸 | . Our Approach . DeepFM . . Sparse features의 노란색 부분은 embedding vector($x_{field_{i}}w_{i} = V_{i}$)에 해당 | . $ x = [x_{field_1}, x_{field_2}, ...,x_{field_m}], , hat{y} in (0, 1)$ . $ hat{y} = CTR _model(x) $ . . FM Component . . embedding vector의 내적을 order-2의 가중치로 사용한다는 것이 포인트 | . $y_{FM} = , &lt;w, x&gt; + displaystyle sum_{j_{1}=1}^d sum_{j_{2}=j_{1}+1}^{d}&lt;V_{i},V_{j}&gt;x_{x_{j1}} cdot x_{j2}, ; w in R^d , and , V_{i} in R^k $ . Deep Component . . 모든 embedding vector을 모두 합친 것이 input이 됨 | . $ a^{(0)} = [e_{1}, e_{2}, ..., e_{m}]$ $ a^{(l+1)} = sigma(W^{(l)}a^{(l)} + b^{(l)})$ $ y_{DNN} = sigma(W^{|H|+1} cdot a^H + b^{|H|+1}) $ . Relationship with the other Neural Networks . . . Experiments . Criteo Dataset 45 million user&#39;s click records | 13 continous features, 26 categorical ones | 90% for training and 10% for testing | . | Company* Dataset 7 consecutive days of user&#39;s click records from Company* App Store(game center) | Next 1 day for testing | Approximately 1 billion records | App features(identification, category) | User features(user&#39;s downloaded apps) | Context features(operation time) | . | Evaluation Metrics AUC(Area Under ROC) and Logloss(Cross Entopy) | . | Efficiency Comparison . . Linear model 대비 각 모델이 학습에 걸린 시간을 나타냄 | FNN은 pre-training에 시간을 많이 쏟음 | IPNN과 OPNN은 hidden layer에서 inner product를 하면서 시간이 매우 오래 걸림 | . Effective Comparison . . Hyper-parameter Study . . . . . . Conclusion . DeepFM deep component와 FM component를 합쳐서 학습 | Pre-training이 필요하지 않음 | High와 Low-order feature interactions 둘 다 모델링 | Input과 embedding vector를 share 함 | . | From experiments CTR task에서 더 좋은 성능을 얻을 수 있음 | 다른 SOTA 모델보다 AUC와 LogLoss에서 성능이 뛰어남 | DeepFM이 가장 efficient한 모델 | . | .",
            "url": "https://safenumz.github.io/blog/paper/2022/09/14/paper-deepfm.html",
            "relUrl": "/paper/2022/09/14/paper-deepfm.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "[Recommender System] Wide and Deep Learning for Recommender system",
            "content": "Wide and Deep Learning for Recommender system . . Abstract . . Wide: Memorization Cross-product feature transformation | More feature engineering effort | . | Deep: Generalization Generalize to unseen feature combinations | Less feature engineering effort | Over-generalize | . | Wide &amp; Deep Joint wide linear models and deep neural networks | . | . Introduction . Memorization의 정의 Frequent co-occurrence of items or features | Exploit correlation available in the historical data | . | Generalization의 정의 Explore new feature combinations | . | 추천 시스템에서 Memorization과 Generalization Memorization: more topical and directly relevant to the items | Generalization: improve diversity of the recommendations | . | Google Play Store의 apps recommendation 실험을 했지만 general하게 적용할 수 있음 | . 기존 추천 모델의 한계 Generalized Linear Model Logistic Regression과 같은 모델에 다양한 features를 만들어서 학습 | Memorization(주어진 데이터 기억)에 특화 | 새로운 또는 관측되지 않은 데이터(unseen data)에는 취약 | 오버피팅이 발생할 수 있음 | . | Embedding based Model Factorization Machine, Deep Neural Network 방법을 활용 | Generalization(unseen data 대응)에 특화 | Non-zero prediction으로 인해 섬세한 추천이 불가 | . | . | . Contributions . Wide &amp; Deep Learning framework를 제안 Jointly training feed-forward neural network and linear model | . | Google Play에 사용화된 Wide &amp; Deep 추천시스템의 평가와 구현내용을 공개 모바일 앱스토어에서 App 구매, 다운로드 등 향상 | 학습과 서비스 속도를 충족 | . | Tensorflow 기반의 API를 오픈소스 형태로 제공 | . Wide &amp; Deep Learning Framework Overview . . Recommender system Overview . . Inference: User가 App Store 방문할 때 query 생성 | Train: Log 등 User Actions을 활용하여 모델 학습 | . Wide &amp; Deep Learning . The Wide Component . $y = w^Tx + b$ . Generalized Linear model | y &rarr; prediction (유저 행동여부) | $x = [x_{1}, x_{2}, ..., x_{d}]$ side d의 feature vector | Raw input features &amp; cross-product feature | . | $w = [w_{1}, w_{2}, ..., w_{d}]$ &rarr; model parameters | $b$ &rarr; bias | . . $ phi_{k}(x) = displaystyle prod_{i=1}^{d}x_{i}^{c_{ki}} quad c_{ki} in {0, 1 }$ . $ phi_{k}(x)$ &rarr; Cross-product feature의 $k$번째 요소 | $c_{ki} in {0, 1 }$ &rarr; Raw feature의 $i$번째 요소가 true인지 여부 | Feature interaction 반영 | 모델에 Non-linearity 적용 (예시) feature가 (gender, language)로 구성되어 있고 cross-product transformation(feature)의 $k$번째를 AND (female, en)일 때, 모두 만족하면 1 아니면 0 | . | . The Deep Component . . Features를 임베딩과 뉴럴넷에 학습 Generalization | . | . $a^{l+1} = f(W^{(l)}a^{(l)} + b^{(l)})$ . $l$은 number of layers | $f$는 activation function(ReLU) | $a^{(l)}, b^{(l)}, W^{(l)}$ Activation, bias and model weights at $l$-th layer | . | Dense Embeddings Normal Feature에 해당하는 임베딩을 랜덤 초기화(random initialize)하고 모델 전체 학습 | . | . Joint Training of Wide &amp; Deep Model . . Continuous와 categorical features를 concat하여 Deep의 input a로 활용 | user install app과 impression app을 cross-product하여 Wide의 input x로 활용 | . . $P(Y=1|X)$ app을 다운받을 확률 | Sigmoid 함수의 input으로 Wide와 Deep을 합한 값을 넣어주고, 그 output이 최종 결과가 됨 | . System Implementation . . Experiment Results . . Offline AUC Test set의 사용자 행동결과로 성능 측정 | AUC는 클수록 좋은 점수를 나타냄 (=ROC 커브의 아래 면적) | . | Online Acquision Gain 실제 사용자들의 action을 추적 | 기존 모델 대비 application 실제 다운로드 수가 증가 | . | . . Multithreading, Split each batch into smaller batches &rarr; latency를 14ms 줄일 수 있었음 | 추천 알고리즘 성능 뿐만 아니라 Commercial Mobile App Store의 서비스까지 신경 쓴 것을 알 수 있음 | . Conclusion . Memorization의 Wide와 Generalization의 Deep을 결합한 모델을 제안 Wide &amp; Deep Learning | . | Linear model과 embedding-based model의 장점을 잘 조합 | 좋은 추천 알고리즘을 실제 서비스 환경에서 작동할 수 있도록 구현 | Open Source로 Tensorflow API를 구현하여 다양하게 활용 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/09/10/paper-wide-and-deep.html",
            "relUrl": "/paper/2022/09/10/paper-wide-and-deep.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "[Recommender System] Factorization Machines",
            "content": "Factorization Machines . . Abstract . Factorization machine은 SVM과 Factorization Model의 장점을 합친 모델 Factorization Model의 예시: Matrix Factorization, Parallel factor analysis, specialized model (SVD++, PITF or FPMC) | . | Real valued Feature Vector를 활용한 General Predictor | Factorization Machine의 식은 linear time | 일반적인 추천 시스템은 special input data, optimization algorithm 등이 필요 | 반면, Factorization Machine은 어느 곳이든 쉽게 적용 가능 | . Introduction . Factorization Machine은 general predictor이며, high sparsity에서도 reliable parameter를 예측할 수 있음 | Sparse한 상황에서 SVM은 부적절 Cannot learn reliable parameters(hyperplanes) in complex(non-linear) kernel spaces | . | FM은 복잡한 interaction도 모델링하고, factorized parameterization를 사용 | Linear Complexity이며, linear number of parameters 임 | . Contributions . . Factorization Machine의 장점 Sparse data(일반적인 상황) | Linear Complexity | General Predictor로써 추천시스템 이외 다른 머신러닝에서 사용 가능 | . | . Prediction Under Sparsity . . 일반적으로 볼 수 있는 영화 평점 데이터의 설명 | Matrix Factorization은 user와 movie, 그리고 해당 rating만 사용 | Factorization Machine은 더 다양하게 사용할 수 있음 | . . Factorization Machine (FM) . Model Equation . $ Large displaystyle hat{y}(x) := w_{0} + sum_{i=1}^{n}w_{i}x_{i} + sum_{i=1}^{n} sum_{j=i+1}^{n}&lt;v_{i},v_{j}&gt;x_{i}x_{y}$ . $w_{0}$ &larr; Global Bias . $w_{i}x_{i}$ &larr; $i$번째 weight를 모델링 함 . $&lt;v_{i}, v_{j}&gt;$ . $&lt;v_{i}, v_{j}&gt; := displaystyle sum_{f=1}^{k}v_{i,f} cdot v_{j,f} $ &gt; - Size $k$의 두 벡터를 내적 함 | . $ displaystyle sum_{i=1}^{n}w_{i}x_{i}$ . Matrix Factorization &larr; $W_{u} times W_{j} $ user와 item latent vector | . | Factorization Machine &larr; $W_{i} times x_{i} $ $x_{i}$마다 구함 | . | . $&lt;v_{i},v_{j}&gt;x_{i}x_{y}$ . 변수간 latent vector 조합을 고려 | 이 때, degree = 2인 경우 모든 interaction을 얻을 수 있음 | pairwise feature interaction을 고려하기 때문에 sparse한 환경에 적합 | . $w_{0} in mathbb{R}, w in mathbb{R}^n, V in mathbb{R}^{n times k}$ &rarr; 추정해야 할 파라미터 | 2-way FM(degree = 2): 개별 변수 또는 변수 간 interaction 모두 모델링 함 | 다항 회귀와 매우 흡사하지만, coefficient 대신 파라미터마다 embedding vector를 만들어서 내적 | . Computation . . Factorization of pairwise interaction | 2개 변수에 직접적으로 연관있는 model parameter가 없음 | Pairwise interaction 식을 정리하면 다음과 같음 $O(kn^2)$ &rarr; $O(kn)$ | . | . . . d-way Factorization machine . . 2-way FM을 d-way FM으로 일반화할 수 있음 | 마찬가지로 computation cost는 linear임 | http://www.libfm.org 에 다양하게 활용할 수 있는 module을 공개 | . . . Conclusion . Factorized Interaction을 사용하여 feature vector x의 모든 가능한 interaction을 모델링 | (High) sparse한 상황에서 interaction을 추정할 수 있음. Unobserved interaction에 대해서도 일반화할 수 있음 | 파라미터 수, 학습과 예측 시간 모두 linear 함 (Linear Complexity) | 이는 SGD를 활용한 최적화를 진행할 수 있고 다양한 loss function을 사용할 수 있음 | SVM, matrix, tensor and specialized factorization model 보다 더 나은 성능을 증명 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/09/03/paper-factorization-machines.html",
            "relUrl": "/paper/2022/09/03/paper-factorization-machines.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "[Finance English] Bloomberg Surveillance (2022.08.31)",
            "content": "I think in the next three to four months through the rest of this year it’s going to be a really volatile time. . You have to be opportunistic. . You have to be patient. . And you have to realize that this probably shouldn’t go on forever. . The Fed is going to face an increasingly more difficult challenge this time around. . when they pause, You want to be very wary about the relief rally. . You are fighting the Fed. . If you’re bullish it’s hard to find anybody that’s bullish now. . this is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . What a difficult couple of days. . Live from New York City for our audience worldwide. . Good morning. . Good morning. . This is Bloomberg Surveillance on TV and radio alongside Tom Keene and Lisa Abramowicz some Jonathan Ferro futures down a tenth of one percent T.K. . the last three days down 5 percent on the S&amp;P. . It’s really fragile and some of it is just the distribution of that down 5 percent. . The different sectors John the one shining light for not the bulls but I guess the less bears is the VIX really hasn’t moved. . John the sweat that’s out there the August sweat that’s out there says VIX 30. . VIX is at 26. . We’re playing off the data. . Some good news is bad news. . Apparently consumer confidence yesterday job openings they’re moving in the right direction. . Good news bad news. . The Fed’s going to do a whole lot more. . This market struggle we’re going to wait for the day that we start to see that today with ADP. . I don’t know what to make of ADP Jan. . I just don’t. . I’ll be honest. . I just don’t trust it. . But there’s a lot of bad data. . I do trust on it in America. . It’s just where are we into September. . I believe that’s tomorrow. . Well Lisa let’s start with the data out of Europe. . Bad news is bad news. . Yeah. . Nine point one percent consumer price inflation in the euro region coming in above expectations for 9 percent really fueling these fears and these expectations of a 75 basis point rate hike not by the Fed by the ECB. . And this is what we have to keep talking about. . All of a sudden we’ve reset expectations not just for Fed rate hikes getting bigger than expected but also over in Europe. . And what does that magnitude. . That’s sort of a joint effort really mean for market. . If he’s seen how much the German 2 year is meets first thing I looked at today up 930 basis points. . Tom. . Lisa that is unbelievable. . Up to one point two percent from down in the 20s 26 27 basis points to start the month. . And it’s not just there. . And it’s not just nominal yields. . If you look at real yields both in Europe and in the United States they’ve risen to the highest levels since the heart of the pandemic since the disruptions that really call the Fed into action. . How much are we seeing a resetting that’s been fully priced into the rest of the risk assets versus maybe not so much. . And this is why the equity markets struggling still this morning. . Good morning to you. . If you’re just tuning in with down about a tenth of 1 percent on the S&amp;P no drama on the Nasdaq at least for now up about a tenth of 1 percent. . Call it two tenths of 1 per cent higher yields higher gain though five or six basis points on a 10 year to 315. . Eighty eight euro dollar negative four tenths of one per cent. . Ninety nine. . Rameau sold about your world. . The bond market. . Yeah. . And this is how it really goes to the question you were asking yesterday. . You’ve been asking all year which is if the euro region. . If the ECB does raise rates by 75 basis points is that positive or negative for the euro. . Right now it is negative. . And it is also because the backdrop with the energy crisis today the NFP window is shutting for a three day maintenance. . Maybe maybe they’ll come back on line. . Gazprom is halting exports of natural gas to Europe during this period of time will come back online is the big question. . In the meantime you are seeing natural gas prices climb a little bit from the declines yesterday and the day before in Europe. . The reason why they declined is because there were there was evidence that stockpiles were building faster than people had expected. . But still in my mind this is the story heading into the fall. . This could really shape what happens in Europe and frankly globally with respect to sentiment 815 AM. . Tom you were talking about the ADP employment change. . They have rejiggered some of those expectations. . You don’t know what to make of them. . I think it actually takes on more import not necessarily because of how they’ve rejiggered expectations but because of the JOLTS data yesterday which was rather shocking. . It was expected to go down. . It did not. . It went up. . There were more openings that were posted to openings for every unemployed American. . This is not what the Fed would like to see. . They want to see tightening. . They are not seeing it today. . Perhaps we’ll get some indication of how Fed speakers are really speaking to that time. . I think it’s interesting. . There was a weak warning for research for the key. . No it was the Alan Ruskin note in the Beveridge curve. . And he says the U.S. . is different and it falls right into the JOLTS survey where you’ve got the idea that vacancies in America make us different and maybe we won’t see a higher unemployment rate. . Well this is the dream for the soft landing. . And we might get some more sense of how close or far away we are from Loretta Master who is speaking at 8 a.m. . Then we’re gonna be hearing from Laurie Logan. . I am not familiar with her. . She is the new Dallas Fed president and she’ll be speaking at 6:00 p.m. . and at 6:00 p.m. . we’ll hear from Rafael. . John I’m lost. . Didn’t they just speak to Tom. . Mr. and Bostic. . The three of them. . I mean maybe Laura. . Logan did but I think we met Laurie Logan some but didn’t on Friday just speak first. . Cups of coffee. . You’re I think we’ve heard from them a few times. . We’ve heard the message though pretty clear. . Tom Keene I think that’s the theme here for a lot of people. . They have stayed on the same page the same script repeated repeatedly every single one of them over the last few days. . John Williams as well of the New York Fed to your point about the markets like the two here has just broken out to a new high. . And with it the yen is right up against new yen weakness. . There is a tension out there. . It screams August very very close to 350 at 340 929 right now. . Christine noting joins us global chief investment officer at Deutsche Bank Private Bank. . Christine we have taken out the June highs on a two year yield. . And the question a lot of people are asking is whether this equity market has the test the June lows. . Your thoughts. . Word from from our point of view if you think from a gross perspective we do think there is at least mild recession coming in the US and there is also a recession unavoidable for us in the Eurozone. . And from that perspective I wouldn’t be surprised if equity markets go down a bit further from here. . And we have been calling saying the June July uptick is probably not is a bear market rally is probably not where we end. . We have been arguing for by the next step. . And I wouldn’t be surprised if we see and if you look at the markets is another 3 4 5 6 percent depending on the market’s downside. . I wouldn’t rule out that we get there from our point of view. . Christian what do you do with bonds. . The chart that I put up earlier of price flat yield I guess up a little bit. . Global bonds on an aggregate basis are back eleven years. . What do you do with that institutionally. . Well from our point of view it has been right to be short duration and we kept it so from that perspective at least you can avoid to be super long duration as many investors sometimes have to be. . I think that’s number one. . And then you really need to look at quality from our point of view. . So you had discussed before if there’s a recession what does it mean to credit spreads. . I think we also need to look a little bit ahead as we don’t expect at least in the US the sustained long recession maybe as two Qantas three quarters. . I think if spreads are widening there is an opportunity. . If you look into investment grade I would be a bit more careful on the on the high yield side. . From our point of view we don’t think these levels which seem attractive but from our point of view is not where we want to go in right now. . Christian is Europe in a toxic place to invest in right now based on the energy backdrop and some of the volatility there or are you still seeing perhaps some opportunities even ahead of us. . Well I wouldn’t call it toxic to a very honest. . But of course it’s tough to be very optimistic about this point in time. . Let’s call it like this. . I think there are opportunities. . If you think the ECB is doing quite a lot as we do we can imagine over the next twelve months the ECB is moving from zero now to two which is quite something. . I would say there is I think opportunities in European financials which could profit from that. . But for the overall market it depends really on the energy crisis and how the winter plays out to be. . And from their perspective it’s not going to be easy for Europe the next month I think. . Question Did you just say that you’re investing in European banks. . Yeah I think European financials have upside because as I said if the ECB is moving they can profit from from the higher interest rate level. . And from that perspective now we had zero. . And I would expect the ECB not to look so much at growth because their target is really price stability and to move up in increasing rates. . And from their perspective I think that would be positive for them. . Yes Christine they’re can into a recession. . What’s more important here. . The rate hikes saw the economic backdrop. . Yeah but I think yeah. . Recession. . Yes. . But also here in Europe I think is not a recession which is a deep recession with which takes quarters and quarters. . From that perspective yes there is some implication and you have not seen a massive movement upwards although the market is pricing some of these VIX not all. . I think the ECB is doing more. . And from that perspective I think there could be some positives being overgrowth. . Looking at rate hikes from our point of view well that’s a trade for the brave. . Christine thank you sir. . Christine noted that if Deutsche Bank private bank Lisa Abramowicz getting longer European banks actually heard that from Sandlin to Brown over at BNP Paribas a number of months ago. . But that was at the June lows. . It wasn’t in the mess we’re in right now. . Look this has been the pain trade. . There is an upset argument especially if suddenly people have been complaining about negative rates for the past decade and you don’t have negative rates anymore. . And that could be a benefit. . But to your point hiking into weakness is it the weakness that matters are the hiking that matters. . And the currency market is saying it’s the weakness that matters because that is what the euro is responding to. . And I really have to take some cues from that. . And this is what the European banks have wanted some for a long long time. . They’re getting it though in a very very difficult. . John you’re being way too kind. . Their performance has been absolutely irresponsible. . Is that the board of directors level. . I just looked at the chart from my good friends at BNP Paribas. . Glad they support Tanners. . They’ve gone nowhere in 13 years. . 75 basis point hike is the expectation some at the ECB. . Now Capital Economics out this morning nine point one per cent CPI to Lisa’s point. . If you’re looking at these banks right now let’s put it all together. . T case questioning the execution. . Lisa you’re questioning the economic backdrop. . Is rates is rates enough to be supportive of stock prices for European banks. . Well just take a look at what we’ve been hearing from all of the banks. . Take a look at the capital markets activity. . You’re not getting the revenues from that because you’ve seen a massive slowdown perhaps a little bit of a pickup in the rally. . But otherwise IPO is whether it’s a debt issue and says whether it’s you know stock offerings whatever it is it is all stopped. . So then what is going to be the marginal driver. . OK. . Trading well there it’s kind of a little bit sketchy compared to where it has been traditionally because of how unpredictable it is. . There is the marginal driver John was the three cups of coffee ago. . The bank was moving 250 people into Asia. . Oh yeah. . Now they’re moving about a John Tucker. . They think John the guy that lives next door to you and that walk up you live in was a spec banker. . He’s toast. . Lisa has picked up on the right theme. . You mentioned Asia. . You mentioned some of the banks pulling back on deals folded into one story Brahma. . This is what the banks have got to do pull back. . Is there any surprise that Goldman and Morgan Stanley are now saying let’s go let’s go. . Covid can’t get back to work in September. . I especially it’s not a coincidence that it’s in tandem with the school starting. . Right. . Basically it’s like hey set up an excuse anymore. . Let’s go. . Last September it was let’s go. . And then it was like oh maybe not. . We can’t. . Maybe not this September. . Can I say it’s real. . Yes I say it’s real time. . Is it real this time. . Get to work. . See you in sir. . OK that’s nice. . Who done that. . Tom Keene. . Viviana Hurtado. . IBEX. . So let’s get back into radio banter I guess. . Shop futures unchanged from New York City. . This is Bloomberg. . Keeping you up to date with news from around the world with the first word answers could get inflation in the eurozone is set a another all time high. . Consumer prices in the 19 country currency bloc rose nine point one percent in August from a year ago. . That beat the median estimate in a Bloomberg survey of economists. . And it strengthens the case for the European Central Bank to consider a jumbo interest rate hike when it meets next week. . The Justice Department says White House records held in a storage room at Donald Trump’s Florida home may have been moved before an FBI search in June. . The Justice Department says that could have been an attempt to obstruct the investigation. . In a filing that was a photo of files labeled Top Secret said to have been found in the former president’s office. . The government was responding to his lawsuit to appoint a special master to review the documents. . It’s the biggest two year decline in U.S. . life expectancy in almost a century and it’s blamed on the Covid pandemic. . Life expectancy fell by almost a year in 2021 after a decline of one point eight years in 2020. . The pandemic has been directly responsible for more than one million American deaths and shares of SNAP are falling today according to The Verge. . The parent of Snapchat plans to lay off about 20 percent of its nearly 60 500 employees starting today. . The stock already has fallen almost 80 percent this year. . SAP has been struggling with a slowdown in advertising spending. . And Mikhail Gorbachev is being remembered as the last leader of the Soviet Union who ended the Cold War. . Gorbachev died Tuesday at a Moscow hospital. . His attempts to shake up the Soviet Union’s political and economic system led to the collapse of the communist superpower. . Gorbachev’s career disintegrated in the process. . He was 91. . Global news 24 hours a day on air and on Bloomberg Quicktake and Rich. . We’re committed to getting inflation under control and there’s a path to get there. . A recession is obviously a risk in the process. . I’ll just say for context nobody ever canceled the business cycle so that when you say there’s a risk of recession it doesn’t have to be like a 2008 recession. . Thomas Falcon now the Richmond Fed president live from New York City this morning. . Good morning with Tom Keene and Lisa Abramowicz. . Some Jonathan Ferro futures just about positive on the S&amp;P after three days of losses on the S&amp;P 500. . Big losses as well were positive just two points up by not even a tenth of 1 percent. . It’s pretty clear to me to everyone that Fed officials are saying we’re happy with the market reaction. . We’re going to tighten. . We got to stay there. . We’re not going to back away. . At the first sign of success the hurdle to Paul’s laser is higher. . The hurdle to cap is higher. . You want to fight that on. . That’s that was your question yesterday. . And the answer that we heard from Sebastian Page was no. . If you want to fight that and think that we’re going to see gains good luck. . Probably getting your face ripped off in our Wall Street parlance. . The question I have is what have we priced in. . And some people are saying small caps for example have fully priced in recession. . What about big tech. . What about some of the drivers. . What has priced in recession and what hasn’t. . And how much are people going to really discern between the two. . Short and shallow seems to be the theme. . Tom Keene not just on the United States. . I just heard from Deutsche Bank that talking about a U.S. . recession and we still hear the short and shallow kind of story. . John I have huge problems because I’ve been wrong so many times. . You can line them right up. . Let’s start with 1980 and 81 in the double recession wrapped around Paul Volcker. . It’s hard to pick the recession though and define it. . John it’s even harder to get the magnitude right. . I couldn’t agree more Tom. . And I’m not here to say it won’t be a short and shallow one. . It’s not for me to say that. . I will say I think we should be open minded given how wrong I’ve been about so many different things over just two years. . We’ve got to go back to it. . We’ve got to 348 in the two years. . Quickly here John Yen is just this far away from yen weakness. . It’s a global issue right now. . We’ve taken out the highs of the middle of June June 14th on a two year yield. . We’ve taken them out 348 27 right now came really close to 350. . And back when we reached those kind of levels. . Yeah the middle of June this equity market was a whole lot lower. . Folks John Farrow has figured out that tuition in United States is a breeze. . This is the week where the tuition checks get written and the agony is out there. . There’s also agony in the political space. . Jack Fitzpatrick joins us at the end of August to reef shape to September and the election. . Jack Pugh does the best research on this. . It is stunning when they looked recently at the political typology of America how small the middle is. . They’ve got two surveys Republicans and Democrats somewhere between 23 and 28 percent of America is the middle. . Are they worth going after for these politicians. . In recent years I think you can find some evidence that there’s less focus on going after anybody who would describe themselves as persuadable. . A lot of this is about motivation of the base. . You see it in primaries. . At the same time you know especially just looking at President Biden’s speech last night. . I think there is a bit of a persuasion attempt there when you hear him talking about funding for the police and funding and support for the FBI and kind of going on a two track example that you know there are there are some seemingly winning political messages that still go for it. . Right. . Persuasion rather than motivation. . But overall big picture the last decade or so has been a way more of a shift toward getting your base out focusing on turnout. . And that’s a nash in a national trend. . Jack sort of a personal question. . I the clearest memory of sitting on the couch. . I believe it was a Sunday evening when Lyndon Baines Johnson stunned the nation and said he would not run for a second term. . Are we going to hear that tomorrow night. . That’s still a big question in Washington I don’t know about tomorrow night there. . If that were the case there’s still the question about the strength of somebody like Kamala Harris and who would be the front runner for the Democratic position. . I haven’t heard from anybody who feels confident that tomorrow is the night. . But you have heard some some some hints from Democrats who don’t think that the president is going to run again. . It came up in the New York race where Carolyn Maloney brought it up a couple times. . It’s something they’re not supposed to say but there is a bit of an expectation out there that the president wouldn’t run again. . I don’t know if that’s imminent or not at this point. . Just quickly Jack are we hearing anything about the student loan relief and whether that’s actually going to get legally challenged whether that’s actually going to go into effect. . There could be legal challenges but a lot of the pushback at this point has been Republicans talking about how the president should not have this power and what can be done in the future to take that away. . It’s a little hard to predict exactly how this would play out in courts if there is a legal challenge now. . But again a lot of the focus has been the political pushback and maybe some future legislative pushback depending on how much Republicans take back in the midterms. . Jack last the question we ask every now and again. . Where’s Janet Yellen. . I still still a little more low profile than you might expect for someone like her. . Same same story. . A lot of focus on the Fed. . Some talk from the president on the economy. . I wish I could come in here with an answer on the whole story about Biden and Yellen and and this relationship a bit quiet. . Jack thank you. . Down in Washington Jack Fitzpatrick T.K.. . It is utterly bizarre. . How did you manage to recruit one of the best labor market economists on the planet. . The former Fed chance to treasury secretary and then tumble weight to nothing. . I will never forget this. . I was standing in the early morning looking across the White House lawn. . This is Bush the younger. . And I realized that everything was run out of the White House. . And there’s been a modern disease. . I don’t know if it’s the same in London but there’s a modern disease here that everything gets run out of the White House and the cabinet members are figureheads. . Frankly Mr Blinken has been maybe a little less visible than Kissinger was to say the least John. . We’ve got a major issue on Twitter. . Tots are tweeting out that it’s a derby. . Is it a derby or a derby today with W and technically technically that makes it a London derby. . I’d say derby. . We talk about a North London derby between Tottenham and Arsenal. . And West Ham is an East London team Tom Keene Kent. . Tottenham is a north London outbreak up surveillance an app for this this afternoon John. . But West Ham they’ve basically sucked since Nate Shelly joined the team. . Right. . I think you’ll wonder whether he’s not. . Actually you’re right. . Well I just coach. . He’s up from Championship League. . No I think I think Mr. . Moyes will have a problem with that. . You ready to think that Ted last suffers for a lifetime. . Yeah he’s mentioned Wichita I think. . Waits to win the new season. . Come. . I have no idea. . I don’t know. . I mean you know it’s a documentary. . So they gonna maybe have a proper documentary and it’s got the season wrapped up. . Now we’ll see how Knight did at West Ham. . You’re ridiculous. . His positive two tenths of one percent on the S&amp;P. . I should go and do some research on six tenths of one percent. . You didn’t research right now in London. . You want to do a road trip to London. . Absolutely. . Just get on a road trip. . London from ISE like. . Count me out. . Count me out for New York City this morning. . Good morning. . Had AM radio seen on TV from audience worldwide. . This is Bloomberg Surveillance. . Live from New York City this morning. . Good morning to you all. . It’s the price action the shape of things so far early days. . Up about a tenth of 1 percent on the S&amp;P 500. . Call it two tenths if you want. . On the Nasdaq 100 up five or six tenths of one percent following the biggest three day rout on the S&amp;P 500 since June 14th down 5 percent over the last three days. . What happened back on June 14th. . Yeah it’s topped out for the year. . And we took out the closing high of June 14th just yesterday in this bond market. . Sees tens and 30s look like that. . We took out that June 14th tie on the two year not the 10 year. . Right now 348 27 new multi-year high say yields higher again by 4 basis points. . That’s biting eating into the equity market over the last couple days. . Is this fat. . This Fed communicates pretty strongly. . It’s ready to go again. . Go big if we have to off the back of better than expected data yesterday and then stay there. . The New York Fed president The Wall Street Journal yesterday found this very very fascinating that everyone’s on the same page at the moment about staying there and staying that home for a prolonged period of time. . The Fed speak. . I am baffled by the Fed speak frankly John. . We heard in Jackson Hole and we got a new round of it today. . We’re just going to hear the same thing. . I think so. . Possibly they’re all saying on the same script some if you think the Fed is fascinating confusing pick out whatever what you want the ECB. . I tell you what the hawks are in charge of the ECB right now that’s for sure. . The Bundesbank yesterday were talking about going big again even if you do fear recession. . They fear that. . Let’s go again this morning off the back of CPI come again with a nine handle. . The Bundesbank communicated again. . We need to act decisively. . So picture this. . You’ve gone on a German two year at the start of orcas from about 27 basis points that are close on the first trading day of this month to one point two percent. . So that’s a move of more than 90 basis points over the last month. . And yet the euro is weaker on the month not stronger. . At some ninety nine. . Eighty one you live. . This is Germany and France on the same page in terms of let’s go hawkish front loaded tone. . At the moment they are some. . And a difference between potentially this ECB and what we saw in the previous 10 years under Draghi specifically is that this time the hawks are in charge in a big big way. . Yeah they seem to be. . There’s no question about that. . Let’s jump to this right now. . I’m watching you. . And again which has moved here but still really front and center. . Mohamed El-Erian just out moments ago with a two year chart that was very smart showing the emotion of the moment. . If your head is spinning near the end of August and you’re worried about inflation gloom like Italy with 9 percent inflation this is flat out the interview of the day in recapitulate what we heard from David Rosenberg yesterday. . Look tell us in a different place. . He’s head of asset allocation chief economist at Wilmington Trust. . We’re thrilled he could join us today. . Look I thought your note was uncommonly cogent about the disinflation to come. . Put a date on it. . When does a disinflation show up. . Last month we had a really encouraging reading and CPI and then also in PCG clearly pulled down by energy. . But what we’re seeing is that weakening of inflation much slower advances and outright declines in a lot of consumer goods. . Airfares used cars and a lot of those things that have pushed inflation up over the past year to year and a half. . But it is kind of bi modal. . We still have a lot of pressure on shelter and rents and on food. . Those are running much higher than usual but we do see a lot of disinflation in those other categories. . And like the idea of a bi modal. . The theory here is any central bank including the Fred. . Given a bi modal distribution will always take the part of the bi modal that shows up later. . They’ll be massively ex post. . Is this a fed that reacts to a bi modal disinflation at the September meeting or at the September meeting of 2023. . Well I think at the September meeting they were likely to see a 50 basis point hike and that’s because we’re going to get another inflation number and I do expect it to be a little bit on the weaker side not quite as weak as July. . But what they’re set themselves up for is 50 basis points. . And I think Jay Powell was talking a lot more about the profile when he was in Jackson Hole. . That speech was clearly hawkish but he was really talking about the magnitude of hikes going forward. . It seemed like as you were just saying they’re all on the same page. . And all of those FOMC voters are pushing back on the futures curve which is showing rate cuts next year. . So I think in September we get that 50 basis point cut. . Another really important thing is what he said in July not a Jackson hole is that the rate cut rate hikes that they’ve already done. . We haven’t felt for full impact with them yet. . There’s a lot of tightening in the pipeline. . He said we’re going to see those come through and slow inflation down over the course of this year. . So look when you say that you’re already starting to see disinflation and even with the hawkish tilt of the Federal Reserve are you basically positioning around that and being more bullish on risk assets because the Fed won’t go as far as the market is currently pricing are used basically suggesting the Fed is going to because they are so exposed make a policy error and tighten into recession even if it’s not necessary. . Well we’ve never gotten so pessimistic that we went on or wait. . We’re neutral across our asset allocation in the equity categories and we have an overweight cash. . We’re looking to deploy that because even though our baseline is for inflation to slow down there’s clearly a lot of upside risks. . And the one that we’re really watching of course is wages and labor. . And Paul and the other FOMC members have talked about that if those wages keep pushing higher than they are more likely to keep tightening. . And even if inflation was slowing I think you get closer to a policy error and causing a recession. . Well just to make sure that I understand what you’re saying Lou. . In other words you’re neutral on equities or neutral on risk which is unusual for you because you are always invested. . Right. . And you’ve been overweight cash but now you’re looking to deploy that cash. . Does that mean you’re getting more bullish or does that mean that you have more conviction of the path of things going forward. . We’re not expecting a recession and we are getting a little bit more bullish but that big risk out there is definitely labor and we’re likely to see data later this week looking for an opportunity to deploy that cash a bias towards risk and a bias towards equities. . And I would think that that would come to us especially as valuations have come down. . But it remains to be seen how much later. . Labor market pressure to remain. . So where are you seeing opportunity most clearly. . In other words are you looking at big tech. . Are you looking at for example energy companies even as we see one of the consecutive monthly declines in oil prices. . On the on the fear of a slowdown globally. . Well if our baseline plays out then we would expect to see as Jonathan was just talking about we haven’t really seen long term rates move back up very much on the short end. . We’d expect the short end to come down a little bit and that would point towards some growth stocks that would point towards a recovering economy and the sectors that really benefit from that from long rates holding where they are a little bit more growth. . Look I tried it out yesterday one of the great series on the Bloomberg which is simply CPI not back to 1947 but our guesstimates back to World War 1 and inflation when it surges up is wildly stochastic and comes down quickly given the pandemic in the supply side realities the dynamics I should say. . Are we going to see another bout of stochastic in inflation reverse to disinflation. . We think there is a good chance that things come down pretty quickly and this gets back to transitory which I realize is a dirty word now but we are looking at a lot of inflation that’s been caused by that supply chain challenge from last year and also a lot of stimulus which of course is rolling off now. . Yeah. . So when you see Wal-Mart cutting prices when you see retailers saying you know we ordered too much stuff that’s where you could have it come down pretty quickly. . Again the risk Kevin Cirilli labor. . It also put energy in there. . I’m just asking for a friend. . But if you get out front of this the markets get out in advance. . Should I load the boat let’s say September 1st. . I don’t think that there is any reason to expect a recession. . Other than that that keep Vikings off the baseline inflation story plays out. . And if you get some weaker wages and I think we’re in pretty good shape to have an expansion going from here. . Right. . And that would argue for risk assets. . What do your managers Wilmington Trust think about cash. . Is cash an asset considering on conservative. . The shop is. . It’s certainly more that now than it was a few months ago for us but we’re looking for stronger returns if that inflation story plays out that way. . You think equities are better. . You guys were talking about credit spreads. . There might be some spots in the fixed income that are advantageous to especially with high yield yielding what it is right now from an asset allocation point of view. . We’re looking more on the equity side. . Like when does the office start to fill up. . What time. . Just thinking because Morgan Stanley and I sent out the memo. . They sent out a memo. . Goldman get back to work. . When do they get in the office like Raul is for us. . We’ve been actually been back for several months. . We’re going back for three days a week. . I’m just not quite this early. . And there’s there’s a few people around me. . You can’t see them right now but they’ll be. . And pretty soon they tell me. . Thank you. . I appreciate it. . Wilmington Trustee CAC. . Go on. . I wandered out to a tennis match last night. . How did that work out. . I was sitting in the seats. . I can watch Mets. . Dodgers next door. . I was sitting up so high. . And John there was no other topic in the chat. . I did. . With fans. . Thank you so much for coming. . Then work from home. . Can I just say that I signed on ESPN and the idea that you were sitting in the seats above. . So you write that courtside sat behind them around. . CARNEY Well I was good to see escaping this. . There were great seats. . Did you find them. . The young lady from France was the seat Shery Ahn show. . I don’t know. . Some of my people found them. . Yes. . Nice. . I don’t know this stuff. . Lisa and I can get our people to find any. . They said I got one seat. . You want to go. . And I said I got to take that bill. . And they said no you can’t. . The dog’s to sit on your lap. . Well I’m getting poor at home. . You know why. . Cable 116 27. . Oh I cannot afford to open this move. . This Lisa Abramowicz. . Look at this. . 116 26 I the low of the session was about 116 18. . You can go all the way back to 2020 in that big dislocation in the effects Mark. . And I’m sure you will remember that when we hit 114 or something like that in spring of 2020. . Lisa this is not a pretty picture for the UK. . Are you saying that it is because of the pound weakening that you did not go to the U.S. Open. . Is that your basically sterling savings I’m looking at now and I’m thinking maybe maybe is just some of the projections coming about. . The inflationary backdrop in the United Kingdom is beyond shocking. . It is beyond what we’re seeing over in the mainland of Europe. . And you do wonder how they’re going to deal with it. . What do you call continental Europe. . OK. . But I mean this is to me one of the biggest stories because how they deal with it is sort of a leadership role in terms of countering high gas prices with lower demand an inevitable recession. . This is going to make things much much harder for the Bank of England and I think for the ECB as well. . We’re seeing bigger and bigger expectations Tom with rate hikes from those two respective central banks. . And a currency is not stronger. . The weaker. . Yeah well you know that’s true John. . But you know Lisa seems stressed today John don’t you think. . In what way. . I think it’s the voice of a parent wondering if the children have the right calculator to go back to school. . Lisa are the kids properly calculated. . I don’t know. . They’re asleep. . And honestly I’m going on vacation. . So I’m not stressed. . You need the right against you later. . Eight fifty six. . Thirty two more days. . And then I’m not up 55 again. . So this is the last hurrah. . You coming back afterwards. . That’s the plan. . I guarantee you John. . I’m never going to. . Yeah exactly. . Then we CAC why she’s taking more vacation this summer than you and I combined. . It’s fantastic. . No regrets. . Futures up two tenths of one percent from a beautiful New York. . This is Bloomberg. . Keeping you up to date with news from around the world with the first word answers you could get to more revelations in the probe of those classified documents found at Donald Trump’s Florida home. . In a court finding the Justice Department suggests there may have been attempts to obstruct the investigation by moving some of the papers. . The filing included a photo of files labeled Top Secret said to have been found in the former president’s office. . The government was responding to his lawsuit to appoint a special master to review the documents. . Europe faces the risk of blackouts rationing and a severe recession if Russia slashes gas deliveries further. . And the next reality check is at hand. . Starting today there’ll be a halt in gas sent through the Nord Stream pipeline. . It’s a key source of energy for the EU. . There’s a concern that Moscow will find another excuse to clamp down on those supplies. . And prices in British shops rose this month at the highest rate since at least 2005 according to the British Retail Consortium. . Shop price inflation increased to five point one per cent in August. . The price of food rose even more nine point three percent. . Shoppers are doing everything they can to save money at the checkout including buying less food. . Two of Wall Street’s best known investment banks say it’s time to come back to the office. . Goldman Sachs and Morgan Stanley are removing some of their last Covid restrictions in New York. . For instance Goldman employees with an approved exemption to the city’s vaccine mandate can enter offices with no testing or face coverings. . The firm has been aggressive in pushing a return to this global news 24 hours a day on air and on Bloomberg Quicktake which could get to. . This is Bloomberg. . I’m paying attention what the Fed is telling us I think they’re wrong. . I think that Powells already told us we are operating policy without focusing on what’s happening on the supply side of the economy. . David Rosenberg the founder and president at Rosen Fact Research Line from New York City this morning. . Good morning. . Tom Keene. . Lisa Abramowicz and Jonathan Ferro features positive just about up to 10 sunny S&amp;P after three data losses in the equity market amounting to about a loss of 5 percent to 5 percent in three days. . Remarkable stuff yields up 3 basis points on a 10 year 313 81 on a two year. . We take out a high set a year and the last 24 hours euro’s weaker. . Sterling is tape. . We take a snapshot. . St. . John wants sixteen ninety. . John what’s the emotion of 115. . Is that like Dow 10000 and that over stats 10000. . But it’s certainly troublesome for this Bank of England as they hike in interest rates and can’t gain any traction whatsoever. . Any affects Mark. . Does that mean to the people of the United Kingdom they’re not alone. . Well if you’re importing inflation now some you’re import a whole lot more with a weaker pound sterling. . Unbelievable. . We’re going to do right now. . And this is a great honor to have Julie Norman with us. . She’s the co-director of the UCLA Center on U.S. . Politics but is really definitive on continental Europe and of course terrorism and the study of the Middle East as well. . Julie we digress today to Mr. . Gorbachev. . Why does Mr. . Putin hate him so much as it’s just as simple as he’s the guy that gave up the Soviet Union. . Well that’s certainly a lot of timing. . What we see playing out obviously with Russia and Ukraine today you can destroy a direct through line back to Gorbachev and the dissolution of the USSR back in the day at a time when cotton was just kind of coming into his own in the KGB and just saw that dissolution as a complete tragedy. . And I would say to it wasn’t just the dissolution but also the changes that Gorbachev made before that the opening up of the media the opening up of multiparty election writings of dissonance all the things that Putin we know has brought back. . Why don’t want to do a history lesson here. . But the idea of Gorbachev and then Yeltsin who is one of the things I’ve most been wrong on in my career we come to Putin who’s after Putin. . If you look at transfer of power of Gorbachev to Yeltsin and the rest of the dance of the Russians how can you choose who’s after Putin. . Do you have any idea. . I think it’s a tough question Tom and partly just because Putin as we know has consolidated power so much around him and through the inner circle of the party that it’s not like looking at you know another country that would say who’s who’s competitive in elections or who’s popular or something like that. . It’s a very close circle and it’s one that we know Putin is going to hold onto as long as possible himself. . So even the timeline on that is anyone’s guess. . Virtually Gorbachev’s death really raises a question about whether Russia could be a democracy. . Whether democracy has failed as a project in Russia is Putin’s legacy that whoever follows him will also be an autocratic leader because of the legacy of a democracy that did not take off in the way that many people hoped. . Well it’s a good question. . And your Gorbachev himself you know obviously from the west is hailed very much as a hero. . But in Russia at the time of his you know at times and his office up till now was very unpopular because even in the early 90s period he could not deliver on his promises internally to what people were hoping for. . And that was the economic side as well as the more political side. . So I think Gorbachev was hoping that there was growing pains would be temporary. . Obviously things have gone another direction. . I think in the long drive of history we know that doesn’t mean a country is doomed to a certain trajectory forever. . But it does probably indicate that it’s going to be on that route for at least the coming years with someone like Putin. . And again the kinds of people he has put around him are in charge. . Julie heading into the fall the focus very much will be on Europe and the natural gas situation whether Russia’s going to stop some of the exports to that region. . Nordstrom One goes into maintenance for three days. . Will it come out is the big question. . What is the advantage for Russia to just cut off supplies. . I mean is it cannibalizing from all of its future revenues. . Well it certainly seems that way. . But it’s also the main area where Russia from the beginning of this crisis has had real leverage and putting the squeeze on Europe putting the squeeze on the U.K. . really just showing where they have this political where they have this economic as well as political muscle. . And so we see them leveraging nod. . And I think a lot of this is also tied up with peripheral issues as well. . So relations with China relations with Iran. . These are things that are kind of helping some of their allies bringing some of them closer at the same time. . Julie take us from the really I think pretty poor coverage in America of Ukraine away from the generalization that the Russian military effort is stodgy slow motion very doctrinaire and the Ukrainians are making it up as they go etc etc.. . That’s a stereotype. . What’s the nuance of Curson or the nuance in the South etc. . The nuance on the Baltic Sea between those two forces. . It was I think it’s a good question because there’s a lot that we don’t know and a lot of the coverage that we are seeing is of course telling the story that I think a lot of viewers in the West want to hear. . And in reality the war as we know is already quite long. . We know that is trying to recruit more people into the army as it seems as a thing that’s going to be ongoing in Carson for example. . It’s unclear exactly how much Ukrainians had been able to push back or not. . There’s a lot of controversy right now around the nuclear sites that the U.N. . is going to be has been living in there today to try and stabilize that. . So there is a lot of errors especially in the kind of the eastern part of the country where Russia has control that Ukraine is trying to chip away at. . That is just going to be an ongoing slow slog moving into the fall in the winter. . And it’s it’s attractive to want to see these victories. . And of course some of them are there. . But but I think this is going to be a very long conflict as many as many others have said as well. . Judy thank you as always. . Gerry Norman of UCLA Center on U.S. . Politics. . Lisa the consequences of this war will be found for a long long time and these sanctions off the back of it. . Look at what’s happening in the U.K. right now. . You do have to ask the question how long would resolve this coalition last as the economic pain starts to materialize even more less trust. . Who is the leading candidate to be the next prime minister in the U.K. . is talking about plans to cut taxes and raise spending. . Charlie Bean the former deputy governor of the Bank of England was on with our team in London earlier this morning and talked about the risk of a large sustained deficit in the medium term and how investors may start to think the U.K. . doesn’t look like such a good place to invest. . What’s been happening in the U.K. yields a much much higher. . Sterling is much much weaker. . What’s the central bank’s role in all of that. . It’s a big question mark right. . This is unprecedented and it’s a very difficult place for them to be in. . The question that you ask though about where is the resolve. . How much is there and how much pushback do you start to get as the economic pain deepens. . That goes to Jennifer Granholm point the energy this energy secretary in the United States raising issues with the exports of natural gas from the United States to Europe because it raises the prices domestically in the United States. . At what point does some of the alliances splinter in the face of economic pain that is very real and very difficult to combat from the central bank level. . It was the first question Tom asked yesterday when we went through that story. . Tom is the Department of Energy on the same page as the State Department and this White House in America. . That’s the way it is. . But I think John to your point about currencies and I think a lot of our listeners and viewers John said well why do we follow Sterling. . Who cares. . It’s the litmus paper of the system. . John I didn’t know this. . I just did the math here. . What you can do quickly on the Bloomberg your sterling John. . February 24th. . 14 percent. . Depreciation Brad Stone stunning. . That’s one stunning one. . Heck of a move to help. . That’s for sure. . Futures are up about a third of 1 per. . The Nasdaq bouncing back by eight or nine tenths of one percent. . We’ll break this down with the brilliant Julian Emanuel of Evercore. . He’s going to join us in about four minutes time from New York City on TV and radio for an audience worldwide. . This is Bloomberg Surveillance. . I think in the next three to four months through the rest of this year it’s going to be a really volatile time. . You have to be opportunistic. . You have to be patient. . And you have to realize that this probably won’t go on for a bit. . The Fed is going to face an increasingly more difficult challenge this time around when they pause. . You want to be very wary about the relief broadly. . You are fighting the Fed. . If you’re bullish it’s hard to find anybody that’s bullish. . Now this is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . It’s. . Where did all the bulls come from New York City this morning. . Good morning. . Good morning from audience worldwide. . This is Bloomberg Surveillance Life on TV and radio alongside Tom Keene and Lisa Abramowicz. . Some Jonathan Ferro features up a quarter of 1 percent on the S&amp;P on the Nasdaq 100 up seven tenths of one percent T.K.. . We have a bounce. . Will it stick. . It’s a bounce in the data really speaks volumes. . We’ve had you know I get the equity bounce and all that with the VIX twenty six point two one shows it’s not too much agony but the two year yield John earlier this morning that’s a big deal. . And the Japanese yen tells me this is a global coordinated system into September. . Yesterday good news was bad news Lisa. . This time around this Friday if we get bad news it’s not just bad news. . Well not necessarily. . I mean basically if you get a disappointing jobs number does it give a bit of a relief to people who are expecting that perhaps it’s a 75 basis point rate hike by the Federal Reserve in September. . That said what are we really looking at here right now. . You’re just talking about this before John. . Longer term inflation expectations are actually tumbling since Fed Chair Jay Powell speech. . People believe that they are going to get inflation under control much more significantly. . And that’s perhaps why you’re seeing a little bit more of a lift in tech stocks because people are seeing oh perhaps there’s more of a case for those in a slow growth kind of environment or yield to eventually go back down. . I think they’ve all been sent the same hymn sheet because they’ve been singing from the same. . One thing about my for the last couple of days have said the last the last couple of days they’ve said the same thing. . Right. . And hold and hold for maybe a year perhaps even longer term than that. . And that’s been the forceful message of this Fed over the last week or so. . That’s the front parlor game. . And I’m sorry John the data matters. . But John let’s be clear as we go into the jobs day and really this is the beginning of the study of Friday’s jobs. . This ADP this morning matter for Jerome Powell. . I don’t think so. . Strange when that one time because if you ask people if ADP matters Lisa that turnaround is saying no it doesn’t. . And then sometimes we end up trading on it. . Then once you get to Friday ADP no longer matters. . OK just focus on pay. . I think it’s fascinating that because we’ve all been saying the ADP doesn’t matter. . ADP took a break and they said we’re not going to put out data for a couple of months. . And now they’re coming back and they’re saying now it matters. . So let’s see what happens and let’s see whether that date attracts a little more closely. . It might be a pivotal moment. . This might be a really exciting day. . It may well be or not. . Probably not. . Do you think I could take a break like ADP. . How many months was that. . Couple of months. . Seven months. . Yeah. . To reassess. . You got to reaching methodology to date and start with Sterling. . You want me to start with standing early. . OK. . I think I going to start with equity. . So let’s do that Tom because the team’s not ready. . How far up sterling just yet. . So futures up two tenths of one percent on the S&amp;P and the Nasdaq 100 up around six or seven tenths of one percent. . Eurodollar 99 83 with negative a third of 1 percent. . So that’s a weaker euro in the mix. . And we’ve talked about pants standing a couple of times this morning. . Lisa 116. . Twenty. . Negative. . A third of 1 percent. . Hiking into weakness. . And that weakness is the more prevalent story especially as we look at some of the potential projections for inflation in that region 18 percent over at Citigroup. . Whether or not that’s just a marketing ploy will have to be debated later on the show today. . Nord Stream one that goes off line for three days for maintenance maybe gets longer. . That is the question whether Russia is going to stop exporting natural gas to Europe. . We’re seeing a little bit of a lift to natural gas prices but yesterday and the day before huge decline in natural gas prices. . And I think this was really underpinning some of the attempted a bullish feeling at least to start the trading day as people took a look at a concerted effort by EU members to get some sort of structure for the electricity markets but also stockpiles rising faster than their previously expected 815 AM. . Do we care. . I guess we’ll be passing that through. . ADP putting out their numbers after taking a break for a couple of months. . How much is their new methodology making it more relevant and giving a sense of what we can expect on Friday with jobs report. . Yesterday’s JOLTS data was much more important than people had previously thought. . It was jobs Tuesday because we saw that all those openings climb in a way that people were not expecting. . Now nearly two job openings per every American that signals that there still is a lot of momentum behind wage gains. . Right. . That is the concern is that this is going in the opposite direction of where the Fed wants to see. . This is not labor market weakness. . Is this the exact opposite. . Wage gains Joel Weber. . This is a big concern for some people even though it’s good news. . Right. . This is why good news is bad news today. . Fed speak. . It continues. . Lots of it. . We’ve been hearing a lot from Fed speakers. . Well they give us any new insight or will they just continue singing from the same hymn sheet. . Laura Ambassador Cleveland Fed President Laura Logan. . Dallas Fed President Rafael Bostic. . Atlanta Fed President. . All lining up to give a sense of what they’re looking for. . I’m still looking for some insight John in the balance sheet and how that’s going to potentially affect things. . So I might be calling this ADP Wednesday. . ADP once again it’s not going to get it. . That’s not to say oh a wins. . It’s not going to work. . Lisa thank you. . That’s where there’s chief equity and quantitative strategist Evercore ISI. . Jillian you call this the gray zone one of just a gray zone. . The gray zone is look we had a reasonably. . Epic bear market from January to June. . That was not only the epitome of don’t fight the Fed but the markets took the hawkish narrative and ran with it in an unprecedented way causing you know if you look at the stock bond quadrant you know the biggest losses in the combined 60 40 portfolio that we’ve seen in years. . And then it all turned in June and into a few weeks ago. . And now we’re at a point where do we go back to the. . Don’t fight the Fed mantra. . Or do we think about it and we think about the unfolding you know perhaps the Fed easing off which is not at all in the script right now. . Right. . Even though people who else counter that this is important to that point in the last twenty two hours we’ve heard your David Rosenberg and look till you willing to trust bull scream the disinflation story. . Edward Hyman screams at home and says we’re going from age 9 ish and we’re going down not to 2 but we’re going to 4 percent. . What does your world do if we get an at home and disinflation stocks do well stocks ask about do what are they. . They do double digit. . Well do they roar. . Not in this environment. . Not yet because that likelihood is that if that happens Ed’s view of 1 percent GDP is probably where we are in 2023 and that’s still a constrained environment. . But I want to make a point here. . OK you’ve got three Fed speakers today. . OK. . And if you think about it going back to the first hike in March every time there was an extreme sort of market response to anything that Paul said both either hawkish or dovish the Fed speakers come out and have moderated the tone. . It’s going to be very informative. . What did they say. . Can we hear him on every day. . The day. . I mean just to lighten it up here people can talk to his people so far. . Julian to your point the other Fed officials have absolutely doubled down. . They have not watered down Jay Palace message at all. . They’ve gotten quite the other way. . How does that inform your assertion which is rather dramatic that the growth led rally is over. . You’re basically repudiating this idea that big tech can rally in the face of perhaps more economic weakness even with the Fed that is determined to hike rates. . Well and again it’s surprising to the extent in the last couple days how much the other Fed officials have doubled down. . But what it does is it just when when you look at yields you know they’re going up on the short end rates. . But also when you think about the fact that tomorrow we’re going to start 95 billion a month in Kutty. . It’s hard not to make the case that yields on the long end are going up as well. . And again as we’ve seen in this positively correlated stock bond well that’s a massive headwind for stocks particularly for growth stocks. . What kind of downside are you seeing. . Julian. . I would say the key here is does the consumer hold in in September. . If you think about it one of the anomalies of this year is that consumer sentiment has been absolutely abysmal the entire year. . And spending has been fine. . Obviously that’s one of the strange this is about a new inflationary environment. . But if you think about it you know could you get into this idea. . We’re back to the office. . We’re back to school. . September is challenge. . That is the kind of environment if the consumer holds in. . We could be OK. . We know. . But if not there’s a potential retest of the lows in store. . Well this is the bigger question Judy. . And it’s not about whether inflation comes down to 4 percent. . It’s what price are you willing to pay. . It’s got inflation down to 4 percent was unemployment when inflation comes down to 4 percent. . What’s happened to GDP when inflation comes down to 4 percent. . Janet it’s not that easy is it just to say we come down to 4 percent. . That’s good for stocks. . No not at all. . And look if we’ve learned anything this year or I’d argue the last two and a half years is that the tail outcomes. . You know when people talk about black swans they happen a heck of a lot more frequently than we would have ever imagined. . And that’s really what you’ve seen to a large extent this year. . And so you know there’s a lot of different potential outcomes as we head into the fall. . We started trying to say super super open minded about this. . Gillian can you help us do that. . The short and shallow consensus around a recession in America. . How would you the team thinking about maybe the tail risk here. . So we continue to think that you’re not likely to have a recession. . But if Ed’s view of 1 percent GDP next year is correct and we see a symmetrical pardon me symmetrical risks are around that number it’s still going to feel for asset markets from time to time as if there is a recession. . That argues for higher volatility. . And then again you know Ed said it a couple days ago. . It argues for humility and forecasts as that sent out the memo. . It won’t get back to the office. . Didn’t do it. . There’s a real question. . Did he do a Solomon memo you know day after Labor Day where we’re where guns blazing get back in the ties or back of notes as wound some. . Did you notice that message when young Cassius was with us from Goldman. . I noticed the tie was back up only after the incident. . It was a tie of our own when the time was yes I was the pandemic young took it off both times. . Go some the gone though. . Shery Ahn. . Thank you. . Good to see you. . On note to the open. . I noticed that the bow tie and your men from time on to the man from Del Monte. . Yep. . Did you catch up with them at home. . No I didn’t. . She’s a lot of pain and to be honest she can’t hold a racket. . It’s that simple. . The blisters on her hands. . Yeah. . Wicked. . Wicked. . I mean not a problem for the last year. . Two or three. . It’s like they had to take a break in the middle and put seven bandages on or whatever not get crushed. . No good. . I tell you what. . There’s something going on in the secondary market in U.S. . Open in the U.S. . Open on the ticket front. . This just so I agree. . There’s something we done. . I got very lucky. . There’s something really strange. . You know if you have any theories please. . My theory is roto e-mailed and said no I buy this. . I said some 20 percent. . Some of these tickets have quadrupled. . You know you’re right. . Something really odd coming on the secondary market. . Absolute ticket master. . We want a conversation with you when you’re available. . Features up to 10 Juliette Saly Day from New York. . This is Bloomberg. . Keeping you up to date with news from around the world with the first word I’m risking GUPTA Inflation in the Eurozone has set another all time high. . Consumer prices in 19 country currency bloc rose nine point one percent in August from a year ago. . That beat the median estimate in a Bloomberg survey of economists. . And it strengthens the case for the European Central Bank to consider a jumbo interest rate hike when it meets next week. . The Justice Department says White House records hold held in a storage room at Donald Trump’s Florida home may have been moved before an FBI search in June. . The Justice Department says that could have been an attempt to obstruct the investigation. . In a filing there was a photo of files labeled Top Secret said to have been found in the former president’s office. . The government was responding to his lawsuit to appoint a special master to review the documents and shares a bed bath and Beyond plunging the struggling home goods retailer said in a finding that it may sell an unspecified number of shares from time to time. . Bed Bath and Beyond is holding a conference call today to provide what it calls a business and strategic update on those shares of SNAP. . Also falling today according to The Verge the parent of Snapchat plans to layoff about 20 percent of its nearly 60 500 employees starting today. . The stock already has fallen almost 80 percent this year. . SNAP has been struggling with a slowdown in advertising spending. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries and which could get to. . This has been back. . The decline in the gas price closing in on a dollar 20 off of its peak per gallon in mid-June. . That’s a trend. . I mean that’s been well over two months now. . So that’s been having some momentum and we expect that to have more Emily Chang. . Ben Stein to the White House note 380 now the average price of gasoline in the United States of America. . Middle of June. . And what happened to the middle of June didn’t it. . June 13th. . More than five dollars a gallon. . Was the average brutal stuff. . Tom Keene Lisa Abramowicz and Jonathan Ferro futures right now. . Positive. . Two tenths of one per cent on the last night. . One hundred six tenths of one percent. . You know it’s up three or four basis points 314 on a 10 year crude lower by two point seven percent 89 15. . But the epicenter the price action right now foreign exchange. . Ninety nine ninety on euro dollar negative a quarter of one per cent with the hawkish speak from the Bundesbank this morning off the back of an upside surprise on CPI north of 9 percent going into an ECB meeting. . Why we’re talking about not 50 possibly 75 basis points on the table for the ECB next week. . And Sterling breaking down as well 116 23 Capetown negative 31 per cent. . Yeah. . The drift function in currency this morning is really pretty. . I just looked at a fancy chart and sterling John and I won’t mince words. . It’s grim job. . We’ve got to get out front of the real yield. . The real yield is very quietly moved up. . It start out to new high but the 10 year real yield America is an unspoken story. . The end of this summer I think it was Lisa’s chart the last 24 hours. . Tom Mackenzie. . Yeah. . Well she’s out front of you know where. . She’s out front of everyone on Twitter. . Lisa Abramowicz. . What a move. . That speech. . Yeah it’s been dramatic. . And how much is that. . What’s underpinning the move that we’ve seen an equities. . This is a reassessment of how far the Fed will go how much pain they’re willing to inflict on an economy to get inflation under control. . Tom if you go back to June highs to stocks below Ben they belong at June lows. . And that’s something we can discount Syria and we’ll see if that’s the exception of the rule. . S&amp;P at 4000. . Exactly. . Jack Frost Patrick now on Washington Jack. . The silly season starts in the old days. . Politicians kiss babies. . How did they reach out to voters. . Now give us a social media or advertising update on the crazy messages we’re going to see on the dash to November. . You know in terms of crazy messages especially that speak to the modern era of campaigning the Pennsylvania Senate race has been very interesting a bit surprising. . You’ve seen Mehmet Oz the Republican nominee Dr. . Oz go after John Fetterman the Democrat a couple times talking about his health. . Fetterman had the stroke. . And you know there was a Twitter ad that ISE put out using the word crazy saying he did. . He’d kind of lost it and implying he had not fully recovered from it. . It’s the kind of thing that previously you would have thought they’d hope that a superPAC independently would do that kind of attack. . You wouldn’t want your name on it. . I don’t know how that’s going to play out there. . There’s some surprise that ISE has has taken that line a couple times now. . But yes social media especially pandemic and post pandemic is a huge focus on social media and what you can do with that and how that undermines some traditional thoughts about fundraising and how that plays into campaign strategy. . But the Pennsylvania Senate race probably made my favorite strange example of that lately. . Jack was so important. . Here is the stereotype as the Republicans have money the Democrats don’t. . Am I right that that’s not true this time around. . Yeah you know for a while now Democrats Democrats really were the first to use social media and sort of the modern Internet as a means of big time fundraising. . Obama first Obama campaign was out earlier than Republicans on that. . And a lot of this has been shaken up again with social media and the 2016 race. . Trump cell funding to a significant degree and relying on social media more than you know TV advertisements. . If you remember 2016 Jeb Bush’s people were talking about shock and awe hoping that they could raise so much money that even Marco Rubio wouldn’t dare to run. . Obviously that was not the case. . And so the presence of social media and the digital strategy and the prominence of that has made it totally totally different than the traditional fundraising focus that was in place for a long time. . Jake before we let you go we have to really mark a moment that we kind of missed which is that the pandemic is officially over. . That seems to be what the new CDC guidance has been saying. . And it certainly is the case with Goldman Sachs and Morgan Stanley saying get back to work. . You don’t have to test if you’re not vaccinated. . Cool. . You don’t have to wear a face covering. . And oh by the way if you’re exposed as somebody who is positive just wear a mask. . If you get sick wear a mask. . I mean it basically is it’s your responsibility not a public health concern anymore. . Is this a watershed moment. . I don’t know but a watershed moment. . But we have been inching toward a time period in which medically the pandemic would not be over and it’s it’s not it’s not gone. . It’s we’ve still got much a much more significant issue on our hands than something like the seasonal flu. . But the you know medical professionals and politicians I think had the sense that there would not be a hard end there wouldn’t be a mysterious disappearance of the virus like has happened. . At times the Spanish flu for example and they were going to have to make some decisions about when to a little bit ignore it. . And that raises hard questions about funding for vaccines what the U.S. . role is internationally how seriously they take that. . The last six months or so has been just a series of examples of lawmakers taking the. . The push for vaccine testing. . Funding that kind of thing less and less seriously until it just kind of fell off the table. . So we we have gotten to the point where there’s a significant delta between the the medical reality that it’s still there. . Look our political and cultural willpower to take very significant steps that people have gotten tired of. . Jack thank you. . Jack Fitzpatrick that down in D.C. . Prema I think government Morgan Stanley hoping how can it suffer its get back to work in a big way isn’t it. . Get back to the office. . It’s basically there is enough remedies and years Nephi collective immunity that you’ll be fine. . And if you’re not fine. . Well then we’ll just have to deal with that as a natural consequence. . And that seems to be the Zeit Geist use Tom’s word of frankly the nation. . But people are sick of it. . They just want to get back to some sort of sense of normalcy. . And slowly but surely you’re seeing that around the country and you certainly see businesses say look you can come in and go to the city to go out to eat or go to a show. . You can go back to the office. . I think bosses are sick of it. . Let’s be very clear. . Thank you John. . I hate to say this. . I’m not gonna pick on any individual bank but sort out the office maybe just sort out the booths that people. . I say careful John’s home and make him more comfortable if you want them to come back. . Welcome home. . The architectural channel. . I’m also I’m just saying I think Chad I’m just saying all the good work of the doctors. . I head through the Covid yesterday 473 people died. . To me that’s a little elevated as an amateur. . But still it seems to be a number that’s trending up ever so slightly of the 1.0 four million deaths that we’ve had John. . Jack’s perfect statement the science and the politics is miles apart. . And John to your point a lot of companies are doing that. . They’re rejiggering their offices to make them look nice. . But that’s actually what’s happened. . Now you make him more exciting. . We’re going against the trend folks. . Very exciting. . All of us come back home. . So I’m going against the trying to come back on features epithet on the S&amp;P from New York. . And this is blowing back. . If the pandemic is over we amount in the same room so we’re going to figure out. . I’ve been lobbying for John. . I’ve been lobbying for it to make that happen. . That’s when I know the pandemic is truly unfair. . We’ll share our time. . We’ll run out to sit together for the first time in like two and a half years. . Pictures right now. . Positive quarter of 1 percent on the S&amp;P 500 on the NASDAQ 100 up six tenths of 1 percent. . The equity market bouncing back. . I’ve talked about the losses over the last three days brutal losses over the last three days down about 5 percent on the S&amp;P 500 down a whole lot more on the Nasdaq. . So a bit of a bounce back. . A bounce back though after which suffered over the last week off the back of what’s happened in this market. . The bond market two stents and thirty two year yield taken at the height of the year. . The June 14th close yesterday at the close. . And we add to it again this morning four basis points came very very close to 350 on a two year. . Right now 348 0 7 that move is supporting the US dollar as well. . Even though we’re seeing moves across the Atlantic in Germany and the U.K. . yields higher we’re seeing the currencies weaker weaker weaker. . The dollar index just off levels we haven’t seen since 2002. . Euro dollar just about holding on to parity negative a tenth of one per cent sterling came very very close to a 115 handle 116 35 right now some down two tenths of one per cent. . And if you look at month to date chart look at a month to date chart of yields in the UK and Germany. . You’ll see this just massive moves. . And yet what have you seen in the currency. . Weaker currencies. . And that’s the big day out home for these central banks looking to bring in bring in big time inflation. . Francine Lacqua John Tucker 30 seconds on Italy eight point two percent survey. . Wow 9 percent inflation. . That’s distant Mark Gurman. . A look at headline in Europe some a nine handle for the whole of the eurozone. . And that’s why the Bundesbank is pushing this idea of making a decisive move saying that they shouldn’t fear a recession. . Well we now assume Tom that we’re going to have a recession and they’re going to hike aggressively into it after. . Bear in mind some you mentioned where CPI is in Italy and Germany where it is in the eurozone. . Rates are still a 0 percent. . And that’s how she why this ECB and many the hawks on it are looking for a big move come next week. . Go with that. . I just sorry. . Europe is unique and I think it’s underplayed John. . There is a war going on. . There’s a war going on. . No. . We’ve said that repeatedly. . We’re going to feel the consequences of that war for a long time. . To Thomas you’ve got a supply side problem and you’re trying to address that with interest rate hikes. . Does it make sense that we’re only talking about a short and shallow recession. . Well that because they could be chasing that sale for a long long time trying to get that down. . I think that the combination of those dynamic parts John is when does the Fed see enough data or another central bank where they ease up on the idea we’ve got to get to a real rate regime we’re comfortable with. . And like Rosenberg Julian Emmanuel at home and and others are saying this is going to be the surprises. . What’s the price they’re willing to pay to get inflation down. . One how much pain are they willing to tolerate. . Same point. . Do they. . That’s the issue. . Do they get inflation down. . Or does it decline itself. . If that’s the case that’s a beautiful thing and risk is off to the races. . Do you think that’s going to happen. . No not going to predict. . I don’t think it’s the base case trying to predict. . That’s not the consensus view. . I’m not going to predict. . I think you’re in a better position to protect that game. . So at the moment versus that. . Well I got to go the top because nature shows you know I mean the West has been off. . Yeah. . Of Ted Lasso who manages West Ham. . And maybe not in a not in the real world some anyway. . That’s the cross asset price action. . Lisa is very tolerant very patient. . Hi Lisa. . Hi. . I watch. . I think you guys discussed your theoretical road trip to a fantasy show. . It has to do with football. . It sounds really illuminating. . What I’m watching is actually to this point of short and shallow. . One of the reasons behind this conviction has been because of the strength of the consumer. . The strength of the balance sheet of both companies as well as individuals in the United States more than other places. . HP reported earnings yesterday after the bell. . Fascinating downgrading their forward forecasts as a result of less demand for personal computers and printers. . Also seeing less demand from companies as well. . This has been a consistent theme. . We’ve seen this in semiconductors and we have seen this in the hardware companies. . How much is this portend. . Something bigger versus just all of these people bought all their computers during the pandemic. . I don’t need them now but Bath and Beyond shares absolutely tumbling after this company failed to sell more shares at an unspecified time in a specified amount. . Those shares down nearly 18 percent in premarket trading and SNAP shares down 7 percent or nearly 7 percent after Verge yesterday reported that this company is going to be cutting 20 percent of its 60 500 person workforce. . How much does this portend ongoing job cuts. . Right. . We’ve been seeing this in some of the tech companies. . SNAP of course sort of the social media companies getting hit by a lack of advertising something to watch. . How much is this an anecdotal story versus something more mainstream. . I’m also watching the energy sector because what we are seeing is the third monthly decline of. . Losses in the oil space have declines in the oil space which is the longest streak of losses going back to 2020 we are seeing this reflected in the prices of some of these shares. . Exxon down 2 percent and Chevron two point three percent. . Devon Energy two point seven percent ahead of the open in premarket trading. . How much is this the ongoing trend that will turn out to be wrong. . And Tom this is what we keep hearing from people. . They’re selling energy to raise some cash to go into brand of small caps or other more beaten up areas. . How much is that really going to be the theme heading into winter. . As you see increased demand and possibly just the lack of supply to meet that given some of the international constraints. . International is what I would look to to me. . You can’t guess where there’s some surveys or done. . Alisa push in 30 40 years ago that it’s the toughest market to predict. . I mean it’s just energy is just totally gray. . A nightmare. . Totally. . We’re now going into the bond market. . We look at the end of September. . It’s been so quiet. . What’s it like. . It’s like Rip Van Winkle except we’re going to call it Rip Debt Winkle because that’s what it is. . It’s been asleep. . Deborah Cunningham wakes up for September. . Global liquidity markets officer at Federated erm has revealed she could join us this morning. . What does CFO do in September. . I get the idea. . Equities. . Everybody comes back they recalibrate blah blah blah. . What does CFO do about the issuance of bills notes and bonds come September. . Well I think they look at what the plans are for the rest of the year where they’re going into the next year and decide on short term long term how much you know in in what’s that gray market they’re issuing. . Do they think we’ll we’ll see debt come into the marketplace. . I agree. . Robert Schiffman has a stunning essay out on Amazon at Bloomberg Intelligence this morning of the financing that they could do for a 100 billion dollar possible transaction. . Just to get the firepower in your world is a lot of debt going to be issued just to get the firepower ready. . You know I think there have been companies that have had have already termed out some debt taking advantage of what they think are the shortest or the lowest rates that are going to be you know available to them for a while as inflation continues to be an issue. . But I don’t think it’s every everyone I think you still got you know asset backed issuers. . I think you have corporates. . I think you have financials that are all looking still for additional debt financing in the short term sector as well as maybe the short to intermediate area of the bond curve over the next over the rest of this year and into 2023. . Deborah you’ve got a front row seat in one of the biggest questions in market is coming up particularly starting this week with the acceleration of the runoff in the balance sheet and what that will do with respect to the removal of liquidity in the markets how much that will inject volatility into a lot of the banking sphere in particular. . What’s your view in terms of what you’re seeing on the ground with liquidity exiting certain aspects of the market that really have been fueling some of the froth here areas. . Well certainly you know it’s been going on since June. . Now it’s going to double you know starting next month starting starting tomorrow. . And it’s been masked by other issues in the economy. . So you know what we have seen so far from a roll up of treasury and mortgage backed securities has already been overshadowed by the increasing rate environment that we’ve experienced and the sell off in those securities. . In response to that you know the expectation would be as they double it you’re looking at something that has an impact of probably another 25 or 50 basis point like tightening by by the FOMC. . And as such you know where where where are the buyers. . Who are the buyers. . We have from at least a Treasury perspective. . However been in you know sort of a supply demand imbalance where there hasn’t been enough in supply in the marketplace. . So it’s really going to be welcomed. . I think to some degree for you know the most highest quality Treasury securities in the marketplace. . From an MBA standpoint there may be a little bit more resistance but it’s smaller volume there as well. . Deborah got to leave it there. . Thank you. . Deborah Cunningham of Federated is going to leave it there because we’ve got some news from Bed Bath and Beyond. . Let me tell you this because some news is just headline after shock later this week to close 150 stores. . Jobs getting cut as well. . They say a reduction in the workforce a big reduction in the workforce. . Just gone through some of these numbers. . Yeah from what you say. . Well also discontinuing three of nine of their labels. . This comes after weeks of speculation around this company about them being able to raise finance saying they just filed a document earlier this morning saying that they would raise an unspecified amount of money in an unspecified amount of share sales at different times. . They didn’t really give any details to that. . But this really highlights a problem especially as some other suppliers cut off deliveries because they were worried about late payments. . These are some of the issues facing a company that’s been struggling for a while. . But how much can it rise above that especially since it wasn’t meme stock darling and had been able to raise money that way. . Let’s face it the big move this morning down about 25 per cent. . So second quarter comp sales declined about 26 percent. . They see full year comp sales down in the 20 percent range. . So that’s pretty tough going. . And on these chefs are you talking about promo to sell up to 12 million shares in an offering. . The offering proceeds to be used Tom to buyback John debt. . Is this a zombie company. . I say that with respect for the hardworking people in management and on the line at Bed Bath and Beyond Bed Bath and Beyond. . Total return per year for 20 years. . Negative 4 percent per year. . Total return the last 10 years. . Think of what they miss John versus other retailers. . Home Depot is the icon negative 14 percent per year. . If this does foot the fines zombie company why does an owner restructure our Milken transaction. . This feels like a kitchen sink type morning for the company Lisa that’s for sure. . Yeah especially because they’re trying to potentially raise money in the equity market to buy back shares. . That’s going to be terrible for the equity. . That’s why you’re seeing such a big response whether they’ll actually be able to do it. . They didn’t get to buy it. . Good question. . Dan. . Six percent in the free market and falling off the back of a ranger headlines will keep you up to speed on from New York City with Tom Keene Lisa Abramowicz and Jonathan Ferro. . We have about just about on the S&amp;P up two tenths on the Nasdaq 100 up a half of 1 percent. . This is Bloomberg. . Keeping you up to date with news from around the world to the first word answers you could get to more revelations in the probe of those classified documents found at Donald Trump’s Florida home. . In a court filing the Justice Department suggests there may have been attempts to obstruct the investigation by moving some of the papers. . The filing included a photo of files labeled Top Secret said to have been found in the former president’s office. . The government was responding to his lawsuit to appoint a special master to review the documents. . Europe faces the risk of blackouts rationing and a severe recession if Russia slashes gas deliveries further. . And the next reality check is at hand. . Starting today there’ll be a halt in gas sent through the Nord Stream pipeline. . It’s a key source of energy for the EU. . There’s a concern that Moscow will find another excuse to clamp down on those supplies. . And prices in British shops rose this month at the highest rate since at least 2005 according to the British Retail Consortium. . Shop price inflation increased to five point one percent in August. . The price of food rose even more nine point three percent. . Shoppers are doing everything they can to save money at the checkout and that includes buying less food. . And Bloomberg has learned that Credit Suisse is board is divided on the fate of its troubled investment bank. . Just before crucial meetings one camp is pushing back against an aggressive downsizing. . Others are in favor of more extensive cuts after racking up billions of dollars in losses. . Credit Suisse is taking aim at the investment bank which has been at the heart of some of its biggest troubles globally is 24 hours a day on an all Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in Libya. . Hundred and twenty countries and rich. . Gupta This is Bloomberg. . At the European level we have agreed that all member states to do jointly save 15 percent of energy between August now and March 23. . And here’s the good news. . We have reached now an average in the European Union of Starch filling up 80 percent. . That is some good news. . That was from Ursula von Onto Land the European Commission president. . It’s good news because the original target was 80 percent. . By November 1st it’s the end of August. . So there you go. . Just a little bit of good news out there in Europe. . Life in New York City this morning. . Good morning. . With some keen and Lisa Abramowicz some Jonathan Ferro futures bouncing back kinda on the S&amp;P by not even two tenths of one percent on the Nasdaq 100 up 62 points up a half of 1 percent a year to higher by 2 or 3 basis points 313. . Not going to neglect this. . I think we have over the last 90 minutes or so. . But Cruden 88 handles we’re breaking down there by two point nine percent 88 95. . There were some concerns about supply out of Iraq. . I think Iraq has calmed down those concerns about supply out of Iraq. . And then on the horizon for the last I think 12 months at least. . This idea Lisa that maybe just maybe there is a deal from Iran. . But I feel like we’ve been talking about that forever. . This to me is a recession call. . It’s basically higher prices that are cannibalizing demand. . And the more that the NIKKEI event that the world slows down particularly led by China the less demand there will be. . And that’s what’s leading to lower prices. . That’s been sort of the theme over the past three months. . I’m with you. . Demand destruction some back on the table. . I think the jury’s out and I link it to the Covid policy of Asia. . The Chinese are Covid policy. . Maybe you get an Asia boom as some have written about some of the optimism Jay Polansky J.P. . Morgan and others on the Pacific Rim. . We got an oil update on your next gallon of gas. . Is Will Kennedy senior excuse me your next gallon of petrol. . Will Kennedy join senior executive editor commodities in London. . Well there’s a tone out there from a select few of a potential global disinflation. . For all the other matters out there is oil. . Is the Will Kennedy world linked to the possibility of a global disinflation or is oil separate. . I don’t think it’s set for it at all. . I think that the oil is being put under pressure by a lot of different things some of which John just mentioned geopolitical things. . But the thing that’s really putting under pressure the prospect of higher rates and a stronger dollar the stronger dollar has proved a huge headwind for oil and is one of the things that stopped it getting traction. . The other thing I want to say about the oil market is it remains hugely volatile. . We’re getting these big swings. . The Saudi oil minister intervened in the market last week to say to people look don’t write us off. . We’re willing to cut production if we need to. . That sent oil up as high as 106 for Brent. . We’re 10 dollars below that now. . And it’s interesting to me that piece and an took to Twitter this morning just to say that in its view the oil market is broken that these moves don’t make sense. . They’re not fundamentally driven. . They reflect a lack of liquidity in the market. . And it’s it’s quite hard to read oil from a fundamental perspective right now because a lot of people aren’t totally sure that the price signal whose the country you’re watching who’s the marginal player OPEC plus or minus the United States all the rest of it who’s the country that is the decider of oil dynamics into September. . I think there are four things we need to watch Tom sorry for the long answer. . China as you mentioned the huge driver of demand Russia. . We’ve got more sanctions coming on all at the end of the year. . What will that do to production. . Will they be able to sell more oil to Asia and less to Europe Saudi Arabia. . How do they respond to this market. . Do they follow through on the threat of cuts. . And finally the USA there are two things to watch in America. . Firstly we’re about to stop withdrawals from the SPRO which has been a huge source of comfort to the market. . Putting that oil into the market and Shell isn’t growing as fast as people expect. . It is a very interesting column from my friend having a blast this morning about how expensive pipe is getting in the shale patch and that’s that’s dampening growth. . So we’ve got to keep an eye on those four countries. . I think as we look to the market into the end of the year well we often probe this particular topic but let’s do it again. . Can you frame how difficult this winter is going to be and the decisions that some of these governments still haven’t made that they need to make in the next few weeks. . Well I think it’s instructive. . Just to give you some examples from the U.K. . actually where people are starting to realize just how catastrophic their bills are going to be. . And businesses in particular who are more exposed to free market prices than households in some respects. . We’re seeing all these stories of people running cafes pubs and they’re facing bills that are going up five times. . And frankly people are saying how can I operate my base my businesses on that basis. . And they’re saying without some form of government help I’m going to fold. . So I think you’re starting to get a picture about how this could really impact the wider economy. . And if these energy prices are left unchecked for small businesses for consumers in the U.K. . and other European countries it’s going to have catastrophic economic impact. . And I think what we’re watching is how governments respond in the U.K. . how the new prime minister we get next week responds because I think it’s going to need a big policy intervention. . Well there’s a plan and some plan to bring down the prices of electricity an emergency combating of the very high prices. . That’s what we learned from Ursula underlined this week when she gave a speech about what the European Commission is doing to collectively address the issue. . Do you understand what this plan is. . I think there are two parts to the plan. . I don’t think anyone fully understands it now. . They haven’t yet. . They haven’t sketched out the precise details. . But there are two perhaps two potential components one which may have an impact in the shorter term and one which is slightly longer term in the shorter term. . There’s some talk of a price cap and an attempt to cap the price of electricity which got completely out of hand. . Earlier this week crossing a thousand euros a megawatt hour in Germany unimaginable places previously. . Now that cap obviously would still require someone to pay the market price. . So actually what it is is a way of sharing the burden with the difference. . Go on government balance sheets. . Would it be shared between industry consumers and the state. . Somehow I think those details are yet to be worked out but clearly it would be an intervention that breaks the market mechanism for a period of time and shares the burden a bit differently. . Then there’s a second thing at the moment. . The price of electricity in Europe as in many markets around the world is set by the marginal cost of supply. . What the most expensive. . Unit a power you need to balance the market is and that’s traditionally that’s natural gas right now which is hugely expensive as you know. . Now the thinking is there’s a lot of power which is nuclear which is renewable which cost a lot less to produce. . So is there a way of linking power prices from natural gas prices perhaps by having some kind of price. . The average is the cost of production now. . This is complicated technical stuff. . It would have to be done in a way that the market still gets the signals it needs to balance the market. . Having that generation. . But that’s something that people are taking a serious look at. . But to be honest it would take a year maybe two years for that to happen. . It’s not a short term fix. . Well great to catch up sir. . And we’re looking forward to catching up again because we’re no expert on any of their. . So we need your expertise to break down just what’s going to happen. . We’ll kind of do that at a London policy intervention to try and tackle some of this stuff. . What are we talking about. . We’re talking about fiscal intervention now in a world of low rates QE and low inflation. . That might make sense in a world of high rates Kutty and high inflation. . Lisa I do wonder in certain countries how wide open the bond market is going to be for some of that and whether the adjustment we’re seeing in places like the UK is reflecting some of that angst at the moment. . Yeah I think that that’s a really good point. . And one of the most important conversations that I think we’ve had over the past few weeks is with Francisco Bianco of the paper presented at Jackson Hole talking about how fiscal stimulus gives the expectation for more inflation for a rescue to come in and that that really combats a lot of its central banks are trying to do a bigger deficit. . You’ve got to finesse in places like the United Kingdom. . That’s a topic we’ll continue to discuss with people like Dan Morris at BNP Paribas. . He’s going to be joining us shortly from New York. . Said he heard on radio seen on TV. . This is Bloomberg. . I don’t think it’s optimistic to suggest that the Fed will be able to navigate positive activity any time soon. . I think in the near term expect some choppy sessions. . There is a Fed call. . The says that any good news gets taken away by the Fed’s need to tighten the supply side is finally taking hold and creating the disinflation. . It’s really hard to see that we avoid a global recession. . This is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . Good morning everyone. . Jonathan Ferro. . Lisa Abramowicz. . Tom Keene. . The last day of August the beginning of September the beginning of autumn. . Turmoil in the equity markets greater turmoil in the foreign exchange markets. . And John Lisa I just want you to understand natures first green as gold. . Her hardest hue to hold her early leaves of flower but only so an hour. . And on and on to nothing. . Gold can stay. . We quote Robert Frost. . Lisa. . Fall is upon us. . Yes it is. . You’re going to throw that word to me. . I was hoping that John would have to. . I’m picking up Leslie Caroline Connan. . We had to been in the break that I am actually excited for winter. . And John is not excited for winter. . And Tom you’re not. . John are the markets excited for winter. . And boy is this a turmoil time for the Fed. . I’ve said a few times to think winter arrived early in this market. . We’ve wiped out the gains for August. . And the last three days we’re down about 5 per cent on the S&amp;P 500. . Don’t fight the Fed seems to be the message. . And fighting the fat means being bullish right now. . That’s why so many people are finding it difficult to be bullish. . Yesterday we found that good news is bad news. . Consumer confidence decent job openings still elevated. . Apparently that’s bad news for this market because it means this Fed has more work to do at the moment is right now. . And it helped me with John. . And I fed the gentle lady from Cleveland who we saw at Jackson Hole out with more forward guidance data dependency and the rest. . And John it is a certitude among Fed officials that inflation will not pull back. . That seems to be the great tension race in Howard. . Race to warp. . Rameau they’re talking about a full handle halt for how long. . Williams was talking about maybe a year through the whole if 2023. . Yeah. . But also she’s saying that she sees unemployment above 4 percent by year end. . This is the dual mandate that becomes more difficult raising rates above 4 percent in early 2023. . The market still up. . Pricing that in right there getting up to three point nine percent if you look at the Fed funds futures market. . But you’re not seeing that forehand or the way that she’s putting out there. . And then there still is the expectation for rate cuts. . And Tom this is what’s striking to me. . People are still saying we don’t buy it. . You can keep saying whatever you want but we still think they’re going to be rate cuts at some point later in 2023 or at least early 2024 as you recapitulate and look at that unemployment rate that rises to store the run. . I mean we make a joke about it John but Lisa’s right. . The toxic brew that’s out there now is the desperation in September. . There’s few optimists out there. . So the economists will focus on what’s bad and what is good. . Markets have got to think about what’s better and what’s worse. . And somewhat I want to understand is how markets are gonna respond to this incoming information. . And we often think about this. . Okay. . That’s the data. . How’s the market responding to it. . Yesterday was an example where we got good economic news consumer confidence job openings and yet it was bad news for this market because this Fed has to do more. . I want to know going into Pete Rose on Friday when the bad news is good news or when the bad news is just bounce because ultimately the bad news in this labor market means payrolls are a little bit lower. . It means unemployment is a little bit higher. . It means wage growth starts to fade just a little bit too. . Add some. . That’s the objective of this Fed. . That’s the objective. . And the objective is going to be the news flow. . Let’s get to the new data. . I’m going to do a data point John. . ADP in 12 minutes ADP. . It’s 12 minutes. . What’s promo code. . An ADP Wednesday. . Hundred percent. . It’s not stickied features 1 percent. . The S&amp;P OCR by 3 basis points 313 44. . A lot of attention being paid to what’s happening in the affects market with the euro dollar at parity. . But for me and for Tim and Felicia very much about what’s happening with pants starting at the moment just breaking down to 116 some 160 up 26. . Watch it for an issue. . I agree with John. . Sterling is really quite interesting. . Maybe also looking idiosyncratic. . Turkish lira actually some stability this week. . Now a brief into September. . Daniel Morris joins us chief market strategist BNP Paribas. . Daniel how does your September change things. . What’s the nuance launching from August into the autumnal September. . Well I think at this point what’s not going to change is we’re going to have some hikes and we focus a lot on this. . Seventy 75 it’s going to be 50. . The payrolls data will inform that. . But we really should be focusing on the objective of the Fed which is to get growth down get inflation down. . And of course the interest rate hikes are just a means to an end. . So in one sense it’s a bit of a distraction. . It’s whatever it takes if you will to get growth down. . And not only growth per say but really to get the job market back into line with the recent JOLTS data with the job openings. . You know rose over the previous month. . And so you still have nearly eleven million job gap between what employers are looking for and what employees are left salable. . That means continued high wage gains. . That’s going to fuel inflation. . And that’s just not sustainable from the Fed’s point of view. . It’s not the environment that you want to be buying stocks in. . For now. . Yes. . So the real issue is going to be we all anticipate this recession next year. . That that is what it’s going to take to get inflation down. . But that doesn’t mean you should necessarily be allocating for that at this time. . So overall we’re still neutral on equities and have some markets that we favor. . But at some point yes you are going to want to pivot but we think it’s really premature at this point to be doing that. . And why is that. . Why do you think it’s premature. . Typically if you look at how markets react to recessions it’s really a one two at most three months prior to when the recession started that you start to see consistently negative returns for equities you know six months out 50/50 chance. . Now which of course different this time is how much we all anticipate this recession. . Whereas typically they often catch ISE investors by surprise. . So whether that time frame is going to be different this time will that pivot happen sooner. . More likely than not. . But I think we’re going to have to see more meaningful deceleration in the economy before that’s likely to happen. . Dan this is really at all about the economy or is this about the Fed. . I mean yes it’s the economy but the Fed wants to influence the economy lower. . And Neel Kashkari came out said he was happy to see the market sell off in response to the Jackson Hole speech by Fed Chair Jay Powell and that he was disappointed to see the rally in previous meetings because this was not the goal. . They wanted to see a tightening in financial conditions. . How much can you push against that with this sort of backward look to historical performance of equities in the face of recession. . Yeah absolutely. . And I think what we’re gonna have to anticipate of course on one hand we do have rates going up that’s increasing the discount rate. . So that should have a negative impact on valuations for equities. . We’re now really seeing the growth impact. . Yes. . You know we talk about earnings expectations still quite rosy for next year 10 percent earnings growth year on year. . And that’s just something that’s not compatible with the slowdown in growth that we think we’re going to have to see. . So it’s that tension. . You know what’s going to be the catalyst to bring those two back in line of course is the big question. . But we believe it’s going to happen at some point. . It has to do. . And what do you do with energy right now. . Well we are broadly speaking overweight commodities. . I mean on one hand in anticipation of a recession that typically is an environment for for lower oil prices because of lower demand which certainly will still happen. . But you know we’re in a different world when it comes to the supply side. . We’re not seeing that supply side response. . And we think the net effect of those two forces is for us still to be overweight commodities. . Dan I looked at the Bloomberg total return all in global aggregate index today and basically with a price decline yield up. . We’re back globally to where we were in 2011 stayed in the case for ownership of fixed income instruments. . I don’t get it. . Well you know you want to look at a film from a portfolio perspective. . I mean clearly the big disruption in the first half of this year was the change in the correlations the positive correlation between equities and bonds in a bad way with prices going down for both. . We appreciate we’re going through this transition of the 30 year bull market in fixed income to at least a bear market for a while. . But you know at 3 percent or a bit more for treasuries we’re getting to the point where we should have a stabilization of rates and that from a portfolio perspective. . It’s still going to make sense. . So right now timing we still anticipate higher rates were short duration but we don’t think we have anywhere as far to go as we did over the last six months. . Then just quickly just to get by on it how would you respond to a bank print on Friday. . It’s bad. . These bad news. . Bad news good news. . What is it. . It’s going to mean that the hike is 50 instead of 75. . It’s good news relative to the 75 but it’s still 50 and that’s what’s going to matter. . Morris of BNP Paribas Asset Management does this Dani Burger. . This is John what we’ve come down to try to figure out. . Good news good news bad news. . Wherever the four bucks prisoners Taylor Riggs. . And once you get a decent understanding of the reaction function of the Fed you apply that to the incoming information and it is not going on and try and work out what it means for this market. . Yesterday good news was bad news and the story. . I hate it some. . You hate it too. . I just wonder where the bad news is. . Also just bad news I think will be overcome by the facts and on watch and foreign exchange. . John all the different dynamics of 10 20 30 peers. . This is really important folks. . John knows this is not just follows repairs. . That’s not what the pros do. . They look at all sorts of dynamics there. . If I could follow one thing right now though it would be the U.K. . I think this is going to be a really interesting case study Tom. . You’ve got the energy crisis on the one hand and I think we can call it that. . I think it’s fair to characterize. . Yes. . As an energy crisis. . You’ve got the expectation that the government needs to offset that with fiscal policy. . And you’ve got a big question mark as to whether the bond market is going to be wide open available for them to do so. . And if it’s not then what do you say. . You see an adjustment. . Naturally they see you’ll see a weaker currency you’ll see higher yields. . What we’re seeing at the moment a weaker currency. . Right. . And higher yields. . It’s easy to make these kind of adjustments this offset if rates are low. . Yeah central banks keep them pinned there. . Inflation’s low. . And you doing QE. . Right now they’re set to do Kutty. . Inflation’s high and they’re raising interest rates. . Different dynamic in the prior era. . There is the option for fiscal support for fiscal spending because rates were so low because the window was so wide open for governments to borrow. . That is fluid flipped on its head. . What do you get if you have fiscal policy moving in the opposite direction for monetary policy. . If these two areas are in direct conflict with each other who wins out. . And ultimately what happens with inflation. . Sterling some just about 160. . Yeah the sterling is terrible John. . You know I look at Emily Bronte and she supported the talks years ago. . I love September fall leaves fall like this guy. . Flowers away clocks to lengthen and short. . So you know ahead we’ve got a break to take. . I mean I’d love to talk more about your trip but they got three of September as you fear. . It brings tears to my eyes. . Futures up a third of one per cent for goodness sake. . New York is pulling back. . Keeping you up to date with news from around the world with the first word I’m sure you could go up to the Justice Department says White House records held in a storage room at Donald Trump’s Florida home may have been moved before an FBI search in June. . The Justice Department says that could have been an attempt to obstruct the investigation. . In a filing that was a photo of files labeled Top Secret said to have been found in the former president’s office. . The government was responding to his lawsuit to appoint a special master to review the documents. . Inflation in the eurozone has set a no all time high. . Consumer prices in the 19 country currency bloc rose nine point one percent in August from a year ago. . That beat the median estimate in a Bloomberg survey of economists. . And it strengthens the case for the European Central Bank to consider a jumbo interest rate hike when it meets next week. . Shares a bed Bath and Beyond are plunging today. . The struggling home goods retailer has secured new financing and will close stores and slash its workforce. . Bed Bath and Beyond faces a shrinking cash pile and is falling behind on payments to vendors. . That’s prompted some suppliers to halt or restrict shipments. . Shares of SNAP are falling today according to The Verge. . The parent of Snapchat plans to lay off about 20 percent of its nearly 60 500 employees starting today. . The stock already has fallen almost 80 percent this year. . Now it’s been struggling with a slowdown in advertising spending. . And Mikhail Gorbachev is being remembered as the last leader of the Soviet Union who ended the Cold War. . Gorbachev died Tuesday at a Moscow hospital. . His attempts to shake up the Soviet Union’s political and economic system led to the collapse of the communist superpower. . Gorbachev’s career disintegrated in the process. . He was 19 when global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts similar than 120 countries. . I’m Richard Gupta. . This is Glenn Beck. . Live from New York City this morning. . Good morning with some Cain and Lisa Abramowicz some Jonathan Ferro. . Do not shoot the messenger. . Downside surprise on the ADP. . And bad news is good news. . Equities up for 10. . So yes some say on the Nasdaq up eight tenths of 1 percent. . Would fade a little bit as well on a two year one off session highs almost unchanged on the session now up a basis points at 345. . 61 is the downside surprises 132. . We were looking for three inch. . Okay. . They sat on sweats at some from Ivan NIKKEI. . ADP unveils a new top spot maker. . That’s the latest ADP printed like that might be case with us. . Take one of mine. . Good morning John. . Yeah. . I’m the messenger but I don’t know what the message is here. . ADP says this is a brand new survey. . It’s been completely retooled. . It doesn’t depend on models. . It is a snapshot of the labor market during the month based on the payrolls that they process. . And as you said a hundred and thirty two thousand jobs 23000 are in the goods producing sector. . Although there was no change in manufacturing jobs and service providing jobs rise. . One hundred ten thousand. . Now what does this mean for Friday. . You listen to the ADP people. . It says nothing. . It’s a standalone indicator a unique snapshot of the economy. . But I bet everybody on Wall Right is going to be plugging these numbers into their forecasts for Friday which the consensus at this point is 300000. . They also Tom have a new report that is part of this report on pay. . And according to this annual pay a 12 month rate is was at seven point six percent rate of increase in the month of August which is high but they say stabilized. . Now hard to know exactly what stabilized is because we don’t have the black numbers. . But in theory they’re Ripley’s releasing those today. . They back casting and we’ll see what it all. . We’ll try to put it all together for you know a nice lift to the market here. . NASDAQ up 108 points. . That gets my attention. . Michael McKee moments words. . This has been a busted data point for umpteen years. . Mark Zandi tried to make it work and others after Mark Zandi did they went out and hired one of the best math guys in the world. . Erik Brynjolfsson With Andrew McAfee writing all sorts of things including the second Massie machine age. . What is Professor Brynjolfsson of Stanford going to do to make the second ADP age. . What’s he going to bring to this. . Well basically they’re looking at large sources of data that can be trimmed down to a smaller point that is useful to people. . They say this is not model based. . This is based only on the ADP data. . The Zandi versions will say they’re looking models the paychecks of America to get their data. . Yes. . In terms of in terms of small medium large establishments that they’re breaking it down by industry sector. . They’re even breaking down the pay stuff by the whether or not you’re a job leaver or a job stayer. . It sounds a lot like the Atlanta Fed wage tracker but we haven’t. . I mean it’s just come out. . So I have to share that. . This is the heart of the matter. . Lee says the maybe now they’re going to go to the actual data not to mean that the diary of data points of research points empire this. . I mean Lisa how many of these are these tertiary numbers empire. . This is Dallas manufacturing that these tertiary numbers are important for people who are completely data dependent because the Fed isn’t giving forward guidance supposedly. . Mike is this ADP report powerful enough to move the dial and be relevant going forward. . Is the new methodology enough of an overhaul to make it so that people don’t just shrug this off being like it’s ADP. . Well here’s the thing. . They retooled this because their model based previous surveys were designed to sort of preview what was going to happen in non-farm payrolls. . Now they say it’s not a preview. . You can’t extrapolate but probably people will try to do that. . And then it’ll depend on how close they come to the overall private sector job gains in the non-farm payrolls number. . So we’re going to have to see how how this all works out over the longer run. . I think Mike’s being kind to get a Mark Gurman and thank you for your leadership in Jackson Hole. . It was absolutely fantastic to see you with all the Fed precedents. . What’s the big takeaway for you Mike. . Because for many people it’s not September. . So 50 or 75 something bigger happening here. . Well it’s to be the terminal rate and how long it takes to get there and then how long they hold it. . The Fed is pretty much all of them are pretty much agreed that they’re going to get to a place above neutral and they’re going to hold rates there. . But there are disagreements about where that point is above neutral whether it’s three point five three point seventy five four percent or higher. . And there are disagreements about how long they may have to keep it there but they are determined to bring down inflation. . And I think that’s the message that J. . Paul on behalf of everybody was trying to send on Friday might. . Do you think they have sent a. . And a convincing way that higher unemployment is a price worth paying for lower inflation. . I’ve returned to that chairman power speech from Friday a couple of times now maybe four or five. . And I was reading through it yesterday and it was this word pain. . He talked about pain and I’ll share the quote with everyone. . While higher interest rates slower growth and softer labor market conditions will bring down inflation. . They will also bring some pain to households and businesses. . But a failure to restore price stability would mean far greater pain. . Mike how convinced you think the general public are of that. . I don’t know because I don’t know how much attention the general public pay to the Fed but through the markets the markets seem to be buying into it but slowly through the markets. . People will see the impact and maybe it starts to register. . Powell did not say we’re going into recession. . He didn’t say unemployment is going to rise. . You have to read between the lines which everybody on Wall Street can do. . And I don’t know how many. . The general public are actually paying that much attention especially in August when their focus is on that last vacation before school. . Stay with the leaves changing as well. . Mike let me cut to the chase very quickly. . Here at home. . He’s talking 4 percent. . Inflation is where we’re heading. . What’s the quote. . There’s John mentions. . What’s the pain in a 4 percent inflation. . Well we’ve heard the Fed suggest that we get to a four point one percent unemployment rate which would mean a minimum amount of pain because the Fed believes that the natural rate of unemployment is for an apposite. . So it’s hard to say you get to 4 percent unemployment or 4 percent inflation and maybe people start to feel a lot better. . But look at what happened with the consumer confidence numbers yesterday because gas prices have fallen. . They’re still really high but they’ve fallen. . So people are feeling better. . Mike thank you sir. . NIKKEI in the seats. . Go through the ADP print side. . Surprise ahead of payroll some Friday looking for something in and around 300. . Okay. . It’s pretty conventional wisdom in economics Tom but pretty controversial when the general public starts to hear this message that higher unemployment is a price worth paying. . Oh I don’t think I John I feel the public doesn’t buy it for one single sentence. . The second they’re looking at these people going. . Are you nuts. . That’s why Tom I think it becomes much more controversial when we actually start to see these numbers. . And I go back to the comments from Senator Warren over the weekend to CNN. . She’s not going to be alone if unemployment starts to go down. . And Rand every single news conference is saying is part of the plan. . I mean I haven’t seen anything. . John help me with the United Kingdom or Lisa what you’ve read as well. . What’s the food cash kitchen. . So I mean we’re making jokes. . I’m making jokes about autumnal bliss. . Baloney. . It’s getting colder. . For a growing homeless population. . Electricity prices and utility bills makes it top of mind for everybody in Europe right now. . Yeah very much a very big concern. . But just going back to this idea of the labor market and the pain there there is this issue of the JOLTS survey of the job openings. . And this is sort of the soft landing scenario that if you take away some of the job openings you won’t necessarily get layoffs. . You’ll just sort of get this nirvana soft landing. . That is a beautiful thing. . It is. . That’s the case. . We all hope it’s the case. . I hope that’s the case. . Futures up a third of one percent. . I know Mike when I said I’m no allusion to September but he. . Sure you took him. . He was up a company. . I was just bullish by the way. . He said that he won the tone wasn’t bullish. . I was kind of like a. . For about a second five minutes ago Lisa was almost bullish except she said bullish thing that went to like it was a fairy tale matter said Lisa tone matters. . You clicked as this is how it’s something that was bullish. . That was foolish. . But if you make it sound like a fairy tale once upon a time job openings came down and unemployment didn’t rise. . It is a fairy tale. . Didn’t have to go that high and growth stabilized. . And if one was happy and it was a big bull market. . OK so you’re quoting fairy tales. . Sleep well. . Hum is putting Robert Frost happy. . No idea what his clients want to say. . How much movement from grandma gloom time to Primo Standard Time on the NASDAQ 7 cents of one per cent. . Yo tapas a couple of basis points 312 31. . If you can grab Pat Sterling just like me eurodollar with the break. . Apparently at ninety nine Nani wants Sterling 116 and just about holding on as well. . That currency pairs down four tenths of one percent earlier on this morning. . I mentioned the comments from Charlie Bean to our team over in London. . The X Bank of the deputy governor who talked about a risk premium that might have to return to the gilt market because of the ongoing deficit that we’re seeing in the UK and the fact that it could get bigger because they need to offset the pain in the utility market. . The energy market and Stephen Engle most picking up on this. . And he’s basically saying we think it’s also showing up in the currency. . Now tell me if you worry about finance to get deficit as you know you even need to attract investors with high yield. . So a weaker currency to get those international flows and arguably be getting both right now. . It’s a difficult moment for the policymaker. . It’s a very very different backdrop this time around to the fiscal oversupplied. . Back in spring of 2020 it’s always a trilateral or three pronged or three legged stool John. . And I’m in the camp. . That foreign exchange really matters right now. . And when you were biased at Bloomberg on that because it’s just so supple on the terminal. . But John I’m sorry it’s speaking volumes. . And what really interests me is Swiss Re has not strengthened. . This is not a fear thing. . It’s not a Ukraine thing. . This is an economic growth thing. . And that’s why you see UK historically John even as we do this section with the lease we may get a 115 ambulance. . It’s a policy thing time and policy. . And a lot of countries at the moment is in conflict with each other on fiscal monetary. . We’re just about holding onto what’s 16 right now some on Pat Sterling against the US dollar to the labor economy of a beleaguered United Kingdom and certainly moving to jobs day on Friday. . We begin and we thought we’d do something different this time not with what’s non-farm payrolls going to be but far more of the social aspects of our labor economy. . The Economic Policy Institute granted left leaning Democrat Biden favored whatever you want to say. . They have provided exquisite must read research for conservatives on the social structure of the American labor economy. . Elise Gould joins us this morning. . Elise I’m going to channel the good David Blanchflower up at Dartmouth College and he is heated. . We’ve got it wrong that it is a heterogenous labor economy. . And I’m going to use from John Edwards two three or four Americas. . What percentage of America is flat on its back. . That’s it. . Very interesting question. . I think that you’re right that there are different stories of what is happening to people when you think about the economy we think about the labor market overall. . The unemployment rate has remained at three point five percent. . That’s quite low. . We still are adding jobs every month that are pulling more people back into the labor market. . But as you say I think there are huge disparities still out there. . Young workers still have much higher unemployment rates than other workers. . Black workers still have about two times the unemployment rate of white workers. . We still have seen wage growth in areas like leisure and hospitality had been stronger. . Last year is now coming down. . All right. . That is decelerating. . So I think that there are different stories. . And those wages in some of those industries. . But most men have turned. . Those are still quite right. . At least we’re spending a lot of time on the x axis looking at the duration of these events. . There is a negative wage growth. . The real wage is decidedly negative. . But importantly the duration of that negative almost a hysteresis of that negative wage growth is substantial. . What’s the tipping point where that negative wage growth really affects society in America. . Well I think it is hitting many people right now. . Already they’re noticing it when they go to the grocery store. . They’re noticing it obviously when they buy gas. . Though we are seeing those energy prices come down. . And I think that will trickle that will filter into lower prices overall because transportation costs are a major factor in many of the costs. . I think it will become more affordable. . I am somewhat optimistic as you all were talking about before. . I think there there is the ability to see that kind of optimism even though nominal wage growth is starting to slow a bit. . I think that that rate of growth is starting to slow. . I think that we will see gains in the future in terms of living standards as inflation comes down late. . Lisa I want to go to the point we were discussing earlier about how much fiscal policymakers hands are tied when it comes to supporting the market when the economy does start to decline. . Right. . There is this feeling that they will have to slow materially possibly go into a recession and that fiscal policymakers cannot spend to the same degree that they have in the past for fear of only fueling some of this inflation fueling what the Fed has to do and creating an even bigger downturn. . Do you think that that is the appropriate way to look at this. . That there cannot be fiscal spending in the same kind of way. . Period. . Full stop for years to come. . Well I don’t know. . I mean I think we need to make the kind of investments that are necessary to do things like pull down inflation pull down energy prices the long run. . I think that’s what we’re seeing in the Inflation Reduction Act. . I think that we’re going to see that in the future. . I think that those investments are actually important. . I also think about the kind of investments we need to make to increase the supply of workers. . So make sure that we have as many workers out there as possible. . And that will also help with the economic growth in the future. . So doing things like making investments and care work those kinds of things will allow more women to enter the labor force. . In fact if you if you have more people workers entering the labor force then that will put less pressure on wages. . And so I can see there being different parts of this but I don’t actually think we need to have a substantial slowdown as we’re already seeing inflation begin to fall. . Well I guess I’m I’m just questioning certain aspects of this both the U.S. . and internationally. . When you start to talk about spending to support especially lower income individuals who are really struggling how much there will still be an open market for raising cash for those things. . Right. . The U.S. . perhaps not as serious of a condition as United Kingdom in this capacity but the student loan relief measures like this do you think that that is a net benefit even at a time when it could on the peripheries add to inflationary pressure. . I think all the evidence suggests that that is a very tiny impact on any kind of inflation. . So I don’t think that is a major factor in thinking about whether or not something is a good policy. . I think we can look at other things about who is going to be affected by the policy how well how well it’s going to be targeted how well it’s going to impact people’s ability to make ends meet all of those other things. . I think the impact that research shows that the impact on inflation is pretty negligible. . One final question if I could. . There is a gross assumption that businesses and corporations out of the great financial crisis took the high ground in power over labor. . There is now an assumption perhaps that labor is gaining strengths coming out of this pandemic. . Do you buy it. . I do. . Actually I think that we’re seeing it in activity in terms of increased interest in unionisation. . We saw that recently with a Gallup survey about you know growing numbers of people interested in collective bargaining. . You’re seeing those activities across the country. . I think that will have some staying. . I think that we will see that may translate into a bit more leverage moving forwards. . Lisa Scott thank you. . If the Economic Policy Institute on the labor market in America important week for the labor market in America. . The ADP report out about 15 minutes ago. . Call it 20 minutes ago now. . Downside surprise 132. . The estimate is 3 inch. . Okay is up for Friday 300 K is the estimate down 5 28 in the previous month. . The WHO was hired was his job to 85 in a couple days ago. . Shery Ahn really has been climbing some show but I I have so much trouble John with the gloom of a 300 or 285 number versus the normal time say 200000 or 225. . I get that somebody it’s a plant or data point right. . So since you start getting concerned about that the horse has bolted and you go with that data. . And John you know stay with me September 1 when the leaves begin to change. . Unit labor costs frankly is just as powerful as jobs day. . It’s going to show us you know that wage dynamic that inflation is the most important data points I’m looking out is going to be the unemployment rate. . It’s at three point five percent is expected to stay there on Friday. . I keep saying this because I think it is going to be one of the most important stories in the next 12 months. . The Fed is telling us later that unemployment is going to climb. . I’m not quite sure we fully got our hands around. . Well that’s going to look like when it happens. . All right. . A master saying she is expecting the unemployment rate to climb to 4 percent. . The argument the others make is that there still is so much room for people to come back. . The labor market the participation rate could go up the productivity rate could go up that it could create the soft landing that Elise Gould was talking about. . But what happens if it doesn’t happen. . And must many people say that it’s much more likely that we don’t get that kind of Goldilocks scenario. . You know my bullish than Lisa. . I’m being I’m trying to be actually fair. . These are the arguments that people are made balanced. . Balanced. . Yeah. . Not just you know with skeptical. . I’m not sure what Tom’s up to. . All right. . It’s Tom. . Yeah. . You know it’s a loaded question. . I’m getting ready for the talks. . I can’t focus. . John I just did a survey for you to get you up to Vermont for the leaves of October. . They’re sold out. . Woodstock. . Yes. . That’s not Vermont. . That’s just what sold out. . Just sold ISE completely. . Yeah that’s good things off. . All right. . No place to stay John. . All right. . They’re sold out the hotels. . Yes. . OK. . No no it’s not a hotel. . It’s one of America’s most famous since John Coulter. . Seriously. . Woodstock Vermont was redone by John Rockefeller decades and decades ago. . He was the first one to put the power lines below the street. . So you drive into this town and it looks like a Dickens novel. . I’m just picturing right now. . ISE going on an apple picking trip. . Oh Tom we’ll be reading Robert Frost. . Yes. . John kind of going to Wikipedia Wikipedia to tell us everything about that particular plot of land in Vermont. . OK. . We actually pick an apple. . You’ll be evaluating which apples are the Jihye Lee. . Why. . That we can make quick insider reading Wikipedia. . Tell us all about it. . I’m not going. . No. . No. . Hey come on. . A rowboat. . We can go up to Stowe Vermont. . John Tucker. . No no no. . I’m not going. . Senator Leahy could show the Yankees owner is put a minority stake in my football club some AC Milan. . That’s just happened to power. . Really. . We’re expecting that to happen. . That’s news you can use. . OK. . We’d actually like to win something nice. . Features futures up at that from New York. . This is pulling back. . Keeping you up to date with news from around the world to the first word answers could get more revelations in the probe of those classified documents found at Donald Trump’s Florida home. . In a court filing the Justice Department suggests there may have been attempts to obstruct the investigation by moving some of the papers. . The filing included a photo of files labeled Top Secret said to have been found in the former president’s office. . The government was responding to his lawsuit to appoint a special master to review the documents. . Europe faces the risk of blackouts rationing and a severest recession if Russia slashes gas deliveries further. . And the next reality check is at hand. . Starting today there’ll be a halt in gas sent through the Nord Stream pipeline. . It’s a key source of energy for the EU. . There’s a concern that Moscow will find another excuse to clamp down on supplies. . Meanwhile oil is headed for its third monthly drop in a row. . That’s the longest losing streak in more than two years. . West Texas Intermediate has lost more than 6 percent this month. . Economists see slower global growth which would further hurt demand for oil. . And Bloomberg has learned that Credit Suisse’s board is divided on the fate of its troubled investment bank. . Just before some crucial meetings one camp is pushing back against an aggressive downsizing. . Others are in favor of more extensive cuts after racking up billions of dollars in losses. . Credit Suisse is taking aim at the investment bank which has been at the heart of some of its biggest troubles. . And the U.S. Army has grounded its entire fleet of about 400 CHF 47 Chinook transport helicopters. . That’s after engine fires broke out on a few of them. . The twin engine helicopter has been in service for six decades. . It’s built by Boeing and the engines are made by Honeywell. . The army says it has identified the cause of the fires and is implementing corrective measures. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries. . And which could get to. . This is Glenn Beck. . I think it’s coming back and obviously what this is just to have to at the macro environment if we see markets crash again we’re going to see that crash along with it. . You see a market recovery in secret that recovery along with it. . But I think this is you know it’s flushed out a lot of the things that needed to be flushed out from the crypto space anyway. . It wasn’t Bed Bed Bath and Beyond. . But go from 24 billion not a billion that were net worth. . Makes it difficult. . 2024 Sam Banks in 3D with David Rubenstein. . This is an extremely important conversation for all wired up to crypto like me. . And at least so Mr. . Rubenstein joins us this morning. . Look for that 9:00 p.m. . tonight. . This guy’s controversial to say the least. . What is his crud. . What is the the thing that he has that makes people in crypto. . Listen to him. . Well he’s very smart. . He’s made a lot of money when you make a lot of money lost a lot of money to David. . But at the age of 30 he was worth 22 billion dollars. . He became the youngest person to sign the giving pledge. . And he’s committed to giving away all his money. . He basically spends nothing on himself. . He lives in the Bahamas basically has no clothes of any consequence. . He wears shorts and T-shirts and tennis shoes all the time lives in a dorm with eight friends or so. . He only cares about certain public issues and public policy. . But he’s very unusual. . How does he control or what does he believe the price of bitcoin will do. . How does it discover a bid at whatever level. . Well I didn’t ask him that because he’s basically he operates FTSE CAC which is an exchange. . So it gives everybody the opportunity to buy or sell Bitcoin or other crypto currencies. . He doesn’t know what the right price should be. . He recently bailed out a lot of U.S. . companies that had troubles. . He might lose money on all that but he feels it was good for the industry. . So why is this industry important from a social benefit kind of way. . If he is David incredibly idealistic and looking for the betterment of social order. . Well his view is that people who have money should give away that money or do things for good social purposes. . And that’s what he’s always believed then. . He now has a fair amount of money and he’s giving away a good deal money. . He’s also involved in politics and he gives a lot of money to politicians. . He thinks it’s good to get good public servants in government. . And so he’s trying to back the ones he thinks are good. . He has unusual lifestyle in that he’s really not buying any of the accoutrements of wealth that you normally get when you have a multibillion dollar fortune. . I have to pivot a little bit because David Rubenstein I caught an article that was written about you a couple of days ago about his potential bid for the Nationals possibly the Orioles should they come up for free. . Is this random a moment of passion or is this something that’s actually an investment at a time when a lot of people are looking for alternative assets. . Well you know I I realized when I was young I wasn’t going to be a professional baseball player. . I thought I was a great star at six or seven. . But when I got the eight or nine I realized I probably wasn’t going to make the major leagues. . So I figured if I ever get to the major leagues I probably have to do it as an investor or an owner. . So I have I am from Baltimore. . I have looked at whether buying a baseball team makes some sense but that’s too early to say what’s going to happen now. . I Lisa that was a very dangerous question. . Why is it dangerous. . David Westin is dangerous quite ever come back again to the point of baseball. . In sports the stereotype of big hitters is that can buy any sports team and it never goes down. . It just always goes up. . Why is that. . It’s hard to lose money on a sports team generally when you own them. . The NFL teams they make money hand over fist. . Baseball basketball other teams. . They make money when you tend to sell the team. . And so people rarely lose money selling a team. . In the end if you you can support the team without current income from a team you can do quite well just holding it for quite some time. . But if you look at most people who’ve made money in baseball it’s by selling the team not operating at daily. . On the other hand some teams are very profitable and cash flow basis. . Where are you and Carlyle with investments over the years on public investment and stadium. . Now you don’t need to do that in Baltimore because Camden Yards is truly one of our jewels. . But but should public funds be spent. . I’m trying to think of the city right now where this is a raging debate. . Should we buy new baseball stadiums. . Well every every government official presumably is elected by people and they make the decisions that hopefully reflect what their population wants. . Our populations tend to want these things. . People like our sports teams. . You have such an enduring place in philanthropy. . If Mr Sam Brinkman freed enjoys going from 22 billion down to 8 billion and let’s say Bitcoin cracks and goes down to whatever 12000 whatever does he change. . I don’t think he changes a lot. . He’s a member. . He’s not spending this on his personal kind of needs. . He’s not buying homes or planes or things like that. . And I think whether he’s worth 8 billion 22 billion or 1 billion I don’t think he’s going to change very much. . He’s very young. . He’s only 30 years old. . I’d like you to come back and talk to me for one hour about the National Archives which is being dragged through the mud right now. . I know this is a third rail for you. . And if you find the time and the energy I would love to do a half hour nonstop on what is anytime heart and soul. . The National Archives is a great institution in Washington and has all of the records of our federal government. . And it’s been around from the 1920s that they don’t have a current head because David Farrell resigned retired. . But there will be somebody who is likely to be confirmed soon. . The first woman to be the chief archivist United States. . He’s talked right around me there. . What if the right wing part of America goes after your national archives with your philanthropy on Magna Carta and the rest. . Well there are people in Congress who I think we’ll prevent that from how the system will prevent it. . I hope so. . All right David thank you so much. . David Rubenstein we know tonight with RTX CEO Sam Beckman Friedan’s Lisa Abraham. . What’s said to me in my ear. . Orioles three games behind in the wildcard race as well. . Thank you for that information. . Keep throwing me under the bus. . Yeah basically just trying to make me look like badge words tomorrow. . Team Dow Jones is at least. . Lisa what are you looking at in there. . Take care. . I think I’m watching. . See whether we get a little bit more of the gains particular with the NASDAQ. . I find this the most interesting that people are going back and buying big tech on this belief that the economy will slow that rates will get lower that inflation expectations are coming down and pile back into big tech. . It’s just it is a tenuous tape. . It is a new gene to use your word because people don’t have conviction ahead of the labor market before. . Hey I learned today that it’s August. . So yeah it’s very it’s going to be it’s going to be really really interesting. . Here we go to Jobs Day folks. . But also there’s a whisper here of the effect of disinflation. . That’s really not in the published literature right now. . I think we’re going to see that with a vengeance here into September as well. . On balance of power today on Bloomberg Television and Bloomberg Radio. . She has my Book of the Year. . Angela Stent and Putin gave a Book of the Year in February over her magisterial volume Stent on Gorbachev. . This is Bloomberg. . Welcome back to another special U.S. . Open update for Bloomberg TV and Radio from Tennis Channel. . I’m Johnny Radius. . Rafa moves on and Roddick Cano goes out on day two at the U.S. . Open. . Rafael Nadal had to work hard to get past ranking Jakarta and reached the second round after losing the opening set 6 4 to the young Aussie. . The Spaniard put his foot to the floor before securing the win. . NASDAQ and extend his lead on the all time list at the slams. . And he claims his Fifth Crown in New York and his twenty third major title. . Up next for him Italy’s Fabio find meaning on the women’s side. . Defending champion Murata Khan who was sent packing by Al-Azhar Corny in the biggest upset of the tournament so far. . Twenty two winners for the French woman and the victory while 31 unforced errors told the story for the Brit. . Courtney will face Catarina Singh a cobra in round two. . And don’t forget Tennis Channel Live has all the news you need. . Hits the air daily at 9 a.m. . Eastern. .",
            "url": "https://safenumz.github.io/blog/english/2022/08/31/bloomberg-surveillance.html",
            "relUrl": "/english/2022/08/31/bloomberg-surveillance.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "[Recommender System] Neural Collaborative Filtering",
            "content": "Neural Collaborative Filtering . . Abstract &amp; Introduction . 기존 Linear Matrix Factorization의 한계점을 지적 | Neural Net 기반의 Collaborative Filtering으로 non-linear한 부분을 커버 | user와 item 관계를 보다 복잡하게 모델링 할 수 있음 | . Contributions . User와 Item의 latent features를 모델링하기 위한 Neural Network 구조를 제안 (General Framwork NCF) | Matrix Factorization은 NCF의 특별한 케이스임을 증명하고, Multi-layer Perceptron을 사용 | 실제 데이터를 활용하여 다양한 실험을 진행했으며, 이를 통해 NCF의 효과를 증명 | . Preliminaries . Learning from Implicit Data . . $M$과 $N$은 user와 item 수, rating 데이터가 0과 1의 binary 데이터 | user가 item을 관측했는지에 따라 0 또는 1로 표현 &rarr; interaction이 있는지 여부를 표시 선호, 비선호를 나타내는 것이 아님(implicit feedback data) | . | interaction function $f$를 정의하고, user와 item간 interaction이 있는지 확률을 예측하는 문제 | 2가지 objective function(Point-wise loss와 Pair-wise loss) 모두 사용 가능 Point-wise: 실제값과 예측값 차이를 최소화 | Pair-wise: BPR에서 사용했으며, 1이 0보다 큰 값을 갖도록 마진을 최대화 | . | . Matrix Factorization . . User-Item Interaction Matrix의 한계점을 지적 u4 &rarr; u1 &rarr; u3 &rarr; u2 | u4 &rarr; u1 &rarr; u2 &rarr; u3 | . | user와 item의 복잡한 관계를 low dimension에 표현하면서 문제 발생 | Dimension 크기를 키우면 overfitting 발생 | Non-linear한 Neural Network를 사용해서 복잡한 상관관계를 표현 | . Neural Collaborative Filtering . General Framework . . Input Layer (Sparse): user와 item을 one-hot vector로 표현 | Embedding Layer: Sparse one-hot vector를 dense vector로 맵핑 | Neural CF Layer: User Latent Vector와 Item Latent Vector를 concat해서 Layer를 통과 | Output Layer: user $u$와 item $i$의 상관관계를 0과 1사이의 점수로 나타냄 | . . Label이 binary이기 떄문에, Bernoulli Distribution을 사용 | $ Upsilon$는 $y_{u,i} = 1$인 집단, $ Upsilon^{-}$는 $y_{u,i} = 0$인 집단을 나타냄 | Loss Function은 binary cross entropy를 사용 | 위의 L를 최소화하는 파라미터를 찾음 | 학습은 SGD를 사용 | . Generalized Matrix Factorization (GMF) . Matrix Factorization이 Neural CF의 특별 케이스로 된다는 것을 보여 줌 | . $$ Large{ phi_{1}(p_{u},q_{i}) = p_{u} bigodot q_{i}} $$ $p$와 $q$는 user와 item의 latent vector인데, 이를 element-wise 곱하고, weight를 곱해 줌 | . $$ Large{ widehat{y_{ui}} = a_{out}(h^{T}(p_{u} bigodot q_{i}))} $$ $a$는 non-linear activation fuction(sigmoid) | $h^{T}$는 내적할 때, 가중치 역할을 하며 latent vector를 학습할 수 있게 만들고 중요도를 조절하도록 함 | $a$가 1이고, $h^{T}$가 uniform vector이면 Matrix Factorization이 됨 | . Multi-Layer Perceptron (MLP) . . GMF보다 더 간단하게 user-item interaction을 학습할 수 있음 | $W_{x}$, $b_{x}$, $a_{x}$는 순서대로 weight matrix, bias vector, x번째 층 activation fuction | $ theta_{1}$은 user와 item의 latent vector를 concat함 | 이후 모든 $ theta_{L}$은 weight matrix와 bias vector로 표현 | 최종 식을 GMF와 동일한 구조를 가짐 | . Fusion of GMF and MLP . . . GMF와 MLP에서 사용하는 latent vector dimension이 다를 수 있음 | 최종 score는 MLP와 GMF의 output을 concat하여 사용 | MF linearity와 MLP의 non-linearity를 결합하여 장점만 선택 | . Experiments . MovieLens와 Pinterest 데이터를 사용하여 실험 | Pinterest의 경우 데이터 셋이 매우 크지만 sparse 함 사용자의 20%가 pin이 하나만 존재 | 최소 20개 이상의 pin을 가진 user로 필터해서 사용 | . | Baseline ItemPop: Popularity에 따라 아이템 순위를 매김 | ItemKNN: Standard Item-based CF 방법을 implicit feedback에 적용 | BPR: MR 모델을 최적화하는 방법 | eALS: 아이템 추천에서 state-of-the-art MF 방법 | . | . . Conclusions . General Framework NCF를 제안; GMF, MLP, NeuralMF | Linear 모델의 한계를 neural network를 사용하여 해결 | GMF와 MLP의 장점을 합하여 NeuralMF를 제안했으며, 성능 향상에 기여 | User-item interaction의 다루는 Collaborative Filtering 아이디어에 집중 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/08/29/paper-neural-collaborative-filtering.html",
            "relUrl": "/paper/2022/08/29/paper-neural-collaborative-filtering.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "[Finance English] Powell's Jackson Hole Speech (2022.08.26)",
            "content": "Thank you. Good morning, everyone. . Thank you for the opportunity to speak today. . At past jackson hole conferences, I have discussed broad topics such as the ever-changing structure of the economy and the challenges of conducting monetory policy under high uncertainty. . Today, my remarks will be shorter and my focus narrower and my message more direct. . The federal open market committee’s overarching focus right now is to bring inflation back down to the 2% goal. . Price stability is the responsibility of the federal reserve and serves as the bedrock of our economy. . Without price stability, the economy does not work for anyone. . In particular, Without price stability, We will not achieve sustained period of strong labor market conditions that benefit all. . The burden of high inflation falls heaviest on those least able to bear them. . Restoring price stability will take some time and requires using our tools forcefully to bring demand and supply into better balance. . Reducing inflation is likely to require a sustained period of below trend growth. . Moreover, There will very likely be some softening of labor market conditions. . While higher interest rates slower growth and softer labor market conditions will bring down inflation. . They will also bring some pain to households and businesses. . These are the unfortunate costs of reducing inflation. . But a failure to restore price stability would mean far greater pain. . The U.S. economy is clearly slowing from the historically high growth rates of since 2021 which reflected the reopening of the economy following the pandemic recession. . While the latest economic data has been mixed, In my view, economy continues to show strong underlying momentum. . The labor market is particularly strong but it is clearly out of balance with demand for workers substantially exceeding the supply of available workers. . Inflation is running well above 2% and high inflation has continued to spread through the economy. . While the lower inflation readings for July are certainly welcome, a single month’s improvement falls far short of what the committee will need to see, before we are confident that inflation is moving down. . So we are moving our policy stance purposefully to a level that will be sufficiently restrictive to return inflation to 2%. . At our most recent meeting in July, The FOMC raised the target range for the the federal funds rate to two and a quarter to two and a half percent which is in the summary of economic projections range of estimates of where the federal funds rate is projected to settle in the longer run. . In current circumstances with inflation running far above 2% and the labor marekt extremely tight estimates of longer run neutral are not a place to pause or stop. . July’s increase in the target range was the second 75 basis point increase in as many meetings and I said then that another unusually large increase could be appropriate at our next meeting. . We are now about halfway through the intermediate period, Our decision at the september meeting will depend on the totality of the incoming data and the evolving outlook. . At some point, As the stance of monetary policy tightens further, It likely will become appropriate to slow the pace of increases. . Restoring price stability will likely require maintaining a restrictive policy stance for some time. . The historical record cautions strongly against prematurely loosening policy. . Committee participants most recent individual projections from the June Sep showed the median federal funds rate running slightly below four percent through the end of 2023. . Participants will update their projections at the September meeting. . Our monetary policy deliberations and decisions build on what we’ve learned about inflation dynamics both from the high and volatile inflation of the 1970s and 1980s and from the low and stable inflation of the last quarter century. . And, In particular, We are drawing on three important lessons that I will highlight. . The first lesson is that central banks can and should take responsibility for delivering low and stable inflation. . It may seem strange now that central bankers and others once needed convincing on these two fronts, But, As former chairman Ben Bernanke has shown both propositions were widely questioned during the great inflation period. . Today, We regard these questions as settled our responsibility to deliver price stability is unconditional. . It is true that the current high inflation is a global phenomenon and that many economies around the world face inflation as high or higher than seen here in the united states. . It’s also true in my view that the current high inflation in the united states is the product of strong demand and constrained supply and that the FED’s tools work principally on aggregate demand. . None of this diminishes the federal reserve’s responsibility to carry out our assigned task of achieving price stability. . There is clearly a job to do in moderating demand to better align with supply we are committed to doing that job. . The second lesson is that the public’s expectations about future inflation can play an important role in setting the path of inflation over time. . Today, By many measures, Longer term inflation expectations appear to remain well anchored, That is broadly true of surveys of households businesses and forecasters and of market-based measures as well. . But that is not grounds for complacency with inflation having run well above our goal for some time. . If the public expects that inflation will remain low and stable over time, Then absent major shocks, It likely will unfortunately the same is true of expectations of high and volatile inflation. . During the 1970s, the anticipation became entrenched in the economic decision-making of businesses and households. . The more inflation rose, The more people expected it to remain high and they built this into price decisions. . During the 1970s, As inflation climbed, The anticipation of high inflation became entrenched in the economic decision-making of businesses and households. . The more inflation rose, The more people came to expect it to remain high and they built that belief into wage and price decisions. . As former chairman Paul Volcker put it at the height of the great inflation in 1979, Inflation feeds in part on itself so part of the job of returning to a more stable and more productive economy must be to break the grip of inflationary expectations. . One useful insight into how actual inflation may affect expectations about its future path is based in the concept of rational inattention. . When inflation is persistently high, Households and businesses must pay close attention and incorporate inflation into their economic decisions. . When inflation is low and stable, They are freer to focus their attention elsewhere. . Former chairman Alan Greenspan put it this way. . For all, Practical purposes price stability means that expected changes in the average price level are small enough and gradual enough that they do not materially enter business and household financial decisions. . Of course, Inflation has just about everyone’s attention right now which highlights a particular risk today. . The longer the current bout of high inflation continues the greater the chance that expectations of higher inflation will become entrenched. . And that brings me to the third lesson which is that we must keep at it until the job is done. . History shows that the employment costs of bringing down inflation are likely to increase with delay. . As high inflation becomes more entrenched in wage and price, Setting successful volcker disinflation of the early 1980s followed multiple failed attempts to lower inflation over the previous 15 years. . A lengthy period of very restrictive monetary policy was ultimately needed to stem high inflation and to start the process of again getting inflation down to the low and stable levels that were the norm until the spring of last year. . Our aim is to avoid that outcome by acting with resolve now, So these lessons are guiding us as we use our tools to bring inflation down. . We are taking forceful and rapid steps to moderate demand so that come it comes into better alignment with supply and to keep inflation expectations anchored. . We will keep at it, Until We’re confident the job is done. . Thank you. .",
            "url": "https://safenumz.github.io/blog/english/2022/08/26/fed-powell-jackson-hole.html",
            "relUrl": "/english/2022/08/26/fed-powell-jackson-hole.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "[Finance English] Oil at $100 | Bloomberg Surveillance (2022.08.12)",
            "content": "Oil at $100 . I don’t know how long it’ll take to come down but clearly the momentum is down on inflation. . Yes they are coming down but I think are very far away from the Fed’s objective. . We look at other measures of inflation. . There’s still a lot of work for the Fed to do with the economy slowing and inflation is coming down after they want to be sure they are on the right track. . I think the Fed looks at this has been as the beginning of of their battle and having been more credible but having more work to do. . This is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . Good morning everyone. . Jonathan Ferro. . Lisa Abramowicz. . Tom Keene. . Thank you for being with us on a Friday. . On radio. . On television Lisa. . There it is again. . One hundred dollars a barrel on Brent crude. . And this comes after mixed reports yesterday. . This to me I find that yes he had the IAEA coming out and saying they actually expect increased demand for oil. . And then you had OPEC coming out and saying that they expect a surplus. . The market has voted with the IEA. . They are not necessarily taking the OPEC view on its face. . Commerzbank I thought did a great job out of Frankfurt on this on this mixed nature that Lisa talks about. . Stephen Schork joining us here I believe it was yesterday. . Lisa he says Henry Hub in New York surges was the word to use. . Yeah. . And he partly though he sees this weakening in demand. . This is the big debate. . Is this signal or is this noise. . Is this signaling something that is negative in the economy that goes beyond just the technicals of oil. . And that is not only what what Stephen Schork said but also Mandy’s. . You have Credit Suisse coming out and saying she views this as a symptom of the slowing demand of the decline that you’re seeing in our mental good economy. . And while it might be spinning but this is the demand side of the equation that’s weakening that so many people have been betting on. . I was a raging debate today and clearly I love with Thomas Vargas says over Peavy Yemen are right up on nat gas. . It’s simple. . Oil is attached to the surge that we see in equities reaffirmed this morning. . And what a surge in has been Tom I mean the Nasdaq 100 an index full of big tech stocks that have performed really badly in the first half and seen this remarkable renaissance. . It’s up four weeks in a row potentially if it closes out the week in positive territory. . That’s the longest winning streak going back to November of last year. . Tom equity markets rallying at a time that the Fed would like to see financial conditions tightening not loosening. . Where does that leave us. . Lisa one final question. . Before the data and it’s simple is the bond market is confused as the oil microeconomic market while the bond market is following the same logic that the oil market perhaps is following if you view it from the demand side. . If you view it from this cooling inflation story. . Right. . Basically you saw the biggest inflow into investment grade credit going back to September of 2021. . In this past week people are flooding back to bonds. . They’re flooding back to equities. . This is a disinflationary story. . This is a Fed that’s moving away from the hawkish tilt story. . And this is a feeling that we can achieve soft landing. . It’s an interesting Friday. . We’re going to give you a reprisal here for three hours or more with good guess. . We’re going to get to Ron Temple in our own here. . But all I can say is really an extraordinary Friday to stagger on to Jackson Hole really beginning to prepare our coverage of Jackson Hole. . Some wonderful guests scheduled to be with us. . Their futures up 21 Dow futures up 150. . We’re not quite back on a futures basis to where we were with the enthusiasms of yesterday but nevertheless a lift. . The VIX shows it with a 20 level twenty point zero eight in the bond space. . I don’t know what to say. . Yields are all over the place three point to 1 percent and the 2 year yield curve inversion less inverted than before the CPI report. . We’ve moved from negative 49 basis points to negative 33 basis points a dollar churning here and I guess with Euro 1 0 2 ninety six really showing the definition of churning I should note Sterling 121 42. . Some huge challenges in Britain and France on wildfires and on drought. . There’s never a drought in the brief. . The brief is always rich with information. . On a Friday she’s awake. . Rameau I am awake. . And I want to say yesterday we talked about that ten year auction and it was actually really dramatic and it was part of the pivot yesterday in markets with yields higher and stocks lower. . We will get to that later in the show. . 10 AM watching University of Michigan sentiment survey. . Yes we’re watching the headline number which perhaps could rebound just a touch from what has been an incredible march downward. . How much is this really being driven by oil prices and how much do you see that reflected in the five to 10 year forecast of inflation that they put out as part of this survey. . I know if John Farrow were here Tom Keene would come out and say how many people do they survey. . Why have I never been surveyed. . And we’d question whether this is just a signal or whether this is something to really hinge on. . 12:00 p.m. . USDA World Agricultural Supply and Demand Report. . This will be fascinating at a time when we just saw food prices surge the most going back to 1979. . That to me was one of the biggest. . Aways from the CPI report. . What are the supplies going to look like and this goes to the weather disruptions that we’ve seen over in Europe but also in the United States. . It has been really dry. . How much does that really crimp production of wheat of soybeans of corn. . And then on Sunday Saudi Aramco is going to be reporting earnings. . The expectation could be that perhaps it will double its profits in the wake of what we’re seeing in oil prices. . Tom what do we get in terms of an issue with respect to the supply the oversupply that OPEC is talking about. . They could see a potential surplus. . Do we see that in the earnings. . We see that in the guidance from Saudi Aramco with oil. . But also it’s going to move over to NASDAQ natural gas which avoid said mislabeled as just simply should be called methane which is really what it is Lisa. . And natural gas is front and center. . Huge amount of noise out of the war in Ukraine when TGIF in Netherlands is doing. . But the U.S. . surge in energy one is just really a shock. . And it comes also as we deal with the heat wave that we’re seeing across America. . And we’re also trying to export some to Europe. . A real confluence of events toxic brew the toxic brew made in Kailey Leinz is not used to. . When we talk about toxic brew the 5:00 a.m. . hour is toxic brew free. . Ron Temple makes us smarter this morning. . Go ahead. . A multifaceted head with Lazard Asset Management. . And Ron I want to cut right to the equity paragraph and you’re always crystal clear note which is you are focused on the grand conundrum into next year which is measuring the persistency of cash flow the persistency of free cash flow. . How do you actually do that. . Well this is all about doing the bottom up fundamental analysis Tom I’m sure you’re familiar with that mean looking out and trying to understand what makes a company generate high returns on capital and what are the drivers of whether that return on capital can stay high or whether it declines. . And so we’re really focused here in terms of you know what I’m looking at in the equity market is trying to avoid the speculative growth stocks that are all about earnings that might come down the pike say 5 7 10 years where all of the value of the companies in that terminal value. . And it’s much more vulnerable to higher discount rates and avoiding the deep value cyclical stocks that are most at risk if you have a recession and sticking right in the middle of that kind of continuum on the quality stocks the companies with high returns on capital that are pricing power brand advantages strong management strong balance sheets and that’s where you really want to do the work to understand what makes a company so strong and how they can maintain that position over time. . Robert we’ve heard this before from other people who are trying to gird for a recession but it feels like the mood shifted this week. . Have you shifted anything about your thesis in the heels of the CPI report and PPA and even what we’re seeing in terms of Fed funds teachers. . I think the market is reacting to the positive sign that we’ve probably seen the peak in inflation. . We’ve finally seen inflation roll over and it’s more of those cyclical items. . The items that we all thought were transitory about a year ago that are rolling over. . If you look at the decline and CPI that we saw this week from last month from June to July 25 basis points of the 40 basis point deceleration was cars and airfare. . So those are factors that we knew would roll over at some point. . What I’m really watching is rent of shelter. . What I’m watching is wage growth. . And so I think investors should be careful because you know as I listen to you for the last few minutes I think there is a propensity in the market to say OK this story’s over. . We’re gonna go back to the old playbook. . The Fed won’t have to raise rates as much. . And I can buy these companies that are growth the kind of call options. . I don’t think that’s the right call. . I think we’re in the midst of a paradigm shift on inflation. . And when inflation does settle I think it’s going to settle with a three handle not a one and a half to two percent like we saw for the decade into 20 19. . So I would be a little a lot more careful than I think I’m seeing in the markets of kind of overreacting to data in the short term. . Okay. . So Ron if you’re more careful does that mean you still view what we’ve seen as more of a bear market rally than a bonafide sustainable rally. . I do still believe it’s a bear market rally. . Man I could always be proven wrong. . We always have that risk. . But when I look at us I think we need to wait for data next month. . I expect CPI to come down again. . I’m very interested to see the job numbers. . There’s there are mixed signals in the job market. . We had a great payroll number last Friday. . But if you look at the JOLTS state of the job opening labor turnover survey we’ve seen a million jobs decrease in the number of unfilled positions in the last two months. . Now again that data is a month lagged relative to payroll data. . But what I want to see is are those unfilled jobs going away. . Which then means labor has less negotiating power which then means you’re less likely to see wage growth which is less likely than to pass through to prices going up for goods and services. . So so I think we need to watch more data. . But right now I think this is a bear market rally as a base case assumption. . And again I would be careful of running back to the playbook that worked for the last 10 15 years because I think that playbook should probably be thrown out around the temple if we throw out quality large cap stocks which is the mantra right now wrong and read about it five times this weekend. . What is the new mantra going to be. . Well to be careful I think quality is the playbook you want. . I think the playbook for the last 10 15 years that worked was by the call option by the company. . That is a really cool business plan that’s getting access to capital at zero interest rates unlimited capital with our gear. . I think that’s going to be much tougher. . So it’s that end of the spectrum I think is more at risk. . I think quality. . It’s interesting Don there’s been a Venn diagram overlap right. . Where a lot of the quality and the growth where the same company. . I still like the quality growth companies. . They know there’s companies that can generate high cash flow and grow. . Well that’s great if they’re at the right valuation. . Ronald Temple thing. . The good news is by the way the valuations have come down. . So thank you. . Well they have. . Ronald Temple thank you so much for starting us off. . Strong Lazard Asset manager at least I think it’s a conundrum. . And into the weekend I’m fascinated to see what the different shops do with their equity calls and particularly how what I’m going to call the gloom crew Fortress Bramwell. . I’m really pleased to see the team Lisa. . Yes it’s a lot like how they do a nuance here. . Like do they take us VIX up 100 points. . I mean I don’t know. . What they do given is Mr. . Temple says a bear market rally. . Well manage you of Credit Suisse yesterday was on Bloomberg Television and she was saying she is not on my property. . She’s got she’s she’s a gloom she’s a gloom crew member. . And she does see stocks going down. . But she says that this rally could continue because of oil prices weakening. . Right. . And because that’s really been the fuel for so out of this. . So to speak. . I’m sorry. . Ninety nine. . Ninety five. . I’m Brent crude is not weakening. . Oil price went as a kid. . You were pumping 44 cents a gallon. . Gas Brent crude at one hundred dollars. . Stay where this this is Bloomberg. . Keeping you up to date with news from around the world with the first word answers can get better. . FBI agents reportedly searched Donald Trump’s Florida home for classified documents related to nuclear weapons. . That’s according to The Washington Post. . The newspaper says people familiar with the probe didn’t say if the documents were recovered. . Meanwhile the former president has called for the release of the search warrant. . The Justice Department has already asked a court for the papers to be unsealed. . No man’s land that President Biden is preparing to launch his re-election campaign in the months after November’s congressional elections. . That sets up a potential we match with Donald Trump. . Those close to President Biden describe him as upbeat about recent legislative economic and foreign policy victories. . Polls show most Democrats would rather have another candidate. . San Francisco Fed President Mary Daley says the cooler inflation reading for July is welcome and she believes it may be appropriate for the Fed to lower its interest rate increases to 50 basis points next month. . Still Daley told Bloomberg TV the fight against inflation is far from over. . She says rate hikes need to be dependent on data. . Three of China’s biggest state owned companies plan to delist from U.S. . exchanges. . That’s fallout from a dispute over whether American regulators should be allowed to inspect audits of Chinese businesses that are listed in the U.S.. . The three companies that will delist a channel eye patch China and Sinopec. . The way has been cleared for Samsung vice chairman Jay Wiley to formally take the helm of the electronics conglomerate. . South Korea’s President Yoon Sook. . You’ll clear the air to the country’s biggest company on bribery charges. . Lee spent 18 months in prison before his release on parole a year ago. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts and more than 120 countries. . I’m rich kid Gupta to. . This is good. . Justice Department has filed a motion in the southern district of Florida to unseal a search warrant and property receipt relating to a court approved search that the FBI conducted earlier this week. . That search was a premises located in Florida belonging to the former president. . Whatever your politics these are delicacies of classified material. . We’re going to dive into that right now here with futures up 16 Dow futures up one away. . I’m in a corner lift to the market on a Friday. . We’ll see where we go. . Here’s we just to the weekend we note Brent crude punching him a hundred dollars a barrel moments ago. . But the focus on Washington this weekend it’s sort of difficult to imagine how we get to the Sunday talk shows. . Thanks for their support on Bloomberg Radio. . Emily Wilkins briefs with Bloomberg government in Washington. . Emily there are three levels of classified material. . It’s sort of a modern world definition of confidential secret and top secret. . But within that there are some hugely delicate topics particularly under top secret including from 1954 coming out of Korea. . What we see with restricted data and formerly restricted data what is the what if if some of these classified materials were restricted data. . I mean the big concern here is really national security. . The fact that according to The Washington Post reporting that some of these documents that the FBI was looking for related to nuclear data nuclear weapon information. . Now of course we don’t know a lot of details yet. . We don’t know if this had to do with U.S. . nuclear weapons with other countries nuclear weapons. . If that data was even found by the FBI when they did their search of Mar a Lago. . So I think there’s a lot left to be determined but we are hoping to find out more potentially as soon as today. . Now that former President Trump has said that he is going to engage his lawyers to go ahead and to unseal that warrant that’s pretty visible and laid out. . I guess we’re going to see something today maybe end of the weekend. . But what you’re interested in Emily is the affidavit which is the documents and persuasion the parties used with a judge to invade to search the president’s residence. . I mean yes. . I think the main question that we’re all trying to answer right now is why did the FBI need to search Mar a Lago. . How much was at risk for this particular search. . How much was on the line as far as U.S. . security and national security goes. . I mean those are all sort of the big questions. . I mean smarter legal minds than mine. . Mine isn’t even a legal mind. . We’ll be passing through the war when it is revealed. . We’ll be passing through things. . I will let them do the analysis. . At this point. . I think one interesting thing to say in Washington is that we saw a lot of Republicans come out with very strong statements after the FBI ISE search on Mar a Lago. . We really have not heard a lot of Republicans weighing in since Attorney General Merrick Garland presser the other day. . I think a lot of them are now waiting to see what exactly happens with this warrant and what happens when things are unsealed. . We now turn on a Friday to our legal mind. . Lisa Abramowicz it was going to ask us about the legal side more about the political side. . And we saw shift gears and also plead ignorance. . But I do wonder whether the Republicans are using this as a talking point and calling it a raid and having it be a sort of thumping aspect whether it’s working in the polls. . I mean at this point it is a little too soon to tell. . Usually you know polling takes a couple days to get done and make sure that it’s all correct and well analyzed. . But at this point we are seeing a bit of a boost for Democrats. . If you look at the generic ballot if you look at polls sort of asking folks whether they’d rather have Republicans or Democrats in control. . This was a really great week for the Democratic Party. . The fact that the House is on track to pass that health climate care climate climate change and tax bill today. . But the fact that you saw President Biden have those two bill signings one for the chips and semiconductors one for a toxic firm pets and extending that care to veterans who have been impacted by it. . Democrats are really going to be able to claim a lot of wins. . And they’re in the position that when they can go home to their constituents in their districts they can talk the lie about what they’ve been doing. . Plus the CPI data was really good for Biden this week. . Obviously it’s lots of questions about what those numbers are going to look like in coming months. . We still have eight point five percent but at least Democrats are have the potential scenario that it’s peaked. . OK. . So the Democrats notching some wins ahead of the midterms. . But of course looking farther out there is a long way to go until 2024 Emily. . Yet we have fresh Bloomberg reporting from overnight about President Biden’s intention to run again if the matchup is Biden and Trump. . Is there confidence in Washington specifically among the Democratic Party that Biden would be the winner in that scenario. . There actually is. . I mean when you talk to Democrats a lot of them will point out very quickly that even though Biden doesn’t have a really great approval rating right now when he’s paired up against Trump he winds up on top and narrow margins. . But but still still out there. . And that’s why Biden ran in the first place. . Right. . That’s what he’s talking about running again. . The more likely it becomes that Trump is going to have another run in 2024. . The more Biden things that he needs to be that candidate to run and then cut to the chase. . You’re going to have a mint julep this weekend with the senator from Kentucky Mr. . McConnell. . Is he giving up his House majority. . I mean is the Republicans screwed this up so bad they could actually come down to a few seats of majority or even lose it. . Is Greg Jihye Lee value you alluded to this morning. . You know it’s a really great question Tom. . And the community he touched on the point that it’s not it’s both the House and the Senate. . Right. . It’s like Mitch McConnell. . He’s got to be a little bit worried right now. . You’ve seen a number of Senate Republican candidates falter a little bit in their campaigns haves you know a number of negative stories written about them. . A lot of questions about the ability for Republicans to win in states like Georgia in states like Pennsylvania at this point. . And then again as you mentioned Greg Valliere had a great piece this morning about the house that it was initially looking like Republicans would have this wave election like they would have a large majority next year. . Now there are questions about whether or not that’ll be the case. . Now Greg as well as a number of other really smart analysts do think that Republicans are still going to win the House in this November. . There’s that historical precedent there now that’s in their favor. . You know inflation is still high. . So dark suspecting at this point for Republicans to win. . But if Republicans only have really narrow margins that might limit what they’re able to get done especially if Democrats are able to hold the Senate. . Emily will could sink so much. . Greatly appreciate it this morning. . I’ll tell you a legal big Lisa Abramowicz. . I mean it’s incredible how I’m reading background on this trying to keep up with you or Garrett Graff or others really on the high ground on this. . Well and the subpoena that we that was presented to president former President Trump was not revealed and will not be revealed. . And that actually is more details what he actually had to present to the. . Judge to make the argument for why they could do that. . The affidavit the affidavit. . Excuse me. . Yes incredible legal mind. . Legal veto makes it all. . Yeah exactly. . If you try to fill me into the rolls Caylee’s gone period. . Yeah. . Had to Google it yesterday time. . I think you should Google. . Friday futures up 15. . Dow futures up 1 to 1. . The VIX twenty point one seven. . Stay with us. . This is Bloomberg. . Bloomberg Surveillance on a Friday. . We’re getting you into the weekend the refrain here on equities bonds currencies commodities and of course the various and sundry news flows hydrocarbons front center today with Brent crude print of hundred on the way back up over the last number of days you’re watching natural gas in Europe all of the massive challenges there. . The chart of the week without question having a blast on electricity in France. . Truly a moonshot and a moonshot of worry there I should say. . Katie Lyons in for Jonathan Ferro. . I just I just want to say gentlemen had this out on Twitter. . And I mean Lisa and I were talking about it over breakfast at the at the St. . Regis yesterday. . And and Lisa the truth is the pharaoh is gone full European. . I mean you know this was not one one day halls that I would take. . This was like a substantial gap. . Basically someone on Twitter saying that’s so European. . What do we again. . Do we expect him Monday. . I mean perchance. . I believe so. . We believe so. . How things go. . Kailey Leinz or the short straw joins us today. . And that’s a good thing as well right now. . Q Julie Anticipated for November is a book but when Stephen Roach writes a book on China it has a focus and intent on their economics and politics like no other. . The book is Accidental Conflict America China and The Clash of False Narratives. . This is hugely anticipated by the Chinese watching community. . The gentleman from Yale and the size China’s center at Yale Law School joins us this morning. . Dr. . Rose thank you so much for joining. . You’ve written three or four books on China. . Why is this one different. . What is the tension at this moment. . Is Mr Xi goes to the party Congress. . Well time in the past five years we’ve gone from trade war to tech war to now a Cold War conflict is escalating. . There is no real framework to manage this conflict effectively let alone conceive of even the slightest semblance of resolution and enough period of escalating conflict. . The smallest spark can lead to a major clash and we certainly have seen one in the last week over Taiwan. . And I’m very worried about the possibility of a military accident in the Taiwan Straits occurring in the context of this escalating economic and technology conflict that could really lead to a serious outbreak between the United States and China. . The thesis of the book is the conflict would not have happened were it not for the false narratives that both nations harbor with respect to other. . And I develop these narratives in detail in the new book. . Well what is important here is what matter of diplomacy is needed. . What is the roach approach to a new diplomacy that can perhaps calm down these pressure points. . Well my idea and I develop it in detail on the final part of the book is that the current structure of engagement whether it’s the leader to leader phone call between Biden and Xi Jinping or earlier strategic and economic dialogues is grand. . Science has failed miserably. . And so I am proposing a permanent institution that I call for lack of a better term a U.S. . China secretariat that meets full time 24/7 staffed by an equal number of professionals on both sides of the relationship whose full time job is to deal with all aspects of the relationship from economics and trade to cyber and human rights. . And we need a new approach. . And this is one idea may not be perfect but it certainly beats the current failed approach. . Steve know there might be a lot of uncertainty on the policy side but businesses have to make moves. . They have to either expand and double down on their expansion plans in China or they have to withdraw which we’ve seen a number of companies do on the margins. . And we hear more and more about reassuring or on shoring of U.S. . companies away from China. . How materially will that shift the dynamic of trade at a time when a lot of people say this will be inflationary. . Well I think I think it will be inflationary. . I think that the trend toward reassure reassuring is an unmistakable outgrowth of geostrategic tensions between the United States and China. . They can better be addressed through a structure such as the one I just outlined. . Lisa. . But you know make no mistake this is very destabilizing not just for the U.S. . and inflation but also for China. . China benefited the most of any nation in the world from the upswing of globalization and it has the most to lose. . I think as we now move from globalization to deal globalization there’s a larger issue though for the economy. . And this is something that we were just hearing about from Ron Temple how he thinks that perhaps he’ll get back down to a 3 percent inflation rate but not much below that because we are in a new paradigm. . And I wonder how much is China the main part of that. . If you have reassuring which incurs more expense and you have slower growth in China because of exactly what you said because this is going to affect the world’s second biggest economy significantly. . How much does this portend a slower growth higher inflation environment for a longer term. . Well you know we debate how much China has held down U.S. . inflation over the past 20 years but it’s been significant as has the rapid expansion of global value chains or global supply chains. . And as supply chains are disrupted by China and other developments around the world. . As we move from offshore to onshore. . Good luck in getting inflation down to 3. . It’s going to be a very difficult goal to achieve. . Steve I’ve been dying to ask you this ship built Morgan Stanley economics. . You were the first American economists I know that tried to make a three legged Fed policy of unemployment inflation. . And you said watch the balance sheet the expansion of the balance sheet. . All that came true is you wrote about years ago. . What’s the Fed theory now if you were to if you were to parachute into Jackson Hole here at the end of Marcus. . What is the theory you’re going to find about central banking. . Well you know hard for me to know how they’re going to phrase it Tom but I think the Fed theory has got to go back to basics. . You know forget this QE balance sheet asset dependent economy it’s blown up repeatedly since Greenspan and Bernanke tried it in the 90s and the early 2000s. . The Fed’s got to go back to inflation targeting not average inflation targeting but plain old inflation targeting. . And we need a you know a dose of the very simplistic but tough and disciplined approach by Paul Volcker. . Jay Powell is it says he’s very much committed to doing this. . The Fed’s taking some big steps but. . Right. . Child’s play compared to what they have to do. . The real federal funds rate is still sharply negative. . You’re not going to control inflation with a sharply negative. . That’s that’s on the Elam side. . OK. . Help me here with the real economy and the unemployment rate. . If we go out Lawrence Summers this morning and pop it up as Anna Wang at Bloomberg says to a 4 percent or 5 percent regime what does that do to America’s unemployment rate. . It’s going to go up Tom. . I mean you know we’ll give you a man to sit here. . No one’s watching. . Give me give me a man somewhere in the 4 to 5 percent zone which is you know a small price to pay. . No not for those who are affected by it of course but a small price to pay to get inflation back under a more stable path consistent with sustainable growth in the US. . The path we’re on right now doesn’t cut it. . OK so Stephen obviously there is a tradeoff potentially between keeping inflation in check and supporting growth and to tie it back to China. . The PBS see earlier this week was saying we aren’t going to go with massive stimulus to support the economy despite the turmoil in the property sector with the Covid zero policy causing issues because we are worried about the specter of inflation. . Do you expect that eventually if China isn’t going to take steps to breach a five and a half percent growth target that the Federal Reserve is going to back to. . Well I think you know that. . Are you asking about the Fed’s concerns over U.S. . economic growth. . Yeah. . I think the you know the mandate is going from dual to single inflation is the focus and they can’t afford to flinch on bringing inflation back because of political pressures that will be evident as the unemployment rate starts to rise. . And the Fed has just got to be fierce and focused on its independence and on his desire to bring inflation down as soon as possible. . Stephen Roach wonderful to catch up with you today of course at Yale Law School and formerly with the Wall Street firm named Morgan Stanley as well. . Lisa I really can’t say how alone Steve Roach was 20 years ago in saying this is a Fed policy that is just not simplistic. . NBER and congressional mandated policy that there was a sophisticated mix to the weights they would have to confront. . You asked earlier this morning what those notes were going to be like over the weekend. . What concessions there would be for some of the big bears. . What do you see and how much is it going to be this this sort of structural inflation that people are not counting for if the Fed wants to get back down to their 2 percent limit. . If they don’t take it. . Adam Posen 3 percent view of things. . Well then are we a lot further from that place than people think. . Is it a lot less attainable with the kind of growth that we have enjoyed in the recent past because of this reassuring on shoring the separation of the two powers. . We’ll just have to see. . Jeff the graph here over run macro. . Neil Dutta notes what many others have noted today. . We’ve had a 50 percent move what’s called a retracement up off the bottom of this grim bear market. . And it’s now what. . For the market it’s any number of themes there in guesses of where we’ll go. . Futures up 17. . Dow futures up one way. . McKinley I guess we’re all doing that. . We’re all in anticipation of what equity strategists are going to write this weekend. . Yeah I can’t wait to see if we see any actual revisions to year end targets especially for the bears out there that we’re warning a margin pressures. . Talking about producer price inflation putting pressure on companies and yet that came in cool too. . Does that start to change the fundamental calculus as well and make this not just a meltdown maybe August and that we’re looking for a not year end. . I mean things are so original right now. . Covid version we’ve gone from negative 49 basis points to negative 30 for less inverted. . This is Bloomberg. . Keeping you up today with news from around the world with the first word answers you could get to. . There’s a report that among the items FBI agents searched for at Donald Trump’s Florida home were classified documents related to nuclear weapons. . According to The Washington Post people familiar with the investigation didn’t say if those documents were found. . Meanwhile the former president has called for the release of the search warrant. . The Justice Department has already asked a court for the papers to be unsealed. . President Biden wants four more years. . Bloomberg Surveillance. . The president is set to launch his re-election campaign in the months after November’s congressional elections. . Those close to Bloomberg says he’s encouraged by recent legislative economic and foreign policy successes. . But polls show most Democrats would rather have another candidate. . Ukraine’s ambassador to Washington is cautioning the U.S. . and its allies against fatigue over a war that’s costing billions in security assistance. . Oksana Michael Barr told Bloomberg that it would be far costlier in the end to let Russia’s president Vladimir Putin go unchallenged. . She says that if Putin isn’t stopped in Ukraine he’ll attack other countries in Europe. . Today the Rhine River is likely to shrink to a level that could disrupt the transport of fuel throughout Europe. . The effects could ripple through the continent for months. . The water level at a key waypoint west of Frankfort is set to go below about 16 inches and continue dwindling. . That makes it uneconomical for barges carrying coal and oil to transit the river. . And in the UK the economy shrank in the second quarter for the first time since the pandemic. . The gross domestic product fell one tenth of one percent. . Though retail sales and the first drop in household consumption in more than a year were factors. . So it was declining Covid testing and vaccinations. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries which could get to. . This is Bloomberg. . They’re significant in that they’re saying we’re seeing some improvement but they’re not victory. . We haven’t read inflation report and unemployment report coming out before the next meeting really behooves us to stay data independent and not call it Mary Daly of the San Francisco Fed widely anticipated there. . And of course the heated battle into the weekend of different components as we just heard from Steve Roach of Yale Law School. . Good to hear from him as well. . Right now on the markets there’s a lift to the markets. . Got a Friday feel to it. . And Lisa even mentioned this in anticipation of retail sales next week. . Yeah. . And actually those are no good days. . But today’s Friday retail sales are next week. . I just want to point this out that Citi put out a report saying that their credit card transaction chat transaction data excuse me it is Friday clearly shows a decline in spending in certain retail areas and it’s pretty much across the board. . This is in nominal terms. . So in real terms even more. . How does that factor into this disinflationary environment is just feet at Tom at a time when a lot of people are counting on soft landing now that reported in next week as well. . Right now we’re going to digress here. . I thought what Lisa was talking was Dr. . Shiller about on the break was really really important. . Wendy Shiller’s with Brown University director of the Taubman Center for American Politics and a writer of core textbooks on our civics as well. . We’ve alluded to this before Wendy but I want to talk about two candidates who I believe will be 78 and 82. . In 2024. . And that means if my math is right there’ll be 82 and 86 on the way out the door in two thousand twenty eight. . How did we get the fossils running for president. . Well I think general trends in aging are are good and people are aging better across the country. . So that’s a good thing. . I think in time that came out of a very long where people thought was a very long recession and the world has become less stable. . Obviously the Cold War ended and we all celebrated freedom around the world but freedom brought with it a lot of unpredictability. . And then of course we had the wars in Iraq and Afghanistan. . And when you have that much tumbled and uncertainty and certainly even the 9/11 attacks people want comfort. . They want people who’ve been around a long time could tell them to shoot. . This too shall pass. . People look to the familiar. . They look to people with quote unquote experience. . Donald Trump had business experience that he touted and Joe Biden had more than 30 years in government. . Wendy. . I’m struggling with that idea because we’ve seen poll after poll saying that they would like to see new blood put leading the Democratic Party. . They would like to see a younger slew of Congress members across the board as we enter into a very new phase. . Is it a good thing or a bad thing for the Democrats that President Biden announced his intention to run again. . I think it’s a good thing you can’t have a president not even ending his second year full year in office. . He says well I’m not in anymore. . I mean even if there’s the slightest chance Biden can still be president and a couple of years from now that makes a difference in terms of influence. . That makes a difference in terms of public opinion. . You just can’t be written off. . We saw this with Clinton after the Republicans won the midterms in 94. . You know he’s irrelevant. . He doesn’t. . He won two years later relatively easily. . You have to maintain the exercise of power and the illusion that you want to keep that power. . So I think that’s a strategically important thing for Biden to do and there isn’t a reason for him not to do it. . So you think that this is more about the visual is more about the illusion and less about a true intention to run. . Well I think he can stay. . He can stay in this race until somebody in the primary starts to beat him. . And you know the myth that primaries are bad for parties at the presidential level Azman has been debunked. . Now we know that it generates more turnout and generates people registering to vote knowing the polling places they get out the door. . There’s you know we know that it increases turnout amongst the party members. . So that means that it’s a good thing to have some fighting some challenging some anticipation. . So if he’s in it and other people want to challenge him that just means more Democrats get in the game to to vote. . And we know that Republicans will be very very energized in 24 to about whom they will be loyal. . We don’t know who they’re going to pick. . Right. . You know I think they’ll be more than one person in that race. . Yeah it’s a good point Wendy. . Obviously there’s multiple variables at play. . Let’s just assume for the moment that the 2024 candidate on the Republican side hypothetically would be President Trump. . Is there anyone on the Democratic side of likely potential candidate who would be able to beat him other than President Biden. . Well if the election were held today of unclear to me that anybody could except for Biden. . And again people like what they’re used to. . There’s been a lot of victories lately for the Democrats. . You know if economic conditions you know ease up I think that you know the president former President Trump is facing a lot of different inquiries. . Some of them are more scary than others I think to voters. . And again that core of independent suburban voters is key. . They rejected Trump in 2020. . And I think there isn’t any reason to think they’re going to welcome them back with open arms and 24. . So I think that’s what the Democrats are counting on. . But you know Pritzker an Illinois big state that Gavin Newsom in California big state. . Kathy Hochul if she wins again big in New York becomes a player. . And then of course there are a couple people in his cabinet that might want to run which makes for awkward cabinet meetings theoretically later on. . But we we are seeing energy. . Energy on the Republican side. . And now we’re starting to see a little bit more energy on the Democratic side. . You have to maintain the energy so you have to give them choice. . But you are the most powerful person in the world. . And why you would walk away from that two years early. . You know that’s just that’s political malpractice. . And Wendy finally if we could just look to the more immediate future and the midterms in November there was a sense prior to this week that Democratic momentum was building. . You have the inflation reduction at gas prices are coming down and it’s looking a little bit more optimistic for the Biden administration. . And yet as you allude to you now have this galvanizing force when it comes to President Trump’s base because of the FBI search of Mar a Lago. . Do those two forces cancel each other out. . And we’re now left with kind of the same outlook on the midterms as we had before. . That’s an outstanding question. . I think for Democrats though and again this independent group if Trump looks like this base of Trump’s is going to get out the door and there and they are behaving in ways that are frightening to some people like trying to bust into an FBI office with you know being armor being armed I think that scares suburban voters. . It scares independent voters. . And it looks like this will give Trump momentum. . I think the same forces that got the door 20 18 on the Democratic side will get out the door again. . You load up abortion on that in key states. . It’s going to be a referendum statewide. . I think that is going to help the Democrats. . I don’t know if it saves them for the House but it could very well save them for the Senate. . What it shows. . Thank you so much for joining us with an August update. . She is at Brown University here in the politics of the moment. . Lisa as you said there are the best in the year. . And you wonder just getting to August end. . Yes. . Two more. . Right now it’s just that large. . Her comments though were fascinating that when you get a contested primary which is unusual when you have a sitting president still running you get greater turnout you generate more interest. . There is a greater debate that brings eyeballs into the fold. . And that that actually could be helpful not only for the midterm elections but also for what we’re going to see in 2024. . It’s an interesting point lost under the headlines of really is he really going to run again. . He’s going to be 81 blah blah blah. . It’s an interesting point. . I would go back to the markets with this stunning move we’ve had since I think it’s June 16th. . There’s sort of two discussions going on into. . Sort of a reaffirmation by the financial system that things can recover versus all the myriad Kelly the myriad of uncertainties that are out there. . Removed from what we look at every day on Bloomberg Surveillance uncertainty on many policy fronts. . Tom when it comes to just policymaking in Washington D.C. . who ultimately is going to have the role of Congress and the legislative agenda and then policymaking on the side of the Federal Reserve. . How much really changed for them. . This week they say not much. . The market says otherwise. . Two avenues to good discourse on this balance of powers. . Look for that balance of power 12 noon David Westin. . And I’d really also mentioned Joe Mathews hard hitting sound on 5 p.m. . on Bloomberg Radio. . We say good morning. . This is Bloomberg. . I don’t know how long it will take to come down but clearly the momentum is down on inflation. . Yes they are coming down but I think they’re very far away from the Fed’s objective. . We look at other measures of inflation. . There’s still a lot of work for the Fed to do with the economy slowing and inflation is coming off. . They want to be sure they’re are on the right track. . I think the Fed looks at this had been as the beginning of of their battle and having been more credible but having more work to do. . This is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz. . Good morning everyone. . Jonathan Ferro. . Lisa Abramowicz. . Tom Keene on radio. . On television Lisa. . Finally a point. . This reallocation Friday everybody out there is gonna rewrite for the weekend CPI while the jobs report was wow retail sales next week. . That’s going to be while everybody has to adjust. . So time are going to pull the trigger out of a triple leverage all cash into reallocating into bitcoin or say all big tech. . I’m going to take the worst fractional shares of Apple maybe. . My point is when do you get in. . When do you see the bottom. . How far out. . Yes. . Look do you look out a month. . Do you say that this rally could continue because of technical reasons over the next three weeks. . Or do you start preparing for that yield curve inversion signal. . Yes it’s gotten less inverted but still signaling a slowdown that some people say hasn’t been priced in. . We did this with Ron Temple in the last hour Lazard Asset Management David Liebowitz. . We were zero moments with the JP Morgan really looking forward to this raging debate about what to do here and what to do here. . Lisa is always the fixed income market leads the way is the fixed income market leading equities know right now if the fixed income were leading it would send the same signal at least if you look at credit that equities are signaling which is if we get any kind of downturn it’s going to be shallow and the resilient companies are going to remain resilient and are going to be able to pay their bills. . And that is why you’re getting the biggest inflows into investment grade credit going back to September 21. . I do wonder though why are we still seeing yield curves inverted. . Why are we seeing such low longer term yields. . If people believe that we do have you know some sort of soft landing ahead that we can then revive from. . And so these are some of the conundrums baked into the bond market that’s not telling a consistent story. . Let me let me let me steal from John Lumiere over at MSNBC way too early. . Caley Lines is the queen of way too early in for John Farrow today. . Kelly you’re doing a more European show than we are. . Is there a believes that the hydrocarbon disaster of Europe can move over to the United States. . I think there is a sense Tom that the United States is going to be relatively more interested or insulated. . But obviously Europe is dealing with a substantial energy crisis one that is poised to potentially get Reuters beginning today when part of the Rhine River becomes impassible for cargoes of things like going through this. . I mean I don’t need a tour guide here. . You know I’m I’m scheduled to take the tour in 2025 to go Castle watching. . But the bottom line clearly is we can’t get coal. . So nat gas goes up. . Right. . Exactly. . And that is the problem that Europe is facing. . It is an energy driven inflationary shock in Europe one that central banks the ECB are poised to do very little about on the supply side. . And yet they are still trying to hike rates until a European economy that is weakening due to the very same energy crisis and the high cost of living. . Lisa from the Upper East Side e-mails and says get to the day to check. . I got to do the brief futures up 13. . Dow futures up 99. . The VIX under under 20 was a big deal for me. . Still twenty point one nine shows a resiliency of equities this week. . Fixed income it’s gyrating. . We have less curve and version now but nevertheless a negative 34 basis points is important. . Fair or not here I don’t know who’s doing the real yield. . I’m not doing the real yield. . The real yield points 3 8 percent here on a Friday. . Right now we need to be briefed. . It’s auction free. . Here’s Lisa Abramowicz and I will be doing real yield that we actually have real yield. . Just what to say across the board. . Even two year yields are real in inflation adjusted terms for the first time going back to before the pandemic which is a fascinating turn of events especially given the rally that we’ve been seeing today. . And this is what we’re looking for. . And if we had to perhaps frame the day differently it would have been University of Michigan sentiment Friday. . How much do we get an ongoing increase in terms of how people are feeling especially as you get a reprieve from gas prices. . This particular survey more closely tracks gas prices when they go up. . People feel worse when they go down. . People feel better. . How much do we start to see that really trickle into longer term inflation expectations. . And how much does the Fed respond to that at 12:00 p.m.. . This is the real world. . And what we saw in CPI ISE Wednesday was that food rose at the fastest pace going back for prices going back to 1979 in the United States. . How much can supply come back online. . How elastic Tom Keene is your words. . Is this market as we deal with drought across the country in the United States. . The USDA world agricultural supply. . Demand report comes out. . We get a sense of corn soybeans as well as what’s going to be forward for cotton and a whole host of other commodities. . And on Sunday Saudi Aramco reporting earnings. . We’re expecting to see a similar kind of boom in terms of earnings. . Do they give a sense of this to stories that we’re getting from the IEA and OPEC Tom. . Because right now we’re hearing from the IEA that the demand for oil is going to increase as people pivot from natural gas to oil to plug the supplies. . And then we hear from OPEC that there’s going to be a surplus. . So which is it. . And can Saudi Aramco give some sort of its name. . Very good. . Let’s get started here with two short a visit with David Liebowitz who’s global market strategist at JP Morgan Asset Management. . And buried in your note on the struggles of this summer and getting to the fall in just trying to say OK. . I don’t want to run around my head. . Cut off is the idea that three years is the new short term. . How do you invest for three years as the new short term. . If the present is such a jumble. . So I think when it comes to three years let’s call that the medium term. . To me the key is to really focus on two things. . It’s the focus on valuation and it’s the focus on earnings power. . Stock markets have rerated so far this year. . July was a very good month. . And so prices aren’t necessarily looking as attractive as they did. . But when we look at the equity market today we still see fairly tremendous dispersion between the expensive names and the cheap names. . Now you know sometimes the expensive names have been over bid because people are too positive on their prospects for earnings. . Sometimes the cheap names are cheap for a reason. . And so it’s really blending that combination of value and earnings growth. . Almost a Gabi approach if you will. . That I think will be the best one to take over the course of the next couple of years. . David Leibovitz your colleague David Kelley over at J.P. . Morgan Asset Management yesterday said that stocks will revisit their all time highs and then surpass them in the next three years. . That actually is consensus. . If you look across the different Wall Street houses it’s the path to get there. . That really is the question. . What is the trajectory. . How low do we go before we go back up short. . So he is he he’s more than a colleague. . He’s actually my boss. . So I better. . No but I think it’s a reasonable point to make. . I think that over the next three years we will see new all time highs in the equity market. . Again you know to your point the question is much more so around how we get there. . And you know people are still talking about the Fed and the potential for a soft landing. . The reality is that the historical data does not suggest that the Fed is is terribly adept when it comes to landing the plane gently. . And so I do think that we’re going to be experiencing some turbulence here into the end of this year and the beginning of next year could easily go back down below four thousand thirty seven hundred. . That would connect the dots with the trend line that we were on prior to the pandemic. . But what I think the market wants to see here is it wants to see two things. . It wants to see the inflation genie going back into the bottle. . And then that’s somewhat obvious. . I also think that the market wants to see some deterioration in the labor market. . It’s it’s somewhat contrary. . But if we see the unemployment rate begin to rise after a very hot number in July that’s going to give the market confidence that what the Fed is doing is correct. . And if we do have a downturn it’ll be relatively short lived. . And so I think the market would be comfortable if it can’t get the soft landing with with a bumpy landing maybe a shallow recession. . But we need to see signals that labor is beginning to cool off. . That’s going to be instrumental to getting markets on a more positive trajectory. . David other than the conversation with your boss another conversation we had yesterday was with Jim Paulson of Lew’s Hold Group who essentially said he sees the case for additional Fed tightening rapidly dissipating and that ultimately it’s not the Fed that’s driving the boat right now. . It is the market which is consistently seeing pushing financial conditions into looser territory not paying attention to the commentary we’re getting out of Federal Reserve officials. . Who do you think’s ultimately going to end up on the right side of that. . So it is a bit concerning to see financial conditions loosened after back to back 75 basis point hikes. . I frankly think that the Fed is going to continue to move fairly aggressively here. . We’ll see what the futures pricing looks like when it gets closer to September. . But I do think that if the market is opening the door for the Fed to do another 75 basis points they’ll do it. . Because what the Fed is trying to do here is get policy into territory that is going to actively slow the economy. . I don’t think it’ll fight the futures market. . But again I think if that door opens up the Fed’s going to step right through it. . So by our lights the Fed is going to remain on on a relatively pre-set course into the end of the year. . What I think will get them moving in the opposite direction is a meaningful deterioration in the labor market. . But they are going to tolerate a higher unemployment rate than they have historically. . David we are drowning in history of the moment. . I mean the idea of a search of a former president’s residence just as one example you arguably went to the most prestigious history program in America Williams College the font of James MacGregor Burns. . How do we invest and adapt to the history in the making. . The James MacGregor Burns and others wrote about. . So I think what’s so. . Interesting about the current environment and you know we meet with clients across the United States and they always want to know what’s the big risk you know and usually it’s something that we’re able to tell is a big risk a threat to democracy. . We know it’s really rare that that is one what one angle to take. . But what I was going to say is you know there there are risks that we can see and there are risks that we can see but we have more difficulty getting our arms around if we see some sort of imbalance in the economy housing running to hot investment spending running to higher vehicle sales running too hot. . We can quantify that and we can begin to build expectations about what a reversal in that would mean for the outlook for economic growth. . The problem is the real risks in the current environment. . They’re coming from the social side of things. . They’re coming from the political side of things. . And those are very difficult to quantify. . And so you’ve been telling clients that when you can see a clear risk you can hedge against it. . Right. . Higher rates and a more hawkish fed when you can’t necessarily see the risk coming or you can’t quantify the risk that exists. . That’s when we diversify. . That’s when diversification is your friend. . David thank you so much. . And thank you for visiting today. . David live at center headquarters here with JP Morgan Asset Management. . Lisa I think this is a huge huge deal and it’s phrased differently now than anytime over 30 40 even 50 years. . And that is how do you invest with a cacophony of history and news flow we’re all dealing with now. . And what David just said there was brilliant that when you cannot see the risks you need to diversify what you can see the risks you can more accurately hedge. . And that is the moment that we’re seeing is channeling Peter Bernstein I would say. . Well there we are. . Thank you. . David Liebowitz again. . Futures up 12. . Dow futures up 85 again next week. . We look at retail sales coming up. . Jeffrey U V NY Mellon this is Bloomberg. . Keeping you up to date with these from around the world with the first right answers you can get at Bloomberg’s learned that President Biden is preparing to launch his re-election campaign in the months after November’s congressional elections. . That sets up a potential rematch with Donald Trump. . Those close to President Biden describe him as upbeat about recent legislative economic and foreign policy victories. . Polls show most Democrats would rather have another candidate. . FBI agents reportedly search Donald Trump’s Florida home for classified documents related to nuclear weapons. . That’s according to The Washington Post. . And he’s made this as people familiar with the probe didn’t say if the documents were recovered. . Meanwhile the former president has called for the release of the search warrant. . The Justice Department has already asked a court for the papers to be unsealed. . San Francisco Fed President Mary Daley says the cooler inflation reading for July is welcome and she believes it may be appropriate for the Fed to slow its interest rate increases to 50 basis points next month. . Still to Daley told Bloomberg TV the fight against inflation is far from over. . She says rate hikes need to be dependent on data. . Three of China’s biggest state owned companies tried to delist from U.S. . exchanges. . That’s fallout from a dispute over whether American regulators should be allowed to inspect audits of Chinese businesses that are listed in the U.S.. . The three companies that will do list are China Life Pet China and Sinopec CEO Shi Sun has now lost more than four billion dollars on a series of side deals. . He set up a Softbank to boost his compensation. . The Japanese billionaire took the unusual step of establishing personal stakes in a series of Softbank Ventures in recent years. . That was a mixing of company and executive interests that drew the ire of investors. . Global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts and more than 120 countries and which could get to. . This is Olympic. . Former President Trump is exactly a former president. . He’s a citizen. . He’s not a president who has the ability or the the the law abiding notion that he can hold on to classified documents a notion somehow he might still have that information. . That in itself would constitute a crime that might touch a senator from Maine a former U.S. . secretary of defense William Cohen there on the political moment. . Add that and we welcome all of you right now. . Lisa I want to get to some very quickly. . I think it’s so important in the equity cave here at Bloomberg Media the guy that makes us go is Peter Deal Terrorists. . And he has a chart out today. . Lisa alludes to what you said earlier in the swing here in recent days of cash losing negative four point three billion in stocks gaining eighteen point one billion stardust. . Extraordinary. . Yes. . And it stocks and its credit lines. . It’s taking cash out and putting it into everything else somehow. . This has been a shift. . If you want to look at the Wall Street notes over the weekend fine. . But right now there’s a vote with the money and it very much is for a shift in reality. . Yeah. . People ask you this Peter. . Is it incense or murdered. . He uses and he’s sort of in there with both. . But in the cave the Merc can clear the air. . Peter thank you for that work this morning. . Emily Wilkins drives us forward. . A Bloomberg government right now we’ve been talking and talking and talking about these political events as Mr. . Trump a former president. . Let us move on from that to actually what may happen in Washington. . Is it the dog days of August in Washington. . Emily does the city roll up. . Well we’re hoping that maybe after today everyone can finally take a breath and get onto the August that we were all hoping to have at the start of this year. . You saw the Senate work all last weekend. . Pull those all night sessions trying to get through the what is left of President Joe Biden’s reckons proposed reconciliation package. . That’s the tax pieces the climate piece and the health care piece. . Senate got it done. . House’s turn is today. . They’re expected a final vote on that legislation around about 2 3 4 o’clock this afternoon. . It is expected to pass. . Sure. . Democrats did have their concerns with the bill. . The fact it didn’t have the state and local tax caps the fact it didn’t deal with immigration. . In fact it left a lot of other pieces on the cutting room floor. . But Tom just a few months ago they were looking at a reality where they didn’t get anything else passed and everyone kind of decided they’d rather take what they have now than to not take anything at all. . Emily we’ve focused on the potential for a legislative victory more than the substance itself at times. . And I do wonder how much you hear in Washington D.C. . under the hood of getting something done about the blowback from allies of the United States who are saying you’re crediting companies that really make cars make batteries make goods in the United States. . That affects us badly. . How are you going to help us. . I mean how does this affect the international relations of a nation trying to repair what’s been lost. . Well to a certain extent. . I mean that’s certainly a valid question and a valid angle to take a look at. . I think right now perhaps lawmakers are a little bit more focused particularly those who have re-election. . Coming up more of what’s happening in their own districts. . What can they sell to Americans. . What can they pitch to Americans. . And a lot of this is going to be things like extending some subsidies with the Affordable Care Act that were put in place during the pandemic. . There are concerns that you know your people if those aren’t extended folks are going to see their insurance premiums go up right before this election. . A similar things with climate change. . Obviously that’s a big priority for a lot of Democratic voters to be able to say that they got that done and things like that. . Minimum 15 percent corporate tax on certain corporations making are earning high amounts. . Democrats have seen that polling. . Polling shows that Americans are supportive of taxing companies and sort of making them pay their fair share. . So these are all policies that lawmakers can really go out and promote. . Of course there’s a lot of things that they were initially talking about child care tax credits a pre-K on a national level that just aren’t going to happen at this point. . And certainly there might be some concerns from Democrats that those things aren’t getting done at the same point. . The really the big attitude right now in Washington is something is better than nothing especially when the midterms are less than three months away now. . Emily as we get closer to that vote we’ve had a lot of conversation about a potential shift in the narrative the odds maybe skewing a little bit more in the Democratic Party’s favor than say just a few weeks ago. . But at the same time we know that American politics are extremely partisan and polarized. . How many minds realistically are left to change. . How many more swing voters are there. . You know it’s really funny you mentioned that Kelly. . I was in Michigan at the start of July of reporting on a House race there between two incumbents. . I did all this reporting and I talked to all these folks hours before the polls were going to close. . I got a text from my mom be like who should I vote for. . And it just reminded me that there are a lot of Americans. . They just they’re not thinking about Washington right now. . They’re not thinking about the CPI numbers. . They’re thinking about what they’re paying at the grocery store. . They’re thinking about how much they’re putting in their gas. . They’re focused on their own homes their own families their own communities. . And they’re not going to start thinking about this stuff until October. . So there’s still a lot of time for the narrative to change. . We’ve got more CPI reports coming out. . We obviously have more to the story of a search warrant in Mar a Lago. . A lot can change. . Believe that is absolutely textbook. . I’m imagining my mother who is to the right of John Birch up say food for Emily who’s going to vote in Wyoming for Miss Cheney here. . How is she. . Oh what level of down in flames is Liz Cheney going to go here on Tuesday. . So we’ve already seen Liz Cheney shift her messaging around this campaign. . It is no longer about winning this congressional seat. . It is more about what her legacy is going to be in Washington and team her up for the next chapter of her career whatever that is going to be. . We saw her make her final ad her final pitch to voters before Tuesday’s upcoming primary. . And it was basically all focused on Donald Trump and her saying that you know he’s a threat to this country. . He can’t be back as president and that she’ll do whatever she can to stop him. . It does not sound like your normal political ad and I think it really signals what we saw in the polling yesterday. . She’s 30 points behind. . She’s not gonna be able to hold the seat. . It’s just a question of what comes next. . Emily can we agree that Lynne Cheney. . Called up Liz Cheney said who should I vote for. . I think that there is a slightly different dynamic. . Billy thank you so much. . That was classic Emily Wilkins with Bloomberg Government in Washington. . I’m sorry Lisa. . That’s great. . I mean we’ve gone so far from where you know your father held you in his arms. . While you know you’ve got to push down the metal toggle switches and move the knob of the voting booth. . Miles we’re back to chads I guess is where we are. . It depends on where you go in some of the voting booths that I’ve been in in New York City. . They still have those men. . Let’s do this. . Oh yes they do. . They’re not electronic. . But do you know all of the people on a ballot. . All of the judges all of everyone on the local and on you know and beyond. . When you go to the voting booth. . No no I don’t. . And it’s a huge problem and really speaks to the television focus and indeed the radio focus as well at the national level where we may be less familiar with our local politics. . We’re familiar with the day to check here a lift to the market on a Friday. . Futures up 12 Dow futures up 90. . Again Jeff for you will attend. . Victoria Fernandez as well. . This is Bloomberg. . Good morning everyone. . Bloomberg Surveillance on a Friday. . Jonathan Ferro on assignment. . Lisa Abramowicz and Tom Keene Kailey Leinz holding court as well as Friday to go into the Friday and weekend reading. . It will be more than interesting particularly on what the equity markets will do. . Let me do a day to check right now. . Futures up 14 Dow futures up 1 0 5. . The VIX 19 level earlier twenty point one. . It’s still extraordinary given the move from June to higher yield three point to 1 percent. . We do have curve inversion but less curve inversion than pre CPI negative 34 basis points as well moving in from a greatly inverted negative forty nine basis points. . We had one hundred dollar print on Brent crude. . Moments ago an hour ago I should say ninety eight point four five gyrations in oil and natural gas this morning and the individual equity stocks. . Lisa pulled an all nighter to give. . Oh yeah. . All nighter analyzing revision and the electric vehicles. . They don’t get out of your head start with really. . Well really it is actually fascinating. . Their shares are lower right now by two tenths of a percent. . They actually beat expectations but they forecast a bigger than expected loss. . Here’s the problem. . They haven’t gotten production up to speed to meet all of the demand. . So they have people making orders two years in advance. . And then in the meantime the costs are going up. . Of the raw materials that they use for all of these goods. . So how do they deal with that without going back to a lot of these individuals and say hey give us our money which is not what they want to be doing on this company. . That is Jessica Alba is company that has home products. . It reported a worse than expected earnings but also a bigger than expected loss for the year. . Those shares down nearly three tenths of a percent and toast is surging. . I had not heard of toast before today. . Towns struggling today. . I mean these are all down. . OK so Joe’s restaurant. . Sorry. . Yes thank you. . It’s restaurant software. . And it’s up more than 13 percent. . I find this interesting because it comes after Doordarshan. . Others outperform. . How much are the delivery services people order again. . Really doing well. . OK. . In other news today the Chinese DAX really sounds like this is boring. . Go back to auctions. . Petro China and China Petroleum and Chemical Corp. . both plummeting after saying that they were going to delist from the New York Stock Exchange come mid September. . And this comes after a lot of pressure from China plummeting. . They were they had fallen more significantly. . Now they’re down just one point two percent two point four percent respectively. . And I’m pointing to Bed Bath and Beyond not because they reported earnings but every day when I come in I look at Bed Bath and Beyond and AMC to see whether the Reddit jury is still still going strong whether you still have the Robin Hood traders the individual traders and it is still on a tear. . So up 4 percent because why not. . Kelly was at the worst stock market report we’ve ever had. . I mean that was like a Friday struggle. . No I’m I’m all for it. . I think she nailed it. . Dude like Facebook do nothing yesterday or worse. . It’s called meta now. . Tom BODETT Tesla Free. . I mean I just. . I know but I think to her point on Bed Bath and Beyond and yes we all laugh about checking the meme stocks when we come into the morning. . It speaks of the speculative fervor that in some areas of the market is back. . Isn’t that the exact opposite of the conversation we were having just about a month ago when the Fed’s tightening policy. . You don’t want to be in those areas and yet we’ve seen a renaissance. . So what signal does that send more broadly. . Nice security there. . Kailey Leinz let’s have you bring in Victoria Fernandez chief market strategist across Mark Global Investments out of Rice in Texas S.M.. . Ms. . Hernandez understands speculative fever. . Kelly pick it up please. . Well Victoria just to that point the behavior we have seen not just in those more speculative assets but really just risk assets in general this equity market rallying is in a bear market rally to you or is it something you can actually buy. . Yeah I’m not 100 percent convinced that this is a sustainable rally at this point in time. . Kaylie I mean you look at some of the signals that that you want to see when you hit that bottom and then you get a sustainable rally. . And a week and a half ago we didn’t have many of those. . We’re getting a few more of them. . Now you’re looking at the number of stocks making their 20 day highs. . You’re looking at those that are trading above their 20 and their 50 day moving averages. . And those numbers are starting to move higher into the ranges where you want to see them. . But I think when you’ve got this fed that is just determined to continue to raise rates until they really cause a little bit of pain within the labor market and bring that inflation number down then I think you have to be concerned that there’s still going to be some some volatility going around. . And the rally that we’ve seen in the market over the last month was really just driven by lower yields. . It wasn’t driven by earnings. . It wasn’t driven by equity premiums. . So I think you have to be careful because now as we’re seeing rates move a little bit higher that could cause some consternation for the equity markets. . OK so you’re essentially saying Victoria that the Fed is going to stamp this out that they are actually going to push back on loosening financial conditions because they want them tighter and they may be more aggressive than just saying the words as we’ve heard over the last week and change. . I think that’s absolutely correct. . I mean look financial conditions are looser now than they were in March when we started this. . It shouldn’t be that way. . Right. . We should have seen those continue to get tighter and tighter as the Fed moves rates up. . But look you had the CPI and the PPA reports. . Yes it was positive but I don’t think it is any kind of game changer for the Fed. . I mean month over month CPI didn’t go higher. . OK that’s great. . But that doesn’t mean that we’re actually on this downward trajectory for that number for those economic report. . So I think the Fed is going to continue to do the rate hikes. . I mean is it 50 or 75. . I mean I’m not sure. . Flip a coin at this point. . I don’t think it makes too much of a difference in the market reaction. . The important thing is the trend here and the trend I think is going to continue to be higher. . The reports coming out next month will be key. . I think in determining which one of those hikes we see said do you play this in real time Victoria. . To basically push against big tech to push against some of the biggest gainers over the past few trading sessions. . Yeah you really got to watch those trends. . Lisa I mean you’ve got a lot of these names that have been beaten down so badly. . They’re doing better now but they’re still in downward trends. . And we’ve seen that in some of the discretionary names. . We’ve seen it in some of the industrial names. . So I think you want to be careful and be really choosy when you go in there. . We still like some of the like HMO and insurance names something like a Cigna or a MetLife. . We like some of the consumer staple names. . Probably our most recent purchase we’ve done across some of our large cap strategies is Coca-Cola. . And again we’re focusing on these balance sheets. . We’re focusing on their debt ratios on the quality of their earnings. . We think this is where you’re going to find some advantage if we continue to have some volatility and the Fed keeping their foot on the gas to Victoria. . We’re about 90 some odd percent all through this earnings season. . I just did a stock mover that Tom called the worst ever because it was not full of really big names. . And they’re all these little stories that tell a very different story of how strong or weak the economy is how much to earnings matter as you talk more about the Fed and how much they’re going to push back against the overall rally. . It didn’t matter as much this past month as I actually thought they were. . I mean like we said most of the rally was driven by the move lower in yields but I think it was because we thought margins would get compressed a little bit more. . We thought we would see earnings revisions come in more than what we did during the second quarter. . And it wasn’t a great earnings season. . But I think it was better than people expected. . So it allowed to give a little bit of support to the market. . But going forward we are seeing those revisions come in for the second half of this year and for early 2023. . So I think it’s going to pay a play a bigger role going forward as we see corporations margins really start to get hit. . We’re hearing about layoffs. . So those are some concerns. . But look let’s say you watch the bond market closely as do I and spreads have actually started to tighten a little bit. . So the bond market is telling us they’re not too concerned right now. . I think it’s going to be an interesting battle as we go through the next earnings season. . Victoria I want to pick up on Lisa said there because I think it is a I’m making a joke about Lisa’s equity. . I think it was sterling actually folks for your Oscar consideration. . But Victoria seriously here should I lose viewers and listeners pay any attention to the bed bath and Beyond to the world. . Or should they focus on Apple. . I mean which matters. . Well I think it depends on what your perspective is as an investor. . If you’re going in there and you’re really trying to do this daily trading and you’re and you’re trying to be very much on top of the momentum and the trends then I think it does pay to look at some of these more main type of stocks just to get an idea of where the retail traders are in kind of the volatility on a day to day basis. . When you’re looking a little bit longer term and I know you were speaking with David Liebowitz earlier about you know three year being the new short term. . But if you’re looking three five years out then I think you’ve got to look at some of these bigger players. . I mean Apple has become such a large holding in the index. . I think it’s at the largest percentage that it’s ever been. . You’ve got to watch these names and see what their momentum is looking like and follow those trends. . So for us. . Right. . Going to be looking a little bit more towards those big player. . What does Coca Cola’s attributes. . It makes an apple like yeah I mean look you’ve got this global player. . You have a strong balance sheet. . And what did they say when their earnings I mean their earnings were pretty stellar. . And a point in time when many people were concerned about the consumer and they’re saying we’re not really seeing that. . You had a lot of companies talk about the dollar being a strong headwind. . Coca Cola’s managing that as well. . So if you look at something that’s considered a staple in this market an environment where you’re expecting volatility and then it from a company that says they’re seeing still a strong consumer going forward I think that’s a name you can have in your portfolio and feel pretty confident about it. . Victor thank you so much. . Victoria Fernandez across from global investors they’re fired up about what to do next. . And least to me you know really that is what this August Friday is about is as you mentioned earlier and I get the idea of framing out the year in just framing up past Labor Day now as a reach. . Honestly it could be one data point that everyone shifts off once again. . You know we got this wage tracker a data from the Atlanta Fed yesterday. . It did not show any slowing down whatsoever. . In fact it was pretty much steady and under the hood. . There were signs of strength. . At what point do people key into that. . At what point do people key into if oil prices start to climb again does that change the entire narrative to your point. . Yeah. . This is my quarter. . He said Kelly jump in here as well. . Do no class or wage trackers. . Are they nothing more than marketing efforts by central banks. . I mean I just don’t you know we’ve got forty seven indices now all competing with each other to tell us where we are. . Do they have any value. . It’s a fair question Tom especially as we hear Federal Reserve official after Federal Reserve official saying forward guidance has gone. . We’re just going to depend on the data. . So how much is that really the hard data the economic data that crosses the wire. . And you see on Burke terminal versus these casts of all various shapes and sizes. . I thought it was really interesting that interview we had with Mary Daly the exclusive Kathleen Hays. . And she said pointing out there is another CPI read there is another jobs report before we can even get to the September meeting. . So a data dependent Fed is going to wait for more before making a call. . This week alone is not going to do it. . What’s really important folks you’re going to see this rolled out on Monday. . The Brown go back to school now. . Really looking. . What did you call it. . Advertising propaganda. . Yeah. . Keeping you up to date with news from around the world to the best read. . I’m sure you can check. . There was a report that among the items FBI agents searched for at Donald Trump’s Florida home were classified documents related to nuclear weapons. . According to The Washington Post people familiar with the investigation didn’t say if those documents were found. . Meanwhile the former president has called for the release of the search warrant. . The Justice Department has already asked a court for the papers to be unsealed. . President Biden wants four more years. . Bloomberg’s land. . The president is set to launch his reelection campaign in the months after November’s congressional elections. . Those close to Bloomberg say he’s encouraged by recent legislative economic and foreign policy successes. . But polls show most Democrats would rather have another candidate. . Today the Rhine River is likely to shrink to a level that could disrupt the transport of fuel throughout Europe. . The effects could ripple through the continent for months. . The water level at a key waypoint west of Frankfurt is set to go below about 16 inches and continued dwindling. . That makes it uneconomical for barges carrying coal and oil to transit the river. . France is calling on the European Union for help in fighting wildfires that have been blazing for days. . Germany Greece Poland Romania and Austria are sending resources. . France is in the worst drought on record. . Meanwhile in England a summer of heatwaves has led the government to declare that large parts of the country are in a drought. . England recorded its driest July since 1935. . And in China developers have suffered a meltdown of at least 90 billion dollars in stocks and dollar bonds this year. . And a bursting housing bubble and a debt crisis may make matters worse. . Meanwhile Beijing a signal that homeowners are the priority of efforts to stabilize the slumping housing market not build this global news 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries and which could get to. . This has been back. . This is the biggest concern above energy and that is food costs. . You look at the potential harvest this fall. . Not only is offroad diesel price for farmers rising. . Farm equipment is rising. . All of our costs. . So we’re looking at continued food costs because we cannot alter our behavior when it comes to food. . You can of gasoline not with food. . Stephen Schork absolutely on fire. . I believe that was yesterday with the Schork Report. . I really can’t say enough about the granularity of his effort. . And he is on absolute fire about natural gas dynamics right now. . We welcome all of your most interesting Friday. . We’re reading Emily Chang. . I’m reading all weekend and revision to try to figure out that disaster Kailey Leinz in for John Farrell. . John. . John is like back Monday. . Kelly right. . I mean affirmative. . I at the very least Tom I will not be. . I talked to him at the Rome airport. . I really have lost track of where he is now. . But I believe there has been a pharaoh sighting on a recapitulation we just talked about. . And we’ll have team coverage of this on Bloomberg Radio later. . And that is the Brando Back to school now cast. . This is a series that’s being put together by Bloomberg surveillance. . Alisa this begins with the haircuts that our parents never imagined what it would cost. . Yeah I took my my 13 year old son to get his haircut and I had a full bar there and it was sort of a real back to school. . Welcome for the parent. . I do wonder though as we talk about now Cassie you really think it’s propaganda marketing material for different Fed shops. . I think they’re taking well-intentioned time series and trying to brand them to media. . I’ll take the Cleveland CPI which I adore the great work of Cleveland. . Guilty as charged for us. . And they’ve got a mark thing as well. . All I remember is the biggest problem with back to school supplies was sixteen Creoles or 24 rich kids had 24 Creoles and one guy had seventy two Creole. . Is there I was Lisa was sixteen Creole. . And we’ll call Dr. . Phil after the dog chewed the magenta right now. . Dennis Gartman joins me with futures up 14. . Always good to speak. . The gentleman chairman of the University of Akron’s Endowment Fund. . He’s retired. . No he’s not. . He’s still writing the Gartman letter on an hour by hour basis and joins us today. . Dennis Lisa wants to talk about bonds. . I want to talk about hydrocarbons. . You know they’re out of control in Europe. . They’ve got a modest matter of a war. . Are we going to see methane natural gas. . Are we going to see different forms of gasoline in America. . Surge like electricity in France. . Probably so. . Propane is probably going to go a lot higher. . Nat gas is probably going to go a lot higher. . Inventories are extremely limited here in the United States. . They’re unbelievably limited in Europe. . If we start pushing nearby nat gas through nine dollars per million British thermal units nor trading about eight dollars and fifty eight dollars and 60 cents per million British thermal units if we start moving through nine dollars you start to go back to where we were in 2005 2006 and 2007 when we get 13 dollars per million British thermal units. . So you have to be very careful. . Things are very tight and likely to get tighter. . So it’s it’s not a pretty sign out there right now. . And you’re talking about natural gas and ISE but it could also apply this to certain oil inventory reports. . There are some different ones. . And I wonder how much we are fragile heading into the winter to see a spike in oil that could reverse some of the optimism about the disinflation that we’ve seen in this week’s reports. . Keep an eye on the term structure. . That’s that tells you more than anything else about what goes on in crude oil specifically especially historical commodities such as crude oil. . We’re in a small backwardation we were in and the larger backwardation a month and a half ago the backwardation has narrowed. . But in the past couple days as prices could all have fallen just a little bit taken we got what WTI and eighty eight dollars per barrel the other day and the nearby backwardation began to widen marginally. . Backwardation is where sophisticated and informed money leaves its footprints. . And if the backwardation starts to widen a bit we’re going to start seeing crude oil start to go higher again. . So I think you’ve seen most of the decline in crude oil NIKKEI did upon a decline in driving. . Miles here in the United States is the demand and decline in demand for gasoline and diesel. . I think you start to see it. . Eighty eight dollars a barrel. . That’s probably the low. . And I bet I bet we trade 95 96 97 and not too distant future. . So keep an eye on the backwardation. . A widening backwardation is always bullish for the crude oil market. . Well so let’s transfer that a 95 96 dollar a barrel a barrel price forecast here into your projection for the economy from markets especially because a lot of the trading activity has hinged on this lower oil price. . How much does that reverse the gains that we’ve seen in stocks and send yields higher. . I’m afraid that we’ve seen that the the the low on yields we’re going to see the much higher prices and yields much much lower prices and bond. . You had something that occurred last week which I think not enough people paying attention to. . You had an outsider reversal a week and outside a rehearsal day and the long bond future. . Very rare circumstance. . We’ve only seen a one time before here and we’ve only seen it two or three times in the course of the last five or six years. . When you have an outsider reversal I pay attention to it. . It’s one of the it’s one of the technicals that I pay great. . A great deal of need to an outsider. . Reversal week is a very rare event. . Probably means lower bond prices probably means higher yields over the course of next several weeks the next several months. . Be careful. . And I think that that’s the. . The decline that we’ve had in the long bond for the long bond yields over the course of last month and a half was predicated upon a decline in inflation decline in crude oil prices declining grain prices decline in livestock prices a decline in copper prices and all those turning around and turning back to the upside. . So be careful out there. . Keep an eye on gold. . It starts to get to 1825. . The game changes completely. . Well Dennis we know the story in the first half of the year was when yields go up it’s bad for the equity market. . That is why we saw growth stocks underperforming to such a degree. . They have staged a pretty remarkable comeback over the last month is essentially what you’re saying. . If yields are going higher from here that’s not going to last much longer. . I don’t think it last much longer. . As the chairman of the University of in that I got us to move a good 14 or 15 percent of the portfolio out. . We got very lucky we did on in December 30. . And as I’ve always said but in a bear market he or she who loses the least will be the winner. . We’ve lost less than most other endowments. . We have a meeting next week. . And I’m probably going to say we need to reduce our exposure just a tad more. . You’re going to reduce equities. . You’re going to reduce equity exposure even with this ginormous rally we’ve seen from June 16th. . Dennis at the margin probably another one or two or three percent. . Nothing dramatic nothing extraordinary. . But I think the rally has been a real bear market. . The volume has not been as illustrative or as dramatic as it should be on an EPS on a move to the upside. . And over the course of the past six months or seven months volume seems to come in on the downside rather than on the upside. . Another technical circumstance to pay attention to. . So I’m going to my position would be that I’d like to reduce our exposure just a tad weather and get the rest of the committee to agree is another story. . What do you do with it. . What do you do with the rest of it. . Buy options in the Cincinnati Reds or do you go into cash. . What do you do. . There’s a good game last night and watching the Cincinnati Reds. . But I think cash is probably not a bad place to be. . In fact I think cash is a very good place to be. . Cash being two year bonds and under two year treasuries and under Dow Jones Bill Cosby you continue to invert. . It’s been inverted for now for a month and a half. . You know it’s probably and I think the twos versus is get to it gets to 80 basis points without too much difficulty. . Dennis we’ve heard that this week. . Thank you so much. . Dennis Gartman with us from the University of Akron Endowment Fund and of course the acclaimed Gartman letter as well. . Lisa I’m glad Dennis brings that up because that’s really the salient call of the week as we’ve heard people extend out from premium miseries courageous negative 40 basis points negative 50 basis points to some ginormous inversion. . The underlying question is how much of the move that we’ve seen in markets is purely because of the decline in oil prices. . OK I go that. . I think we’ve got to work on the weekend Lisa you and I got to put together the brand of gloom cast. . I think you’re right. . You give your inputs and I’ll give mine. . You need to stay with us. . Paul Sankey will join us on oil soon. . Good morning. . To continue to hear hawkish comments from the Fed because they need to have credibility to keep inflation expectations in check. . We might be going in a better direction than people thought. . We don’t think we’re kind of in the clear. . With respect to risks not yet convinced that price pressures have peaked. . The debate on inflation has peaked. . I think that’s over. . And now it’s a debate on how fast it comes down. . This is Bloomberg Surveillance with Tom Keene Jonathan Ferro and Lisa Abramowicz What’d You Miss? sentiment kind of Friday. . Good morning. . This is at Bloomberg Surveillance for our audience worldwide live on Bloomberg Television and Radio. . Tom Keene. . John Farrell. . Lisa Abramowicz. . John. . Out. . We are so lucky to have Kailey Leinz here. . And Tom my takeaway from this week is how important gasoline prices have been to everything underpinning a lot of the rally that we’ve seen in both bonds and stocks simply said enough is about a gallon of gas. . Paul Sweeney has been very good about this is Bloomberg Surveillance on radio. . And Lisa you’re right it never can be said enough. . It seems old. . It seems dated. . We’re biased on the island of Manhattan. . Guess what. . We’re wrong. . It matters. . It matters from every point of view not only because it allows people to have more discretionary spending but that they’re not putting it toward the pump. . But also it affects things like that University of Michigan sentiment survey that we’re going to be getting at 10 a.m. . today. . It’s going to affect all of the inputs perhaps even next week with those retail sales. . Tom what are you watching for that pivot point to understand whether this rally is real. . I just I just I just don’t know. . I just think the news flow right now is extraordinary. . The reading over the weekend will be there at this hour. . We’ve got some great logos lined up just in the next 30 minutes folks. . You’ll hear from Paul Sankey on oil and the surge in natural gas. . And in moments Lisa Jeffrey you’ll join us Dani Burger. . Meanwhile Kaylee how real is this. . How much trading is this in. . You talk to people all day long about exactly this question and how many people just come out and say it is so thin right now. . It is August. . Go home go on vacation because no one’s really out there making volumes. . Yeah everything seems more dramatic in the summertime because there’s just less people at play Lisa. . But there is starting to become a sense of that is shifting that this maybe is something more substantial. . The bear market rally narrative that was persistent for so long does feel like it’s morphing as the market sees this week as something of a turning point. . But in the Federal Reserve speak we have gotten it is not clear that policymakers agree. . Mary Daly and Neel Kashkari Charlie Evans all talking about how they think they have more work to do. . The fight against inflation is not over. . The market though doesn’t seem like they believe them. . Yeah. . And Tom what do you make of this that the more the market has to rally the more there is a Fed call the more that they’re going to come out and say we’re going to raise rates more. . Just to tell you guys that I underplay that. . I think the Fed is data dependent and they’ll be working off the economic data that they see. . And you know you know I don’t play Matt Miller attention to 75 beats or 50 beats here or there. . But I do think what is germane is where the finishing point is. . Within all this pontification is a three and a half percent or an a longer Bloomberg economics is way out of the lonely foreign three quarters or 5 percent. . I’m focused on the data this morning which is a positive tone to markets finishing up a week. . And it yesterday we saw that fade into the close. . Can we retain that today as people take a look at whether or not there is this disinflationary tilt across the board you’ve got S&amp;P up about four tenths of a percent the same as NASDAQ. . You have yields just a touch lower that to your yields is coming lower although yesterday that 10 year yield Tom actually rose after the auction. . It was an interesting auction because it was not met with enthusiasm. . And this shows the really risk of pushing back against some of the moves that we’ve seen to Dennis Garments point Gartman showed the ambivalence is out there I will say and this goes to what we’re going to address with Jeff you. . It’s about flow of money you mountains earlier lease. . And I think in the weekend literature we will see it. . The wall of money moving right now is tangible. . And right now out of cash into stocks into a credit. . And you are seeing a bit of a dollar strength reasserting itself after an incredible amount of weakness. . There is somebody who tracks this incredibly well and speaks incredibly articulately on this every time we have him on. . We are incredibly lucky to have Jeff you with our senior EMEA market strategist at BBY NY Mellon. . Jeff did anything change for you this week. . Not much for us. . You know we’re still holding on to the view that the Fed needs to keep expectations for several rates. . Could be awful. . Whether the next hike is relatively firm looking at 75 percent markets need to be on guard and need to be vigilant on this. . But your earlier point about flows obviously and changes risk on two very interesting developments one in ethics markets. . People are looking for quality. . What do I mean by quality. . Surplus economies not the larger ones. . The likes of Switzerland likes of Sweden the likes of Korea Singapore with healthy sub. . Says good balance of payments lower yields on strengthening currencies. . That’s what looking at. . Secondly to your point about credit. . If we can borrow an equivalent in emerging market bonds probably on a hedged basis. . Clients are looking back as well. . Flow are showing ample buying of that. . So yes some risk on but only where it matters. . And anyway this quality Jeff quality makes me think the dollar. . Yet the dollar is what sold off yesterday. . And that classic risk I’m telling. . Do you expect the dollar to reassert its strength or do you continue to see the risk on being paired with a weaker dollar. . Well I still think the dollar is quite strong right now. . If we look at where your dollar is. . If we look at where a dollar sterling is Michael Barr dollar yen as you know even after the recent downward move that’s where the dollar is still asserting itself. . Donovan can be for example. . So whether the dollar should be asserting itself on a growth basis on an inflation and interest rates expectations basis. . Absolutely. . But it’s no longer the only game in town. . And I think that’s when money is being put to work. . Jeff for you as money moves around and repossessions and there’s a lot of heated debate is cash good asset to be an. . So cash right now is a less bad asset to be and your opportunity cost in earning cash is lower not only on a nominal basis because of high rates of both but on a risk adjusted basis as well. . So I think people are realizing the value of cash rather than that fear of missing out. . I need to be as underweight cash as possible. . So that will have implications for the structure of markets as well. . These short volatility products know what you’re trying to pick up your son yield on your paper by selling options or things like that. . Those are going to be taken off and I think that’s actually healthy for the market as well. . But over medium to longer Tom Mackenzie time horizon I think people again are putting money to work. . How do you respond to the efficacy of a two part market where quality wins persistent cash flows wins and everything else doesn’t. . And the ability to pick those stocks. . Can you get away with that. . Well not if it’s stocks or currency or a bond you really have to show your value right now. . For companies and for countries. . Show me where reform is. . Show me where your plans are. . Show me how you’re going to improve your cash flow. . Show me how you are going to be able to offset your costs of your your rising cost either through internal productivity growth or let’s take the example of Europe for example. . How can you lift your trenberth and how can you get out of a situation whereby people are fundamentally reassessing the quality and the euro. . The eurozone is running a trade deficit against non eurozone countries. . When was the last time that happened. . On a sustained basis. . So what is plan B for growth. . It’s now showing the plan is not sustainable. . It’s not going to work. . So that’s where the internal changes need to happen. . On a micro and macro level if you don’t have quality right in. . Show me a plan where you can obtain quality again. . Yeah. . Jeff I’m glad you brought up Europe because I got my electricity bill earlier this week in my ISE mildly bugged out of my head when I received it. . And yet I thought at least it could be worse instead of New York. . I could live in London or elsewhere in Europe where the energy situation is far worse. . We had a headline crossing the Bloomberg earlier about most of England being declared in drought. . We have the Rhine River that is expected later today to have such a low water level. . It becomes impassible at one critical point. . How doomed is Europe. . Well let’s start with the UK. . So 5000 pounds per year in energy bills where household disposable income is depending where you obviously 30 to 35 thousand pounds. . On top of that mortgage payments potentially increasing by 2000 3000 pounds a year. . Post-tax them by the way. . So that is problematic. . And right now does and it’s to say a lot of a lack of government rather than a lack of vision that they’re going to push things through. . Europe is not doing the same because there are stabilizers in place now. . There are a longstanding fiscal plans to help the household but it comes at a cost. . If the household is going to be protected that industry will have to suffer as a result of gas rationing for example for the chemicals industry in open Germany for the auto industry that is coming suddenly talk about the filling up to stop the inefficiency element that long wasted gentlemen earlier. . But at the same time I think fundamental changes are needed and not by fear for the eurozone is that downside scenario. . Madam Mogahed talked about where growth will contract by one point seven percent next year. . This is swiftly becoming if not already markets call case 2023. . In the eurozone. . Jeffrey thank you so much. . Really appreciate it would be NY Mellon and Lisa as we move to Jackson all here the Fed speak is going to be fascinating. . I mean you know we’re distant from that September meeting and between the Fed dialogue not so much a Jackson Hole but tangential to it like we heard from Mary Daly getting the tealeaves here not for the parlor game but just sort of the mood of the nation will be critical. . Do they see the risks still as being greater that they could pause too soon and allow a repeat of the 1970s. . Or do they see a risk of curtailing the economy more greatly and having that kind of erode the balance of errors is what I’m watching from those tealeaves anyway and translate that into the inflation path. . And you know the physics and the economics Liz it’s about inertial force. . It’s not talk so much but just the inertial force of disinflation. . And the idea that that’s a smooth curve down to 5 percent or 4 percent or dare I say down to 2 percent is just delusional. . Well the inertial force in France is not going in the right direction and the inertial force and food is not going in the right direction. . So there are inertial forces that are working against them. . And then if you get the oil price climbing how much does that really cold so-called what. . Throw some cold water over the narrative that way. . I mean we haven’t even talked about it yet. . December 14th that’s a meeting. . What if there’s a pause in this descent of inflation. . We get what do we get there. . We get one two three I think for inflation reports before December 14th. . What if we stop this inflating that’s not in the dialogue. . And what if we get an Adam Posen ask idea at Jackson Hole that they would be okay with 3 percent or that would be a bombshell. . Now you’re making some news there. . I’m not making news. . I’m just I mean evacuating the Bears. . The Bears have come out of the forest and listen. . Blizzard. . I’m not saying that come out. . It’s very. . How many others. . The pheasant Tom Keene. . I know you don’t want anything. . Late August the pheasant of Jackson Hole. . Stay tuned. . Keeping you up to date with news from around the world with the first red I’m risky Gupta. . FBI agents reportedly searched Donald Trump’s Florida home for classified documents related to nuclear weapons. . That’s according to The Washington Post. . The newspaper says people familiar with the probe didn’t say if the documents were recovered. . Meanwhile the former president has called for the release of the search warrant. . The Justice Department has already asked a court for the papers to be unsealed. . Beanbags on the president. . Biden is preparing to launch his re-election campaign in the months after November’s congressional elections. . That sets up a potential rematch with Donald Trump. . Those close to President Biden described him as upbeat about recent legislative economic and foreign policy victories. . Polls show most Democrats would rather have another candidate. . San Francisco Fed President Mary Daley says the killer inflation reading for July is welcome and she believes it may be appropriate for the Fed to slow its interest rate increase to 50 basis points next month. . Still Daley told Bloomberg TV the fight against inflation is far from over. . She says rate hikes need to be dependent on data. . Three of China’s biggest state owned companies planned to delist from U.S. . exchanges. . That fallout from a dispute over whether American regulators should be allowed to inspect audits of Chinese businesses that are listed in the US. . The three companies that will delist China like China and Sinopec the way has been cleared for Samsung vice chairman Jihye Lee to formally take the helm of the electronics conglomerate. . South Korea’s president use skill cleared the add to the country’s biggest company of bribery charges. . Lee spent 18 months in prison before his release on parole a year ago. . Going to use 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts in more than 120 countries on which you could get to. . This is Glenn Beck. . I have a baseline case going into September that is 50 basis points that’s where I’d been since the last meeting but I have an open mind about whether 75 is going to be necessary and a lot of that will depend on the labor market information and whether we start to see those things slow enough to say while we’ve got the momentum right. . Surely our most interesting president of the Federal Reserve Bank Mary Daley has an original story in San Francisco. . And of course a huge shoes to fill there. . John Williams and she is front and center on the social sensitivities of all of this economic mumbo jumbo. . We talk of futures up 19 on a Friday. . Dow futures up 126 less. . I mean call it a persistent lift. . And it’s not off of you know CPI Wednesday or whatever we’ve got here. . It’s just a nice lift in the market. . It comes from all of the reassessments that people are going to be talking about over the weekend about whether there is more disinflation than they previously thought. . One hundred dollar print number and crude earlier 97 98 now down a dollar sixty. . A wobbling of hydrocarbons this morning. . That gets us to Paul Sankey founder and lead analyst of Sankey Research with decades and decades of experience of the Michael Barr economic analysis of all this. . Paul how close is America to the many deviation leaps that we’re seeing in European hydrocarbons. . Are we dealing at or linked to those war events. . Well the good news is you know Tom is that we produce a vast amount of oil and gas here. . So ten years ago we were that’s importers of 8 million barrels a day of oil. . Believe it or not. . Now we’re net neutral. . So the U.S. . oil and gas industry has done a phenomenal job not only of oil but we’re also now the world’s largest natural gas exports. . And as you know the problem in Europe is that they really don’t produce a whole lot of domestic energy. . Full stop. . Certainly. . Right. . They stop their nuclear and coal so they get into their own problems. . So the big pull here is going to be a concern which is exports to Europe. . Whether or not that drives you think local gas prices very high ISE. . Natural gas prices very high is quite Paul Sweeney. . You can pass a barrel of oil like no one. . Let’s wander over to methane and natural gas. . When Paul Sweeney uses energy one go from two to eight. . What does that signal for you. . Probably that we’re going to send the price in Europe as you know is more like 50 or FTSE you. . I mean extraordinary prices. . So the draw there if it costs you about five six seven eight dollars to cross the Atlantic there’s obviously implicitly a massive pull on our exports. . And that’s I think going to be sufficiently large to pressure natural gas prices into Windsor. . It now becomes a question of whether we’ve got hurricane season which hasn’t really happened yet at all. . And then of course the really concerning question and it’s a major concern is how cold it gets this winter. . And if we get a globally cold winter that we’re going to have death I’m afraid. . Well that’s on the natural gas side. . And that’s a pretty dire projection on this Friday on the oil side. . The IEA saying the increasing number of gas relying electricity providers are turning to gas to oil prices to oil in order to stave off some of the shortages. . How underfunded is this market. . How cheap is this market relative to where it will be ISE the end of this year. . The U.S. . price I mean is way below that said I mean you know as I said we’re over 50 dollars per Emily Chang more or less in Europe. . And quite possibly go higher based on what Tom and I were just discussing European electricity prices. . They’ve they’re just you know they’ve gone as you said exponential essentially. . But I mean in terms of oil prices that’s where I was going with this with this idea that this is inflationary input. . Yeah. . OK. . So the oil situation is a bit different because essentially Russia makes more money from oil and continues to supply oil to the market. . So the oil crisis is not a crisis to the extent that the gas crisis is. . So there’s going to be a major pressure upwards on natural gas prices at the moment. . There is marginal use of oil which the IEA has highlighted as you said not least. . Propane for example is a direct substitute for natural gas but also generally the use of oil and coal is going to be driven by by the problems in Europe. . No question. . It’s just that the Russians really haven’t reduced the supply of oil anything like what they’ve done to the natural gas side. . Paul here in the United States later today the House is expected to pass the Inflation Reduction Act and eventually the president simply will sign it. . The measures within that some of them including the tax on methane emissions. . How do you expect that could impact the supply landscape here in the U.S.. . It’s significant. . It’s split the industry. . So the big the big oil’s the excellence of Chevron and Conoco Phillips already have very strong methane limits and continue to pursue zero flaring as a target for example. . And then you have this enormous tale of companies. . I think the six thousand U.S. . oil and gas companies of which I can only name 50. . So if at best. . So this enormous tail is under direct threat and it could be assuming that it passes and that is implemented strongly. . It will be a major pressure to the downside on marginal U.S. . gas production. . No question. . So is there a threat that the inflation reduction act at least when it comes to energy prices actually becomes more inflationary. . Yes. . All right. . Paul it Erick. . Paul I think we probably should leave it there. . Tom what do you say. . I think Paul you think you’re on short notice for joining us here today with what has been underreported in the American press. . I’m not going to mince words about it. . Natural gas sustained here. . You know I don’t use the units because they’re British thermal units. . And you know I have to wear a bathing suit or something if I quote those. . But little Lisa the fact is just looking at the measurement of natural gas off energy one different than Netherlands is two to eight. . Dennis Gartman talking about nine. . And I believe Paul he said there we would move right through to 10. . And that’s got a huge issue. . And particularly Lisa was substitution. . We’re nowhere near the coal substitution you’re seeing in Europe right now. . But you wonder is that is that a 2023 story. . Coal substitution or oil substitution. . And that’s what I was trying to get at. . You’re seeing that increasingly threatens Germany. . Thanks. . I know but go ahead. . Going forward are you going to see an increasing amount of that in the United States as well. . Kind of pushing against this push to stay a step away from the fossil fuel burning sources of energy. . Honestly I think that there’s going to have to be some sort of adjustments whether that’s going to reverse some of the gains some of the losses that we’ve seen recently in the price of oil. . We’re going to continue on here. . We’ve got another good half hour here. . Bloomberg Surveillance on to other projects. . Lisa Abramowicz getting real with a real yield today. . Drew Matus will come up is well. . But you know I got to say having Caylee here has been very beneficial. . And of course we’ve seen you make a men’s team spirit visible on television for those you in radio. . There’s an extraordinary moment yesterday where Lisa and Caylee just wanted to. . Hi I don’t know what’s in the record day hiding as a game. . I am winning. . There were the beverage of my choice on the couch last night with that bill. . And Maria Tadeo calls up from Barcelona and says my Spanish was wrong. . Are you really conjugate tomorrow. . I felt. . What is this photo about on radio. . It’s appalling. . They literally want to hide. . I mean look at the banner. . Who wouldn’t speak Spanish incorrectly about drinking in an election there. . It’s been a great week. . And we will see this I think is Bloomberg. . Good morning. . Bloomberg Surveillance on a Friday an important conversation coming up here with Drew Matus of Net Life as well. . Please help me with the day check. . Futures negative 19. . Dow Futures negative 123. . It’s auction free Friday Lisa Abramowicz. . I see positive across the board. . Actually I think everything is is doing quite nicely and constructive at NASDAQ up about five tenths of a percent. . The S&amp;P up about the same. . A little bit of a bid into treasuries. . Basically the lift is not coming off data. . It is coming off this feeling that we are not getting as fast inflation. . We have hit peak inflation and the Fed is going to respond. . I would suggest Kailey Leinz it for John Farrow. . Kelly I would suggest that what we’ve seen here today and in the last couple days is flows in a lot of doubt about the persistency of the flows in the equities. . Yeah. . And you’ve seen that in the Bank of America data that Michael Hartnett put together seven point one billion dollars in global equity funds pulled in through August 10th which of course was the CPI day eleven point seven billion dollars worth of flows into bonds as well four point three billion pulled out of cash. . Tom if you’re still in triple leverage all cash seems like you might be the only one because a lot of people have decided at this stage this week and they’re putting money to work you know based on the hate mail I get. . I would say that’s it’s right. . It’s a pretty lonely position. . Truman joins us now to sort this out. . He is chief market strategist at MetLife. . But that barely describes what he and Maury Harris stood at UBS years ago in the depths of the great financial crisis where they suggested the American economy would piece together and would be resilient and would move forward over the coming decade. . Drew I look at the moment that we’re in right now in the one statistic that gets my attention is three ratios of productivity. . People like you seem to be very concerned about a dearth of productivity and inefficiency in the economy. . Is that evident or can we prosper. . I think it’s evident you know one of the things that’s most disturbing is actually that right now you have the GDP contracting right. . And we can off the recession as much as we want. . But GDP is contracting and yet we’re still hiring a ton of people. . And so many were hiring this people because the systems become so inefficient that without all those additional people you can actually get the job done. . And if that’s the case in Europe potential growth rate is declining. . And so it’s it’s bad news for the economy. . It’s bad news for long term inflation. . And it’s it’s bad news for kind of what the next recession might look like. . What does it mean for investment. . What does it mean for the greater actuarial assumption of someone like MetLife or the actual assumption of our viewers and listeners or we’re just trying to get to Labor Day. . Well if it’s sustained it’s kind of a lower trend growth story for the United States which is obviously not something we want we want to be in a high growth environment with modest inflation. . Because that’s what actually outperforms and creates the most wealth for an economy. . And of course workers benefit if they’re productive. . All right. . And worker standard of living increases if people are productive. . If we’re not productive those things are going to decline. . And so. . You know I think from a kind of a very long term perspective it’s a negative for interest rates. . It’s a negative for growth in the U.S. . economy. . It’s negative for U.S. . competitiveness. . How long you remain gloomy Drew when you see the optimism being reflected in pretty much all of the markets. . You know I’ve got to say I’m kind of short term gloomy but long term very positive. . I think this blip in productivity is it’s just that I think it’s a situation where everyone’s trying to get used to kind of this new environment that we’re in. . And I think this new environment is actually an old environment. . We got so used to being service sector driven that we forgot that there are cycles in the economy that don’t pertain to services. . So there’s a manufacturing cycle and there’s inventory builds and inventory contractions. . And one of the things I’ve been thinking about a lot lately is. . You know. . Is everything we’re seeing really just a return to a kind of economic volatility that used to be the norm. . Let’s say before the 1990s. . So what do you bide your. . Well so that’s a great question because you know our nearer term forecast is that you know we’re not in a recession now but it’s coming and there’s going to be a calm before the storm which is kind of what we’re in right now. . And I think you know one of the one of the most important questions I think we’re trying to figure out right now is what the next recession looks like and how could it be how sustained could it be. . And more importantly then what the recovery is out of it. . So I don’t think now’s the time for caution because I do think you know what we’re seeing now is kind of a false dawn and that we’re going to get towards the end of the year we’re going to really begin to see people pull back on things like hiring and investments. . And that will affect the consumer and with the consumer will go the economy higher. . You know I thought. . I’m sorry. . Well just when you say the consumer I wonder what kind of consumer we’re really talking about because you have a company like Apple with Bloomberg reporting overnight that they’re telling suppliers make as many next generation iPhones this year as you did last year because affluent consumers are still going to be upgrading their phones. . Yet there is the lower end of the income spectrum which is struggling with higher food and gas prices. . And maybe that’s where the cutbacks on discretionary spending are coming from. . So if it’s a consumer led recession and is only actually part of the consumer base. . Well that’s always going to be the case. . Right. . I mean when we think about the consumer what moves the needle and we consumers the middle class upper middle class because through the people who are actually very their consumption they get worried about their job. . They cut back on things. . You know the very rich and the very poor don’t actually change their consumption patterns very much. . In one case because they don’t need to add in the other case because they can’t. . And so it’s that it’s that middle grouping that moves the needle. . And you know I would say that you know that middle group is looking a little bit more stressed of late. . You’re seeing a pickup in things like credit card credit. . You’re seeing them balk at higher prices for various large ticket items. . And so they are making decisions that are that are preparing them for a potential downturn. . It just hasn’t really reached the level of momentum yet. . And of course you know every time they think that they should be preparing you know you get something you get some good news on something like the labor front. . But I do think they’re becoming increasingly nervous. . Will under you talk about momentum building we’ve already seen signs of that affecting corporations like Wal-Mart and Target warning on margins because of the very for margins because of the forces you are talking about when do we start to see that margin erosion. . More broadly do you think it’s coming. . Well so I mean if you if we look at economy wide margins and when you look at economy wide margins they have peaked and are coming off. . There’s some distortion caused by things like loan forgiveness. . So you have to kind of work through that a little bit. . But it does seem like economy wide margins have peaked and have begun to erode. . And when they erode enough you begin to see large larger scale pullbacks from companies hiring and investment. . And so it gets the clock ticking towards kind of a recession. . And once again they all kind of lines up with kind of like in 2023 date whether you’re looking at things like the yield curve or whether you’re looking at things like margins Drew all the consumer. . Do we go into retail sales next week. . It’s why we’ll see. . In the sea is a big big C++ G but it’s an ex. . What does consumption do. . Well I think you’re going to continue to see the move towards services. . People spent a lot of money on goods during during the Covid crisis and they’re moving towards services and you’re seeing that’s where the demand is. . The real question is this how much or how how long is that going to hold up. . I think that the movement is going to hold. . But what’s the overall level. . And I think the overall level is going to begin to decline a little bit as people begin to balk at higher prices. . See they’ve already done that with things like cars. . And you know the question is when will they begin to do it for things like air fares hotels the service experiences that have been holding up so well. . So where do you run at MetLife. . I mean know not to get into the nuances of your portfolio but what does it mean for bond prices to see that kind of economic view. . Well you know we focus a lot on credit here right. . So the goal for us is to kind of pick the assets that you’re going to pay back for holding. . And you know some of that payback is kind of what’s the yield on it and some of it that’s what’s the credit on it. . And so it’s a time to be a little concerned a little concerned and making sure you’re paying very close attention to the credit component making sure that you’re going to get paid back for him and taking the risk that you thought you were taking. . And so you know there’s various places you can do that. . Also an inflation environment. . You know real estate tends to be a nice inflation hedge. . And in my life you know we’re fortunate enough to have an agricultural business. . Agricultural lending business which also kind of provides some of that. . Just real quick do we only have about 30 seconds. . How frustrating is it to the market. . The entire market trades risk on risk off to a lower or higher or higher oil price. . Well it’s so frustrating so much as I think that you’re seeing the market respond to a return to economic volatility which most people who are trading on Wall Street today probably haven’t seen before. . We got very used to things moving in very long trend line movements with very little volatility around it. . And I think we’re returning to a period of much more akin to the 80s where you’re going to get a lot more volatility on a quarter by quarter basis in terms of growth. . And you have to look through that and really kind of do your homework in terms of who can handle that kind of volatility as they try to plan for the future. . Terrific brief. . Drew Matus thank you so much with MetLife Investment Management this morning Lisa. . Ben Emmons has been very strong this week writing of subtle notes really thoughtful on the path to Jackson Hole. . He calls it an August euphoric overshoot. . It sounds like something you wrote Lisa. . And what I would point to as you and I have followed is a Bloomberg Financial Conditions Index which is measured in standard deviations. . And Lisa. . It’s extraordinary from the equity bottom of moving from greater than one negative standard deviation in moments ago popping through a negative point to zero to a better statistic. . I mean it’s irrefutable what these financial conditions say they are loosening which is probably not what the Fed would like to see unless they are caught and they control it. . I’m not sure that you kidding. . Well they could control it. . They come out with a 1 percent rate hike in September. . They could control it if they come out and they actually make material moves to say you guys are wrong. . Whether they actually want to do that is another question. . The economy actually is right. . We’ll continue this conversation with Matt D out of Merrill and Bank of America by the bank. . Coming up I gonna tell you this conversation. . The Jackson Hole folks look for Lisa Abramowicz as exclusive interview with Jerome Powell. . It will be surveillance NIKKEI exclusive. . This is where she just will grill the chairman. . It’s such a 1 percent. . This is. . Keeping you up to date with news from around the world with the first word on which you can get to. . That’s a report that amongst the items FBI agents search for Donald Trump’s Florida home where classified documents related to nuclear weapons. . According to The Washington Post people familiar with the investigation didn’t say those documents were found. . Meanwhile the former president has called for the release of the search warrant. . The Justice Department has already asked for a court a court for the papers to be unsealed. . President Biden wants four more years. . Bloomberg slammed the president is set to launch his re-election campaign in the months after November’s congressional elections. . Those close to Bloomberg say he’s encouraged by recent legislative economic and foreign policy successes. . But polls show most Democrats would rather have a never candidate. . Today the Rhine River is likely to shrink to a level that could disrupt the transport of fuel throughout Europe. . The effects can ripple through the continent for months. . The water level at a key route up Key Waypoint west of Frankfurt is set to go below about 16 inches and continue dwindling. . That makes it uneconomical for barges carrying coal and oil to transit the river. . Moscow is facing pushback from retailers over a new product for customers. . It allows them to pay off their purchases in installments. . MasterCard has told merchants on their banks that it will charge retailers three percent of a purchase price each time a consumer uses the new program which is less can still can opt out by now. . PPI latest service globally is 24 hours a day on air and on Bloomberg Quicktake powered by more than twenty seven hundred journalists and analysts and more than 120 countries. . And you can get to. . This is back. . Markets are completely ignoring Fed speak right now. . They don’t want to hear it. . They fighting the Fed fighting the Fed. . I think you always need to bring the big guns out. . We need Powell to come out and speak until he speaks. . I think the market rally can keep going. . See Machar there was some optimism when principal global investors taking it down too. . When the chairman speaks in Jackson Hole we’re pleased to tell you that Lisa Abramowicz Jonathan Ferro and I will be at Jackson Hole with a team. . Michael McKee will join us is well really our major contact with the Federal Reserve of Kansas City and their academic meeting. . But we hope to make it more than academic for you. . We look for that in about 15 days. . Kailey Leinz in for Jonathan Ferro. . I’m Tom Keene and thank you so much for joining us. . With futures ever so slightly. . Doing a shoot see Machar advance up 19 right now. . Make that up 20 points on the Standard and Poor’s. . Dow futures up 139. . This is the conversation of the day for every American family on radio and TV. . Overwhelmed by the cost of airfare. . Helene Becker brings good news. . Senior research analyst at COWAN. . Helene you guys do definitive work that you and Kai Rumer invented which is measuring the air fares percent change. . You detect a crack. . Is it possible airfares could collapse come the autumn and winter. . I wouldn’t say collapse but definitely come down where. . We’re already seeing them decline. . It looks like June July was the peak and we’ve seen what you call promotional fares come down after Labor Day. . They’re not as low as they were last fall. . Last fall we saw the most lowest. . Thirty nine dollars one way. . We’re seeing them. . Fifty nine dollars one way. . So they’re definitely come down and. . Right. . If fuel prices go down they’ll continue to come down. . I’m looking for the 59 dollar ticket to see DG in Paris as well past domestic versus international. . So domestic is is significantly lower. . We’re seeing fares come down in October for international September still seems to be fairly high although I’ve noticed some really good deals if you want to go to places like Paris. . Haven’t seen much in the way of London. . London seems sold out but I’ve seen Paris I’ve seen Frankfurt Madrid Barcelona on unmarked down. . So there were places that have good sales for after Labor Day as well. . I’m guessing Tom’s going to spend a couple hours later on today searching prices for and take a spare. . I mean I don’t I don’t ever listen to our interviews back Kailey Leinz Becker. . I listen back like five times. . Take check Paris. . All right. . Well Helene you were just talking about how fuel prices have come down so that will have a bearing on fares. . Are you saying essentially that it’s more about the input costs that airlines are facing that dictate that rather than it being some kind of demand construction on the part of the traveler not being willing to pay higher fares anymore. . I think it’s a combination of both. . Right. . I think that we’ve seen input costs especially fuel come down off the peak. . So that’s a good ISE that labor costs are still very high. . The Department of Transportation reported yesterday that in June the number of employees employed by airlines exceeded the number in 2019. . So we’re already back to pre pandemic levels of employment. . The fact that we’re seeing these huge delays continue just means that airports are still understaffed and whether on the East Coast is not helping. . So. . So think about it that way as far as demand goes. . We’re seeing very strong demand especially for ultra low cost airlines. . And we’re seeing what we’re calling trade down as people have relocated and they have to go back to their home office paying for tickets as gifts gets old fast. . So we’re definitely seeing trade down to the ultra low cost airlines. . And of course to your point. . Food costs are high. . Gasoline prices are high although I’ve heard they’ve come off. . The lows are the highs rather. . So maybe that makes a little more attractive for people to fly again. . Yeah but instead of taking five trips it’ll take four something like that. . But I got consumers get tired of High Flyers for sure. . Yeah. . And that definitely impacts the leisure side. . What about the business side. . Tom John and Lisa have their business class tickets booked to Jackson Hole in a couple of weeks. . Is everybody else doing that too. . Yes. . I think what we’re seeing is business travel resume. . We might not be seeing five people going to that conference. . We may only see three but we’re definitely seeing an increase in business travel. . Earlier this year we were down still down 50 to 60 percent. . Now we’re down closer to 20 and 30 percent. . And a couple of the airlines and their recent earnings calls talked about it being down 15 to 20 percent. . So you’re seeing that increase especially as return to office happens as more people go back to their offices at least two days a week. . You’re seeing that travel come back. . Elaine I talked to Lisa Abramowicz this week in Broome. . So to me she said Tom you got to watch. . Guess who’s coming to dinner just to see the opening of the movie which is a magisterial United Airlines 747 flying from another time and place. . So there I am channeling Abramowitz Spencer Tracy Katharine Hepburn and Sidney Party Day. . And it was all great. . But it’s about the image of the airline. . So you are long on someone like Kirby’s United Airlines. . Great. . The fact is USO has gone 90 to 20 and you now climb back up to 40. . Do you envision that you will yell and the others can get back to that market. . I have 90. . Probably not. . And the reason we say that is even if the earnings are what they forecast. . So back when we had our hundred dollar price target on United we were talking about them doing thirteen dollars in earnings in 2020. . And of course the pandemic interfered. . So we pushed that out to twenty twenty three or four. . But remember they issued shares during the pandemic to get through it. . And so when you add in the increase of the shares even if they get back to the net income no increase in shares outstanding means that you’re not getting back to the thirteen dollars. . Maybe you’re getting back to 12 and instead of nine multiple maybe as an eight multiple because the airlines are still losing money in a recession which if you recall that 2018 2019 timeframe people were saying oh the airlines will never lose money again and 2020 prove how wrong that that forecast was. . You know you’re dead on about you know Newark to Paris United Airlines. . Kirby’s got it on sale this week. . That was a nine thousand dollar ticket. . And I’m seeing a quote in October for four thousand six hundred eighty three. . That’s a while. . Change isn’t it. . Yes. . Yes it is significantly lower. . And well no I get it. . October is not a time when a lot of people travel. . It’s more business time. . Yes it is. . But yeah I mean so it can settle. . So I’ll leave. . You’ll join us in Paris with Caylee in a surveillance road trip. . Tickets are on you Tom. . Okay. . Thank you. . Hello Becker. . Thank you so much for planning the next surveillance junket. . As they say she is with Cohen and definitive on travel. . Good NIKKEI. . I’m sorry. . That’s gotta be good news from the shock of what we’ve been paying. . Yeah I think we’ve gotten a lot of good news maybe this week Tom and that it has been cooler inflation. . Good news is good news again for the equity market depending on how today NASDAQ. . One hundred could be up for a fourth straight week. . Well I’m not going to give my opinion here. . You know I could I could pop. . I mean Paul Sweeney wants me to do a fractional buy on the Friday opening but I don’t think I’ve got the courage to pull them. . I just want to attach to the cash like that attached to the Kailey Leinz. . Thank you for your support this week. . It’s been a really really valuable as well. . Futures advance up 21. . Stay with us. . This is Bloomberg. .",
            "url": "https://safenumz.github.io/blog/english/2022/08/12/bloomberg-surveillance.html",
            "relUrl": "/english/2022/08/12/bloomberg-surveillance.html",
            "date": " • Aug 12, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "[Recommender System] BPR: Bayesian Personalized Ranking from Implicit Feedback",
            "content": "BPR: Bayesian Personalized Ranking from Implicit Feedback . . Abstract . . Implicit Feedback으로 추천 알고리즘을 다루는 논문 | Matrix Factorization과 (adaptive) k-nearest-neighbor (kNN)으로 personalized ranking 실험 | Bayesian을 활용한 최적화 기법(BPR-Opt)을 제시 | 위의 최적화 기법을 적용하여 기존의 MF, kNN 보다 더 우수한 성능을 증명 | . Contribution . . Maximum Posterior Estimator에 기반한 최적화 기법인 BPR-Opt를 제안 | BPR-Opt를 위한 LearnBPR를 제안, 기존 성능보다 우수 | LearnBPR을 그 당시 최신 모델에 적용 | BPR-Opt가 다른 방법보다 우수함을 실험적으로 증명 | . Introduction &amp; Related Work . 추천 시스템을 구현하기 위해 2가지 형태가 일반적; Explicit과 Implicit 데이터 | 보통 Implicit 데이터가 더 많은 비중을 차지하고, 더 어려운 문제 | Implicit 데이터로 User의 선호도 또는 취향을 파악해야 함 | Implicit feedback으로 ranking을 추천할 수 있는 알고리즘을 제시 | 저자가 정의한 ranking을 추천하기 위한 Optimization 알고리즘 item $i$와 $j$가 있고, item $i$보다 item $j$를 더 선호 함 &rarr; $item ;i &gt; item ;j$ | 이 때, 학습할 파라미터를 최적화하는 것이 목적 | . | . Personalized Ranking . Personalized Ranking이란 User에게 ranked list of items를 제안(또는 추천) 하는 것 | Item Recommendation이라고도 함 | 본 논문은 Implicit Feedback으로 user의 취향을 고려 | implicit feedback은 주로 positive feedback이 대부분 | Non-observed Item을 다루는 것이 중요한 포인트Non-observed Item = real negative feedback + missing values . | . Formalization . $U$는 모든 users의 집합, $I$는 모든 items의 집합 | 이 때, 각 user별 personalized total ranking(${&gt;}_{u} subset I^2$)를 구하는 것 | ${&gt;}_{u}$는 다음과 같은 특성을 지님$ forall i, j in I :i neq j Rightarrow i , {&gt;}_{u} , j lor j , {&gt;}_{u} , i quad (totality)$ &gt; $ forall i, j in I :i , {&gt;}_{u} , j land j , {&gt;}_{u} , i Rightarrow i = j quad (antisymmetry)$ &gt; $ forall i, j, k in I :i , {&gt;}_{u} , j land j , {&gt;}_{u} , k Rightarrow i , {&gt;}_{u} , k quad (transitivity)$ . | . . 기존에 많이 사용하던 데이터 처리 방법 | ? 는 관측되지 않은 데이터, + 는 관측된 데이터 | 0 은 관측되지 않은 데이터 = 선호하지 않음 | 1 은 관측된 데이터 = 선호함 | Implicit data를 다루는 중요한 문제점이 있음 | . . &#51200;&#51088;&#44032; &#51228;&#50504;&#54616;&#45716; &#48169;&#48277; . 전체 데이터를 pairwise preference $i {&gt;}_{u} i$로 나타냄 | + 는 user가 $item , j$에 비해 $item , i$를 선호 | - 는 user가 $item , i$에 비해 $item , j$를 선호 | User가 보지 못한 $item , j$에 비해 관측한 $item , i$를 더 선호한다고 가정 | 유저가 $(i, j)$ 모두 관측했거나, 관측하지 않았다면 어떤 선호도도 추론할 수 없음$ {D}_{s} := {(u, i, j) , | , i in {I}_{u}^{+} land j in I setminus {I}_{u}^{+} }$ . | User u는 $item , j$ 보다 $item , i$를 더 선호 | ${&gt;}_{u}$는 antisymmetric이기 때문에 negative는 implicit이라고 가정 | . &#51200;&#51088;&#44032; &#51228;&#50504;&#54616;&#45716; &#48169;&#48277;&#51032; &#51109;&#51216; . 학습셋 ${D}_{s}$은 positive, negative, missing value로 구성 | 아이템쌍 $(i, j)$에서 관측되지 않은 결측값은 테스트셋 | 학습셋과 테스트셋은 disjoint | 학습셋은 실제 랭킹 목적에 맞게 만들어짐 | 관측된 데이터의 부분집합인 ${D}_{s}$을 학습 데이터로 사용 | . Bayesian Personalized Ranking (BPR) . 주어진 학습 데이터 ${D}_{s}$로 Bayesian Personalized Ranking 구하는 방법을 설명 | $p(i , {&gt;}_{u} , j | Theta )$에 대한 likelihood function 과 model parameter $p( Theta)$에 대한 prior probability를 사용한 베이지안 문제로 볼 수 있음 | 다음과 같은 순서로 selection 구성 4.1 BPR Optimization Criterion 4.1.1 Analogies to AUC optimization | . | 4.2 BPR Learning Algorithm | 4.3 Learning models with BPR 4.3.1 Matrix Factorization | 4.3.2 Adaptive K-Nearest Neighbor | . | . | . BPR Optimization Criterion . Totality와 Antisymmetry에 따라 다음과 같이 정리할 수 있음 | . $$ { Large P( Theta | , {&gt;}_{u}) propto p({&gt;}_{u} | , Theta)p( Theta)} $$ . $ displaystyle prod_{u in U} p({&gt;}_{u} | , Theta) = displaystyle prod_{(u,i,j) in U times I times J)}{p(i , {&gt;}_{u} , j | , Theta )}^{ delta((u,i,j) in {D}_{s})} cdot {(1 - p(i , {&gt;}_{u} , j| Theta))}^{ delta((u,i,j) notin {D}_{s}} $ . 이 때, $ delta$ 는 $ delta(b) := begin{cases} 1, &amp; mbox{if b is true} 0, &amp; mbox{else} end{cases} $ . $ displaystyle prod_{u in U} p(&gt;_{u} , | Theta) = displaystyle prod_{u,i,j in D_{s}} p(i , &gt;_{u} , j| Theta)$ . $$ { Large p(i , &gt;_{u} , j| Theta) := sigma( widehat{x_{uij}}( Theta))} $$ $ widehat{x_{uij}}( Theta)$는 $user , u$와 $item , i, j$의 관계를 나타내는 모델 파라미터 벡터의 실제 함수 . 즉, $ widehat{x_{uij}}( Theta)$를 추정하면서 $u,i,j$ 사이의 관계를 모델링 | 전체 순서를 모델링하는 것이 비교적 간단해 짐 | . $$ Large { p( Theta | , &gt;_{u} ) propto p(&gt;_{u} | Theta)p( Theta) } $$ 사전확률분포 $p( Theta) sim N(0, Sigma_{ Theta})$로 나타내고, $ Sigma_{ Theta} = lambda_{ Theta}I$로 정함 | Likelihood와 prior 모두 정의했으므로, posterior를 공식에 따라 구할 수 있음 | . . 미분가능하기 때문에 gradient descent로 optimization 함 | SGD가 적절한 선택지가 아니기 때문에 LEARN-BPR을 제안 Triples를 학습하는 Bootstrap 기반 Stochatic Gradient-descent 알고리즘 | . | 랜덤하게 triples를 선택하는 SGD 알고리즘을 사용 동일한 쌍의 데이터 선택할 확률이 적음 | 데이터 전수가 아닌 bootstrap sampling만 해도 데이터가 많기 때문에 충분 | . | . Matrix Factorization | . . Adaptive k-Nearest Neighbor | . . LearnBPR 최적화를 위해 모든 모델 파라미터 $ Theta$에 대한 $ widehat{x_{uij}}$ 의 gradient를 알면 됨 | . Evaluation . . Conclusion . 사후확률을 최대화하려는 베이지안에 의한 새로운 방법을 제안 | Personalized Ranking을 위한 optimization 기법(BPR-OPT)을 제안 | Bootstrap Sampling을 통한 Stochastic Gradient Descent를 사용하여 모델 파라미터를 업데이트 함 | 기존 Matrix Factorization, k-Nearest Neighbor 모두 적용했으며 성능이 우수 | .",
            "url": "https://safenumz.github.io/blog/paper/2022/08/10/paper-bayesian-personalized-ranking.html",
            "relUrl": "/paper/2022/08/10/paper-bayesian-personalized-ranking.html",
            "date": " • Aug 10, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "[MacOS] Finder에서 SFTP 연결",
            "content": "Environment . MacOS Monterey 12.5 | . sshfs 설치 . $ brew install --cask macfuse $ brew install gromgit/fuse/sshfs-mac $ brew link --overwrite sshfs-mac . sshfs mount . sshfs &lt;REMOTE_USER_NAME&gt;@&lt;REMOTE_IP_ADDRESS&gt;:&lt;REMOTE_PATH&gt; &lt;LOCAL_PATH&gt; -p &lt;REMOTE_PORT&gt; -ovolname=&lt;VOLUME_NAME&gt; . sshfs umount . $ umount -f &lt;LOCAL_PATH&gt; .",
            "url": "https://safenumz.github.io/blog/etc/2022/08/01/macos-finder-sftp-connection.html",
            "relUrl": "/etc/2022/08/01/macos-finder-sftp-connection.html",
            "date": " • Aug 1, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "[MacOS] 창 항상 위로 AfloatX",
            "content": "Environment . MacOS Monterey 12.5 | . System Integrity 일부 비활성화 . 부팅 시 command + R 눌러 Recovery mode 진입 | 터미널 열고 아래 명령어 실행 후 재부팅 | . $ csrutil enable --without fs --without nvram --without debug . Library Validation 비활성화 . $ sudo defaults write /Library/Preferences/com.apple.security.libraryvalidation.plist DisableLibraryValidation -bool true . MacForge 설치 . MacForge 다운로드 후 압축 풀고 AfloatX 설치 후 재부팅 | 현재 Afloat는 불안정하고 버전업에 따른 유지 보수 안됨, 대신 AfloatX을 설치함 | . # MacForge 다운로드 $ wegt https://github.com/w0lfschild/app_updates/raw/master/MacForge1/MacForge.zip . 서비스 등록 후 단축키 등록 . 아래 Apple Script로 workflow 만들고, 단축키 등록 | . on run -- get active application tell application &quot;System Events&quot; to set activeApp to name of first application process whose frontmost is true -- right click that application in the dock tell application &quot;System Events&quot; to tell UI element activeApp of list 1 of process &quot;Dock&quot; perform action &quot;AXShowMenu&quot; click menu item &quot;AfloatX&quot; of menu 1 click menu item &quot;Float Window&quot; of menu 1 of menu item &quot;AfloatX&quot; of menu 1 end tell end run .",
            "url": "https://safenumz.github.io/blog/etc/2022/08/01/mac-afloat.html",
            "relUrl": "/etc/2022/08/01/mac-afloat.html",
            "date": " • Aug 1, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "[Project] 따릉이 대여량 예측 프로젝트",
            "content": ". 따릉이 대여량 예측 프로젝트 . . . 2022.06.13 . 안전수 . . Contents . 1. Preparation . 1.1 라이브러리 설치 1.2 한글 폰트 설치 1.3 라이브러리 로드 1.4 시각화 설정 . 2. Data Exploration . 2.1 데이터 로드 2.2 데이터 기본 정보 2.3 기술 통계량 2.4 Handling Missing Data 2.4.1 tempMax 결측치 채우기 2.4.2 windspeed 결측치 채우기 2.5 Exploratory Data Analysis (EDA) 2.5.1 일 기준 그룹화 2.5.2 datetime decomposition 2.5.3 year 2.5.4 month, day, dayofweek, season 2.5.5 holiday, workingday 2.5.6 timeseries 2.5.7 weather . 3. Preprocessing . 3.1 Data Load 3.2 Feature Engineering 3.2.1 일 기준 그룹화 및 기본 변수 확장 3.2.2 연속형 변수 확장 3.2.3 이산형 변수 확장 3.3 Train, Test Dataset 분리 3.4 Scaling 3.5 연속형 변수 축소 . 4. Modeling . 4.1 Model 1: Linear Regression 4.2 Model 2: Linear Regression 4.3 Model 3: Linear Regression 4.4 Model 4: SARIMAX 4.5 Model 5: XGBoost . 5. Conclusion . 5.1 Model Performance Comparison 5.1.1 Training Model Performance 5.1.2 Testing Model Performance . 1. Preparation . 1.1 &#46972;&#51060;&#48652;&#47084;&#47532; &#49444;&#52824; . import os import importlib required_libs = [&#39;numpy&#39;, &#39;pandas&#39;, &#39;scipy&#39;, &#39;sklearn&#39;, &#39;statsmodels&#39;, &#39;xgboost&#39;, &#39;matplotlib&#39;, &#39;seaborn&#39;, &#39;missingno&#39;, &#39;holidays&#39;, &#39;pyarrow&#39;, &#39;openpyxl&#39;, &#39;boto3&#39;, &#39;wget&#39;, &#39;zipfile&#39;, &#39;graphviz&#39;] for lib in required_libs: try: importlib.import_module(lib) print(f&#39;{lib} has already been installed&#39;, flush=True) except ImportError: try: print(f&#39;Install {lib}&#39;, flush=True) os.system(f&#39;pip3 install {lib}&#39;) except: print(f&#39;Failed to install {lib}&#39;, flush=True) . numpy has already been installed pandas has already been installed scipy has already been installed sklearn has already been installed statsmodels has already been installed xgboost has already been installed matplotlib has already been installed seaborn has already been installed missingno has already been installed holidays has already been installed pyarrow has already been installed openpyxl has already been installed boto3 has already been installed wget has already been installed zipfile has already been installed graphviz has already been installed . 1.2 &#54620;&#44544; &#54256;&#53944; &#49444;&#52824; . import os import shutil import wget import zipfile import matplotlib import matplotlib.font_manager as fm import IPython nanum_font_list = [f.name for f in fm.fontManager.ttflist if &#39;NanumGothic&#39; in f.name] if not &#39;NanumGothic&#39; in nanum_font_list: font_url = &#39;http://cdn.naver.com/naver/NanumFont/fontfiles/NanumFont_TTF_ALL.zip&#39; tmp_font_file_name = os.path.basename(font_url) tmp_font_dir = os.path.join(os.getcwd(), os.path.splitext(tmp_font_file_name)[0]) tmp_font_path = os.path.join(tmp_font_dir, tmp_font_file_name) mpl_font_dir = os.path.join(os.path.dirname(matplotlib.__file__), &#39;mpl-data&#39;, &#39;fonts&#39;, &#39;ttf&#39;) mpl_cache_dir = os.path.join(os.path.expanduser(&#39;~&#39;), &#39;.cache&#39;, &#39;matplotlib&#39;) target_font = &#39;NanumGothic.ttf&#39; if not os.path.isdir(tmp_font_dir): os.makedirs(tmp_font_dir, exist_ok=True) wget.download(font_url, out=tmp_font_dir) with zipfile.ZipFile(tmp_font_path, &#39;r&#39;) as zf: zf.extractall(tmp_font_dir) shutil.move(os.path.join(tmp_font_dir, target_font), os.path.join(mpl_font_dir, target_font)) shutil.rmtree(tmp_font_dir) shutil.rmtree(mpl_cache_dir) IPython.Application.instance().kernel.do_shutdown(True) . 1.3 &#46972;&#51060;&#48652;&#47084;&#47532; &#47196;&#46300; . import warnings; warnings.filterwarnings(&#39;ignore&#39;) from io import BytesIO import os import boto3 import pandas as pd import numpy as np import matplotlib.pyplot as plt import matplotlib.font_manager as fm import seaborn as sns import missingno as msno import holidays import scipy from scipy import stats from scipy.stats import pearsonr, spearmanr from scipy.signal import savgol_filter from sklearn.model_selection import train_test_split from sklearn import preprocessing from sklearn import metrics import statsmodels.api as sm import statsmodels.tsa.api as tsa from statsmodels.tsa.stattools import adfuller from statsmodels.stats.outliers_influence import variance_inflation_factor import xgboost . 1.4 &#49884;&#44033;&#54868; &#49444;&#51221; . %matplotlib inline %config InlineBacked.figure_format = &#39;retina&#39; pd.set_option(&#39;display.precision&#39;, 4) pd.set_option(&#39;display.float_format&#39;, lambda x: &#39;%.2f&#39; % x) sns.set_style(&#39;whitegrid&#39;) sns.set_palette(&#39;colorblind&#39;) sns.set_color_codes() nanum_font_list = [f.name for f in fm.fontManager.ttflist if &#39;NanumGothic&#39; in f.name] plt_params = { &#39;figure.figsize&#39;: [16, 5], &#39;figure.titlesize&#39;: 20, &#39;figure.titleweight&#39;: &#39;bold&#39;, &#39;font.family&#39;: &#39;NanumGothic&#39; if &#39;NanumGothic&#39; in nanum_font_list else &#39;AppleGothic&#39;, &#39;font.size&#39;: 10, &#39;font.weight&#39;: &#39;bold&#39;, &#39;axes.unicode_minus&#39;: False, &#39;axes.labelsize&#39;: 10, &#39;axes.labelweight&#39;: &#39;bold&#39;, &#39;axes.titlesize&#39;: 20, &#39;axes.titlelocation&#39;: &#39;left&#39;, &#39;axes.titleweight&#39;: &#39;bold&#39;, &#39;xtick.labelsize&#39;: 10, &#39;ytick.labelsize&#39;: 10, &#39;legend.fontsize&#39;: 10, &#39;legend.loc&#39;: &#39;right&#39; } plt.rcParams.update(plt_params) print(&#39;Current Font: &#39;, plt_params.get(&#39;font.family&#39;, &#39;&#39;)) . Current Font: NanumGothic . 2. Data Exploration . 2.1 &#45936;&#51060;&#53552; &#47196;&#46300; . aws_access_key_id = &#39;bike&#39; aws_secret_access_key = &#39;bikebike&#39; endpoint_url = &#39;http://safenum.iptime.org:10170&#39; data_version = &#39;v3&#39; client = boto3.client( &#39;s3&#39;, aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key, endpoint_url=endpoint_url, verify=False ) response = client.get_object(Bucket=&#39;bike&#39;, Key=f&quot;/{data_version}/parquet/bike_weather_{data_version}.parquet&quot;) raw_df = pd.read_parquet(BytesIO(response[&#39;Body&#39;].read()), engine=&#39;pyarrow&#39;) raw_df.head() . rentalDateTime rentalOfficeNum rentalCount dateTime temp tempMin tempMax precipitation windspeed humidity . 0 2015-09-19 | 101 | 5 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 1 2015-09-19 | 102 | 12 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 2 2015-09-19 | 103 | 18 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 3 2015-09-19 | 104 | 11 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 4 2015-09-19 | 105 | 15 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 2.2 &#45936;&#51060;&#53552; &#44592;&#48376; &#51221;&#48372; . raw_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 2857142 entries, 0 to 2857141 Data columns (total 10 columns): # Column Dtype -- 0 rentalDateTime datetime64[ns] 1 rentalOfficeNum object 2 rentalCount int64 3 dateTime datetime64[ns] 4 temp float64 5 tempMin float64 6 tempMax float64 7 precipitation float64 8 windspeed float64 9 humidity float64 dtypes: datetime64[ns](2), float64(6), int64(1), object(1) memory usage: 218.0+ MB . 2.3 &#44592;&#49696;&#53685;&#44228;&#47049; . raw_df.describe() . rentalCount temp tempMin tempMax precipitation windspeed humidity . count 2857142.00 | 2857142.00 | 2857142.00 | 2856252.00 | 2857142.00 | 2854345.00 | 2857142.00 | . mean 31.24 | 13.88 | 9.79 | 18.70 | 3.31 | 2.13 | 61.51 | . std 35.79 | 10.37 | 10.64 | 10.41 | 11.67 | 0.68 | 14.98 | . min 1.00 | -14.90 | -18.60 | -10.70 | 0.00 | 0.60 | 17.90 | . 25% 9.00 | 5.60 | 1.30 | 10.10 | 0.00 | 1.70 | 50.40 | . 50% 21.00 | 14.60 | 10.00 | 20.10 | 0.00 | 2.00 | 62.00 | . 75% 41.00 | 23.00 | 19.20 | 27.50 | 0.30 | 2.50 | 71.50 | . max 1440.00 | 33.70 | 30.30 | 39.60 | 144.50 | 6.00 | 98.10 | . 2.4 Handling Missing Data . msno.matrix(raw_df, figsize=(16, 5)) plt.show() . raw_df.isnull().sum() . rentalDateTime 0 rentalOfficeNum 0 rentalCount 0 dateTime 0 temp 0 tempMin 0 tempMax 890 precipitation 0 windspeed 2797 humidity 0 dtype: int64 . 2.4.1 tempMax &#44208;&#52769;&#52824; &#52292;&#50864;&#44592; . tempMax(일중 최고 기온)이 Null 값이 경우는 2017-10-12 하루 | . raw_df[raw_df[&#39;tempMax&#39;].isnull()][&#39;rentalDateTime&#39;].unique() . array([&#39;2017-10-12T00:00:00.000000000&#39;], dtype=&#39;datetime64[ns]&#39;) . 2017-10-12의 temp에 전일과 익일의 tempMax와 temp의 차이의 평균을 더하여 2017-10-12의 tempMax의 추정치를 계산 | 이를 활용하여 tempMax의 결측치를 채워줌 | . tempMax_estimate = raw_df[raw_df[&#39;rentalDateTime&#39;] == &#39;2017-10-12&#39;][&#39;temp&#39;].iloc[0] + ( raw_df[raw_df[&#39;rentalDateTime&#39;] == &#39;2017-10-11&#39;][&#39;tempMax&#39;].iloc[0] - raw_df[raw_df[&#39;rentalDateTime&#39;] == &#39;2017-10-11&#39;][&#39;temp&#39;].iloc[0] + raw_df[raw_df[&#39;rentalDateTime&#39;] == &#39;2017-10-13&#39;][&#39;tempMax&#39;].iloc[0] - raw_df[raw_df[&#39;rentalDateTime&#39;] == &#39;2017-10-13&#39;][&#39;temp&#39;].iloc[0] ) / 2 raw_df[&#39;tempMax&#39;] = raw_df[&#39;tempMax&#39;].fillna(tempMax_estimate) . 2.4.2 windspeed &#44208;&#52769;&#52824; &#52292;&#50864;&#44592; . windspeed(풍속)의 결측치는 2017-10-14, 2017-12-05, 2017-12-06에 발생 | . raw_df[raw_df[&#39;windspeed&#39;].isnull()][&#39;rentalDateTime&#39;].unique() . array([&#39;2017-10-14T00:00:00.000000000&#39;, &#39;2017-12-05T00:00:00.000000000&#39;, &#39;2017-12-06T00:00:00.000000000&#39;], dtype=&#39;datetime64[ns]&#39;) . windspeed의 결측치는 forward fill method로 채워줌 | . raw_df[&#39;windspeed&#39;] = raw_df[&#39;windspeed&#39;].fillna(method=&#39;ffill&#39;) . 결측치 처리 완료 | . raw_df.isnull().sum() . rentalDateTime 0 rentalOfficeNum 0 rentalCount 0 dateTime 0 temp 0 tempMin 0 tempMax 0 precipitation 0 windspeed 0 humidity 0 dtype: int64 . 2.5 Exploratory Data Analysis (EDA) . 2.5.1 &#51068; &#44592;&#51456; &#44536;&#47353;&#54868; . 전체 대여량 합계 추이를 시각화하기 위해 rentalDateTime을 기준으로 groupby한 byday_df를 생성 | . byday_df = raw_df.groupby(&#39;rentalDateTime&#39;).agg({&#39;rentalCount&#39;: &#39;sum&#39;, &#39;temp&#39;: &#39;mean&#39;, &#39;tempMin&#39;: &#39;mean&#39;, &#39;tempMax&#39;: &#39;mean&#39;, &#39;precipitation&#39;: &#39;mean&#39;, &#39;windspeed&#39;: &#39;mean&#39;, &#39;humidity&#39;: &#39;mean&#39;}) byday_df.tail() . rentalCount temp tempMin tempMax precipitation windspeed humidity . rentalDateTime . 2021-12-27 39337 | -7.60 | -12.90 | -3.90 | 0.00 | 1.70 | 60.90 | . 2021-12-28 47483 | -4.10 | -8.50 | -0.90 | 0.00 | 2.20 | 73.80 | . 2021-12-29 48169 | 0.40 | -3.80 | 5.90 | 0.20 | 2.60 | 72.90 | . 2021-12-30 45473 | -3.90 | -6.80 | 0.20 | 0.00 | 3.30 | 48.50 | . 2021-12-31 37704 | -6.70 | -8.80 | -3.90 | 0.00 | 3.50 | 35.90 | . 2.5.2 datetime decomposition . EDA를 위해 rentalDateTime을 year, month, day, dayofweek, season으로 분해 dayofweek는 월(0), 화(1) ... 토(5), 일(6)로 구분됨 | season은 겨울(1), 봄(2), 여름(3), 가을(4)로 구분 | . | . byday_df[&#39;year&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.year byday_df[&#39;month&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.month byday_df[&#39;day&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.day byday_df[&#39;dayofweek&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.dayofweek byday_df[&#39;season&#39;] = pd.Series(byday_df.index, index=byday_df.index).apply(lambda x: int((x.month % 12 + 3) // 3)) byday_df.head() . rentalCount temp tempMin tempMax precipitation windspeed humidity year month day dayofweek season . rentalDateTime . 2015-09-19 681 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | 2015 | 9 | 19 | 5 | 4 | . 2015-09-20 843 | 22.10 | 17.90 | 28.30 | 0.00 | 2.00 | 69.00 | 2015 | 9 | 20 | 6 | 4 | . 2015-09-21 512 | 22.60 | 16.50 | 29.40 | 0.00 | 1.50 | 62.10 | 2015 | 9 | 21 | 0 | 4 | . 2015-09-22 735 | 23.90 | 18.00 | 31.00 | 0.00 | 1.80 | 48.40 | 2015 | 9 | 22 | 1 | 4 | . 2015-09-23 744 | 22.00 | 19.00 | 26.10 | 0.00 | 1.70 | 57.90 | 2015 | 9 | 23 | 2 | 4 | . 2.5.3 year . 2015년 9월 19일 따릉이 서비스 출시 이후 7년 간, 공공자전거 대여 시장은 매년 가파른 성장을 보이고 있음 | . sns.boxplot(data=byday_df, x=&#39;year&#39;, y=&#39;rentalCount&#39;) plt.title(&#39;연도별 대여량&#39;) plt.tight_layout() sns.despine() plt.show() . 2.5.4 month, day, dayofweek, season . 월별 대여량의 차이가 뚜렷하나나, 일별 대여량의 차이는 적음 | 요일은 주중과 주말의 차이가 있을 가능성이 있음 | 계절의 차이도 뚜렷함 여름이 가장 많고 겨울이 가장 적음 | . fig = plt.figure(figsize=(16, 10)); gridsize = (2, 2) ax1 = plt.subplot2grid(gridsize, (0, 0)) ax2 = plt.subplot2grid(gridsize, (0, 1)) ax3 = plt.subplot2grid(gridsize, (1, 0)) ax4 = plt.subplot2grid(gridsize, (1, 1)) sns.barplot(data=byday_df, x=&#39;month&#39;, y=&#39;rentalCount&#39;, ax=ax1) sns.barplot(data=byday_df, x=&#39;day&#39;, y=&#39;rentalCount&#39;, ax=ax2) sns.barplot(data=byday_df, x=&#39;dayofweek&#39;, y=&#39;rentalCount&#39;, ax=ax3) sns.barplot(data=byday_df, x=&#39;season&#39;, y=&#39;rentalCount&#39;, ax=ax4) ax1.set_title(&#39;월별 대여량&#39;) ax2.set_title(&#39;일별 대여량&#39;) ax3.set_title(&#39;요일별 대여량&#39;) ax4.set_title(&#39;계절별 대여량&#39;) plt.tight_layout() sns.despine() plt.show() . 2.5.5 holiday, workingday . kr_holidays = holidays.KR() byday_df[&#39;holiday&#39;] = pd.Series(byday_df.index, index=byday_df.index).apply(lambda x: 1 if x in kr_holidays else 0) byday_df[&#39;workingday&#39;] = byday_df.apply(lambda x: 1 if (x[&#39;dayofweek&#39;] != 5 and x[&#39;dayofweek&#39;] != 6) and x[&#39;holiday&#39;] == 0 else 0, axis=1) byday_df.tail(7) . rentalCount temp tempMin tempMax precipitation windspeed humidity year month day dayofweek season holiday workingday . rentalDateTime . 2021-12-25 17389 | -11.70 | -14.40 | -7.30 | 0.00 | 3.90 | 42.40 | 2021 | 12 | 25 | 5 | 1 | 1 | 0 | . 2021-12-26 15232 | -12.10 | -15.50 | -7.30 | 0.00 | 3.10 | 43.50 | 2021 | 12 | 26 | 6 | 1 | 0 | 0 | . 2021-12-27 39337 | -7.60 | -12.90 | -3.90 | 0.00 | 1.70 | 60.90 | 2021 | 12 | 27 | 0 | 1 | 0 | 1 | . 2021-12-28 47483 | -4.10 | -8.50 | -0.90 | 0.00 | 2.20 | 73.80 | 2021 | 12 | 28 | 1 | 1 | 0 | 1 | . 2021-12-29 48169 | 0.40 | -3.80 | 5.90 | 0.20 | 2.60 | 72.90 | 2021 | 12 | 29 | 2 | 1 | 0 | 1 | . 2021-12-30 45473 | -3.90 | -6.80 | 0.20 | 0.00 | 3.30 | 48.50 | 2021 | 12 | 30 | 3 | 1 | 0 | 1 | . 2021-12-31 37704 | -6.70 | -8.80 | -3.90 | 0.00 | 3.50 | 35.90 | 2021 | 12 | 31 | 4 | 1 | 0 | 1 | . fig = plt.figure(figsize=(16, 5)); gridsize = (1, 2) ax1 = plt.subplot2grid(gridsize, (0, 0)) ax2 = plt.subplot2grid(gridsize, (0, 1)) sns.barplot(x=&#39;workingday&#39;, y=&#39;rentalCount&#39;, data=byday_df, ax=ax1) sns.kdeplot(byday_df[byday_df[&#39;workingday&#39;] == 0][&#39;rentalCount&#39;], color=&#39;red&#39;, shade=True, ax=ax2) sns.kdeplot(byday_df[byday_df[&#39;workingday&#39;] == 1][&#39;rentalCount&#39;], color=&#39;blue&#39;, shade=True, ax=ax2) ax1.set_title(&#39;workingday 여부에 따른 대여량 차이&#39;) ax2.set_title(&#39;workingday 여부에 따른 대여량 분포 비교&#39;) plt.tight_layout() sns.despine() plt.show() . workingday 여부에 따라 대여량 평균 차이가 있음, t-test 결과 p-value 0.05 미만으로 통계적으로 유의함 | . t_stat, p_val = stats.ttest_ind(byday_df[byday_df[&#39;workingday&#39;] == 0][&#39;rentalCount&#39;], byday_df[byday_df[&#39;workingday&#39;] == 1][&#39;rentalCount&#39;], equal_var=True) print(&#39;t-statistics: {}, p-value: {}&#39;.format(t_stat, p_val)) . t-statistics: -2.435752004042174, p-value: 0.014936571214526413 . 2.5.6 timeseries . 추세도 있고 계절성도 뚜렷한 전형적인 Non-Stationary Timeseries 데이터 | . byday_df[&#39;year_month&#39;] = pd.Series(byday_df.index, index=byday_df.index).apply(lambda x: f&quot;{x.year}-{x.month}&quot;) . plt.figure(figsize=(16, 5)) sns.boxplot(data=byday_df, x=&#39;year_month&#39;, y=&#39;rentalCount&#39;) plt.tick_params(axis=&#39;x&#39;, which=&#39;major&#39;, labelrotation=90) plt.title(&#39;연-월 기준 대여량 추이&#39;) plt.tight_layout() sns.despine() plt.show() . try: decomp = tsa.seasonal_decompose(byday_df[&#39;rentalCount&#39;], model=&#39;additive&#39;, freq=365) except: decomp = tsa.seasonal_decompose(byday_df[&#39;rentalCount&#39;], model=&#39;additive&#39;, period=365) decomp.plot().set_size_inches(16, 10) plt.tight_layout() plt.show() . 2.5.7 weather . 다중공선성 문제를 예방하기 위해 피어슨, 스피어만 method로 상관관계 파악 | 습도(humidity)는 일평균기온(temp), 강수량(precipitation)과 상관성이 높아 함께 쓰기 어려움 | 일평균기온(temp)와 강수량(precipitation) 정도가 모델링에 사용 가능하다고 판단됨 | . def corr_pval(df, method): corr_columns = df.columns fmatrix = df.values rows, cols = fmatrix.shape corr = np.ones((cols, cols), dtype=float) pval = np.ones((cols, cols), dtype=float) for i in range(cols): for j in range(cols): if i == j: corr_, pval_ = 1., 1. else: corr_, pval_ = globals()[f&#39;{method}r&#39;](fmatrix[:,i], fmatrix[:,j]) corr[j][i] = corr_ pval[j][i] = pval_ corr = pd.DataFrame(corr, index=corr_columns, columns=corr_columns) pval = pd.DataFrame(pval, index=corr_columns, columns=corr_columns) return corr, pval corr_columns = [&#39;temp&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;, &#39;humidity&#39;, &#39;rentalCount&#39;] corr_data = byday_df[corr_columns] pearson_corr, pearson_pval = corr_pval(corr_data, method=&#39;pearson&#39;) spearman_corr, spearman_pval = corr_pval(corr_data, method=&#39;spearman&#39;) . fig = plt.figure(figsize=(16, 14)); gridsize = (2, 2) ax1 = plt.subplot2grid(gridsize, (0, 0)) ax2 = plt.subplot2grid(gridsize, (0, 1)) ax3 = plt.subplot2grid(gridsize, (1, 0)) ax4 = plt.subplot2grid(gridsize, (1, 1)) mask = np.zeros_like(pearson_corr, dtype=np.bool) mask[np.triu_indices_from(mask)] = True cmap = sns.diverging_palette(220, 10, as_cmap=True) sns.heatmap(pearson_corr, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0, square=True, annot=True, annot_kws={&#39;size&#39;: 13}, fmt=&#39;.2g&#39;, linewidths=0.2, cbar_kws={&#39;shrink&#39;: .8}, ax=ax1) sns.heatmap(pearson_pval, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0, square=True, annot=True, annot_kws={&#39;size&#39;: 13}, fmt=&#39;.2g&#39;, linewidths=0.2, cbar_kws={&#39;shrink&#39;: .8}, ax=ax2) sns.heatmap(spearman_corr, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0, square=True, annot=True, annot_kws={&#39;size&#39;: 13}, fmt=&#39;.2g&#39;, linewidths=0.2, cbar_kws={&#39;shrink&#39;: .8}, ax=ax3) sns.heatmap(spearman_pval, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0, square=True, annot=True, annot_kws={&#39;size&#39;: 13}, fmt=&#39;.2g&#39;, linewidths=0.2, cbar_kws={&#39;shrink&#39;: .8}, ax=ax4) ax1.set_title(&#39;날씨 변수들간의 피어슨 상관 분석&#39;) ax2.set_title(&#39;p-value&#39;) ax3.set_title(&#39;날씨 변수들간의 스피어만 상관 분석&#39;) ax4.set_title(&#39;p-value&#39;) plt.tight_layout() sns.despine() plt.show() . 풍속(windspeed)는 y값인 rentalCount과 상관성이 매우 낮아 전체적인 측면에서 본다면 영향력이 없을 것으로 보이나, 구간별로 나누면 풍속이 2이하일 경우, 4.5이상인 경우에 의미가 있음 | . print(&#39;풍속 2이하 구간 풍속 대여량 상관계수: &#39;, byday_df[(byday_df[&#39;windspeed&#39;] &lt; 2)][[&#39;rentalCount&#39;, &#39;windspeed&#39;]].corr().iloc[1, 0]) print(&#39;풍속 2~3 구간 풍속 대여량 상관계수: &#39;, byday_df[(byday_df[&#39;windspeed&#39;] &gt;= 2) &amp; (byday_df[&#39;windspeed&#39;] &lt; 3)][[&#39;rentalCount&#39;, &#39;windspeed&#39;]].corr().iloc[1, 0]) print(&#39;풍속 3~4 구간 풍속 대여량 상관계수: &#39;, byday_df[(byday_df[&#39;windspeed&#39;] &gt;= 3) &amp; (byday_df[&#39;windspeed&#39;] &lt; 4)][[&#39;rentalCount&#39;, &#39;windspeed&#39;]].corr().iloc[1, 0]) print(&#39;풍속 4~4.5 구간 풍속 대여량 상관계수: &#39;, byday_df[(byday_df[&#39;windspeed&#39;] &gt;= 4) &amp; (byday_df[&#39;windspeed&#39;] &lt; 4.5)][[&#39;rentalCount&#39;, &#39;windspeed&#39;]].corr().iloc[1, 0]) print(&#39;풍속 4.5이상 구간 풍속 대여량 상관계수: &#39;, byday_df[byday_df[&#39;windspeed&#39;] &gt;= 4.5][[&#39;rentalCount&#39;, &#39;windspeed&#39;]].corr().iloc[1, 0]) . 풍속 2이하 구간 풍속 대여량 상관계수: 0.16088650899707269 풍속 2~3 구간 풍속 대여량 상관계수: -0.038249027494767766 풍속 3~4 구간 풍속 대여량 상관계수: -0.028550424225815756 풍속 4~4.5 구간 풍속 대여량 상관계수: 0.41343208085226624 풍속 4.5이상 구간 풍속 대여량 상관계수: -0.3915776169233598 . 풍속을 weak(2 이하), normal(2~4.5), strong(4.5 이상) 구간으로 나눈 windstrength(풍강) 컬럼 추가 | . bins = [0, 2, 4.5, 100] bins_names = [&#39;weak&#39;, &#39;normal&#39;, &#39;strong&#39;] byday_df[&#39;windstrength&#39;] = pd.cut(byday_df[&#39;windspeed&#39;], bins, labels=bins_names) . fig = plt.figure(figsize=(16, 5)); gridsize = (1, 3) ax1 = plt.subplot2grid(gridsize, (0, 0)) ax2 = plt.subplot2grid(gridsize, (0, 1)) ax3 = plt.subplot2grid(gridsize, (0, 2)) sns.regplot(x=&#39;temp&#39;, y=&#39;rentalCount&#39;, data=byday_df, ax=ax1) sns.regplot(x=&#39;precipitation&#39;, y=&#39;rentalCount&#39;, data=byday_df, ax=ax2) sns.scatterplot(x=&#39;windspeed&#39;, y=&#39;rentalCount&#39;, hue=&#39;windstrength&#39;, data=byday_df, ax=ax3) ax1.set_title(&#39;평균 기온 및 자전거 대여량 산점도&#39;) ax2.set_title(&#39;강수량 및 자전거 대여량 산점도&#39;) ax3.set_title(&#39;풍속 및 자전거 대여량 산점도&#39;) plt.tight_layout() sns.despine() plt.show() . 연도가 바뀌면서 일평균기온 상승에 따른 대여량 증가 기울기가 가팔라짐 | 연도가 바뀌면서 비가 와도 자전거를 타는 케이스가 나타나기 시작함 | . sns.relplot(x=&#39;temp&#39;, y=&#39;rentalCount&#39;, col=&#39;year&#39;, data=byday_df) sns.relplot(x=&#39;precipitation&#39;, y=&#39;rentalCount&#39;, col=&#39;year&#39;, data=byday_df) sns.relplot(x=&#39;windspeed&#39;, y=&#39;rentalCount&#39;, col=&#39;year&#39;, data=byday_df) plt.tight_layout() sns.despine() plt.show() . 과거 날씨 데이터 패턴은 모델링 작업에 도움이 되지 않을 수 있음 | 최근 날씨 데이터 패턴을 중심으로 모델링하기 위해 2019년을 기준으로 구분한 after2019 컬럼 추가 | . byday_df[&#39;after2019&#39;] = byday_df[&#39;year&#39;].apply(lambda x: 1 if x &gt;= 2019 else 0) . sns.relplot(x=&#39;temp&#39;, y=&#39;rentalCount&#39;, col=&#39;after2019&#39;, data=byday_df) sns.relplot(x=&#39;precipitation&#39;, y=&#39;rentalCount&#39;, col=&#39;after2019&#39;, data=byday_df) sns.relplot(x=&#39;windspeed&#39;, y=&#39;rentalCount&#39;, col=&#39;after2019&#39;, data=byday_df) plt.tight_layout() sns.despine() plt.show() . 3. Preprocessing . 3.1 Data Load . aws_access_key_id = &#39;bike&#39; aws_secret_access_key = &#39;bikebike&#39; endpoint_url = &#39;http://safenum.iptime.org:10170&#39; data_version = &#39;v3&#39; client = boto3.client( &#39;s3&#39;, aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key, endpoint_url=endpoint_url, verify=False ) response = client.get_object(Bucket=&#39;bike&#39;, Key=f&quot;/{data_version}/parquet/bike_weather_{data_version}.parquet&quot;) raw_df = pd.read_parquet(BytesIO(response[&#39;Body&#39;].read()), engine=&#39;pyarrow&#39;) raw_df.head() . rentalDateTime rentalOfficeNum rentalCount dateTime temp tempMin tempMax precipitation windspeed humidity . 0 2015-09-19 | 101 | 5 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 1 2015-09-19 | 102 | 12 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 2 2015-09-19 | 103 | 18 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 3 2015-09-19 | 104 | 11 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 4 2015-09-19 | 105 | 15 | 2015-09-19 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 3.2 Feature Engineering . 3.2.1 &#51068; &#44592;&#51456; &#44536;&#47353;&#54868; &#48143; &#44592;&#48376; &#48320;&#49688; &#54869;&#51109; . 전체 대여량 예측을 위해 rentalDateTime 기준으로 GroupBy | . byday_df = raw_df.groupby(&#39;rentalDateTime&#39;).agg({&#39;rentalCount&#39;: &#39;sum&#39;, &#39;temp&#39;: &#39;mean&#39;, &#39;tempMin&#39;: &#39;mean&#39;, &#39;tempMax&#39;: &#39;mean&#39;, &#39;precipitation&#39;: &#39;mean&#39;, &#39;windspeed&#39;: &#39;mean&#39;, &#39;humidity&#39;: &#39;mean&#39;}) byday_df.head() . rentalCount temp tempMin tempMax precipitation windspeed humidity . rentalDateTime . 2015-09-19 681 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | . 2015-09-20 843 | 22.10 | 17.90 | 28.30 | 0.00 | 2.00 | 69.00 | . 2015-09-21 512 | 22.60 | 16.50 | 29.40 | 0.00 | 1.50 | 62.10 | . 2015-09-22 735 | 23.90 | 18.00 | 31.00 | 0.00 | 1.80 | 48.40 | . 2015-09-23 744 | 22.00 | 19.00 | 26.10 | 0.00 | 1.70 | 57.90 | . 기본 변수 확장 | . tempMax_estimate = byday_df[byday_df.index == &#39;2017-10-12&#39;][&#39;temp&#39;].iloc[0] + ( byday_df[byday_df.index == &#39;2017-10-11&#39;][&#39;tempMax&#39;].iloc[0] - byday_df[byday_df.index == &#39;2017-10-11&#39;][&#39;temp&#39;].iloc[0] + byday_df[byday_df.index == &#39;2017-10-13&#39;][&#39;tempMax&#39;].iloc[0] - byday_df[byday_df.index == &#39;2017-10-13&#39;][&#39;temp&#39;].iloc[0] ) / 2 byday_df[&#39;tempMax&#39;] = byday_df[&#39;tempMax&#39;].fillna(tempMax_estimate) byday_df[&#39;windspeed&#39;] = byday_df[&#39;windspeed&#39;].fillna(method=&#39;ffill&#39;) bins = [0, 2, 4.5, 100] bins_names = [&#39;weak&#39;, &#39;normal&#39;, &#39;strong&#39;] byday_df[&#39;windstrength&#39;] = pd.cut(byday_df[&#39;windspeed&#39;], bins, labels=bins_names) byday_df[&#39;year&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.year byday_df[&#39;month&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.month byday_df[&#39;day&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.day byday_df[&#39;dayofweek&#39;] = pd.Series(byday_df.index, index=byday_df.index).dt.dayofweek byday_df[&#39;season&#39;] = pd.Series(byday_df.index, index=byday_df.index).apply(lambda x: int((x.month % 12 + 3) // 3)) byday_df[&#39;after2019&#39;] = byday_df[&#39;year&#39;].apply(lambda x: 1 if x &gt;= 2019 else 0) kr_holidays = holidays.KR() byday_df[&#39;holiday&#39;] = pd.Series(byday_df.index, index=byday_df.index).apply(lambda x: 1 if x in kr_holidays else 0) byday_df.head() . rentalCount temp tempMin tempMax precipitation windspeed humidity windstrength year month day dayofweek season after2019 holiday . rentalDateTime . 2015-09-19 681 | 22.30 | 17.00 | 29.00 | 0.00 | 2.40 | 58.30 | normal | 2015 | 9 | 19 | 5 | 4 | 0 | 0 | . 2015-09-20 843 | 22.10 | 17.90 | 28.30 | 0.00 | 2.00 | 69.00 | weak | 2015 | 9 | 20 | 6 | 4 | 0 | 0 | . 2015-09-21 512 | 22.60 | 16.50 | 29.40 | 0.00 | 1.50 | 62.10 | weak | 2015 | 9 | 21 | 0 | 4 | 0 | 0 | . 2015-09-22 735 | 23.90 | 18.00 | 31.00 | 0.00 | 1.80 | 48.40 | weak | 2015 | 9 | 22 | 1 | 4 | 0 | 0 | . 2015-09-23 744 | 22.00 | 19.00 | 26.10 | 0.00 | 1.70 | 57.90 | weak | 2015 | 9 | 23 | 2 | 4 | 0 | 0 | . 3.2.2 &#50672;&#49549;&#54805; &#48320;&#49688; &#54869;&#51109; . 추세 요소를 추출하기 위해 시계열 분해 | . try: tsd = sm.tsa.seasonal_decompose(byday_df[&#39;rentalCount&#39;], model=&#39;additive&#39;, period=365) except: tsd = sm.tsa.seasonal_decompose(byday_df[&#39;rentalCount&#39;], model=&#39;additive&#39;, freq=365) try: stsd = sm.tsa.seasonal_decompose(byday_df[&#39;rentalCount&#39;].loc[:&#39;2020-12-31&#39;], model=&#39;additive&#39;, period=365) except: stsd = sm.tsa.seasonal_decompose(byday_df[&#39;rentalCount&#39;].loc[:&#39;2020-12-31&#39;], model=&#39;additive&#39;, freq=365) . 시계열 변수 확장 및 시차 보정 | . df = pd.DataFrame() # Trend 추출후 시차 보정 df[&#39;trend&#39;] = tsd.trend df[&#39;trend&#39;] = df[&#39;trend&#39;].shift(int(len(tsd.trend[tsd.trend.isnull()]) / 2)).shift(1) df[&#39;seasonal&#39;] = list(stsd.seasonal.shift(1)) + list(stsd.seasonal.shift(1).loc[&#39;2018-01-01&#39;:&#39;2018-12-31&#39;]) df[&#39;s_seasonal&#39;] = list(savgol_filter(stsd.seasonal.shift(1), 51, 3)) + list(savgol_filter(stsd.seasonal.shift(1), 7, 3)[-365:]) # 2일 이동평균 df[&#39;ma_2d&#39;] = byday_df[&#39;rentalCount&#39;].rolling(2).mean().shift(1) df[&#39;ma_7d&#39;] = byday_df[&#39;rentalCount&#39;].rolling(7).mean().shift(1) df[&#39;ma_14d&#39;] = byday_df[&#39;rentalCount&#39;].rolling(14).mean().shift(1) df[&#39;ma_21d&#39;] = byday_df[&#39;rentalCount&#39;].rolling(21).mean().shift(1) df[&#39;ma_28d&#39;] = byday_df[&#39;rentalCount&#39;].rolling(28).mean().shift(1) df[&#39;ma_52d&#39;] = byday_df[&#39;rentalCount&#39;].rolling(52).mean().shift(1) df[&#39;ma_182d&#39;] = byday_df[&#39;rentalCount&#39;].rolling(182).mean().shift(1) # 1년 이동평균 df[&#39;ma_1y&#39;] = byday_df[&#39;rentalCount&#39;].rolling(365).mean().shift(1) # 1일 차분 df[&#39;diff_1d&#39;] = byday_df[&#39;rentalCount&#39;].diff(1).shift(1) df[&#39;diff_2d&#39;] = byday_df[&#39;rentalCount&#39;].diff(2).shift(1) df[&#39;diff_7d&#39;] = byday_df[&#39;rentalCount&#39;].diff(7).shift(1) df[&#39;diff_182d&#39;] = byday_df[&#39;rentalCount&#39;].diff(182).shift(1) # 1년 차분 df[&#39;diff_1y_3da&#39;] = (byday_df[&#39;rentalCount&#39;].diff(365).shift(1) + byday_df[&#39;rentalCount&#39;].diff(364).shift(1) + byday_df[&#39;rentalCount&#39;].diff(363).shift(1)) / 3 # 1일전 대여량 df[&#39;lag_1d&#39;] = byday_df[&#39;rentalCount&#39;].shift(1) # 2일전 대여량 df[&#39;lag_2d&#39;] = byday_df[&#39;rentalCount&#39;].shift(2) df[&#39;lag_7d&#39;] = byday_df[&#39;rentalCount&#39;].shift(7) df[&#39;lag_1y_4da&#39;] = (byday_df[&#39;rentalCount&#39;].shift(365) + byday_df[&#39;rentalCount&#39;].shift(364) + byday_df[&#39;rentalCount&#39;].shift(363) + byday_df[&#39;rentalCount&#39;].shift(362)) / 4 # 평균 기온 df[&#39;temp&#39;] = byday_df[&#39;temp&#39;] # 강수량 df[&#39;precipitation&#39;] = byday_df[&#39;precipitation&#39;] # 풍속 df[&#39;windspeed&#39;] = byday_df[&#39;windspeed&#39;] # 불쾌지수 df[&#39;discomfort&#39;] = (5 / 9) * byday_df[&#39;temp&#39;] - 0.55 * ((100 - byday_df[&#39;humidity&#39;]) / 100) * ((5 / 9) * byday_df[&#39;temp&#39;] - 26) + 32 # 체감 기온 df[&#39;s_temp&#39;] = 13.12 + 0.6215 * byday_df[&#39;temp&#39;] - 11.37 * byday_df[&#39;windspeed&#39;] ** 0.16 + 0.3965 * byday_df[&#39;windspeed&#39;] ** 0.16 * byday_df[&#39;temp&#39;] # 대여량: 예측해야 할 y값 df[&#39;count&#39;] = byday_df[&#39;rentalCount&#39;] df.tail(5) . trend seasonal s_seasonal ma_2d ma_7d ma_14d ma_21d ma_28d ma_52d ma_182d ... lag_1d lag_2d lag_7d lag_1y_4da temp precipitation windspeed discomfort s_temp count . rentalDateTime . 2021-12-27 84205.09 | -16439.55 | -18657.67 | 16310.50 | 49626.00 | 48674.43 | 56566.05 | 56582.36 | 63175.42 | 95032.20 | ... | 15232.00 | 17389.00 | 58934.00 | 35030.75 | -7.60 | 0.00 | 1.70 | 34.28 | -7.26 | 39337 | . 2021-12-28 84211.95 | -18849.31 | -18540.80 | 27284.50 | 46826.43 | 47350.43 | 54679.24 | 55285.07 | 61868.71 | 94666.56 | ... | 39337.00 | 15232.00 | 66539.00 | 31811.50 | -4.10 | 0.00 | 2.20 | 33.80 | -4.17 | 47483 | . 2021-12-29 84215.23 | -20588.59 | -19639.42 | 43410.00 | 44104.14 | 46996.36 | 52964.48 | 56176.82 | 60916.31 | 94315.17 | ... | 47483.00 | 39337.00 | 68290.00 | 25770.00 | 0.40 | 0.20 | 2.60 | 36.06 | 0.31 | 48169 | . 2021-12-30 84251.00 | -20056.79 | -20874.93 | 47826.00 | 41229.71 | 45920.57 | 51209.57 | 55775.79 | 60088.40 | 93911.51 | ... | 48169.00 | 47483.00 | 69753.00 | 22857.00 | -3.90 | 0.00 | 3.30 | 37.81 | -4.94 | 45473 | . 2021-12-31 84315.61 | -22094.37 | -21890.55 | 46821.00 | 37761.14 | 43803.36 | 49440.14 | 55184.29 | 60667.90 | 93403.40 | ... | 45473.00 | 48169.00 | 51245.00 | 22798.25 | -6.70 | 0.00 | 3.50 | 38.76 | -8.18 | 37704 | . 5 rows × 26 columns . 3.2.3 &#51060;&#49328;&#54805; &#48320;&#49688; &#54869;&#51109; . 더미 변수 생성 (원-핫 인코딩) | . df[&#39;workingday&#39;] = byday_df.apply(lambda x: 1 if (x[&#39;dayofweek&#39;] != 5 and x[&#39;dayofweek&#39;] != 6) and x[&#39;holiday&#39;] == 0 else 0, axis=1) df[&#39;after2019&#39;] = byday_df[&#39;after2019&#39;].astype(int) df[&#39;windstrength&#39;] = byday_df[&#39;windstrength&#39;] df[&#39;month&#39;] = byday_df[&#39;month&#39;].astype(int) df[&#39;dayofweek&#39;] = byday_df[&#39;dayofweek&#39;].astype(int) df[&#39;season&#39;] = byday_df[&#39;season&#39;].astype(int) dummy_columns = [&#39;windstrength&#39;, &#39;month&#39;, &#39;dayofweek&#39;, &#39;season&#39;] for dummy_column in dummy_columns: df_tmp = pd.get_dummies(df[dummy_column], prefix=dummy_column, prefix_sep=&#39;_&#39;, drop_first=False) df = pd.concat([df, df_tmp], axis=1) df.head() . trend seasonal s_seasonal ma_2d ma_7d ma_14d ma_21d ma_28d ma_52d ma_182d ... dayofweek_1 dayofweek_2 dayofweek_3 dayofweek_4 dayofweek_5 dayofweek_6 season_1 season_2 season_3 season_4 . rentalDateTime . 2015-09-19 nan | nan | nan | nan | nan | nan | nan | nan | nan | nan | ... | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | . 2015-09-20 nan | 22692.91 | nan | nan | nan | nan | nan | nan | nan | nan | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | . 2015-09-21 nan | 17114.96 | nan | 762.00 | nan | nan | nan | nan | nan | nan | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 2015-09-22 nan | 12938.73 | nan | 677.50 | nan | nan | nan | nan | nan | nan | ... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 2015-09-23 nan | 3789.83 | nan | 623.50 | nan | nan | nan | nan | nan | nan | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 5 rows × 58 columns . 시차 보정으로 발생한 null 값 제거 | . df = df.dropna() . 3.3 Train, Test Dataset &#48516;&#47532; . &#39;2020-12-31&#39;을 기준으로 train, test 분리 | . def split_ts_data(df, y_column, X_columns, criteria): train = df.loc[df.index &lt;= criteria,:] test = df.loc[df.index &gt; criteria,:] y_train = train[y_column] X_train = train[X_columns] y_test = test[y_column] X_test = test[X_columns] return X_train, X_test, y_train, y_test y_column = &#39;count&#39; X_columns = [col for col in df.columns if col != y_column] criteria = &#39;2020-12-31&#39; X_train, X_test, y_train, y_test = split_ts_data(df, y_column, X_columns, criteria) . 3.4 Scaling . 연속형 변수 StandardScaler로 Scaling | . continuous_columns = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;s_seasonal&#39;, &#39;ma_2d&#39;, &#39;ma_7d&#39;, &#39;ma_14d&#39;, &#39;ma_21d&#39;, &#39;ma_28d&#39;, &#39;ma_52d&#39;, &#39;ma_182d&#39;, &#39;ma_1y&#39;, &#39;diff_1d&#39;, &#39;diff_2d&#39;, &#39;diff_7d&#39;, &#39;diff_182d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;lag_2d&#39;, &#39;lag_7d&#39;, &#39;temp&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;, &#39;discomfort&#39;, &#39;s_temp&#39;] continuous_columns = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;ma_2d&#39;, &#39;ma_1y&#39;, &#39;diff_1d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;lag_2d&#39;, &#39;temp&#39;, &#39;s_temp&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;] scaler = preprocessing.StandardScaler() # scaler = preprocessing.MinMaxScaler() # scaler = preprocessing.RobustScaler() # scaler = preprocessing.Normalizer() scaler_fit = scaler.fit(X_train[continuous_columns]) X_train[continuous_columns] = scaler_fit.transform(X_train[continuous_columns]) X_test[continuous_columns] = scaler_fit.transform(X_test[continuous_columns]) . 3.5 &#50672;&#49549;&#54805; &#48320;&#49688; &#52629;&#49548; . 연속형 변수 간의 상관관계 파악 | . continuous_columns = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;ma_2d&#39;, &#39;ma_1y&#39;, &#39;diff_1d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;lag_2d&#39;, &#39;temp&#39;, &#39;s_temp&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;] plt.figure(figsize=(15, 15)) train_corr = pd.concat([X_train[continuous_columns], y_train], axis=1).corr() mask = np.zeros_like(train_corr, dtype=np.bool) mask[np.triu_indices_from(mask)] = True cmap = sns.diverging_palette(220, 10, as_cmap=True) sns.heatmap(train_corr, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0, square=True, annot=True, annot_kws={&#39;size&#39;: 13}, fmt=&#39;.2g&#39;, linewidths=0.2, cbar_kws={&#39;shrink&#39;: .8}) plt.title(&#39;연속형 변수 간의 상관관계 파악&#39;) plt.show() . def get_vif(df, vals): vif_df = pd.DataFrame() vif_df[&#39;Feature&#39;] = vals vals_df = df[vals] vif_df[&#39;VIF&#39;] = [variance_inflation_factor(vals_df.values, i) for i in range(vals_df.shape[1])] vif_df = vif_df.sort_values(by=&#39;VIF&#39;) return vif_df . vals_1 = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;ma_2d&#39;, &#39;ma_1y&#39;, &#39;diff_1d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;lag_2d&#39;, &#39;temp&#39;, &#39;s_temp&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;] get_vif(X_train, vals_1) . Feature VIF . 11 precipitation | 1.24 | . 5 diff_1y_3da | 3.07 | . 12 windspeed | 3.89 | . 1 seasonal | 4.04 | . 10 discomfort | 9.21 | . 8 temp | 2047.59 | . 9 s_temp | 2047.84 | . 0 trend | inf | . 2 ma_2d | inf | . 3 ma_1y | inf | . 4 diff_1d | inf | . 6 lag_1d | inf | . 7 lag_2d | inf | . vals_2 = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;ma_2d&#39;, &#39;diff_1d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;lag_2d&#39;, &#39;temp&#39;, &#39;s_temp&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;] get_vif(X_train, vals_2) . Feature VIF . 10 precipitation | 1.24 | . 4 diff_1y_3da | 3.07 | . 11 windspeed | 3.89 | . 1 seasonal | 4.04 | . 0 trend | 5.48 | . 9 discomfort | 9.21 | . 7 temp | 2047.59 | . 8 s_temp | 2047.84 | . 2 ma_2d | inf | . 3 diff_1d | inf | . 5 lag_1d | inf | . 6 lag_2d | inf | . vals_3 = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;ma_2d&#39;, &#39;diff_1d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;lag_2d&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;] get_vif(X_train, vals_3) . Feature VIF . 9 windspeed | 1.06 | . 8 precipitation | 1.07 | . 7 discomfort | 2.42 | . 4 diff_1y_3da | 3.01 | . 1 seasonal | 3.73 | . 0 trend | 5.48 | . 2 ma_2d | inf | . 3 diff_1d | inf | . 5 lag_1d | inf | . 6 lag_2d | inf | . vals_4 = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;diff_1d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;] get_vif(X_train, vals_4) . Feature VIF . 7 windspeed | 1.06 | . 6 precipitation | 1.07 | . 2 diff_1d | 1.32 | . 5 discomfort | 2.42 | . 3 diff_1y_3da | 3.01 | . 1 seasonal | 3.73 | . 0 trend | 5.48 | . 4 lag_1d | 10.86 | . 4. Modeling . class Evaluation: def __init__(self, y_actual, y_pred): self.y_actual = y_actual.values.flatten() self.y_pred = y_pred data_len = len(self.y_actual) - len(self.y_pred) if data_len != 0: self.y_actual = self.y_actual[data_len:] def evaluate(self): eval = { &#39;R2&#39;: metrics.r2_score(self.y_actual, self.y_pred), &#39;MAE&#39;: abs(self.y_actual - self.y_pred).mean(), &#39;MSE&#39;: ((self.y_actual - self.y_pred) ** 2).mean(), &#39;RMSE&#39;: np.sqrt(((self.y_actual - self.y_pred) ** 2).mean()), &#39;MAPE&#39;: (abs(self.y_actual - self.y_pred) / self.y_actual * 100).mean() } return eval def get_residual(self): residual = self.y_actual - self.y_pred return residual def plot(self, label=&#39;ts&#39;): y_actual = pd.Series(self.y_actual) y_pred = pd.Series(self.y_pred) y_pred.index = y_actual.index fig = plt.figure(figsize=(20, 4)); gridsize = (1, 4) ax1 = plt.subplot2grid(gridsize, (0, 0), colspan=3) ax2 = plt.subplot2grid(gridsize, (0, 3)) pd.concat([y_actual, y_pred], axis=1).plot(ax=ax1) sns.regplot(x=y_actual, y=y_pred, ax=ax2) ax1.set_title(&#39;{}: Timeseries Actual vs Predicted&#39;.format(label)) ax2.set_title(&#39;{}: Actual vs Predicted&#39;.format(label)) # ax1.set_ylim(0, 170000) sns.despine() plt.tight_layout() plt.show() class ResidualAnalysis: def __init__(self, y_data): self._y_data = y_data self._y_data = pd.DataFrame(self._y_data) self._y_data.columns = [&#39;residual&#39;] self._y_data[&#39;residual&#39;] = self._y_data[&#39;residual&#39;].astype(int) self.y_data = self._y_data[&#39;residual&#39;] # stationarity def adf_test(self): adf = sm.tsa.stattools.adfuller(self.y_data) adf_test_result = { &#39;Test Statistic&#39;: adf[0], &#39;p-value&#39;: adf[1], &#39;Used Lag&#39;: adf[2], &#39;Used Observations&#39;: adf[3], &#39;Maximum Information Criteria&#39;: adf[5] } for k, v in adf[4].items(): adf_test_result.update({f&#39;Critical Value({k})&#39;: v}) adf_test_result_df = pd.DataFrame(adf_test_result, index=[&#39;adf&#39;]).T return adf_test_result_df # stationarity def kpss_test(self): kpss = sm.tsa.stattools.kpss(self.y_data) kpss_test_result = { &#39;Test Statistic&#39;: kpss[0], &#39;p-value&#39;: kpss[1], &#39;Used Lag&#39;: kpss[2] } for k, v in kpss[3].items(): kpss_test_result.update({f&#39;Critical Value({k})&#39;: v}) kpss_test_result_df = pd.DataFrame(kpss_test_result, index=[&#39;kpss&#39;]).T return kpss_test_result_df # normality def normality_test(self): normality = stats.shapiro(self.y_data) normality_test_result = { &#39;Test Statistic&#39;: normality[0], &#39;p-value&#39;: normality[1] } normality_test_result_df = pd.DataFrame(normality_test_result, index=[&#39;normality&#39;]).T return normality_test_result_df # autocorrelation def autocorr_test(self): autocorrelation = sm.stats.diagnostic.acorr_ljungbox(self.y_data, lags=[1, 5, 10, 50]) normality_test_result_df = pd.DataFrame(autocorrelation, columns=[&#39;Autocorr(lag1)&#39;, &#39;Autocorr(lag5)&#39;, &#39;Autocorr(lag10)&#39;, &#39;Autocorr(lag50)&#39;], index=[&#39;Test Statistic&#39;, &#39;p-value&#39;]) return normality_test_result_df # heteroscedasticity def hetero_test(self, x_data): x_data = pd.DataFrame(x_data.loc[self.y_data.index].values, columns=[&#39;x&#39;]) heteroscedasticity = sm.stats.diagnostic.het_goldfeldquandt(self.y_data, x_data.values, alternative=&#39;two-sided&#39;) heteroscedasticity_test_result_df = pd.DataFrame(heteroscedasticity, columns=[&#39;heteroscedasticity&#39;], index=[&#39;Test Statistics&#39;, &#39;p-value&#39;, &#39;Alternative&#39;]) return heteroscedasticity_test_result_df def plot(self): # stationarity fig = plt.figure(figsize=(20, 4)); gridsize = (1, 2) ax1 = plt.subplot2grid(gridsize, (0, 0)) ax2 = plt.subplot2grid(gridsize, (0, 1)) sns.regplot(x=list(range(len(self.y_data))), y=self.y_data, ax=ax1) ax1.set_title(&#39;Stationarity Analysis&#39;) # normality sns.distplot(self.y_data, norm_hist=&#39;True&#39;, fit=stats.norm, ax=ax2) ax2.set_title(&#39;Normal Distribution Analysis&#39;) sns.despine() plt.tight_layout() plt.show() # autocorrelation fig = plt.figure(figsize=(16, 8)); gridsize = (2, 1) ax1 = plt.subplot2grid(gridsize, (0, 0)) ax2 = plt.subplot2grid(gridsize, (1, 0)) sm.tsa.graphics.plot_acf(self.y_data, lags=100, use_vlines=True, ax=ax1) sm.tsa.graphics.plot_pacf(self.y_data, lags=100, use_vlines=True, ax=ax2) plt.tight_layout() plt.show() # lag fig = plt.figure(figsize=(16, 4)); gridsize = (1, 4) ax1 = plt.subplot2grid(gridsize, (0, 0)) ax2 = plt.subplot2grid(gridsize, (0, 1)) ax3 = plt.subplot2grid(gridsize, (0, 2)) ax4 = plt.subplot2grid(gridsize, (0, 3)) pd.plotting.lag_plot(self.y_data, lag=1, c=[&#39;dodgerblue&#39;][0], ax=ax1) pd.plotting.lag_plot(self.y_data, lag=5, c=[&#39;dodgerblue&#39;][0], ax=ax2) pd.plotting.lag_plot(self.y_data, lag=10, c=[&#39;dodgerblue&#39;][0], ax=ax3) pd.plotting.lag_plot(self.y_data, lag=50, c=[&#39;dodgerblue&#39;][0], ax=ax4) ax1.set_title(&#39;1 Lag Analysis&#39;) ax2.set_title(&#39;5 Lag Analysis&#39;) ax3.set_title(&#39;10 Lag Analysis&#39;) ax4.set_title(&#39;50 Lag Analysis&#39;) plt.tight_layout() plt.show() . 4.1 Model 1: Linear Regression . Method: Linear Regression | . model_1_variables = [&#39;trend&#39;, &#39;seasonal&#39;, &#39;diff_1d&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;windspeed&#39;] + [&#39;workingday&#39;, &#39;after2019&#39;, &#39;windstrength_weak&#39;, &#39;windstrength_normal&#39;, &#39;windstrength_strong&#39;, &#39;month_1&#39;, &#39;month_2&#39;, &#39;month_3&#39;, &#39;month_4&#39;, &#39;month_5&#39;, &#39;month_6&#39;, &#39;month_7&#39;, &#39;month_8&#39;, &#39;month_9&#39;, &#39;month_10&#39;, &#39;month_11&#39;, &#39;month_12&#39;, &#39;dayofweek_0&#39;, &#39;dayofweek_1&#39;, &#39;dayofweek_2&#39;, &#39;dayofweek_3&#39;, &#39;dayofweek_4&#39;, &#39;dayofweek_5&#39;, &#39;dayofweek_6&#39;, &#39;season_1&#39;, &#39;season_2&#39;, &#39;season_3&#39;, &#39;season_4&#39;] f = &quot;count ~ &quot; + &#39; + &#39;.join(model_1_variables) model_1 = sm.OLS.from_formula(f, pd.concat([X_train, y_train], axis=1)).fit() display(f) model_1.summary() . &#39;count ~ trend + seasonal + diff_1d + diff_1y_3da + lag_1d + discomfort + precipitation + windspeed + workingday + after2019 + windstrength_weak + windstrength_normal + windstrength_strong + month_1 + month_2 + month_3 + month_4 + month_5 + month_6 + month_7 + month_8 + month_9 + month_10 + month_11 + month_12 + dayofweek_0 + dayofweek_1 + dayofweek_2 + dayofweek_3 + dayofweek_4 + dayofweek_5 + dayofweek_6 + season_1 + season_2 + season_3 + season_4&#39; . OLS Regression Results Dep. Variable: count | R-squared: 0.879 | . Model: OLS | Adj. R-squared: 0.877 | . Method: Least Squares | F-statistic: 383.6 | . Date: Wed, 09 Nov 2022 | Prob (F-statistic): 0.00 | . Time: 15:41:12 | Log-Likelihood: -16682. | . No. Observations: 1564 | AIC: 3.342e+04 | . Df Residuals: 1534 | BIC: 3.358e+04 | . Df Model: 29 | | . Covariance Type: nonrobust | | . | coef std err t P&gt;|t| [0.025 0.975] . Intercept 6.658e+16 | 7.27e+16 | 0.916 | 0.360 | -7.6e+16 | 2.09e+17 | . trend 3946.3800 | 875.778 | 4.506 | 0.000 | 2228.531 | 5664.229 | . seasonal -2185.0303 | 761.979 | -2.868 | 0.004 | -3679.661 | -690.399 | . diff_1d -1295.8482 | 315.200 | -4.111 | 0.000 | -1914.116 | -677.581 | . diff_1y_3da -5931.5951 | 483.420 | -12.270 | 0.000 | -6879.829 | -4983.361 | . lag_1d 2.299e+04 | 906.411 | 25.364 | 0.000 | 2.12e+04 | 2.48e+04 | . discomfort 6097.2403 | 666.380 | 9.150 | 0.000 | 4790.128 | 7404.353 | . precipitation -5116.8064 | 297.016 | -17.227 | 0.000 | -5699.408 | -4534.205 | . windspeed -640.4129 | 458.960 | -1.395 | 0.163 | -1540.667 | 259.842 | . workingday 3631.7999 | 1470.718 | 2.469 | 0.014 | 746.969 | 6516.631 | . after2019 4793.4024 | 1272.210 | 3.768 | 0.000 | 2297.948 | 7288.856 | . windstrength_weak -5.606e+16 | 6.12e+16 | -0.916 | 0.360 | -1.76e+17 | 6.4e+16 | . windstrength_normal -5.606e+16 | 6.12e+16 | -0.916 | 0.360 | -1.76e+17 | 6.4e+16 | . windstrength_strong -5.606e+16 | 6.12e+16 | -0.916 | 0.360 | -1.76e+17 | 6.4e+16 | . month_1 9.951e+15 | 1.09e+16 | 0.916 | 0.360 | -1.14e+16 | 3.13e+16 | . month_2 9.951e+15 | 1.09e+16 | 0.916 | 0.360 | -1.14e+16 | 3.13e+16 | . month_3 7.351e+15 | 8.03e+15 | 0.916 | 0.360 | -8.39e+15 | 2.31e+16 | . month_4 7.351e+15 | 8.03e+15 | 0.916 | 0.360 | -8.39e+15 | 2.31e+16 | . month_5 7.351e+15 | 8.03e+15 | 0.916 | 0.360 | -8.39e+15 | 2.31e+16 | . month_6 6.745e+15 | 7.37e+15 | 0.916 | 0.360 | -7.7e+15 | 2.12e+16 | . month_7 6.745e+15 | 7.37e+15 | 0.916 | 0.360 | -7.7e+15 | 2.12e+16 | . month_8 6.745e+15 | 7.37e+15 | 0.916 | 0.360 | -7.7e+15 | 2.12e+16 | . month_9 1.128e+16 | 1.23e+16 | 0.916 | 0.360 | -1.29e+16 | 3.54e+16 | . month_10 1.128e+16 | 1.23e+16 | 0.916 | 0.360 | -1.29e+16 | 3.54e+16 | . month_11 1.128e+16 | 1.23e+16 | 0.916 | 0.360 | -1.29e+16 | 3.54e+16 | . month_12 9.951e+15 | 1.09e+16 | 0.916 | 0.360 | -1.14e+16 | 3.13e+16 | . dayofweek_0 9.84e+14 | 1.07e+15 | 0.916 | 0.360 | -1.12e+15 | 3.09e+15 | . dayofweek_1 9.84e+14 | 1.07e+15 | 0.916 | 0.360 | -1.12e+15 | 3.09e+15 | . dayofweek_2 9.84e+14 | 1.07e+15 | 0.916 | 0.360 | -1.12e+15 | 3.09e+15 | . dayofweek_3 9.84e+14 | 1.07e+15 | 0.916 | 0.360 | -1.12e+15 | 3.09e+15 | . dayofweek_4 9.84e+14 | 1.07e+15 | 0.916 | 0.360 | -1.12e+15 | 3.09e+15 | . dayofweek_5 9.84e+14 | 1.07e+15 | 0.916 | 0.360 | -1.12e+15 | 3.09e+15 | . dayofweek_6 9.84e+14 | 1.07e+15 | 0.916 | 0.360 | -1.12e+15 | 3.09e+15 | . season_1 -2.145e+16 | 2.34e+16 | -0.916 | 0.360 | -6.74e+16 | 2.45e+16 | . season_2 -1.885e+16 | 2.06e+16 | -0.916 | 0.360 | -5.92e+16 | 2.15e+16 | . season_3 -1.824e+16 | 1.99e+16 | -0.916 | 0.360 | -5.73e+16 | 2.08e+16 | . season_4 -2.277e+16 | 2.49e+16 | -0.916 | 0.360 | -7.16e+16 | 2.6e+16 | . Omnibus: 338.216 | Durbin-Watson: 1.731 | . Prob(Omnibus): 0.000 | Jarque-Bera (JB): 3128.178 | . Skew: -0.735 | Prob(JB): 0.00 | . Kurtosis: 9.771 | Cond. No. 1.36e+16 | . Notes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The smallest eigenvalue is 2.6e-29. This might indicate that there arestrong multicollinearity problems or that the design matrix is singular. model_1_pred_test = model_1.predict(X_test) model_1_ev_train = Evaluation(y_train, model_1.fittedvalues) model_1_ev_test = Evaluation(y_test, model_1_pred_test) model_1_residual_train = model_1_ev_train.get_residual() model_1_residual_test = model_1_ev_test.get_residual() model_1_ev_train.plot(label=&#39;Train&#39;) model_1_ev_test.plot(label=&#39;Test&#39;) display(pd.concat([pd.DataFrame(model_1_ev_train.evaluate(), index=[&#39;train&#39;]), pd.DataFrame(model_1_ev_test.evaluate(), index=[&#39;test&#39;])])) . R2 MAE MSE RMSE MAPE . train 0.88 | 6798.86 | 107627674.10 | 10374.38 | 107.67 | . test 0.66 | 16636.53 | 484370335.41 | 22008.42 | 35.38 | . ra = ResidualAnalysis(model_1_residual_train) ra.plot() . 4.2 Model 2: Linear Regression . Method: Linear Regression | . model_2_variables = [&#39;trend&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;workingday&#39;] f = &#39;count ~ &#39; + &#39; + &#39;.join(model_2_variables) model_2 = sm.OLS.from_formula(f, pd.concat([X_train, y_train], axis=1)).fit() display(f) model_2.summary() . &#39;count ~ trend + diff_1y_3da + lag_1d + discomfort + precipitation + workingday&#39; . OLS Regression Results Dep. Variable: count | R-squared: 0.869 | . Model: OLS | Adj. R-squared: 0.868 | . Method: Least Squares | F-statistic: 1719. | . Date: Wed, 09 Nov 2022 | Prob (F-statistic): 0.00 | . Time: 15:41:15 | Log-Likelihood: -16743. | . No. Observations: 1564 | AIC: 3.350e+04 | . Df Residuals: 1557 | BIC: 3.354e+04 | . Df Model: 6 | | . Covariance Type: nonrobust | | . | coef std err t P&gt;|t| [0.025 0.975] . Intercept 3.449e+04 | 483.889 | 71.271 | 0.000 | 3.35e+04 | 3.54e+04 | . trend 5723.4506 | 540.650 | 10.586 | 0.000 | 4662.972 | 6783.929 | . diff_1y_3da -6205.0459 | 432.691 | -14.341 | 0.000 | -7053.764 | -5356.328 | . lag_1d 2.349e+04 | 725.240 | 32.385 | 0.000 | 2.21e+04 | 2.49e+04 | . discomfort 5940.6739 | 354.312 | 16.767 | 0.000 | 5245.694 | 6635.653 | . precipitation -5217.5631 | 278.684 | -18.722 | 0.000 | -5764.198 | -4670.928 | . workingday 3337.9137 | 586.762 | 5.689 | 0.000 | 2186.987 | 4488.840 | . Omnibus: 333.537 | Durbin-Watson: 1.829 | . Prob(Omnibus): 0.000 | Jarque-Bera (JB): 3108.983 | . Skew: -0.718 | Prob(JB): 0.00 | . Kurtosis: 9.756 | Cond. No. 5.23 | . Notes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified. model_2_pred_test = model_2.predict(X_test) model_2_ev_train = Evaluation(y_train, model_2.fittedvalues) model_2_ev_test = Evaluation(y_test, model_2_pred_test) model_2_residual_train = model_2_ev_train.get_residual() model_2_residual_test = model_2_ev_test.get_residual() model_2_ev_train.plot(label=&#39;Train&#39;) model_2_ev_test.plot(label=&#39;Test&#39;) display(pd.concat([pd.DataFrame(model_2_ev_train.evaluate(), index=[&#39;train&#39;]), pd.DataFrame(model_2_ev_test.evaluate(), index=[&#39;test&#39;])])) . R2 MAE MSE RMSE MAPE . train 0.87 | 6996.47 | 116471759.06 | 10792.21 | 89.40 | . test 0.67 | 16002.83 | 469551139.07 | 21669.13 | 35.42 | . ra = ResidualAnalysis(model_2_residual_train) ra.plot() . 4.3 Model 3: Linear Regression . Method: Linear Regression | . f = &quot;count ~ trend + diff_1y_3da + C(workingday):lag_1d + C(after2019):discomfort + C(after2019):precipitation + C(workingday)&quot; model_3 = sm.OLS.from_formula(f, pd.concat([X_train, y_train], axis=1)).fit() display(f) model_3.summary() . &#39;count ~ trend + diff_1y_3da + C(workingday):lag_1d + C(after2019):discomfort + C(after2019):precipitation + C(workingday)&#39; . OLS Regression Results Dep. Variable: count | R-squared: 0.890 | . Model: OLS | Adj. R-squared: 0.889 | . Method: Least Squares | F-statistic: 1393. | . Date: Wed, 09 Nov 2022 | Prob (F-statistic): 0.00 | . Time: 15:41:17 | Log-Likelihood: -16608. | . No. Observations: 1564 | AIC: 3.324e+04 | . Df Residuals: 1554 | BIC: 3.329e+04 | . Df Model: 9 | | . Covariance Type: nonrobust | | . | coef std err t P&gt;|t| [0.025 0.975] . Intercept 3.441e+04 | 444.337 | 77.444 | 0.000 | 3.35e+04 | 3.53e+04 | . C(workingday)[T.1] 3422.1389 | 538.958 | 6.350 | 0.000 | 2364.978 | 4479.300 | . trend 8671.9975 | 558.840 | 15.518 | 0.000 | 7575.837 | 9768.158 | . diff_1y_3da -5316.3562 | 421.790 | -12.604 | 0.000 | -6143.694 | -4489.018 | . C(workingday)[0]:lag_1d 1.909e+04 | 843.083 | 22.648 | 0.000 | 1.74e+04 | 2.07e+04 | . C(workingday)[1]:lag_1d 1.951e+04 | 791.146 | 24.666 | 0.000 | 1.8e+04 | 2.11e+04 | . C(after2019)[0]:discomfort 4605.8126 | 351.688 | 13.096 | 0.000 | 3915.979 | 5295.646 | . C(after2019)[1]:discomfort 1.127e+04 | 561.594 | 20.066 | 0.000 | 1.02e+04 | 1.24e+04 | . C(after2019)[0]:precipitation -2454.5792 | 331.587 | -7.403 | 0.000 | -3104.984 | -1804.174 | . C(after2019)[1]:precipitation -9382.2618 | 397.775 | -23.587 | 0.000 | -1.02e+04 | -8602.029 | . Omnibus: 334.235 | Durbin-Watson: 1.731 | . Prob(Omnibus): 0.000 | Jarque-Bera (JB): 3573.672 | . Skew: -0.676 | Prob(JB): 0.00 | . Kurtosis: 10.281 | Cond. No. 6.91 | . Notes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified. model_3_pred_test = model_3.predict(X_test) model_3_ev_train = Evaluation(y_train, model_3.fittedvalues) model_3_ev_test = Evaluation(y_test, model_3_pred_test) model_3_residual_train = model_3_ev_train.get_residual() model_3_residual_test = model_3_ev_test.get_residual() model_3_ev_train.plot(label=&#39;Train&#39;) model_3_ev_test.plot(label=&#39;Test&#39;) display(pd.concat([pd.DataFrame(model_3_ev_train.evaluate(), index=[&#39;train&#39;]), pd.DataFrame(model_3_ev_test.evaluate(), index=[&#39;test&#39;])])) . R2 MAE MSE RMSE MAPE . train 0.89 | 6518.84 | 97945689.18 | 9896.75 | 118.82 | . test 0.74 | 14252.23 | 366580855.14 | 19146.30 | 28.41 | . ra = ResidualAnalysis(model_3_residual_train) ra.plot() . 4.4 Model 4: SARIMAX . Method: SARIMAX | . np.log1p(y_train).diff().plot() plt.show() . adfuller(np.log(y_train).diff()[1:]) . (-16.1656729007337, 4.418418486432906e-29, 12, 1550, {&#39;1%&#39;: -3.4345759114452012, &#39;5%&#39;: -2.8634064827605656, &#39;10%&#39;: -2.5677636853277837}, 2012.6731812116645) . import warnings; warnings.filterwarnings(&#39;ignore&#39;) model_4_variables = [&#39;workingday&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;, &#39;season_1&#39;, &#39;season_3&#39;] trend_order = (0, 1, 2) seasonal_order = (0, 1, 3, 12) model_4 = sm.tsa.SARIMAX(np.log1p(y_train), trend=&#39;c&#39;, order=trend_order, seasonal_order=seasonal_order, exog=X_train[model_4_variables]).fit() model_4.summary() . SARIMAX Results Dep. Variable: count | No. Observations: 1564 | . Model: SARIMAX(0, 1, 2)x(0, 1, [1, 2, 3], 12) | Log Likelihood -555.163 | . Date: Wed, 09 Nov 2022 | AIC 1134.325 | . Time: 15:42:28 | BIC 1198.485 | . Sample: 0 | HQIC 1158.187 | . - 1564 | | . Covariance Type: opg | | . | coef std err z P&gt;|z| [0.025 0.975] . intercept -8.85e-06 | 0.000 | -0.056 | 0.955 | -0.000 | 0.000 | . workingday 0.1535 | 0.021 | 7.419 | 0.000 | 0.113 | 0.194 | . discomfort 0.4487 | 0.021 | 20.924 | 0.000 | 0.407 | 0.491 | . precipitation -0.2162 | 0.004 | -50.293 | 0.000 | -0.225 | -0.208 | . season_1 -0.1770 | 0.090 | -1.966 | 0.049 | -0.353 | -0.001 | . season_3 -0.1521 | 0.068 | -2.234 | 0.025 | -0.285 | -0.019 | . ma.L1 -0.7069 | 0.017 | -40.795 | 0.000 | -0.741 | -0.673 | . ma.L2 -0.1564 | 0.021 | -7.624 | 0.000 | -0.197 | -0.116 | . ma.S.L12 -0.8913 | 0.017 | -53.874 | 0.000 | -0.924 | -0.859 | . ma.S.L24 -0.0025 | 0.026 | -0.097 | 0.922 | -0.054 | 0.049 | . ma.S.L36 -0.0226 | 0.023 | -0.993 | 0.321 | -0.067 | 0.022 | . sigma2 0.1179 | 0.001 | 115.623 | 0.000 | 0.116 | 0.120 | . Ljung-Box (L1) (Q): 1.52 | Jarque-Bera (JB): 614297.30 | . Prob(Q): 0.22 | Prob(JB): 0.00 | . Heteroskedasticity (H): 0.61 | Skew: -5.28 | . Prob(H) (two-sided): 0.00 | Kurtosis: 99.92 | . Warnings:[1] Covariance matrix calculated using the outer product of gradients (complex-step). model_4_pred_train = model_4.predict() model_4_pred_test_pm = model_4.get_forecast(len(y_test), exog=X_test[model_4_variables]).predicted_mean model_4_pred_test_ci = model_4.get_forecast(len(y_test), exog=X_test[model_4_variables]).conf_int() model_4_ev_train = Evaluation(y_train[15:], (np.exp(model_4_pred_train) - 1)[15:]) model_4_ev_test = Evaluation(y_test, (np.exp(model_4_pred_test_pm) - 1)) model_4_residual_train = model_4_ev_train.get_residual() model_4_ev_train.plot(label=&#39;Train&#39;) model_4_ev_test.plot(label=&#39;Test&#39;) display(pd.concat([pd.DataFrame(model_4_ev_train.evaluate(), index=[&#39;train&#39;]), pd.DataFrame(model_4_ev_test.evaluate(), index=[&#39;test&#39;])])) . R2 MAE MSE RMSE MAPE . train 0.88 | 6260.76 | 102733512.72 | 10135.75 | 82.60 | . test 0.60 | 17824.11 | 577865843.20 | 24038.84 | 29.67 | . print(&#39;2021년 대여량 actual vs predicted: &#39;, sum(y_test), &#39;vs&#39;, int(sum((np.exp(model_4_pred_test_pm) - 1)))) . 2021년 대여량 actual vs predicted: 30788945 vs 31566641 . ra = ResidualAnalysis(model_4_residual_train) ra.plot() . display(ra.kpss_test()) display(ra.adf_test()) display(ra.normality_test()) display(ra.autocorr_test()) display(ra.hetero_test(y_train)) . kpss . Test Statistic 0.06 | . p-value 0.10 | . Used Lag 24.00 | . Critical Value(10%) 0.35 | . Critical Value(5%) 0.46 | . Critical Value(2.5%) 0.57 | . Critical Value(1%) 0.74 | . adf . Test Statistic -9.22 | . p-value 0.00 | . Used Lag 18.00 | . Used Observations 1530.00 | . Maximum Information Criteria 32380.79 | . Critical Value(1%) -3.43 | . Critical Value(5%) -2.86 | . Critical Value(10%) -2.57 | . normality . Test Statistic 0.87 | . p-value 0.00 | . Autocorr(lag1) Autocorr(lag5) Autocorr(lag10) Autocorr(lag50) . Test Statistic 42.99 | 83.86 | 111.00 | 197.97 | . p-value 0.00 | 0.00 | 0.00 | 0.00 | . heteroscedasticity . Test Statistics 7.42 | . p-value 0.00 | . Alternative two-sided | . 4.5 Model 5: XGBoost . Method: XGBoost | . model_5_variables = [&#39;trend&#39;, &#39;diff_1y_3da&#39;, &#39;lag_1d&#39;, &#39;workingday&#39;, &#39;discomfort&#39;, &#39;precipitation&#39;] model_5 = xgboost.XGBRegressor(objective=&#39;reg:squarederror&#39;, n_estimators=200, subsample=0.7, colsample_bytree=0.95, max_depth=3, random_state=7, learning_rate=0.1, gamma=0.5, alpha=50) # 15957.03 model_5.fit(X_train[model_5_variables], y_train) . XGBRegressor(alpha=50, base_score=0.5, booster=&#39;gbtree&#39;, colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.95, enable_categorical=False, gamma=0.5, gpu_id=-1, importance_type=None, interaction_constraints=&#39;&#39;, learning_rate=0.1, max_delta_step=0, max_depth=3, min_child_weight=1, missing=nan, monotone_constraints=&#39;()&#39;, n_estimators=200, n_jobs=8, num_parallel_tree=1, predictor=&#39;auto&#39;, random_state=7, reg_alpha=50, reg_lambda=1, scale_pos_weight=1, subsample=0.7, tree_method=&#39;exact&#39;, validate_parameters=1, verbosity=None) . xgboost.plot_importance(model_5) plt.show() . model_5_pred_train = model_5.predict(X_train[model_5_variables]) model_5_pred_test = model_5.predict(X_test[model_5_variables]) model_5_ev_train = Evaluation(y_train, model_5_pred_train) model_5_ev_test = Evaluation(y_test, model_5_pred_test) model_5_residual_train = model_5_ev_train.get_residual() model_5_ev_train.plot(label=&#39;Train&#39;) model_5_ev_test.plot(label=&#39;Test&#39;) display(pd.concat([pd.DataFrame(model_5_ev_train.evaluate(), index=[&#39;train&#39;]), pd.DataFrame(model_5_ev_test.evaluate(), index=[&#39;test&#39;])])) . R2 MAE MSE RMSE MAPE . train 0.98 | 2991.41 | 19850436.10 | 4455.38 | 58.98 | . test 0.57 | 19580.47 | 622195830.33 | 24943.85 | 30.09 | . # CentOS: yum install graphviz -y # MacOS: brew install graphviz xgboost.plot_tree(model_5, num_trees=0, rankdir=&#39;LR&#39;) fig = plt.gcf() fig.set_size_inches(30, 20) plt.show() . 5. Conclusion . 5.1 Model Performance Comparison . 5.1.1 Training Model Performance . train_perf_df = pd.DataFrame({ &#39;Model 1&#39;: model_1_ev_train.evaluate(), &#39;Model 2&#39;: model_2_ev_train.evaluate(), &#39;Model 3&#39;: model_3_ev_train.evaluate(), &#39;Model 4&#39;: model_4_ev_train.evaluate(), &#39;Model 5&#39;: model_5_ev_train.evaluate() }) train_perf_df . Model 1 Model 2 Model 3 Model 4 Model 5 . R2 0.88 | 0.87 | 0.89 | 0.88 | 0.98 | . MAE 6798.86 | 6996.47 | 6518.84 | 6260.76 | 2991.41 | . MSE 107627674.10 | 116471759.06 | 97945689.18 | 102733512.72 | 19850436.10 | . RMSE 10374.38 | 10792.21 | 9896.75 | 10135.75 | 4455.38 | . MAPE 107.67 | 89.40 | 118.82 | 82.60 | 58.98 | . train_perf_df.T.plot.bar(rot=0, subplots=True) fig = plt.gcf() fig.set_size_inches(8, 15) plt.tight_layout() plt.show() . 5.1.2 Testing Model Performance . test_perf_df = pd.DataFrame({ &#39;Model 1&#39;: model_1_ev_test.evaluate(), &#39;Model 2&#39;: model_2_ev_test.evaluate(), &#39;Model 3&#39;: model_3_ev_test.evaluate(), &#39;Model 4&#39;: model_4_ev_test.evaluate(), &#39;Model 5&#39;: model_5_ev_test.evaluate() }) test_perf_df . Model 1 Model 2 Model 3 Model 4 Model 5 . R2 0.66 | 0.67 | 0.74 | 0.60 | 0.57 | . MAE 16636.53 | 16002.83 | 14252.23 | 17824.11 | 19580.47 | . MSE 484370335.41 | 469551139.07 | 366580855.14 | 577865843.20 | 622195830.33 | . RMSE 22008.42 | 21669.13 | 19146.30 | 24038.84 | 24943.85 | . MAPE 35.38 | 35.42 | 28.41 | 29.67 | 30.09 | . test_perf_df.T.plot.bar(rot=0, subplots=True) fig = plt.gcf() fig.set_size_inches(8, 15) plt.tight_layout() plt.show() .",
            "url": "https://safenumz.github.io/blog/project/2022/06/13/public_bicycle.html",
            "relUrl": "/project/2022/06/13/public_bicycle.html",
            "date": " • Jun 13, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "[Kubernetes] Pod",
            "content": "Pod . Pod란 컨테이너를 표현하는 k8s API의 최소 단위 | Pod에는 하나 또는 여러 개의 컨테이너가 포함될 수 있음 | . 명령어로 CLI 모드에서 생성 . nginx 웹 서버 컨테이너를 pod로 동작시키기 pod name: web | image : nginx:1.14 | port : 80 | . | . $ kubectl run web --image=nginx:1.14 --port=80 $ kubectl get pod -n devops $ kubectl delete pod web . Yaml 템플릿으로 생성 . nginx 웹 서버 컨테이너를 pod로 동작시키기 pod name: web | image : nginx:1.14 | port : 80 | . | . # --dry-run은 실제 실행하지 않고 잘 동작할 수 있는지 알려줌 $ kubectl run web --image=nginx:1.14 --port=80 --dry-run=client -o yaml &gt; web.yaml . $ vi web.yaml . apiVersion: v1 kind: Pod metadata: name: web spec: containers: - image: nginx:1.14 name: web ports: - containerPort: 80 . $ kubectl apply -f web.yaml $ kubectl get pod -n devops $ kubectl delete pod -n devops web . 문제: Pod 생성 . 작업 클러스터 : k8s | cka-exam이라는 namespace를 만들고, cka-exam namespace에 아래와 같은 Pod를 생성 pod Name: pod-01 | image: busybox | 환경변수 : CERT = “CKA-cert” | command: /bin/sh | args: -c “while true; do echo $(CERT); sleep 10;done” | . | . $ kubectl config use-context k8s $ kubectl create namespace cka-exam $ kubectl get namespaces cka-exam $ kubectl run pod-01 --image=busybox --dry-run=client -o yaml &gt; 2-1.yaml . $ vi 2-1.yaml . apiVersion: v1 kind: Pod metadata: name: pod-01 namespace: cka-exam spec: containers: - image: busybox name: pod-01 env: - name: CERT value: CKA-cert command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;while true; do echo $(CERT); sleep 10;done&quot;] . $ kubectl apply -f 2-1.yaml $ kubectl get pod -n cka-exam . 문제: pod의 로그 확인해서 결과 추출하기 . 작업 클러스터 : hk8s | Pod custom-app의 log를 모니터링하고 file not found 메세지를 포함하는 로그 라인인 추출 | 추출된 결과는 /opt/REPORT/2022/custom-app-log에 기록 | . $ kubectl config use-context hk8s $ kubectl get pod custom-app $ kubectl logs custom-app | grep &#39;file not found&#39; &gt; /opt/REPORT/2022/custom-app-log $ cat /opt/REPORT/2022/custom-app-log . Static Pod 만들기 . API 서버 없이 특정 노드에 있는 kubelet에 의해 직접 관리 | /etc/kubernetes/manifests/ 디렉토리에 pod yaml 파일을 저장 시 적용됨 | static pod 디렉토리 구성 | . # 정해진 곳에다 yaml 파일 넣어 놔야 작동 $ cat /var/lib/kubelet/config.yaml staticPodPath: /etc/kubernetes/manifests . 디렉토리 수정시 kubelet 데몬 재실행 systemctl restart kubelet | . | hk8s-w1에 static Pod 만들기 ssh로 hk8s-w1 서버에 접속 | sudo -i로 root 권한 얻기 | /etc/kubernetes/manifests 디렉토리에 pod yaml파일을 저장하기 | . | . $ kubectl run webserver --image=nginx:1.14 --port=80 --dry-run=client -o yaml &gt; webserver.yaml $ kubectl describe pod webserver-hk8s-w1 $ rm webserver.yaml # 파일을 지우면 자동으로 파드가 내려감 . 문제: static pod 생성 . hk8s-w1 노드에 nginx-static-pod.yaml 라는 이름의 Static Pod를 생성 pod name: nginx-static-pod | image: nginx | port : 80 | . | . $ ssh hk8s-w1 $ sudo -i $ grep staticPod /var/lib/kubelet/config.yaml staticPodPath: /etc/kubernetes/manifests $ cd /etc/kubernetes/manifests $ kubectl run nginx-static-pod --image=nginx --port=80 --dry-run=client -o yaml &gt; nginx-static-pod.yaml . $ vi nginx-static-pod.yaml . apiVersion: v1 kind: Pod metadata: name: nginx-static-pod spec: containers: - name: nginx image: nginx ports: - containerPort: 80 protocol: TCP . $ exit $ kubectl get pods . multi-container . 하나의 Pod에 여러 개의 컨테이너가 포함되어 함께 실행됨 | . apiVersion: v1 kind: Pod metadata: name: two-containers spec: containers: - name: nginx-container image: nginx volumeMounts: - name: shared-data mountPath: /usr/share/nginx/html - name: debian-container image: debian volumeMounts: - name: shared-data mountPath: /pod-data command: [&quot;/bin/sh&quot;] args: [&quot;-c&quot;, &quot;echo Hello from the debian container &gt; /pod-data/index.html&quot;] volumes: - name: shared-data emptyDir: {} . 문제: multi container Pod 생성 . 4개의 컨테이너를 동작시키는 eshop-frontend Pod를 생성 pod image: nginx, redis, memcached, consul | . | . $ kubectl run eshop-frontend --image=nginx --dry-run=client -o yaml &gt; multi.yaml . $ vi multi.yaml . apiVersion: v1 kind: Pod metadata: name: eshop-frontend spec: containers: - image: nginx name: nginx - image: redis name: redis - image: memcached name: memcached - image: consul name: consul . $ kubectl apply -f multi.yaml .",
            "url": "https://safenumz.github.io/blog/kuberntetes/2022/06/02/kubernetes-pod.html",
            "relUrl": "/kuberntetes/2022/06/02/kubernetes-pod.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "[Kubernetes] RBAC 인증",
            "content": "API 인증: RBAC 인증 . API 서버에 접근하기 위해서는 인증 작업 필요 | Role-based access control(RBAC, 역할기반 액세스 제어) 사용자의 역할에 따라 리소스에 대한 접근 권한를 가짐 | User: 클러스터 외부에서 쿠버네티스를 조작하는 사용자 인증 | API 요청 → Authentication → Athorization → Addmission Control → 요청 승인 | . $ cat .kube/config . contexts: - context: cluster: kubernetes user: kubernetes-admin name: kubernetes-admin@kubernetes .. users: - name: kubernetes-admin user: client-certificate-data: LS0tLS1CRU--인증서 . ServiceAccount: Pod가 쿠버네티스 API를 다룰때 사용하는 계정 | . $ kubectl get pods eshop-cart-app -o yaml | grep -i serviceaccount $ kubectl get secrets default-token-gvdn7 . Role &amp; RoleBinding를 이용한 권한 제어 . 특정 유저나 ServiceAccount가 접근하려는 API에 접근 권한을 설정 | 권한 있는 User만 접근하도록 허용 | 권한 제어 | Role 어떤 API를 이용할 수 있는지의 정의 | 쿠버네티스의 사용권한을 정의 | 지정된 네임스페이스에서만 유효 | . | RoleBinding 사용자/그룹 또는 Service Account와 role을 연결 | . | . Role . 어떤 API를 사용할 수 있는지 권한 정의 | 지정된 네임스페이스에서만 유효 | . verb meaning . create | 새로운 리소스 생성 | . get | 개별 리소스 조회 | . list | 여러 건의 리소스 조회 | . update | 기존 리소스 내용 전체 업데이트 | . patch | 기존 리소스 중 일부 내용 변경 | . delete | 개별 리소스 삭제 | . deletecollection | 여러 리소스 삭제 | . Role 예제: default 네임스페이스의 Pod에 대한 get, watch, list할 수 있는 권한 . apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: namespace: default name: pod-reader rules: - apiGroups: [&quot;&quot;] verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;] . pod는 코어 API이기 때문에 apiGroups을 따로 지정하지 않음 | 만약 리소스가 job이라면 apiGroups에 “batch”를 지정 | verbs에는 단어 그대로 나열된 API 리소스에 허용할 기능을 나열함 | . RoleBinding . 사용자/그룹 또는 Service Account와 role을 연결 | . RoleBinding 예제: default 네임스페이스에서 유저 jane에게 pod-reader의 role을 할당 . apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBiding metadata: name: read-pods namespace: default subjects: - kind: User name: jane apiGroup: rbac.authorization.k8s.io roleRef: kind: Role name: pod-reader apiGroup: rbac.authorization.k8s.io . ClusterRole . 어떤 API를 사용할 수 있는지 권한 정의 | 클러스터 전체(전체 네임스페이스)에서 유효 | . ClusterRole 예제: 전체 네임스페이스의 Secret에 대한 get, watch, list할 수 있는 권한 . apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metatdata: name: secret-reader rules: - apiGroups: [&quot;&quot;] resources: [&quot;secrets&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;] . ClusterRoleBinding . 사용자/그룹 또는 Service Account와 role을 연결 | . Cluster/RoleBinding 예제: manager 그룹의 모든 사용자가 모든 네임스페이스의 secret을 읽을 수 있도록 구성 . apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: read-secrets-global subjects: - kind: Group name: manager apiGroup: rbac.authorization.k8s.io roleRef: kind: ClusterRole name: secret-reader apiGroup: rbac.authorization.k8s.io . 문제: ServiceAccount, Role, RoleBinding . https://kubernetes.io/docs/reference/access-authn-authz/rbac/ | 작업 클러스터 : k8s | 애플리케이션 운영중 특정 namespace의 Pod들을 모니터할 수 있는 서비스가 요청되었음 | api-access 네임스페이스의 모든 pod를 view할 수 있도록 다음의 작업을 진행 api-access라는 새로운 namespace에 pod-viewer라는 이름의 ServiceAccount를 만듬 | podreader-role이라는 이름의 Role과 podreader-rolebinding이라는 이름의 RoleBinding을 만듬 | 앞서 생성한 ServiceAccount를 API resource Pod에 대하여 watch,list,get을 허용하도록 매핑 | . | . $ kubectl config current-context # namespace 생성 $ kubectl create namespace api-access $ kubectl create serviceaccount pod-viewer -n api-access $ kubectl get serviceaccounts --namespace api-access . # role 생성 $ kubectl create role podreader-role --verb=watch --verb=list --verb=get --resource=pods --namespace api-access $ kubectl get role --namespace=api-access $ kubectl describe role --namespace=api-access podreader-role . role 생성은 yaml 파일로도 만들 수 있음 | . apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: namespace: default name: podreader-role rules: - apiGroups: [&quot;&quot;] # &quot;&quot; indicates the core API group resources: [&quot;pods&quot;] verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;] . # rolebinding 생성 $ kubectl create rolebiding podreader-rolebinding --role=podreader-role --serviceaccount=api-access:pod-viewer -n api-access $ kubectl describe -n api-access rolebindings.rbac.authorization.k8s.io podreader-rolebinding . 문제: ServiceAccount, CluserRole, ClusterRoleBinding . 작업 클러스터: k8s | 작업 Context에서 애플리케이션 배포를 위해 새로운 ClusterRole을 생성하고 특정 namespace의 ServiceAccount를 바인드 다음의 resource type에서만 Create가 허용된 ClusterRole deployment-clusterrole을 생성 Resource Type: Deployment StatefulSet DaemonSet | . | 미리 생성된 namespace api-access 에 cicd-token이라는 새로운 ServiceAccount를 만듬 | ClusterRole deployment-clusterrole을 namespace api-access로 제한된 새 ServiceAccount cicd-token에 바인딩 | . | . # role 생성: Deployment StatefulSet DaemonSet $ kubectl create clusterrole deployment-clusterrole --verb=create --resource=deployment,statefulset,daemonset $ kubectl get clusterrole deployment-clusterrole # serviceaccount 생성 $ kubectl create serviceaccount cicd-token --namespace=api-access $ kubectl get serviceaccounts --namespace api-access # cluster role binding $ kubectl create clusterrolebinding deployment-clusterrolebinding --clusterrole=deployment-clusterrole --serviceaccount=api-access:cide-token --namespace=api-access $ kubectl describe clusterrolebindings deployment-clusterrolebinding . # Role &amp; RoleBinding를 이용한 권한 제어 . 특정 유저나 ServiceAccount가 접근하려는 API에 접근 권한을 설정 | 권한 있는 User만 접근하도록 허용 | 권한 제어 | Role 어떤 API를 이용할 수 있을지의 정의 | 쿠버네티스의 사용권한을 정의 | 지정된 네임스페이스에서만 유효 | . | RoleBinding 사용자/그룹 또는 Service Account와 role을 연결 | . | . 문제: User, ClusterRole, ClusterRoleBinding . 작업 클러스터 : k8s | CSR(Certificate Signing Request)를 통해 app-manager 인증서를 발급받은 user app-manager에게 cluster 내 모든 namespace의 deployment, pod, service 리소스를 create, list, get, update, delete 할 수 있는 권한을 할당 user name : app-manager | certificate name: app-manager | clusterRole name : app-access | clusterRoleBinding name: app-access-binding | . | 인증서 생성: https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/#normal-user | . # 키 생성 $ openssl genrsa -out app-manager.key 2048 $ openssl req -new -key app-manager.key -out app-manager.csr -subj &quot;/CN=app-manager&quot; $ cat app-manager.csr | base64 | tr -d &quot; n&quot; . $ vi app-manager.yaml . # app-manager.yaml apiVersion: certificates.k8s.io/v1 kind: CertificateSigningRequest metadata: name: app-manager spec: request: &lt;KEY&gt; signerName: kubernetes.io/kube-apiserver-client # expirationSeconds: 86400 # one day usages: - client auth . $ kubectl apply -f app-manager.yaml . # Pending 상태: 승인요청 해야 함 $ kubectl get csr app-manager -o jsonpath=&#39;{.status.certificate}&#39;| base64 - d &gt; app-manager.crt # 승인 요청 $ kubectl certificate approve app-manager # 확인 $ kubectl get csr $ kubectl get csr/app-manager -o yaml # clusterrole 생성 $ kubectl create clusterrole app-access --verb=create,list,get,update,delete --resource=deployment,pod,service # cluster role binding 생성 $ kubectl create clusterrolebinding app-access-binding --clusterrole=app-access --user=app-manager # Add to kubeconfig $ kubectl config set-credentials app-manager --client-key=app-manager.key --client-certificate=app-manager.crt --embed-certs=true $ kubectl config set-context app-manager --cluster=kubernetes --user=app-manager $ kubectl config use-context app-manager # $ kubectl config use-context kubernetes-admin@kubernetes .",
            "url": "https://safenumz.github.io/blog/kuberntetes/2022/06/01/kuberntetes-rbac.html",
            "relUrl": "/kuberntetes/2022/06/01/kuberntetes-rbac.html",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "[Spark] Spark GPU Cluster에서 XGBoost 분산 GPU 학습하기",
            "content": "Dependency . CentOS 7 | Nvidia driver 510.73.05 | Spark 3.2.1 | Python 3.7 | jars cudf-22.04.0-cuda11.jar | rapids-4-spark_2.12-22.04.0.jar | xgboost4j-spark_3.0-1.4.2-0.3.0.jar | xgboost4j_3.0-1.4.2-0.3.0.jar | . | . XGBoost4J-Spark-GPU &#49444;&#51221; . spark-rapids github을 참고하여 설정 하였다. 설정이 매우 간단한 거 같지만 dependency 문제 때문에 생각보다 시간이 많이 소요되었다. . 아래 jars들을 Maven Repository에서 검색하여 $SPARK_HOME/jars 경로에 넣어 준다. 버전이 중요하다. 버전이 안 맞으면 온갖 exception에 시달린다. cudf-22.04.0-cuda11.jar | rapids-4-spark_2.12-22.04.0.jar | xgboost4j-spark_3.0-1.4.2-0.3.0.jar | xgboost4j_3.0-1.4.2-0.3.0.jar | . | . &#50500;&#47000;&#45716; GPU Resource&#44032; &#51080;&#45716; Spark Worker&#50640;&#49436; &#51652;&#54665; . Spark 공식 github 에 접속하여 getGpusResources.sh 스크립트를 다운 받는다. | getGpusResources.sh 스크립트는 스파크가 GPU 자원이 있는지 인식할 수 있게 해준다. | getGpusResources.sh를 $SPARK_HOME/drivers 경로에 넣어 주고($SPARK_HOME/drivers가 아니여도 상관없고, 디렉토리가 없으면 만들어서 넣어줌), 실행 권한을 준다. | . $ chmod +x $SPARK_HOME/drivers/getGpusResources.sh . GPU가 있는 Spark Worker의 $SPARK_HOME/conf/spark-env.sh 를 열어 Spark Worker가 getGpusResources.sh 스크립트 위치를 알 수 있도록 아래 내용을 넣어준다. | . $ vi $SPARK_HOME/conf/spark-env.sh . # $SPARK_HOME/conf/spark-env.sh export SPARK_WORKER_OPTS=&quot;-Dspark.worker.resource.gpu.amount=1 -Dspark.worker.resource.gpu.discoveryScript=/home/a/spark/drivers/getGpusResources.sh&quot; . $SPARK_HOME/conf/spark-defaults.conf 를 열어 아래 내용을 추가한다. | . spark.kryo.registrator com.nvidia.spark.rapids.GpuKryoRegistrator . XGBoost &#48516;&#49328; GPU &#54617;&#49845; &#50696;&#51228; . spark.stop() . &#44288;&#47144; &#46972;&#51060;&#48652;&#47084;&#47532; import . from pyspark.sql import SparkSession from pyspark import SparkConf conf = SparkConf().setAppName(&quot;Spark-XGBoost-GPU&quot;) conf.set(&quot;spark.sql.repl.eagerEval.enabled&quot;, True) # conf.set(&quot;spark.jars&quot;, &quot;s3://gourav-bucket/gourav/gpu/cudf-0.9.2.jar,s3://gourav-bucket/gourav/gpu/rapids-4-spark_2.12-0.1.0.jar,s3://gourav-bucket/gourav/gpu/cudf-0.14-cuda10-1.jar&quot;) # conf.set(&quot;spark.executor.instances&quot;, &quot;20&quot;) # conf.set(&quot;spark.executor.cores&quot;, &quot;4&quot;) conf.set(&quot;spark.task.cpus&quot;, &quot;2&quot;) # conf.set(&quot;spark.executor.memory&quot;, &quot;4g&quot;) # conf.set(&quot;spark.executor.memoryOverhead&quot;, &quot;2G&quot;) conf.set(&quot;spark.executor.extraJavaOptions&quot;, &quot;-Dai.rapids.cudf.prefer-pinned=true&quot;) conf.set(&quot;spark.executor.resource.gpu.amount&quot;, &quot;1&quot;) conf.set(&quot;spark.task.resource.gpu.amount&quot;, &quot;0.25&quot;) conf.set(&quot;spark.locality.wait&quot;, &quot;0s&quot;) conf.set(&quot;spark.executor.resource.gpu.discoveryScript&quot;, &quot;/home/a/spark/drivers/getGpusResources.sh&quot;) conf.set(&quot;spark.plugins&quot;, &quot;com.nvidia.spark.SQLPlugin&quot;) conf.set(&#39;spark.rapids.sql.enabled&#39;,&#39;true&#39;) conf.set(&#39;spark.rapids.sql.explain&#39;, &#39;ALL&#39;) # ALL/NONE/NOT_ON_GPU conf.set(&quot;spark.rapids.sql.concurrentGpuTasks&quot;, &quot;3&quot;) conf.set(&quot;spark.rapids.memory.pinnedPool.size&quot;, &quot;1G&quot;) # conf.set(&quot;spark.rapids.sql.hasNans&quot;, &quot;false&quot;) # conf.set(&#39;spark.rapids.sql.batchSizeBytes&#39;, &#39;512M&#39;) # conf.set(&#39;spark.rapids.sql.reader.batchSizeBytes&#39;, &#39;768M&#39;) # conf.set(&#39;spark.rapids.sql.variableFloatAgg.enabled&#39;, &#39;true&#39;) # conf.set(&#39;spark.rapids.sql.incompatibleDateFormats.enabled&#39;, &#39;true&#39;) # conf.set(&#39;spark.rapids.sql.udfCompiler.enabled&#39;, &#39;true&#39;) # conf.set(&#39;spark.rapids.sql.csv.read.double.enabled&#39;, &#39;true&#39;) # conf.set(&quot;spark.sql.adaptive.enabled&quot;, &quot;false&quot;) conf.set(&quot;spark.sql.files.maxPartitionBytes&quot;, &quot;512m&quot;) spark = SparkSession.builder.config(conf=conf) .master(&quot;spark://lab100:7077&quot;).getOrCreate() spark.sparkContext.addPyFile(&quot;/home/a/spark/jars/rapids-4-spark_2.12-22.04.0.jar&quot;) spark.sparkContext.addPyFile(&quot;/home/a/spark/jars/xgboost4j-spark_3.0-1.4.2-0.3.0.jar&quot;) . import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . from ml.dmlc.xgboost4j.scala.spark import XGBoostRegressionModel, XGBoostRegressor from pyspark.ml.evaluation import RegressionEvaluator from pyspark.sql import SparkSession from pyspark.sql.types import FloatType, IntegerType, StructField, StructType from time import time . &#45936;&#51060;&#53552; &#47196;&#46300; &#48143; &#51204;&#52376;&#47532; . reader = spark.read . label = &#39;fare_amount&#39; schema = StructType([ StructField(&#39;vendor_id&#39;, FloatType()), StructField(&#39;passenger_count&#39;, FloatType()), StructField(&#39;trip_distance&#39;, FloatType()), StructField(&#39;pickup_longitude&#39;, FloatType()), StructField(&#39;pickup_latitude&#39;, FloatType()), StructField(&#39;rate_code&#39;, FloatType()), StructField(&#39;store_and_fwd&#39;, FloatType()), StructField(&#39;dropoff_longitude&#39;, FloatType()), StructField(&#39;dropoff_latitude&#39;, FloatType()), StructField(label, FloatType()), StructField(&#39;hour&#39;, FloatType()), StructField(&#39;year&#39;, IntegerType()), StructField(&#39;month&#39;, IntegerType()), StructField(&#39;day&#39;, FloatType()), StructField(&#39;day_of_week&#39;, FloatType()), StructField(&#39;is_weekend&#39;, FloatType()), ]) features = [ x.name for x in schema if x.name != label ] train_data = reader.schema(schema).option(&#39;header&#39;, True).csv(&#39;s3a://data/taxi-small/train&#39;) trans_data = reader.schema(schema).option(&#39;header&#39;, True).csv(&#39;s3a://data/taxi-small/trainWithEval/&#39;) . XGBoostRegressor &#49373;&#49457; . 처음에 공식문서가 아닌 구글링을 기반으로 테스트하다가 이 부분 때문에 고생했다. setFeaturesCols은 GPU 버전에서만 사용할 수 있고, CPU 버전에서는 setFeaturesCols이 없고 대신 setFeaturesCol을 써야 한다. CPU 버전에서는 하나의 벡터를 만들어서 넣어줘야 한다. | CPU 버전에서는 아래와 같이 전처리 한다. | . # CPU Version from pyspark.ml.feature import VectorAssembler from pyspark.sql.functions import col def vectorize(data_frame): to_floats = [ col(x.name).cast(FloatType()) for x in data_frame.schema ] return (VectorAssembler() .setInputCols(features) .setOutputCol(&#39;features&#39;) .transform(data_frame.select(to_floats)) .select(col(&#39;features&#39;), col(label))) train_data = vectorize(train_data) trans_data = vectorize(trans_data) . parmas의 treeMethod에서 GPU Version에서는 gpu_hist만 지원한다. hist는 CPU Version에서만 사용된다. | . params = { &#39;eta&#39;: 0.05, &#39;treeMethod&#39;: &#39;gpu_hist&#39;, &#39;maxDepth&#39;: 8, &#39;subsample&#39;: 0.8, &#39;gamma&#39;: 1.0, &#39;numRound&#39;: 100, &#39;numWorkers&#39;: 1, } # GPU Version regressor = XGBoostRegressor(**params).setLabelCol(label).setFeaturesCols(features) # CPU Version # regressor = XGBoostRegressor(**params).setLabelCol(label).setFeaturesCol(&#39;features&#39;) . Train the Data with Benchmark . def with_benchmark(phrase, action): start = time() result = action() end = time() print(&#39;{} takes {} seconds&#39;.format(phrase, round(end - start, 2))) return result model = with_benchmark(&#39;Training&#39;, lambda: regressor.fit(train_data)) . Training takes 10.44 seconds . &#47784;&#45944; &#51200;&#51109; &#48143; &#51116;&#47196;&#46300; . model.write().overwrite().save(&#39;s3a://data/new-model-path&#39;) loaded_model = XGBoostRegressionModel().load(&#39;s3a://data/new-model-path&#39;) . &#44208;&#44284; . CPU Version에서는 select function을 쓸 수 없다. | . def transform(): result = loaded_model.transform(trans_data).cache() result.foreachPartition(lambda _: None) return result result = with_benchmark(&#39;Transformation&#39;, transform) result.select(&#39;vendor_id&#39;, &#39;passenger_count&#39;, &#39;trip_distance&#39;, label, &#39;prediction&#39;).show(5) . Transformation takes 2.22 seconds +++-+--+--+ | vendor_id|passenger_count|trip_distance|fare_amount| prediction| +++-+--+--+ |1.55973043E9| 1.0| 1.5| 6.0|8.171152114868164| |1.55973043E9| 1.0| 2.1| 9.5|9.933568954467773| |1.55973043E9| 1.0| 1.7| 9.5|8.162859916687012| |1.55973043E9| 1.0| 0.8| 6.0|5.170645713806152| |1.55973043E9| 1.0| 0.8| 5.5|5.057125091552734| +++-+--+--+ only showing top 5 rows . accuracy = with_benchmark( &#39;Evaluation&#39;, lambda: RegressionEvaluator().setLabelCol(label).evaluate(result)) print(&#39;RMSE is &#39; + str(accuracy)) . Evaluation takes 0.27 seconds RMSE is 1.8364262858328744 .",
            "url": "https://safenumz.github.io/blog/spark/2022/05/11/pyspark-gpu-xgboost-Copy1.html",
            "relUrl": "/spark/2022/05/11/pyspark-gpu-xgboost-Copy1.html",
            "date": " • May 11, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "[Spark] pyspark에서 Pandas API 사용하기",
            "content": "pyspark&#50640;&#49436; Pandas API &#49324;&#50857;&#54616;&#44592; . 그 동안 pyspark.pandas API가 있는 줄 모르고 spark.DataFrame 기준으로만 전처리를 했었다. 물론 추후 속도적인 측면도 테스트 해봐야 겠지만, 익숙한 python pandas 문법을 spark에서도 사용할 수 있다는 점이 장점인거 같다. . import os import warnings; warnings.filterwarnings(&#39;ignore&#39;) import pandas as pd import numpy as np import pyspark.pandas as ps from pyspark.sql import SparkSession . Pandas on Spark Object &#49373;&#49457; . pandas, spark.DataFrame, pyspark.pandas간의 변환 command | sdf.to_pandas_on_spark(): spark.DataFrame -&gt; pyspark.pandas | spark.createDataFrame(df): pandas.DataFrame -&gt; spark.DataFrame | ps.from_pandas(df): pandas -&gt; pyspark.pandas | . pandas-on-Spark Series 생성 | . s = ps.Series([1, 3, 5, np.nan, 6, 8]) . s . 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 . pandas-on-Spark DataFrame 생성 | . psdf = ps.DataFrame({ &#39;a&#39;: [1, 2, 3, 4, 5, 6], &#39;b&#39;: [100, 200, 300, 400, 500, 600], &#39;c&#39;: [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;]}, index=[10, 20, 30, 40, 50, 60] ) . psdf . a b c . 10 1 | 100 | one | . 20 2 | 200 | two | . 30 3 | 300 | three | . 40 4 | 400 | four | . 50 5 | 500 | five | . 60 6 | 600 | six | . pandas DataFrame으로부터 Spark DataFrame 생성 | . dates = pd.date_range(&#39;20130101&#39;, periods=6) . dates . DatetimeIndex([&#39;2013-01-01&#39;, &#39;2013-01-02&#39;, &#39;2013-01-03&#39;, &#39;2013-01-04&#39;, &#39;2013-01-05&#39;, &#39;2013-01-06&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) . pdf = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(&#39;ABCD&#39;)) . pdf . A B C D . 2013-01-01 0.346299 | 0.946748 | 1.184695 | -1.158578 | . 2013-01-02 -0.133470 | 1.224787 | -0.446594 | 0.482565 | . 2013-01-03 0.748055 | 0.199681 | -0.542991 | 0.866088 | . 2013-01-04 -0.744655 | 1.431218 | 0.513117 | -0.649905 | . 2013-01-05 -0.339120 | -0.695819 | -1.428132 | -1.526980 | . 2013-01-06 0.726483 | -1.131556 | 0.242745 | 1.488364 | . psdf = ps.from_pandas(pdf) type(psdf) . pyspark.pandas.frame.DataFrame . spark = SparkSession.builder.getOrCreate() sdf = spark.createDataFrame(pdf) sdf.show() . +--+-+-+-+ | A| B| C| D| +--+-+-+-+ | 0.3462987999403194| 0.9467481831984389| 1.1846947637320713|-1.1585782610012703| |-0.13346994375082502| 1.2247869095176753| -0.446593621291369| 0.4825652775216099| | 0.7480549772449115| 0.199681455812404|-0.5429905711786277| 0.8660881736263012| | -0.7446546017705188| 1.4312177915894633| 0.5131170380144356|-0.6499052358759891| | -0.3391197127262108|-0.6958191071345965|-1.4281317658506953|-1.5269801796563447| | 0.7264826865156339|-1.1315560289935476|0.24274492407843978| 1.4883641187609775| +--+-+-+-+ . Spark DataFrame으로부터 pandas-on-Spark DataFrame 생성 | . psdf = sdf.to_pandas_on_spark() . psdf . A B C D . 0 0.346299 | 0.946748 | 1.184695 | -1.158578 | . 1 -0.133470 | 1.224787 | -0.446594 | 0.482565 | . 2 0.748055 | 0.199681 | -0.542991 | 0.866088 | . 3 -0.744655 | 1.431218 | 0.513117 | -0.649905 | . 4 -0.339120 | -0.695819 | -1.428132 | -1.526980 | . 5 0.726483 | -1.131556 | 0.242745 | 1.488364 | . psdf.dtypes . A float64 B float64 C float64 D float64 dtype: object . psdf.columns . Index([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;], dtype=&#39;object&#39;) . psdf.to_numpy() . array([[ 0.3462988 , 0.94674818, 1.18469476, -1.15857826], [-0.13346994, 1.22478691, -0.44659362, 0.48256528], [ 0.74805498, 0.19968146, -0.54299057, 0.86608817], [-0.7446546 , 1.43121779, 0.51311704, -0.64990524], [-0.33911971, -0.69581911, -1.42813177, -1.52698018], [ 0.72648269, -1.13155603, 0.24274492, 1.48836412]]) . psdf.describe() . . A B C D . count 6.000000 | 6.000000 | 6.000000 | 6.000000 | . mean 0.100599 | 0.329177 | -0.079527 | -0.083074 | . std 0.605622 | 1.058219 | 0.918870 | 1.204421 | . min -0.744655 | -1.131556 | -1.428132 | -1.526980 | . 25% -0.339120 | -0.695819 | -0.542991 | -1.158578 | . 50% -0.133470 | 0.199681 | -0.446594 | -0.649905 | . 75% 0.726483 | 1.224787 | 0.513117 | 0.866088 | . max 0.748055 | 1.431218 | 1.184695 | 1.488364 | . psdf.T . 0 1 2 3 4 5 . A 0.346299 | -0.133470 | 0.748055 | -0.744655 | -0.339120 | 0.726483 | . B 0.946748 | 1.224787 | 0.199681 | 1.431218 | -0.695819 | -1.131556 | . C 1.184695 | -0.446594 | -0.542991 | 0.513117 | -1.428132 | 0.242745 | . D -1.158578 | 0.482565 | 0.866088 | -0.649905 | -1.526980 | 1.488364 | . psdf.sort_index(ascending=False) . A B C D . 5 0.726483 | -1.131556 | 0.242745 | 1.488364 | . 4 -0.339120 | -0.695819 | -1.428132 | -1.526980 | . 3 -0.744655 | 1.431218 | 0.513117 | -0.649905 | . 2 0.748055 | 0.199681 | -0.542991 | 0.866088 | . 1 -0.133470 | 1.224787 | -0.446594 | 0.482565 | . 0 0.346299 | 0.946748 | 1.184695 | -1.158578 | . psdf.sort_values(by=&#39;B&#39;) . A B C D . 5 0.726483 | -1.131556 | 0.242745 | 1.488364 | . 4 -0.339120 | -0.695819 | -1.428132 | -1.526980 | . 2 0.748055 | 0.199681 | -0.542991 | 0.866088 | . 0 0.346299 | 0.946748 | 1.184695 | -1.158578 | . 1 -0.133470 | 1.224787 | -0.446594 | 0.482565 | . 3 -0.744655 | 1.431218 | 0.513117 | -0.649905 | . Missing Data . Pandas API on Spark는 missing data를 표현하기 위해 np.nan을 사용 | . pdf1 = pdf.reindex(index=dates[0:4], columns=list(pdf.columns) + [&#39;E&#39;]) . pdf1.loc[dates[0]:dates[1], &#39;E&#39;] = 1 . psdf1 = ps.from_pandas(pdf1) . psdf1 . A B C D E . 2013-01-01 0.346299 | 0.946748 | 1.184695 | -1.158578 | 1.0 | . 2013-01-02 -0.133470 | 1.224787 | -0.446594 | 0.482565 | 1.0 | . 2013-01-03 0.748055 | 0.199681 | -0.542991 | 0.866088 | NaN | . 2013-01-04 -0.744655 | 1.431218 | 0.513117 | -0.649905 | NaN | . missing data 삭제 | . psdf1.dropna(how=&#39;any&#39;) . A B C D E . 2013-01-01 0.346299 | 0.946748 | 1.184695 | -1.158578 | 1.0 | . 2013-01-02 -0.133470 | 1.224787 | -0.446594 | 0.482565 | 1.0 | . missing data 채우기 | . psdf1.fillna(value=5) . A B C D E . 2013-01-01 0.346299 | 0.946748 | 1.184695 | -1.158578 | 1.0 | . 2013-01-02 -0.133470 | 1.224787 | -0.446594 | 0.482565 | 1.0 | . 2013-01-03 0.748055 | 0.199681 | -0.542991 | 0.866088 | 5.0 | . 2013-01-04 -0.744655 | 1.431218 | 0.513117 | -0.649905 | 5.0 | . Operations . 기술 통계 | . psdf.mean() . A 0.100599 B 0.329177 C -0.079527 D -0.083074 dtype: float64 . Spark Configurations . prev = spark.conf.get(&quot;spark.sql.execution.arrow.pyspark.enabled&quot;) # Keep its default value. ps.set_option(&quot;compute.default_index_type&quot;, &quot;distributed&quot;) # Use default index prevent overhead. . spark.conf.set(&quot;spark.sql.execution.arrow.pyspark.enabled&quot;, True) %timeit ps.range(300000).to_pandas() . . 285 ms ± 93.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) . spark.conf.set(&quot;spark.sql.execution.arrow.pyspark.enabled&quot;, False) %timeit ps.range(300000).to_pandas() . 702 ms ± 67.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) . ps.reset_option(&quot;compute.default_index_type&quot;) spark.conf.set(&quot;spark.sql.execution.arrow.pyspark.enabled&quot;, prev) # Set its default value back. . Grouping . psdf = ps.DataFrame({&#39;A&#39;: [&#39;foo&#39;, &#39;bar&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo&#39;, &#39;foo&#39;], &#39;B&#39;: [&#39;one&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;two&#39;, &#39;two&#39;, &#39;one&#39;, &#39;three&#39;], &#39;C&#39;: np.random.randn(8), &#39;D&#39;: np.random.randn(8)}) . psdf . A B C D . 0 foo | one | 0.437018 | 2.192919 | . 1 bar | one | 0.429485 | -0.560230 | . 2 foo | two | -0.171649 | 0.048277 | . 3 bar | three | -0.506166 | -2.782998 | . 4 foo | two | -0.038123 | 1.601338 | . 5 bar | two | 0.438333 | -0.525144 | . 6 foo | one | 0.885746 | 0.038302 | . 7 foo | three | -0.135220 | -0.495829 | . psdf.groupby(&#39;A&#39;).sum() . C D . A . foo 0.977771 | 3.385007 | . bar 0.361653 | -3.868372 | . psdf.groupby([&#39;A&#39;, &#39;B&#39;]).sum() . C D . A B . foo two -0.209772 | 1.649615 | . bar two 0.438333 | -0.525144 | . foo one 1.322764 | 2.231221 | . bar one 0.429485 | -0.560230 | . three -0.506166 | -2.782998 | . foo three -0.135220 | -0.495829 | . Plotting . pser = pd.Series(np.random.randn(1000), index=pd.date_range(&#39;1/1/2000&#39;, periods=1000)) . psser = pd.Series(pser) . psser = psser.cummax() . psser.plot() . &lt;AxesSubplot:&gt; .",
            "url": "https://safenumz.github.io/blog/spark/2022/05/10/pyspark-pandas-api.html",
            "relUrl": "/spark/2022/05/10/pyspark-pandas-api.html",
            "date": " • May 10, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "[Jupyter] Docker 기반 딥러닝 Jupyter Notebook 및 VSCode Server 구축",
            "content": "Environment . CentOS 7 | nvidia-smi 510.60.02 | Docker 20.10.1 | docker-compose 1.27.4 | . Docker 기반 딥러닝 Jupyter Notebook 및 VSCode Server 구축 . 실행 . # 시작 $ docker-compose up -d # 중단 $ docker-compose down . 구성 파일 . .env | docker-compose.yml | dev.Dockerfile | tensorflow.Dockerfile | . .env . HOSTNAME=`hostname` ROOT_DIR=/lab # path on the host VSCODE_PORT=&lt;VSCODE_PORT&gt; VSCODE_PASSWORD=&lt;VSCODE_PASSWORD&gt; VSCODE_DAT_DIR=/lab/devtools/dev/vscode/data/pkgs JUPYTER_PORT=&lt;JUPYTER_PORT&gt; JUPYTER_PASSWORD=&lt;JUPYTER_PASSWORD&gt; JUPYTER_DIR=/lab # path in the container TENSORBOARD_PORT=&lt;TENSORBOARD_PORT&gt; TENSORBOARD_DIR=/lab/devtools/dev/tensorboard/data/runs # path in the container WORKING_DIR=/lab . docker-compose.yml . version: &#39;3.8&#39; services: tensorboard: image: tensorboard build: context: . dockerfile: tensorboard.Dockerfile restart: always container_name: tensorboard hostname: ${HOSTNAME}-tensorboard ports: - ${TENSORBOARD_PORT}:${TENSORBOARD_PORT} volumes: - ${ROOT_DIR}:/jupyter command: [ &quot;tensorboard&quot;, &quot;--logdir=${TENSORBOARD_DIR}&quot;, &quot;--port=${TENSORBOARD_PORT}&quot;, &quot;--bind_all&quot;, ] dev: image: dev build: context: . dockerfile: dev.Dockerfile args: - VSCODE_PASSWORD=${VSCODE_PASSWORD} - JUPYTER_PASSWORD=${JUPYTER_PASSWORD} restart: always container_name: dev hostname: ${HOSTNAME}-dev runtime: nvidia environment: - NVIDIA_VISIBLE_DEVICES=0 - CUDA_VISIBLE_DEVICES=0 volumes: - ${ROOT_DIR}:${ROOT_DIR} ports: - ${JUPYTER_PORT}:${JUPYTER_PORT} - ${VSCODE_PORT}:${VSCODE_PORT} privileged: true stdin_open: true tty: true working_dir: ${WORKING_DIR} command: [ &quot;/bin/bash&quot;, &quot;/start.sh&quot;, &quot;${VSCODE_PORT}&quot;, &quot;${VSCODE_DAT_DIR}&quot;, &quot;${JUPYTER_PORT}&quot;, ] . dev.Dockerfile . FROM nvidia/cuda:11.0-cudnn8-runtime-ubuntu18.04 ARG DEBIAN_FRONTEND=noninteractive ENV TZ=Asia/Seoul # ensure system is updated and has basic build tools RUN apt-get update -y &amp;&amp; apt-get install -y build-essential tzdata git curl wget lftp openssh-server openssh-client sshpass zip unzip pigz vim htop python3-dev python3-pip python3-setuptools default-jdk default-jre locales RUN sed -i &#39;s/^# (ko_KR.UTF-8 )/ 1/&#39; /etc/locale.gen RUN locale-gen RUN localedef -f UTF-8 -i ko_KR ko_KR.UTF-8 ENV LC_ALL=ko_KR.UTF-8 ENV LANGUAGE=ko # Nodejs RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - &amp;&amp; apt-get install -y nodejs &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* # Google Chrome Driver RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - &amp;&amp; sh -c &#39;echo &quot;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list&#39; &amp;&amp; apt-get update -y &amp;&amp; apt-get install google-chrome-stable -y # DataScience RUN python3 -m pip install --upgrade pip &amp;&amp; pip3 install numpy pandas scipy scikit-learn scikit-image pyarrow # Visualization RUN pip3 install matplotlib seaborn plotly # Crawling RUN pip3 install urllib3 beautifulsoup4 fake_useragent webdriver_manager selenium # DB RUN pip3 install sqlalchemy elasticsearch PyMySql lmdb # DL RUN pip3 install Keras tensorflow-gpu==2.4.0 torch torchvision # NLP RUN pip3 install nltk transformers contractions kobert_transformers # Computer Vision RUN pip3 install opencv-python-headless shapely # ETC RUN pip3 install tendo paramiko scp natsort tqdm minio # Notebook RUN pip3 install jupyter jupyterlab ipykernel &amp;&amp; python3 -m ipykernel.kernelspec # Vscode-server RUN curl -fsSL https://code-server.dev/install.sh | sh ARG VSCODE_PASSWORD ARG JUPYTER_PASSWORD ENV PASSWORD=$VSCODE_PASSWORD ENV JUPYTER_PASSWORD=$JUPYTER_PASSWORD COPY start.sh /start.sh WORKDIR / . tensorboard.Dockerfile . FROM python:3.8-slim-buster RUN pip install tensorboard .",
            "url": "https://safenumz.github.io/blog/devops/2022/05/01/jupyter-dl-docker-setting.html",
            "relUrl": "/devops/2022/05/01/jupyter-dl-docker-setting.html",
            "date": " • May 1, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "[Spark] Docker Swarm에서 Spark Cluster, Zeppelin 구축하기",
            "content": "CentOS 7 사용중인 포트 확인 . $ netstat -tulpn | grep LISTEN $ firewall-cmd --zone=public --list-ports . Docker Swarm을 위한 Port Open . TCP port 2376 for secure Docker client communication. This port is required for Docker Machine to work. Docker Machine is used to orchestrate Docker hosts. | TCP port 2377 for cluster management communications. It only needs to be opened on manager nodes. | TCP and UDP port 7946 for communication among nodes | UDP port 4789 for overlay network traffic | . $ firewall-cmd --add-port=2376/tcp --permanent $ firewall-cmd --add-port=2377/tcp --permanent $ firewall-cmd --add-port=7946/tcp --permanent $ firewall-cmd --add-port=7946/udp --permanent $ firewall-cmd --add-port=4789/udp --permanent $ firewall-cmd --reload . Spark를 위한 Port Open . $ firewall-cmd --add-port=4040/tcp --permanent $ firewall-cmd --add-port=6066/tcp --permanent $ firewall-cmd --add-port=7077/tcp --permanent $ firewall-cmd --add-port=8080/tcp --permanent $ firewall-cmd --add-port=8081/tcp --permanent $ firewall-cmd --add-port=19999/tcp --permanent $ firewall-cmd --reload . Manager: Docker Swarm 시작 . # docker swarm init --advertise-addr 192.168.0.100 $ docker swarm init --advertise-addr &lt;MANAGER_NODE_IP&gt; # docker swarm join token 얻기 $ docker swarm join-token manager . docker swarm join –token SWMTKN-1-3k7lnqqrvak9o7tc1keeslu6jxzkkmibpwbbx7a6n6j95wldd7-1e0bf81z39dbzbjgvvalebryg 192.168.0.100:2377 . Worker: Master Node에 연결 . # docker swarm join --token SWMTKN-1-3k7lnqqrvak9o7tc1keeslu6jxzkkmibpwbbx7a6n6j95wldd7-1e0bf81z39dbzbjgvvalebryg 192.168.0.100:2377 $ docker swarm join --token &lt;SWARM_TOKEN&gt; &lt;MANAGER_NODE_IP&gt;:2377 . Master, Worker: sshfs plugin 설치 . Docker Swarm의 Persistant Volume으로 sshfs 사용, 다른거 써도 됨 | . # docker plugin install --grant-all-permissions vieux/sshfs $ docker plugin install --grant-all-permissions vieux/sshfs DEBUG=1 sshkey.source=/home/a/.ssh/ $ docker plugin ls . Master: docker swarm 용 docker-compose 작성 . 편의상 bitnami/spark:3.1.2 을 사용했는데, 권한이 너무 제한적이라 편집이 쉽지 않음, 차라리 처음부터 직접 만드는 게 낫다고 생각되지만 여기선 그냥 진행함 | zeppelin을 사용하기 위해 docker-compose.yml의 하위 경로에 기존 zeppelin에서 사용하던 zeppelin config 파일들을 상황에 맞게 수정하여 넣어둠 ./zeppelin/config/zeppelin-env.sh | ./zeppelin/config/zeppelin-site.xml | ./zeppelin/config/shiro.ini | . | . zeppelin.Dockerfile . FROM bitnami/spark:3.2.1 COPY zeppelin-0.10.1-bin-all.tgz /tmp/zeppelin.tgz RUN tar -xzvf /tmp/zeppelin.tgz -C /opt/ &amp;&amp; mv /opt/zeppelin-* /opt/zeppelin # ENV SPARK_SUBMIT_OPTIONS &quot;--jars /opt/zeppelin/sansa-examples-spark-2016-12.jar&quot; WORKDIR /opt/zeppelin CMD [&quot;/opt/zeppelin/bin/zeppelin.sh&quot;] . zeppelin.Dockerfile build &amp; push . $ docker build -f zeppelin.Dockerfile -t safenumz/spark-zeppelin:0.1 $ docker push safenumz/spark-zeppelin:0.1 . docker-compose.yml . version: &#39;3.8&#39; services: spark-master: deploy: placement: constraints: [node.hostname == lab101] image: bitnami/spark:3.1.2 user: 0:0 command: bin/spark-class org.apache.spark.deploy.master.Master hostname: spark-master environment: SPARK_MODE: master MASTER: spark://spark-master:7077 networks: - spark ports: - 4040:4040 - 6066:6066 - 7077:7077 - 8080:8080 volumes: - type: volume source: ssh-server target: /opt/zeppelin/notebook/persistent spark-worker: deploy: placement: constraints: [node.labels.worker != false] replicas: 3 image: bitnami/spark:3.1.2 command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077 hostname: spark-worker environment: SPARK_MODE: worker SPARK_WORKER_CORES: 4 SPARK_WORKER_MEMORY: 13g networks: - spark ports: - 8081:8081 zeppelin: deploy: placement: constraints: [node.hostname == lab101] image: safenumz/spark-zeppelin:0.1 hostname: zeppelin user: 0:0 configs: - source: zeppelin_xml target: /opt/zeppelin/conf/zeppelin-site.xml mode: 444 - source: zeppelin_shiro target: /opt/zeppelin/conf/shiro.ini mode: 444 - source: zeppelin_env target: /opt/zeppelin/conf/zeppelin-env.sh mode: 444 environment: - &quot;MASTER=spark://spark-master:7077&quot; - &quot;SPARK_MASTER=spark://spark-master:7077&quot; networks: - spark ports: - 19999:8888 volumes: - type: volume source: ssh-server target: /opt/zeppelin/notebook/persistent configs: zeppelin_env: file: ./zeppelin/config/zeppelin-env.sh zeppelin_xml: file: ./zeppelin/config/zeppelin-site.xml zeppelin_shiro: file: ./zeppelin/config/shiro.ini networks: spark: attachable: true volumes: ssh-server: driver: vieux/sshfs driver_opts: sshcmd: &quot;a@192.168.0.101:/lab/storages/private/zeppelin/notebook/persistent&quot; . Master: Spark Cluster 실행 . # 시작 $ docker stack deploy --compose-file=docker-compose.yml spark # 종료 $ docker stack rm spark . $ docker node ls $ docker service ls .",
            "url": "https://safenumz.github.io/blog/architecture/2022/05/01/spark_cluster_on_docker_swarm.html",
            "relUrl": "/architecture/2022/05/01/spark_cluster_on_docker_swarm.html",
            "date": " • May 1, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "[Spark] PySpark Cluster 구축 및 Jupyter lab 세팅",
            "content": "Environment . Role IP HostName OS Ram CoreNum . Client | 192.168.0.99 | lab | MacOS | 16G | 12 | . Master | 192.168.0.100 | lab100 | CentOS 7 | 16G | 8 | . Worker | 192.168.0.101 | lab101 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.102 | lab102 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.103 | lab103 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.104 | lab104 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.105 | lab105 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.106 | lab106 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.107 | lab107 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.108 | lab106 | CentOS 7 | 32G | 8 | . Worker | 192.168.0.109 | lab107 | CentOS 7 | 32G | 8 | . Client, Master, Woker: hosts 설정 . 지금 다시 생각해 보니까 Client를 MacOS로 하는 건 jars 들을 불러올 때 좋지 않음. 각종 버그가 발생할 수 있음. 그냥 동일한 리눅스로 맞춰주는 게 가장 무난. | . $ vi /etc/hosts . # /etc/hosts 192.168.0.99 lab 192.168.0.100 lab100 192.168.0.101 lab101 192.168.0.102 lab102 192.168.0.103 lab103 192.168.0.104 lab104 192.168.0.105 lab105 192.168.0.106 lab106 192.168.0.107 lab107 192.168.0.108 lab108 192.168.0.109 lab109 . Client, Master, Woker: 모든 서버가 ssh 패스워드 없이 접속가능해야 함 . 모든 서버에 ssh public key를 공유하는 건 매우 번거로운 일이라 간단한 스크립트 작성하여 실행함 | . 스크립트 실행 전 주의 사항 . CLIENT SERVER에서 실행 | 개인 테스트용으로 만든 스크립트로 운영용이 아님, 운영용으로 만들기 위해서는 더 옵션들을 추가할 필요 | 전 서버에서 sudo 없이 yum command 사용 가능하게 설정해 놓거나, 아니면 사전에 전 서버에 sshpass를 설치해야 함 yum install sshpass -y | 전 서버의 ~/.ssh/authorized_keys 파일에 대해 쓰기 권한이 있어야 함 (일반적으로 400으로 권한 설정해 놓는데 일시적으로 777로 풀어줘야 함) | 공개키를 새로 생성해서 overwrite하는 방식이라 스크립트를 돌리면 기존 public key는 사용 못하게 됨, 추후 수정 필요 | . 스크립트 실행 . $ bash setup_ssh.sh $PWD/ssh_config.sh . ssh_config.sh . 서버 정보 설정 | . #!/bin/bash # CLIENT=(user ip password port nickname) # Available OS: CentOS, Ubuntu, Mac # CLIENT=(a 192.168.0.99 &lt;password&gt; 22 lab) # SERVER=(user ip password port nickname) # Available OS: CentOS, Ubuntu SERVER_0=(a 192.168.0.99 &lt;password&gt; 22 lab) SERVER_1=(a 192.168.0.100 &lt;password&gt; 22 lab100) SERVER_2=(a 192.168.0.101 &lt;password&gt; 22 lab101) SERVER_3=(a 192.168.0.102 &lt;password&gt; 22 lab102) SERVER_4=(a 192.168.0.103 &lt;password&gt; 22 lab103) SERVER_5=(a 192.168.0.104 &lt;password&gt; 22 lab104) SERVER_6=(a 192.168.0.105 &lt;password&gt; 22 lab105) SERVER_7=(a 192.168.0.106 &lt;password&gt; 22 lab106) SERVER_8=(a 192.168.0.107 &lt;password&gt; 22 lab107) SERVER_9=(a 192.168.0.108 &lt;password&gt; 22 lab108) SERVER_10=(a 192.168.0.109 &lt;password&gt; 22 lab109) SERVER_LIST=( SERVER_0[@] SERVER_1[@] SERVER_2[@] SERVER_3[@] SERVER_4[@] SERVER_5[@] SERVER_6[@] SERVER_7[@] SERVER_8[@] SERVER_9[@] SERVER_10[@] ) . setup_ssh.sh . ssh_config.sh의 서버 정보를 불러들어와서 전 서버를 돌면서 public key를 서로 공유함 | . #!/bin/bash # =========================================================================== # Program: setup_ssh.sh # Path: . # Usage: bash setup_ssh.sh $1 # $1: $PWD/ssh_config.sh # ============================================================================ source $1 function remote_cmd() { local user=$1 local ip=$2 local passwd=$3 local port=$4 local command=$5 sshpass -p ${passwd} ssh -p ${port} -o StrictHostKeyChecking=no ${user}@${ip} &quot;export PATH=$PATH:/usr/local/bin:/usr/bin &amp;&amp; ${command}&quot; } function install_sshpass() { local user=$1 local ip=$2 local passwd=$3 local port=$4 echo &quot;install-sshpass ${ip}:${port}&quot; if [[ $(remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;cat /etc/*release&quot;) =~ &quot;CentOS&quot; ]]; then remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;yum install -y sshpass&quot; elif [[ $(remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;cat /etc/*release&quot;) =~ &quot;Ubuntu&quot; ]]; then remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;apt-get install -y sshpass&quot; else echo &quot;[WARNING] Invalid OS... (Valid OS: CentOS, Ubuntu)&quot; fi } function ssh_keygen() { local user=$1 local ip=$2 local passwd=$3 local port=$4 local nickname=$5 echo &quot;*** ssh-keygen ${nickname}(${user}@${ip}:${port})&quot; remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;ssh-keygen -t rsa -P &#39;&#39; -f ~/.ssh/id_rsa &amp;&amp; cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys&quot; &lt;&lt;&lt; y &gt; /dev/null } function share_ssh_key() { local src_user=$1 local src_ip=$2 local src_passwd=$3 local src_port=$4 local src_nickname=$5 local dst_user=$6 local dst_ip=$7 local dst_passwd=$8 local dst_port=$9 local dst_nickname=$10 local dst_home=$(remote_cmd &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_passwd&quot; &quot;$dst_port&quot; &quot;echo $HOME&quot;) echo &quot;*** share ssh-key ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_nickname}(${dst_user}@${dst_ip}:${dst_port})&quot; echo &quot;sshpass -p ${dst_passwd} scp -P ${dst_port} -o StrictHostKeyChecking=no ~/.ssh/id_rsa.pub ${dst_user}@${dst_ip}:/${dst_home}/.ssh/${src_nickname}.pub&quot; remote_cmd &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;sshpass -p ${dst_passwd} scp -P ${dst_port} -o StrictHostKeyChecking=no ~/.ssh/id_rsa.pub ${dst_user}@${dst_ip}:/${dst_home}/.ssh/${src_nickname}.pub&quot; remote_cmd &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_passwd&quot; &quot;$dst_port&quot; &quot;cat ~/.ssh/${src_nickname}.pub &gt;&gt; ~/.ssh/authorized_keys&quot; } function set_authority() { local user=$1 local ip=$2 local passwd=$3 local port=$4 local nickname=$5 echo &quot;set authority ${nickname}(${user}@${ip}:${port})&quot; remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;chmod 400 ~/.ssh/authorized_keys&quot; } function validate_ssh_conn() { local src_user=$1 local src_ip=$2 local src_passwd=$3 local src_port=$4 local src_nickname=$5 local dst_user=$6 local dst_ip=$7 local dst_port=$8 local dst_nickname=$9 echo -e &quot; n*** validate ssh-connection ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_nickname}(${dst_user}@${dst_ip}:${dst_port})&quot; remote_cmd &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;ssh ${dst_user}@${dst_ip} -p ${dst_port} &#39;echo 2&gt;&amp;1&#39; &amp;&amp; echo &#39;[SSH CONNECTION SUCCESS] ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_nickname}(${dst_user}@${dst_ip}:${dst_port})&#39; || echo &#39;[SSH CONNECTION FAILURE] ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_user}@${dst_nickname}(${dst_ip}:${dst_port})&#39;&quot; } function main() { # client if [ ! -z $CLIENT ]; then echo &quot;CLIENT SETTING 1&quot; ssh-keygen -t rsa -P &#39;&#39; -f ~/.ssh/id_rsa &lt;&lt;&lt; y &gt; /dev/null cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys chmod 400 ~/.ssh/authorized_keys fi # server: sshpass 설치 및 ssh-keygen for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local user=${!SERVER_LIST[i]:0:1} local ip=${!SERVER_LIST[i]:1:1} local passwd=${!SERVER_LIST[i]:2:1} local port=${!SERVER_LIST[i]:3:1} local nickname=${!SERVER_LIST[i]:4:1} # sshpass 설치 install_sshpass &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; # ssh-keygen ssh_keygen &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;$nickname&quot; done # server: 각 서버 간 public key 공유 for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local src_user=${!SERVER_LIST[i]:0:1} local src_ip=${!SERVER_LIST[i]:1:1} local src_passwd=${!SERVER_LIST[i]:2:1} local src_port=${!SERVER_LIST[i]:3:1} local src_nickname=${!SERVER_LIST[i]:4:1} # client if [ ! -z $CLIENT ]; then echo &quot;CLIENT SETTING 2&quot; local client_nickname=${CLIENT[4]} sshpass -p &quot;$src_passwd&quot; scp -P &quot;$src_port&quot; -o StrictHostKeyChecking=no ~/.ssh/id_rsa.pub &quot;${src_user}&quot;@&quot;${src_ip}&quot;:/$(echo $HOME)/.ssh/${client_nickname}.pub remote_cmd &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;cat ~/.ssh/${client_nickname}.pub &gt;&gt; ~/.ssh/authorized_keys&quot; fi for ((j=0; j&lt;${#SERVER_LIST[@]}; j++)) do local dst_user=${!SERVER_LIST[j]:0:1} local dst_ip=${!SERVER_LIST[j]:1:1} local dst_passwd=${!SERVER_LIST[j]:2:1} local dst_port=${!SERVER_LIST[j]:3:1} local dst_nickname=${!SERVER_LIST[j]:4:1} if [[ &quot;${src_ip}:${src_port}&quot; != &quot;${dst_ip}:${dst_port}&quot; ]]; then share_ssh_key &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;$src_nickname&quot; &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_passwd&quot; &quot;$dst_port&quot; &quot;$dst_nickname&quot; fi done done # authorized_keys 보안 for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local user=${!SERVER_LIST[i]:0:1} local ip=${!SERVER_LIST[i]:1:1} local passwd=${!SERVER_LIST[i]:2:1} local port=${!SERVER_LIST[i]:3:1} local nickname=${!SERVER_LIST[i]:4:1} set_authority &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;$nickname&quot; done # 잘 접속되는지 최종 확인 for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local src_user=${!SERVER_LIST[i]:0:1} local src_ip=${!SERVER_LIST[i]:1:1} local src_passwd=${!SERVER_LIST[i]:2:1} local src_port=${!SERVER_LIST[i]:3:1} local src_nickname=${!SERVER_LIST[i]:4:1} for ((j=0; j&lt;${#SERVER_LIST[@]}; j++)) do local dst_user=${!SERVER_LIST[j]:0:1} local dst_ip=${!SERVER_LIST[j]:1:1} local dst_port=${!SERVER_LIST[j]:3:1} local dst_nickname=${!SERVER_LIST[j]:4:1} if [[ &quot;${src_ip}:${src_port}&quot; != &quot;${dst_ip}:${dst_port}&quot; ]]; then validate_ssh_conn &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;$src_nickname&quot; &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_port&quot; &quot;$dst_nickname&quot; fi done done } main . Client: Java 설치 . .bash_profile에 Java 환경변수 등록 . # .bash_profile export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home export JRE_HOME=${JAVA_HOME}/jre . Master, Worker: Java 설치 . $ sudo yum install java-1.8.0-openjdk -y # java 어디에 설치되었는지 확인 $ readlink -f $(which java) . 환경변수 등록 | . $ vi ~/.bashrc . # ~/.bashrc JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64 . $ source ~/.bashrc . Master, Worker: Python 설치 . $ yum install python3.6 -y . CentOS 7의 yum이 python2를 사용하기 때문에 좋은 방법은 아니지만, 일단 혼자 쓰는 거니까 편의상 python 명령어를 python2.7가 아닌 python3.6에 연결 (참고로 python3.6은 Spark 3.2.0에서 deprecated 됨) | . $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2 $ sudo update-alternatives --config python . pip 명령어도 pip2.7이 아닌 pip3.6에 연결 | . $ sudo rm /usr/bin/pip $ sudo ln -s /usr/bin/pip3.6 /usr/bin/pip $ pip -V . Client, Master, Worker: Spark 설치 . Spark 다운로드 . $ wget https://dlcdn.apache.org/spark/spark-3.1.3/spark-3.1.3-bin-hadoop3.2.tgz $ tar -xvzf spark-3.1.3-bin-hadoop3.2.tgz $ mv spark-3.1.3-bin-hadoop3.2.tgz spark . Spark 환경변수 등록 . # MacOS vi ~/.bash_profile # CentOS 7 vi ~/.bashrc . # MacOS(Client): ~/.bash_profile export BASE_DIR=/Users/a export SPARK_HOME=${BASE_DIR}/spark export PYSPARK_PYTHON=/opt/anaconda3/envs/pyspark/bin/python export PYSPARK_DRIVER_PYTHON=jupyter export PYSPARK_DRIVER_PYTHON_OPTS=&#39;notebook&#39; # CentOS 7(Master, Worker): ~/.bashrc export BASE_DIR=/home/a export SPARK_HOME=${BASE_DIR}/spark . # MacOS $ source ~/.bash_profile # CentOS 7 $ source ~/.bashrc . Spark 세부 설정 및 튜닝 . 물리적인 Worker가 9개, Worker들의 cores 수가 8개니까 대략적으로 Worker 당 instance 2개, instance 당 4 cores씩 배분하면 적절할 것으로 보임 SPARK_EXECUTOR_INSTANCES=18 | SPARK_EXECUTOR_CORES=4 | . | 물리적인 메모리는 Worker 당 32G인데, instance가 2개 뜨니까, 좀 여유남기고 13G 정도만 배정 SPARK_EXECUTOR_MEMORY=13G | . | SPARK_DRIVER_CORES는 cluster mode에서만 사용되고 기본값이 1인데 SPARK_EXECUTOR_CORES와 같게 하는 것이 일반적(권장), client 모드로만 쓸 예정이지만 혹시 몰라 지정해 둠 SPARK_DRIVER_CORES=4 | . | . echo &#39;spark.master spark://lab100:7077&#39; &gt;&gt; spark/conf/spark-defaults.conf echo &#39;spark.serializer org.apache.spark.serializer.KryoSerializer&#39; &gt;&gt; spark/conf/spark-defaults.conf echo &#39;export SPARK_MASTER_IP=&quot;192.168.0.100&quot;&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_MASTER_HOST=lab100&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_MASTER_WEBUI_PORT=7777&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_DRIVER_CORES=4&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_DRIVER_MEMORY=5G&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_EXECUTOR_INSTANCES=6&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_EXECUTOR_CORES=4&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_EXECUTOR_MEMORY=13G&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_WORKER_DIR=$SPARK_HOME/work&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_LOG_DIR=$SPARK_HOME/logs&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_PID_DIR=/tmp/spark/pid&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;export SPARK_LOCAL_DIRS=/tmp/spark/scratch&#39; &gt;&gt; spark/conf/spark-env.sh # echo &#39;export PYSPARK_PYTHON=/home/a/anaconda3/envs/pyspark/bin/python&#39; &gt;&gt; spark/conf/spark-env.sh # echo &#39;export PYSPARK_DRIVER_PYTHON=/home/a/anaconda3/envs/pyspark/bin/python&#39; &gt;&gt; spark/conf/spark-env.sh echo &#39;lab101&#39; &gt;&gt; spark/conf/slaves echo &#39;lab102&#39; &gt;&gt; spark/conf/slaves echo &#39;lab103&#39; &gt;&gt; spark/conf/slaves echo &#39;lab104&#39; &gt;&gt; spark/conf/slaves echo &#39;lab105&#39; &gt;&gt; spark/conf/slaves echo &#39;lab106&#39; &gt;&gt; spark/conf/slaves echo &#39;lab107&#39; &gt;&gt; spark/conf/slaves echo &#39;lab108&#39; &gt;&gt; spark/conf/slaves echo &#39;lab109&#39; &gt;&gt; spark/conf/slaves . Master: Spark Cluster 실행 . # 시작 $ spark/sbin/start-all.sh # 중지 $ spark/sbin/stop-all.sh . :로 접속하여 spark cluster가 잘 구성되었는지 확인 http://192.168.0.100:7777 | . | . Client: Jupyter Notebook 세팅 . Client에서는 편의상 Conda로 Python을 관리 | . Jupyter Notebook 설치 . $ pip install jupyterlab $ pip install jupyternotebook . Jupyter Notebook 원격 접속 설정 . $ jupyter-lab --generate-config $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py . # ~/.jupyter/jupyter_notebook_config.py c = get_config() c.NotebookApp.allow_origin = &#39;*&#39; c.NotebookApp.ip = &#39;*&#39; # Port 변경 c.NotebookApp.port = 9988 # 창으로 바로 안뜨게 c.NotebookApp.open_browser = False # jupyter 시작 위치 설정 c.NotebookApp.notebook_dir = &#39;/Users/a&#39; # 패스워드 설정: 이건 여기선 안함, 실행 명령어에 옵션으로 지정할 예정 # c.NotebookApp.password_required = True # c.NotebookApp.password = &#39;&#39; . Conda pyspark kernel 생성 . $ conda create -n pyspark python=3.6 anaconda $ conda activate pyspark (pyspark)$ which python /opt/anaconda3/envs/pyspark/bin/python . sparksql-magic 설치 . (pyspark)$ pip install sparksql-magic . sparksql-magic 사용법 . jupyter notebook 셀에서 | . %load_ext sparksql_magic . %%sparksql SELECT * FROM dfTable . Conda pyspark kernel 설정 . # /home/a/anaconda3/envs/pyspark/share/jupyter/kernels/python3/kernel.json $ vi ~/Library/Jupyter/kernels/pyspark/kernel.json . { &quot;argv&quot;: [ &quot;/opt/anaconda3/envs/pyspark/bin/python&quot;, &quot;-m&quot;, &quot;ipykernel_launcher&quot;, &quot;-f&quot;, &quot;{connection_file}&quot; ], &quot;display_name&quot;: &quot;pyspark&quot;, &quot;language&quot;: &quot;python&quot;, &quot;env&quot;: { &quot;SPARK_HOME&quot;: &quot;/Users/a/spark&quot;, &quot;PYTHONPATH&quot;: &quot;/Users/a/spark/python/:/Users/a/spark/python/lib/py4j-0.10.9.3-src.zip:/Users/a/spark/python/lib/pyspark.zip&quot;, &quot;PYSPARK_PYTHON&quot;: &quot;/usr/bin/python&quot;, &quot;PYSPARK_DRIVER_PYTHON&quot;: &quot;jupyter&quot;, &quot;PYSPARK_DRIVER_PYTHON_OPTS&quot;: &quot;notebook&quot;, &quot;PYTHONSTARTUP&quot;: &quot;/Users/a/spark/python/pyspark/shell.py&quot;, &quot;PYSPARK_SUBMIT_ARGS&quot;: &quot;--master=spark://&lt;SPARK_MASTER_IP&gt;:&lt;SPARK_MASTER_PORT&gt; --name &#39;pyspark.jupyter&#39; --packages org.apache.hadoop:hadoop-aws:3.1.3,com.amazonaws:aws-java-sdk-bundle:1.11.563,com.google.guava:guava:27.1-jre --deploy-mode client pyspark-shell&quot; } . 시작 시 자동 import 설정 . $ ipython profile create . [ProfileCreate] Generating default config file: &#39;/home/a/.ipython/profile_default/ipython_config.py&#39; [ProfileCreate] Generating default config file: &#39;/home/a/.ipython/profile_default/ipython_kernel_config.py&#39; . $ vi /home/a/.ipython/profile_default/startup/00-first_.py . import pandas as pd import numpy as np . Jupyter Notebook 실행 Script: start-lab.sh . #!/bin/bash JUPYTER_PASSWORD=&lt;JUPYTER_PASSWORD&gt; source /opt/anaconda3/etc/profile.d/conda.sh conda activate pyspark jupyter-lab --ip 0.0.0.0 --port &lt;JUPYTER_PORT&gt; --NotebookApp.password=$(echo $JUPYTER_PASSWORD | python3 -c &#39;from IPython.lib.security import passwd;print(passwd(input()))&#39;) --allow-root --no-browser &amp; . $ bash start-lab.sh .",
            "url": "https://safenumz.github.io/blog/architecture/2022/05/01/spark-cluster-jupyter.html",
            "relUrl": "/architecture/2022/05/01/spark-cluster-jupyter.html",
            "date": " • May 1, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "[MySQL] MySQL PHPMyAdmin Docker로 올리기",
            "content": "파일 구성 . -- docker-compose.yml | -- .env | -- mysql -- data | -- config -- my.cnf . 실행 . # 시작 $ docker-compose up -d # 중단 $ docker-compose down . .env . MYSQL_ROOT_PASSWORD=&lt;MYSQL_ROOT_PASSWORD&gt; MYSQL_DATABASE=&lt;MYSQL_DATABASE&gt; MYSQL_USER=&lt;MYSQL_USER&gt; MYSQL_PASSWORD=&lt;MYSQL_PASSWORD&gt; MYSQL_PORT=&lt;MYSQL_PORT&gt; PMA_PORT=&lt;PMA_PORT&gt; . my.cnf . [mysqld] # port=3306 default-time-zone=&#39;+9:00&#39; character-set-server=utf8mb4 collation-server=utf8mb4_unicode_ci skip-character-set-client-handshake max_connections = 2000 max_allowed_packet = 1G innodb_log_file_size = 1G innodb_buffer_pool_size = 8G innodb_log_file_size = 256M innodb_thread_concurrency = 16 [client] # port=3306 default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqldump] default-character-set = utf8mb4 . docker-compose.yml . version: &#39;3.8&#39; services: db: image: mysql:5.7 container_name: mysql volumes: - db_dat:/var/lib/mysql restart: always ports: - &quot;${MYSQL_PORT}:3306&quot; environment: MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} MYSQL_DATABASE: ${MYSQL_DATABASE} MYSQL_USER: ${MYSQL_USER} MYSQL_PASSWORD: ${MYSQL_PASSWORD} TZ: Asia/Seoul configs: - source: my_conf target: /etc/my.cnf mode: 444 networks: - mysql_net phpmyadmin: image: phpmyadmin/phpmyadmin:latest container_name: phpmyadmin restart: always ports: - &#39;${PMA_PORT}:80&#39; environment: PMA_HOST: db PMA_PORT: 3306 MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} PMA_CONTROLHOST: db PMA_CONTROLPORT: 3306 PMA_PMADB: phpmyadmin PMA_CONTROLUSER: root PMA_CONTROLPASS: ${MYSQL_ROOT_PASSWORD} PMA_QUERYHISTORYDB: true PMA_QUERYHISTORYMAX: 5000 MEMORY_LIMIT: 1G networks: - mysql_net depends_on: - db configs: my_conf: file: ./mysql/config/my.cnf networks: mysql_net: volumes: db_dat: driver: local driver_opts: type: &#39;none&#39; o: &#39;bind&#39; device: &#39;/lab/devtools/mysql-phpmyadmin/mysql/data&#39; .",
            "url": "https://safenumz.github.io/blog/architecture/2022/04/10/docker-mysql-phpmyadmin.html",
            "relUrl": "/architecture/2022/04/10/docker-mysql-phpmyadmin.html",
            "date": " • Apr 10, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "[Trouble PySpark] PySpark 3.2.1에서 MinIO 연결 시 dependency 에러",
            "content": "guava 버전이 낮아서 문제가 생길 수 있음 | . $ cd $SPARK_HOME/jars $ mv guava-14.0.1.jar guava-14.0.1.jar.bak $ wget https://repo1.maven.org/maven2/com/google/guava/guava/31.1-jre/guava-31.1-jre.jar $ wget https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.3.1/hadoop-aws-3.3.1.jar $ wget https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.12.218/aws-java-sdk-bundle-1.12.218.jar .",
            "url": "https://safenumz.github.io/blog/trouble/2022/03/27/pyspark-minio-error.html",
            "relUrl": "/trouble/2022/03/27/pyspark-minio-error.html",
            "date": " • Mar 27, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "[Spark] PySpark에서 MinIO 연결",
            "content": "MinIO 연결을 위한 Pyspark &amp; jars dependency . Pyspark: 3.1.2 | org.apache.hadoop:hadoop-aws:3.1.3 | com.amazonaws:aws-java-sdk-bundle:1.11.563 | com.google.guava:guava:27.1-jre | . jupyter notebook에서 dependency 적용 예시 . # PYSPARK_SUBMIT_ARGS --master=spark://&lt;SPARK_MASTER_URL&gt;:7077 --name &#39;pyspark.jupyter&#39; --packages org.apache.hadoop:hadoop-aws:3.1.3,com.amazonaws:aws-java-sdk-bundle:1.11.563,com.google.guava:guava:27.1-jre --deploy-mode client pyspark-shell . Trobule Shooting . 읽기나 쓰기 중에 에러가 발생하면 dependency 문제일 가능성이 크니 –packages 옵션을 통해 jars를 넣지 말고, $SPARK_HOME/jars 기본 경로에 jars 파일을 직접 넣거나 사용자 경로에 jars 파일을 넣고 우선순위를 설정하면 됨 | –conf “spark.driver.userClassPathFirst=true” –conf “spark.executor.userClassPathFirst=true” –conf “spark.driver.extraClassPath=/Users/a/spark/drivers/* “ –conf “spark.executor.extraClassPath=/Users/a/spark/drivers/* “ | $SPARK_HOME/conf/spark-defaults.conf에다 기본값으로 넣을 수도 있음 | . # $SPARK_HOME/conf/spark-defaults.conf spark.executor.userClassPathFirst true spark.driver.userClassPathFirst true spark.driver.extraClassPath /Users/a/spark/drivers/* spark.executor.extraClassPath /Users/a/spark/drivers/* . MinIO Config . import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://&lt;MINIO_SERVICE_URL&gt;:&lt;MINIO_SERVICE_PORT&gt;&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . 참고: S3 Config . config = configparser.ConfigParser() config.read_file(open(&#39;aws/dl.cfg&#39;)) os.environ[&quot;AWS_ACCESS_KEY_ID&quot;]= config[&#39;default&#39;][&#39;AWS_ACCESS_KEY_ID&#39;] os.environ[&quot;AWS_SECRET_ACCESS_KEY&quot;]= config[&#39;default&#39;][&#39;AWS_SECRET_ACCESS_KEY&#39;] spark = SparkSession .builder .config(&quot;spark.jars.packages&quot;, &quot;org.apache.hadoop:hadoop-aws:2.7.0&quot;) .config(&quot;spark.hadoop.fs.s3a.impl&quot;,&quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) .config(&quot;spark.hadoop.fs.s3a.awsAccessKeyId&quot;, os.environ[&#39;AWS_ACCESS_KEY_ID&#39;]) .config(&quot;spark.hadoop.fs.s3a.awsSecretAccessKey&quot;, os.environ[&#39;AWS_SECRET_ACCESS_KEY&#39;]) .getOrCreate() . CSV Read . df = spark.read .option(&quot;header&quot;, &quot;true&quot;) .option(&quot;inferSchema&quot;, &quot;true&quot;) .csv(&quot;s3a://data/flight-data/csv/2015-summary.csv&quot;) df.show() . CSV Write . df.write.format(&quot;csv&quot;).mode(&quot;overwrite&quot;).option(&quot;sep&quot;, &quot; t&quot;) .save(&quot;s3a://tmp/my-tsv-file.csv&quot;) . Spark TrainValidationSplitModel MinIO에 저장 . $ spark_ml_model.write().overwrite().save(&quot;s3a://test/modelLocation&quot;) # model = TrainValidationSplitModel.load(&quot;s3a://test/modelLocation&quot;) . 기타 Write . tempdf .save .mode(&quot;append&quot;) .partitionBy(&quot;p_country&quot;,&quot;pt_year&quot;, &quot;pt_month&quot;, &quot;pt_day&quot;, &quot;pt_secs&quot;) .parquet(f&quot;s3a://{params[&#39;bucket_name&#39;]}/output/landing/{system_}/{params[&#39;interface&#39;]}/{str(uuid.uuid4())}&quot;) tempdf=tempdf.repartition(col(&quot;pt_country&quot;),col(&quot;pt_year&quot;),col(&quot;pt_month&quot;),col(&quot;pt_day&quot;),col(&quot;pt_secs&quot;)) tempdf .coalesce(2) .write .partitionBy(&#39;pt_country&#39;,&#39;pt_year&#39;,&#39;pt_month&#39;,&#39;pt_day&#39;,&#39;pt_secs&#39;) .parquet(f&quot;s3a://{params[&#39;bucket_name&#39;]}/output/landing/{system_}/{params[&#39;interface&#39;]}/new_{str(uuid.uuid4())}.parquet&quot;,mode=&#39;overwrite&#39;) tempdf .write .format(&quot;parquet&quot;) .mode(&quot;append&quot;) .partitionBy(*[&quot;p_country&quot;,&quot;pt_year&quot;, &quot;pt_month&quot;, &quot;pt_day&quot;, &quot;pt_secs&quot;]) .save(f&quot;s3a://{params[&#39;bucket_name&#39;]}/output/landing/{system_}/{params[&#39;interface&#39;]}/{str(uuid.uuid4())}&quot;) .",
            "url": "https://safenumz.github.io/blog/spark/2022/01/27/Pyspark-minio-connection.html",
            "relUrl": "/spark/2022/01/27/Pyspark-minio-connection.html",
            "date": " • Jan 27, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "[ML] Bagging과 Boosting",
            "content": "Bagging and Boosting &#47784;&#45944; . &#54200;&#54693;-&#48516;&#49328; &#49345;&#52649;&#44288;&#44228;(Bias-variance Trade-off) . 1) 편향과 분산의 정의 . 편향(Bias): 점추정 예측값과 실제값의 차이 | 모델 학습시 여러 데이터로 학습 후 예측값의 범위가 정답과 얼마나 멀리 있는지 측정 | . | 편향(Bias(Real)): 모형화(단순화)로 미처 반영하지 못한 복잡성 =&gt; 편향이 작다면 Training 데이터 패턴(복잡성)을 최대반영 의미 =&gt; 편향이 크다면 Training 데이터 패턴(복잡성)을 최소반영 의미 | 분산(Variance): 구간추정 학습한 모델의 예측값이 평균으로부터 퍼진 정도(변동성/분산) | 여러 모델로 학습을 반복한다면, 학습된 모델별로 예측한 값들의 차이를 측정 | . | 분산(Variance(Real)): 다른 데이터(Testing)를 사용했을때 발생할 변화 =&gt; 분산이 작다면 다른 데이터로 예측시 적은 변동 예상 =&gt; 분산이 크다면 다른 데이터로 예측시 많은 변동 예상 | . $ begin{align*} text{Equation of Error} &amp;&amp; Err(x) &amp;= E Bigl[ bigl(Y- hat{f}(x) bigr)^2 Bigr] &amp;&amp; &amp;= Bigl(E[ hat{f}(x)] - f(x) Bigr)^2 + E Bigl[ bigl( hat{f}(x) - E[ hat{f}(x)] bigr)^2 Bigr] + sigma_{ epsilon}^2 &amp;&amp; &amp;= text{Bias}^2 + text{Variance} + text{Irreducible Error} end{align*} $ . 2) 편향과 분산의 관계 . 모델의 복잡도가 낮으면 Bias가 증가하고 Variance가 감소(Underfitting) : 구간추정 범위는 좁으나 점추정 정확성 낮음 : Training/Testing 모두 예측력이 낮음 | 모델의 복잡도가 높으면 Bias가 감소하고 Variance가 증가(Overfitting) : 점추정 정확성은 높으나 구간추정 범위는 넓음 : Training만 잘 예측력 높고 Testing은 예측력 낮음 | Bias와 Variance가 최소화 되는 수준에서 모델의 복잡도 선택 | . Bagging vs Boosting . 앙상블(Ensemble, Ensemble Learning, Ensemble Method)이란 머신러닝에서 여러개의 모델을 학습시켜, 그 모델들의 예측결과들을 이용해 하나의 모델보다 더 나은 값을 예측하는 방법 . Bagging(Bootstrap Aggregating): - BootStrapping을 통해 여러 학습 데이터를 만들고, 이들을 averaging prediction을 통해 합침 - 부트스트래핑(Bootstraping): 예측값과 실제값의 차이 중복을 허용한 리샘플링(Resampling) - 페이스팅(Pasting): 이와 반대로 중복을 허용하지 않는 샘플링 . Bias가 낮은 모델들을 이용해서 variance를 줄임 | 의사결정나무(Decision Tree): | 렌덤포레스트(Random Forest): 여러개의 의사결정나무(Decision Tree) 생성한 다음, 각 개별 트리의 예측값들 중 가장 많은 선택을 받은 변수들로 예측하는 알고리즘, 의사결정나무의 CLT버전 | . | . # DecisionTree fit = DecisionTreeRegressor().fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) # RandomForestRegressor fit = RandomForestRegressor(n_estimators=100, random_state=123).fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) . Boosting: 성능이 약한 학습기(weak learner)를 여러 개 연결하여 강한 학습기(strong learner)를 만드는 앙상블 학습 | 앞에서 학습된 모델을 보완해나가면서 더나은 모델로 학습시키는 것 | . | . - Bagging Boosting . 특징 | 병렬 앙상블 모델(각 모델은 서로 독립) | 연속 앙상블 모델(이전 모델의 오류 반영) | . 목적 | Variance 감소 | Bias 감소 | . 적합한 상황 | Low Bias + High Variance | High Bias + Low Variance | . Sampling | Random Sampling | Random Sampling with weight on error | . Boosting &#50508;&#44256;&#47532;&#51608; . Adaptive Boosting(AdaBoost): 학습된 모델이 과소적합(학습하기 어려운 데이터)된 학습 데이터 샘플의 가중치를 높이면서 더 잘 적합되도록 하는 방식 | . Gradient Boosting Machine(GBM): 아다부스트 처럼 학습단계 마다 데이터 샘플의 가중치를 업데이트 하는 것이 아니라, 학습 전단계 모델에서의 잔차(Residual)을 모델에 학습시키는 방법 | . XGBoost(eXtreme Gradient Boosting): 높은 예측력으로 많은 양의 데이터를 다룰 때 사용되는 부스팅 알고리즘 | . LightGBM: 현존하는 부스팅 알고리즘 중 가장 빠르고 높은 예측력 제공 | . Algorithms Specification Others . AdaBoost | 다수결을 통한 정답분류 및 오답에 가중치 부여 | - | . GBM | 손실함수(검증지표)의 Gradient로 오답에 가중치 부여 | - | . XGBoost | GMB대비 성능향상시스템(CPU, Mem.) 자원 효율적 사용 | 2014년 공개 | . LightGBM | XGBoost대비 성능향상 및 자원소모 최소화XGBoost가 처리하지 못하는 대용량 데이터 학습가능근사치분할(Approximates the Split)을 통한 성능향상 | 2016년 공개 | . # GradientBoostingRegression fit = GradientBoostingRegressor(alpha=0.1, learning_rate=0.05, loss=&#39;huber&#39;, criterion=&#39;friedman_mse&#39;, n_estimators=1000, random_state=123).fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) # XGBoost fit = XGBRegressor(learning_rate=0.05, n_estimators=100, random_state=123).fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) # LightGMB fit = LGBMRegressor(learning_rate=0.05, n_estimators=100, random_state=123).fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) .",
            "url": "https://safenumz.github.io/blog/ml/2021/01/06/ml-bagging-boosting.html",
            "relUrl": "/ml/2021/01/06/ml-bagging-boosting.html",
            "date": " • Jan 6, 2021"
        }
        
    
  
    
        ,"post32": {
            "title": "[ML] 정규화 방법론",
            "content": "&#51221;&#44508;&#54868; &#48169;&#48277;&#47200;(Regularized Method, Penalized Method, Contrained Least Squares) . &quot;선형회귀 계수(Weight)에 대한 제약 조건을 추가함으로써 모형이 과도하게 최적화되는 현상, 즉 과최적화를 막는 방법&quot; &quot;과최적화는 계수 크기를 과도하게 증가하는 경향이 있기에, 정규화 방법에서의 제약 조건은 일반적으로 계수의 크기를 제한하는 방법&quot; . &#51221;&#44508;&#54868; &#54924;&#44480;&#48516;&#49437; &#50508;&#44256;&#47532;&#51608; . Standard Regression: . $ hat{ beta} = arg underset{ hat{ beta}}{min} Biggl[ displaystyle sum_{j=1}^t Bigl(y_j - displaystyle sum_{i=0}^k beta_i x_{ij} Bigr)^2 Biggr]$ Ridge Regression: . 정규화조건/패널티/제약조건: 추정계수의 제곱합을 최소로 하는 것 | 불필요한 X를 제거해주는 효과, 다중공선성을 줄여줌 | 알고리즘이 모든 변수들을 포함하려 하기 때문에 계수의 크기가 작아지고 모형의 복잡도가 줄어듬 | 모든 변수들을 포함하려 하므로 변수의 수가 많은 경우 효과가 좋지 않으나 과적합(Overfitting)을 방지하는데 효과적 | 다중공선성이 존재할 경우, 변수 간 상관관계에 따라 계수로 다중공선성이 분산되기에 효과가 높음 | . $ begin{align*} hat{ beta} = arg underset{ hat{ beta}}{min} Biggl[ displaystyle sum_{j=1}^t Bigl(y_j - displaystyle sum_{i=0}^k beta_i x_{ij} Bigr)^2 + lambda displaystyle sum_{i=0}^k beta_i^2 Biggr] where~ lambda~is~hyper~parameter(given~by~human) end{align*} $ 하이퍼파라미터($ lambda$): 기존의 잔차 제곱합과 추가 제약 조건의 비중을 조절하기 위한 하이퍼모수(hyperparameter) $ lambda$=0: 일반적인 선형 회귀모형(OLS) | $ lambda$를 크게 두면 정규화(패널티) 정도가 커지기 때문에 가중치($ beta_i$)의 값들이 커질 수 없음(작아짐) | $ lambda$를 작게 두면 정규화(패널티) 정도가 작아 지기 때문에 가중치($ beta_i$)의 값들의 자유도가 높아져 커질 수 있음(커짐) | . | . # Ridge fit = Ridge(alpha=0.5, fit_intercept=True, normalize=True, random_state=123).fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) . Lasso(Least Absolute Shrinkage and Selection Operator) Regression: . 정규화조건/패널티/제약조건: 추정계수의 절대값 합을 최소로 하는 것 | $ beta$의 scale을 줄여주는 효과 | 알고리즘이 최소한의 변수를 포함하여 하기 때문의 나머지 변수들의 계수는 0이됨 (Feature Selection 기능) | 변수선택 기능이 있기에 일반적으로 많이 사용되는 이점이 있지만 특정변수에 대한 계수가 커지는 단점 존재 | 다중공선성이 존재할 경우, 특정 변수만을 선택하는 방식이라 Ridge에 비해 다중공선성 문제에 효과가 낮음 | . $ begin{align*} hat{ beta} = arg underset{ hat{ beta}}{min} Biggl[ displaystyle sum_{j=1}^t Bigl(y_j - displaystyle sum_{i=0}^k beta_i x_{ij} Bigr)^2 + lambda displaystyle sum_{i=0}^k left| beta_i right| Biggr] where~ lambda~is~hyper~parameter(given~by~human) end{align*} $ # LASSO fit = Lasso(alpha=0.5, fit_intercept=True, normalize=True, random_state=123).fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) . Elastic Net: . 정규화조건/패널티/제약조건: 추정계수의 절대값 합과 제곱합을 동시에 최소로 하는 것 | 큰 데이터셋에서 Ridge와 LASSO의 효과를 모두 반영하기에 효과가 좋음 (적은 데이터셋은 효과 낮음) | . $ begin{align*} hat{ beta} &amp;= arg underset{ hat{ beta}}{min} Biggl[ displaystyle sum_{j=1}^t Bigl(y_j - displaystyle sum_{i=0}^k beta_i x_{ij} Bigr)^2 + lambda_1 displaystyle sum_{i=0}^k left| beta_i right| + lambda_2 displaystyle sum_{i=0}^k beta_i^2 Biggr] &amp;where~ lambda_1~and~ lambda_2~are~hyper~parameters(given~by~human) end{align*} $ # Elastic Net fit = ElasticNet(alpha=0.01, l1_ratio=1, fit_intercept=True, normalize=True, random_state=123).fit(X_train, Y_train) pred_tr = fit.predict(X_train) pred_te = fit.predict(X_test) . import warnings warnings.filterwarnings(&#39;always&#39;) warnings.filterwarnings(&#39;ignore&#39;) import pandas as pd import numpy as np from sklearn import datasets import matplotlib.pyplot as plt from sklearn.linear_model import Ridge, Lasso, ElasticNet . diabetes = datasets.load_diabetes() X = diabetes.data y = diabetes.target print(&#39;Data View&#39;) display(pd.concat([pd.DataFrame(y, columns=[&#39;diabetes_value&#39;]), pd.DataFrame(X, columns=diabetes.feature_names)], axis=1).head()) . Data View . diabetes_value age sex bmi bp s1 s2 s3 s4 s5 s6 . 0 151.0 | 0.038076 | 0.050680 | 0.061696 | 0.021872 | -0.044223 | -0.034821 | -0.043401 | -0.002592 | 0.019908 | -0.017646 | . 1 75.0 | -0.001882 | -0.044642 | -0.051474 | -0.026328 | -0.008449 | -0.019163 | 0.074412 | -0.039493 | -0.068330 | -0.092204 | . 2 141.0 | 0.085299 | 0.050680 | 0.044451 | -0.005671 | -0.045599 | -0.034194 | -0.032356 | -0.002592 | 0.002864 | -0.025930 | . 3 206.0 | -0.089063 | -0.044642 | -0.011595 | -0.036656 | 0.012191 | 0.024991 | -0.036038 | 0.034309 | 0.022692 | -0.009362 | . 4 135.0 | 0.005383 | -0.044642 | -0.036385 | 0.021872 | 0.003935 | 0.015596 | 0.008142 | -0.002592 | -0.031991 | -0.046641 | . alpha_weight = 0.5 fit = Ridge(alpha=alpha_weight, fit_intercept=True, normalize=True, random_state=123).fit(X, y) pd.DataFrame(np.hstack([fit.intercept_, fit.coef_]), columns=[&#39;alpha = {}&#39;.format(alpha_weight)]) . alpha = 0.5 . 0 152.133484 | . 1 20.137357 | . 2 -131.242606 | . 3 383.481783 | . 4 244.837872 | . 5 -15.187056 | . 6 -58.344798 | . 7 -174.842798 | . 8 121.985055 | . 9 328.499702 | . 10 110.886036 | . alpha_weight = 0.5 fit = Lasso(alpha=alpha_weight, fit_intercept=True, normalize=True, random_state=123).fit(X, y) pd.DataFrame(np.hstack([fit.intercept_, fit.coef_]), columns=[&#39;alpha = {}&#39;.format(alpha_weight)]) . alpha = 0.5 . 0 152.133484 | . 1 0.000000 | . 2 -0.000000 | . 3 471.038733 | . 4 136.507108 | . 5 -0.000000 | . 6 -0.000000 | . 7 -58.319549 | . 8 0.000000 | . 9 408.023324 | . 10 0.000000 | . result_Ridge = pd.DataFrame() alpha_candidate = np.hstack([0, np.logspace(-2, 1, 4)]) for alpha_weight in alpha_candidate: fit = Ridge(alpha=alpha_weight, fit_intercept=True, normalize=True, random_state=123).fit(X, y) result_coef = pd.DataFrame(np.hstack([fit.intercept_, fit.coef_]), columns=[&#39;alpha = {}&#39;.format(alpha_weight)]) result_Ridge = pd.concat([result_Ridge, result_coef], axis=1) result_LASSO = pd.DataFrame() alpha_candidate = np.hstack([0, np.logspace(-2, 1, 4)]) for alpha_weight in alpha_candidate: fit = Lasso(alpha=alpha_weight, fit_intercept=True, normalize=True, random_state=123).fit(X, y) result_coef = pd.DataFrame(np.hstack([fit.intercept_, fit.coef_]), columns=[&#39;alpha = {}&#39;.format(alpha_weight)]) result_LASSO = pd.concat([result_LASSO, result_coef], axis=1) result_Ridge.plot(figsize=(10,10), legend=True, ax=plt.subplot(211)) plt.title(&#39;Ridge&#39;) plt.xlabel(&#39;Columns&#39;) plt.ylabel(&#39;coefficients&#39;) plt.legend(fontsize=13) plt.grid() result_LASSO.plot(legend=True, ax=plt.subplot(212)) plt.title(&#39;LASSO&#39;) plt.xlabel(&#39;Columns&#39;) plt.ylabel(&#39;coefficients&#39;) plt.legend(fontsize=13) plt.tight_layout() plt.grid() plt.show() . result_Ridge.T.plot(figsize=(10,10), legend=False, ax=plt.subplot(211)) plt.title(&#39;Ridge&#39;) plt.xticks(np.arange(len(result_Ridge.columns)), [i for i in result_Ridge.columns]) plt.ylabel(&#39;coefficients&#39;) plt.grid() result_LASSO.T.plot(legend=False, ax=plt.subplot(212)) plt.title(&#39;LASSO&#39;) plt.xticks(np.arange(len(result_Ridge.columns)), [i for i in result_Ridge.columns]) plt.ylabel(&#39;coefficients&#39;) plt.tight_layout() plt.grid() plt.show() .",
            "url": "https://safenumz.github.io/blog/ml/2021/01/05/ml-normalization.html",
            "relUrl": "/ml/2021/01/05/ml-normalization.html",
            "date": " • Jan 5, 2021"
        }
        
    
  
    
        ,"post33": {
            "title": "[MySQL] MySQL Replication",
            "content": "1. MySQL Replication 특징 . 비동기식 (Asynchronous Replication) | 1개의 Master와 n개의 Slave로 구성되어 있음 | Master에서만 읽기 / 쓰기를 수행할 수 있음 | Master / Slave 데이터 동기화 시간차가 있음 (쓰기가 발생하면 순차적으로 한대씩 각 DB로 복제 진행) | 장애 복구시 노드간 유실되는 트랜잭션 있음 | 읽기만 확장 용이함 (쓰기 확장시 난점이 있음) | Master 장애시 매우 크리티컬한 장애 발생 (복구 장기간 소요, 데이터 유실 위험 높음) | 부분 장애시 장애 노드만 장애 발생 | 장애 요인 제거 후 단기간 / 순차적 정상화 | MySQL의 부하 분산과 효율을 최우선으로 하는 경우 유리 | . 1) Master 역할 . 웹서버로 부터 데이터 등록 / 수정 / 삭제 요청시 바이너리 로그 (Binary log)를 생성하여 Slave 서버로 전달함 | 웹서버로부터 요청한 데이터 등록 / 수정 / 삭제 기능을 하는 DBMS로 사용 | . 2) Slave 역할 . Master DBMS로부터 전달받은 바이너리 로그 (Binary log)를 데이터로 반영 | 웹서버로부터 요청을 통해 데이터를 불러오는 DBMS로 사용 | . 3) MySQL Replication 주의사항 . 호환성을 위해 Replication을 사용하는 MySQL의 버전을 동일하게 맞추는 것이 좋음 | MySQL 버전이 다른 경우 반드시 Slave 서버가 상위버전이어야 함 | Replication을 가동시에 Master, Slave 순으로 가동시켜야 함 | . 2. XtraBackup . Percona에서 개발한 오픈소스 MySQL 백업도구 | mysqldump가 테이블 생성, 데이터 쿼리에 대한 SQL 생성문을 갖는 논리적 백업이라면, XtraBackup은 엔진 데이터를 그대로 복사하는 물리적 백업 방식 | XtraBackup의 백업 방식은 크게 전체 백업, 증분 백업, 개별(db, table) 백업, Encrypted 백업 방식이 있음 | . 1) mysqldump vs XtraBackup . 2) xtrabackup vs innobackupex . XtraBackup에서 innobackupex는 2.2 next major 부터 삭제된다고 명시 | 실제로는 XtraBackup 2.4 버전까지는 유지되며 8 버전부터 삭제됨 | 실무에서 주로 사용하는 MySQL 5.6 ~5.7 버전은 XtraBackup 2.0~2.4 버전에서 호환되기에 여기서는 innobackupex 방식 사용 | XtraBackup 8 버전은 MySQL 8 버전부터 호환됨 | . 3) 전체 백업 . 장애 시 복구 과정을 단순하게 하기 위해 증분 백업을 사용하지 않고 전체 백업을 사용함 | 백업하는 동안에 table lock을 걸지 않으려면 –no-lock 옵션을 추가해야 함 | 단, InnoDB table이 아닌 경우에는 일관성 없는 백업 결과가 나올 수 있음 | 지정한 백업 경로에 테이블, 리두로그, XtraBackup 관련 테이터들이 함께 백업 | . 3. 사전 환경설정 . 1) Dependency . MySQL 5.6 | XtraBackup 2.4 | pv 1.4.6 | . 2) MySQL 설치 . 생략 | . 3) XtraBackup 설치 . 2.4 버전 설치 | . $ yum install -y http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm $ yum list | grep percona $ yum update -y percona-release $ yum install -y percona-xtrabackup-24.x86_64 $ xtrabackup --version . 4) PV 설치 . $ yum install -y pv . 5) 서버간 SSH Public Key 연결 . 생략 | . 4. MySQL Replication 설정 . 1) Master 서버 설정 . my.cnf 설정파일 수정 . $ vi /etc/my.cnf . # /etc/my.cnf [client] port = &lt;mysql_port&gt; default-character-set = utf8 [mysql] default-character-set=utf8 [mysqld] server-id=1 log-bin=mysql-bin log-slave-updates=1 port = &lt;mysql_port&gt; max_connections = 2000 max_connect_errors = 1000000 max_allowed_packet = 1G innodb_log_file_size = 1G innodb_buffer_pool_size = 8G innodb_log_file_size = 256M innodb_thread_concurrency = 16 datadir = /var/lib/mysql socket = /var/lib/mysql/mysql.sock character-set-server=utf8 collation-server=utf8_general_ci init_connect=SET collation_connection = utf8_general_ci init_connect=SET NAMES utf8 character-set-client-handshake = FALSE skip-character-set-client-handshake skip-host-cache skip-name-resolve [xtrabackup] datadir=/var/lib/mysql [mysqldump] password=dsldsl default-character-set=utf8 . MySQL 재기동으로 설정파일 반영 . $ systemctl restart mysqld . Replication 계정 생성 및 권한 부여 . $ mysql -u root -p . mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &#39;&lt;repl_user&gt;&#39;@&#39;%&#39; IDENTIFIED BY &#39;&lt;repl_password&gt;&#39;; mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &#39;&lt;repl_user&gt;&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;&lt;repl_password&gt;&#39;; mysql&gt; GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO &#39;&lt;repl_user&gt;&#39;@&#39;%&#39;; mysql&gt; GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO &#39;&lt;repl_user&gt;&#39;@&#39;localhost&#39;; mysql&gt; FLUSH PRIVILEGES; . 2) Slave 서버 설정 . my.cnf 설정파일 수정 . $ vi /etc/my.cnf . # /etc/my.cnf [client] port = &lt;mysql_port&gt; default-character-set = utf8 [mysql] default-character-set=utf8 [mysqld] server-id=2 log-bin=mysql-bin log-slave-updates=1 datadir=/var/lib/mysql port = &lt;mysql_port&gt; max_connections = 2000 max_connect_errors = 1000000 max_allowed_packet = 1G innodb_log_file_size = 1G innodb_buffer_pool_size = 8G innodb_log_file_size = 256M innodb_thread_concurrency = 16 character-set-server=utf8 collation-server=utf8_general_ci init_connect=SET collation_connection = utf8_general_ci init_connect=SET NAMES utf8 character-set-client-handshake = FALSE skip-character-set-client-handshake read-only=1 slave-skip-errors = 1062 skip-host-cache skip-name-resolve [xtrabackup] datadir=/var/lib/mysql [mysqldump] password=&lt;password&gt; default-character-set=utf8 . 백업 폴더 생성 . $ mkdir -p /data/mysql_backup/2020-07-16_11-00-00 $ cd /data/mysql_backup/2020-07-16_11-00-00 . XtraBackup을 이용하여 Master를 백업하여 Slave로 가져옴 . --no-lock 옵션이 있어야 운영 중단 없이 백업 가능 | innobackupex.log에는 “completed OK!”로 끝이 나야 하며, xbstream.log에는 아무 내용도 없어야 함 | . $ ssh -o StrictHostKeyChecking=no root@&lt;master_ip&gt; -p &lt;master_port&gt; &quot;innobackupex --host=127.0.0.1 --user=&lt;repl_user&gt; --password=&lt;repl_password&gt; --no-lock --stream=xbstream /data/mysql_backup/2020-07-16_11-00-00 | pv --rate-limit 50000000&quot; 2&gt; innobackupex.log | xbstream -x 2&gt; xbstream.log . 데이터 복구 준비 . 백업이 특정 시점에 완벽하게 이뤄진다면 좋겠지만 데이터의 크기와 서버의 성능에 따라 백업하는 시간이 수십 시간까지도 소요될 수 있음 | 백업하는 중에 INSERT, UPDATE, DELETE 쿼리가 유입되면 백업된 데이터의 일관성이 사라질 수 있음 | 복원 준비 단계에서는 백업 중 수행된 트랜잭션 로그파일(xtrabackup_logfile)을 적용하여 데이터를 일관성 있게 만들어 줌 | . $ innobackupex --defaults-file=/etc/my.cnf --apply-log /data/mysql_backup/2020-07-16_11-00-00 2&gt;&gt; innobackupex.log . Master의 binary log 파일과 위치를 기록해둠 . # file $ sed -r &quot;s/^(.*) s+([0-9]+)/ 1/g&quot; xtrabackup_binlog_info # position $ sed -r &quot;s/^(.*) s+([0-9]+)/ 2/g&quot; xtrabackup_binlog_info . MySQL 중지 . $ systemctl stop mysqld . 기존 MySQL 파일 백업 . $ mkdir -p /data/mysql_backup/native $ /bin/cp -r /var/lib/mysql/* /data/mysql_backup/native . 기존 MySQL 파일 삭제 . $ rm -rf /var/lib/mysql/* . 복원 . 준비된 Master의 백업 파일을 Slave의 datadir로 옮겨줌 | --copy-back 명령어를 사용하면 백업된 내용을 원본 디렉토리 (/var/log/mysql)에 이동시켜 줌 | . $ innobackupex --defaults-file=/etc/my.cnf --copy-back /data/mysql_backup/2020-07-16_11-00-00 . MySQL 파일이 재대로 들어왔는지 확인 . $ ls -al /var/lib/mysql . MySQL 권한 재설정 . $ cd /var/lib/mysql $ chown -R mysql:mysql * $ chmod g+w /var/run/mysqld/ $ chgrp mysql /var/run/mysqld/ . MySQL 재기동 . $ systemctl stop mysqld $ systemctl start mysqld . Slave에 Master 정보 등록 . $ mysql -uroot -p . # slave 초기화 mysql&gt; stop slave; mysql&gt; reset slave all; # 마스터 설정 mysql&gt; change master to master_host=&#39;&lt;master_ip&gt;&#39;, master_user=&#39;&lt;repl_user&gt;&#39;, master_port=&lt;master_port&gt;, master_password=&#39;&lt;repl_password&gt;&#39;, master_log_file=&#39;&lt;master_binary_log_file&gt;&#39;, master_log_pos=&lt;master_binary_log_position&gt;; mysql&gt; show slave status G mysql&gt; start slave; mysql&gt; show slave status G .",
            "url": "https://safenumz.github.io/blog/architecture/2020/07/16/mysql_replication.html",
            "relUrl": "/architecture/2020/07/16/mysql_replication.html",
            "date": " • Jul 16, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "[Docker] Mac에서 docker-machine 활용하기",
            "content": "Mac에서 docker-machine 설치 . # cast 패키지 설치 $ brew install cask # docker, docker-machine 설치 $ brew install docker docker-machine $ brew install virtualbox --cask . 접속중인 사용자에게 권한 부여 . sudo 명령어 없이 docker 명령어 사용하기 위해 | . $ sudo usermod -aG docker $USER $ sudo su - $USER . docker-machine 생성 . # docker-machine create --driver virtualbox --virtualbox-memory &quot;4096&quot; --virtualbox-hostonly-cidr &quot;25.0.1.100/24&quot; lab $ docker-machine create --driver virtualbox default # 목록 표시 $ docker-machine ls # 실행 환경 목록 표시 $ docker-machine ls --filter driver=virtualbox --filter state=Running # 실행 환경의 상태 확인 $ docker-machine status default # 실행 환경의 URL 확인 . docker 명령을 사용할 시스템 설정 . $ docker-machine env default $ eval $(docker-machine env default) . docker-machine ip 정보 확인 . $ docker-machine ip default . docker-machine 접속하기 . DOCKER_MACHINE_IP: docker-machine ip default 명령어로부터 확인 | 유저명: docker | 초기 비밀번호: tcuser | . $ ssh docker@$(docker-machine ip default) $ docker-machine ssh default . docker-machine에 파일 전송 . $ docker-machine scp docker-compose.yml default:/home/docker . Packages 설치 방법 . docker-machine은 TinyCore distribution 기반으로 작동 | TinyCore에서 tce-load은 다른 주요 distribution의 yum, apt-get 등의 역할을 하는 명령어 | . $ tce-load -wi vim.tcz $ tce-load -wi nano.tcz $ tce-load -i compiletc $ tce-load -wi gcc $ tce-load -wi make # sshpass 설치 $ wget http://www.tinycorelinux.net/10.x/x86/tcz/src/sshpass/sshpass-1.05-source.tar.gz $ tar -xvzf sshpass-1.05-source.tar.gz $ cd sshpass-1.05/ $ ./configure $ make $ make install . docker-machine start/stop . $ docker-machine stop $ docker-machine start . Trouble shooting . 버전 문제로 docker-machine이 작동하지 않을 때 . find all the machines with docker-machine ls | remove the ones you don’t need with docker-machine rm -y | find all the “host-only ethernet adapters” with VBoxManage list hostonlyifs | Remove the orphaned ones with VBoxManage hostonlyif remove | Create a vbox folder in the etc directory with sudo mkdir | Create a file networks.conf in the vbox folder, for example by sudo touch | $ sudo vi /etc/vbox/networks.conf . place the below line there . * 0.0.0.0/0 ::/0 . create a new machine with docker-machine create -d virtualbox | Run the command eval $(docker-machine env ) to configure your shell | 기타 . $ brew upgrade --cask docker $ rm -rf ~/.docker $ killall Docker &amp;&amp; open /Applications/Docker.app $ sudo ifconfig vboxnet0 down &amp;&amp; sudo ifconfig vboxnet0 up $ sudo &quot;/Library/Application Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh&quot; restart . docker-machine regenerate-certs default export DOCKER_CERT_PATH=/Users/a/.docker/machine/certs cp -f ~/.docker/machine/certs/* ~/.docker/machine/machines/dev/ # bridge0 en0 lo0 $ docker network create -d ipvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=[ex : eth0 / docker host의 ethernet device name] (mode 옵션 생략시 l2모드로 생성됨) ipvlan_test $ docker network create -d ipvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=enp2s0f0 ipvlan_test docker run -dit --privileged --name centos7 --net=ipvlan_test --ip 192.168.0.98 centos:7 /sbin/init docker network create -d ipvlan --subnet=192.168.50.0/24 --gateway=192.168.0.1 -o parent=enp0s8 ipvlan_test docker network create -d ipvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o ipvlan_mode=l2 -o parent=enp2s0f0 db_net docker network create -d ipvlan --subnet=192.168.214.0/24 --subnet=10.1.214.0/24 -o ipvlan_mode=l3 ipnet210 docker network create -d macvlan -o macvlan_mode=bridge --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=en0 macvlan_bridge docker network create -d macvlan -o macvlan_mode=bridge --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=enp2s0f0 macvlan_bridge docker run -it --rm --net=macvlan_bridge --ip=192.168.0.200 alpine /bin/sh ping 192.168.0.200 .",
            "url": "https://safenumz.github.io/blog/architecture/2020/07/01/docker_machine.html",
            "relUrl": "/architecture/2020/07/01/docker_machine.html",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post35": {
            "title": "[Spark] PySpark 추천시스템 모델",
            "content": "import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . from pyspark.ml.recommendation import ALS from pyspark.sql import Row ratings = spark.read.text(&quot;s3a://data/sample_movielens_ratings.txt&quot;) .rdd.toDF() .selectExpr(&quot;split(value, &#39;::&#39;) as col&quot;) .selectExpr( &quot;cast(col[0] as int) as userId&quot;, &quot;cast(col[1] as int) as movieId&quot;, &quot;cast(col[2] as int) as rating&quot;, &quot;cast(col[3] as long) as timestamp&quot; ) . ratings.show() . ++-++-+ |userId|movieId|rating| timestamp| ++-++-+ | 0| 2| 3|1424380312| | 0| 3| 1|1424380312| | 0| 5| 2|1424380312| | 0| 9| 4|1424380312| | 0| 11| 1|1424380312| | 0| 12| 2|1424380312| | 0| 15| 1|1424380312| | 0| 17| 1|1424380312| | 0| 19| 1|1424380312| | 0| 21| 1|1424380312| | 0| 23| 1|1424380312| | 0| 26| 3|1424380312| | 0| 27| 1|1424380312| | 0| 28| 1|1424380312| | 0| 29| 1|1424380312| | 0| 30| 1|1424380312| | 0| 31| 1|1424380312| | 0| 34| 1|1424380312| | 0| 37| 1|1424380312| | 0| 41| 2|1424380312| ++-++-+ only showing top 20 rows . training, test = ratings.randomSplit([0.8, 0.2]) als = ALS() .setMaxIter(5) .setRegParam(0.01) .setUserCol(&quot;userId&quot;) .setItemCol(&quot;movieId&quot;) .setRatingCol(&quot;rating&quot;) print(als.explainParams()) . alpha: alpha for implicit preference (default: 1.0) blockSize: block size for stacking input data in matrices. Data is stacked within partitions. If block size is more than remaining data in a partition then it is adjusted to the size of this data. (default: 4096) checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) coldStartStrategy: strategy for dealing with unknown or new users/items at prediction time. This may be useful in cross-validation or production scenarios, for handling user/item ids the model has not seen in the training data. Supported values: &#39;nan&#39;, &#39;drop&#39;. (default: nan) finalStorageLevel: StorageLevel for ALS model factors. (default: MEMORY_AND_DISK) implicitPrefs: whether to use implicit preference (default: False) intermediateStorageLevel: StorageLevel for intermediate datasets. Cannot be &#39;NONE&#39;. (default: MEMORY_AND_DISK) itemCol: column name for item ids. Ids must be within the integer value range. (default: item, current: movieId) maxIter: max number of iterations (&gt;= 0). (default: 10, current: 5) nonnegative: whether to use nonnegative constraint for least squares (default: False) numItemBlocks: number of item blocks (default: 10) numUserBlocks: number of user blocks (default: 10) predictionCol: prediction column name. (default: prediction) rank: rank of the factorization (default: 10) ratingCol: column name for ratings (default: rating, current: rating) regParam: regularization parameter (&gt;= 0). (default: 0.1, current: 0.01) seed: random seed. (default: 3629070045491600340) userCol: column name for user ids. Ids must be within the integer value range. (default: user, current: userId) . alsModel = als.fit(training) predictions = alsModel.transform(test) . alsModel.recommendForAllUsers(10) .selectExpr(&quot;userId&quot;, &quot;explode(recommendations)&quot;).show() . +++ |userId| col| +++ | 20| {22, 4.846066}| | 20| {18, 4.623545}| | 20|{75, 4.0272512}| | 20|{27, 4.0242887}| | 20| {77, 3.781201}| | 20| {62, 3.671545}| | 20|{36, 3.2965648}| | 20|{74, 3.2775805}| | 20| {80, 3.175223}| | 20|{94, 3.1339927}| | 10| {74, 4.163344}| | 10|{87, 4.0253325}| | 10| {2, 3.832425}| | 10|{53, 3.7631018}| | 10| {40, 3.762528}| | 10|{70, 3.1891506}| | 10| {59, 3.128613}| | 10|{42, 3.0709763}| | 10|{32, 3.0483675}| | 10|{49, 3.0007033}| +++ only showing top 20 rows . alsModel.recommendForAllItems(10) .selectExpr(&quot;movieId&quot;, &quot;explode(recommendations)&quot;).show() . +-++ |movieId| col| +-++ | 20| {17, 4.662134}| | 20| {22, 4.212014}| | 20| {9, 3.8890233}| | 20|{23, 3.8233962}| | 20|{12, 3.7794924}| | 20|{29, 3.4634056}| | 20| {5, 3.2149444}| | 20|{10, 2.4653668}| | 20|{24, 2.3592012}| | 20| {2, 2.0555623}| | 40|{16, 4.2417116}| | 40|{19, 3.9465256}| | 40| {8, 3.9215052}| | 40| {2, 3.9037194}| | 40| {10, 3.762528}| | 40|{21, 3.5958273}| | 40| {9, 3.067248}| | 40| {5, 3.0099266}| | 40| {4, 2.7588284}| | 40| {23, 2.628215}| +-++ only showing top 20 rows . &#54217;&#44032;&#44592; . from pyspark.ml.evaluation import RegressionEvaluator evaluator = RegressionEvaluator() .setMetricName(&quot;rmse&quot;) .setLabelCol(&quot;rating&quot;) .setPredictionCol(&quot;prediction&quot;) rmse = evaluator.evaluate(predictions) print(&quot;Root-mean-square error = %f&quot; % rmse) . Root-mean-square error = 1.899920 . &#49457;&#44284; &#54217;&#44032;&#51648;&#54364; . &#54924;&#44480; &#54217;&#44032;&#51648;&#54364; . from pyspark.mllib.evaluation import RegressionMetrics regComparison = predictions.select(&quot;rating&quot;, &quot;prediction&quot;) .rdd.map(lambda x: (x(0), x(1))) metrics = RegressionMetrics(regComparison) . &#49692;&#50948; &#54217;&#44032;&#51648;&#54364; . from pyspark.mllib.evaluation import RankingMetrics, RegressionMetrics from pyspark.sql.functions import col, expr perUserActual = predictions .where(&quot;rating &gt; 2.5&quot;) .groupby(&quot;userId&quot;) .agg(expr(&quot;collect_set(movieId) as movies&quot;)) . perUserPredictions = predictions .orderBy(col(&quot;userId&quot;), expr(&quot;prediction DESC&quot;)) .groupby(&quot;userId&quot;) .agg(expr(&quot;collect_list(movieId) as movies&quot;)) . perUserActualvPred = perUserActual.join(perUserPredictions, [&quot;userId&quot;]) .rdd.map(lambda row: (row[1], row[2][:15])) ranks = RankingMetrics(perUserActualvPred) . ranks.meanAveragePrecision . 0.29497233535695083 . ranks.precisionAt(5) . 0.5846153846153845 .",
            "url": "https://safenumz.github.io/blog/spark/2020/05/21/pyspark-ml-recommendation.html",
            "relUrl": "/spark/2020/05/21/pyspark-ml-recommendation.html",
            "date": " • May 21, 2020"
        }
        
    
  
    
        ,"post36": {
            "title": "[Spark] PySpark ML Classification 모델들",
            "content": "import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . bInput = spark.read.format(&quot;parquet&quot;).load(&quot;s3a://data/binary-classification&quot;) .selectExpr(&quot;features&quot;, &quot;cast(label as double) as label&quot;) . &#47196;&#51648;&#49828;&#54001; &#54924;&#44480;&#48516;&#49437; . from pyspark.ml.classification import LogisticRegression lr = LogisticRegression() print(lr.explainParams()) . aggregationDepth: suggested depth for treeAggregate (&gt;= 2). (default: 2) elasticNetParam: the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. (default: 0.0) family: The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial (default: auto) featuresCol: features column name. (default: features) fitIntercept: whether to fit an intercept term. (default: True) labelCol: label column name. (default: label) lowerBoundsOnCoefficients: The lower bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined) lowerBoundsOnIntercepts: The lower bounds on intercepts if fitting under bound constrained optimization. The bounds vector size must beequal with 1 for binomial regression, or the number oflasses for multinomial regression. (undefined) maxBlockSizeInMB: maximum memory in MB for stacking input data into blocks. Data is stacked within partitions. If more than remaining data size in a partition then it is adjusted to the data size. Default 0.0 represents choosing optimal value, depends on specific algorithm. Must be &gt;= 0. (default: 0.0) maxIter: max number of iterations (&gt;= 0). (default: 100) predictionCol: prediction column name. (default: prediction) probabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability) rawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction) regParam: regularization parameter (&gt;= 0). (default: 0.0) standardization: whether to standardize the training features before fitting the model. (default: True) threshold: Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p]. (default: 0.5) thresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values &gt; 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class&#39;s threshold. (undefined) tol: the convergence tolerance for iterative algorithms (&gt;= 0). (default: 1e-06) upperBoundsOnCoefficients: The upper bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. (undefined) upperBoundsOnIntercepts: The upper bounds on intercepts if fitting under bound constrained optimization. The bound vector size must be equal with 1 for binomial regression, or the number of classes for multinomial regression. (undefined) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . lrModel = lr.fit(bInput) print(&quot;coefficients: &quot;, lrModel.coefficients) print(&quot;intercept: &quot;, lrModel.intercept) . coefficients: [18.722385741661295,-0.5693688557340798,9.361192870830632] intercept: -28.04329511868947 . summary = lrModel.summary print(summary.areaUnderROC) . 1.0 . summary.roc.show() . /Users/a/spark/python/pyspark/sql/context.py:127: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead. FutureWarning . +++ |FPR| TPR| +++ |0.0| 0.0| |0.0|0.3333333333333333| |0.0| 1.0| |1.0| 1.0| |1.0| 1.0| +++ . summary.pr.show() . +++ | recall|precision| +++ | 0.0| 1.0| |0.3333333333333333| 1.0| | 1.0| 1.0| | 1.0| 0.6| +++ . print(summary.objectiveHistory) . [0.6730116670092565, 0.3053347667866976, 0.19572951692227344, 0.08238560717506735, 0.039904390712412495, 0.0191876057299779, 0.009480513129879598, 0.004700793975398914, 0.002342824005088809, 0.0011692212872630925, 0.0005841333526453686, 0.0002919384368144603, 0.00014593757317782482, 7.295887614374265e-05, 3.6473098822232435e-05, 1.822801708342409e-05, 9.095755464927068e-06, 4.5053062928456136e-06, 2.17434840951629e-06, 1.0422594942126336e-06, 5.28080873894856e-07, 2.62853118644462e-07, 1.3166032239693672e-07, 6.578498712561186e-08, 3.2901213738010096e-08, 1.6448921648782767e-08, 8.224786126081538e-09] . &#51032;&#49324;&#44208;&#51221;&#53944;&#47532; . from pyspark.ml.classification import DecisionTreeClassifier dt = DecisionTreeClassifier() print(dt.explainParams()) . cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False) checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) featuresCol: features column name. (default: features) impurity: Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini (default: gini) labelCol: label column name. (default: label) leafCol: Leaf indices column name. Predicted leaf index of each instance in each tree by preorder. (default: ) maxBins: Max number of bins for discretizing continuous features. Must be &gt;=2 and &gt;= number of categories for any categorical feature. (default: 32) maxDepth: Maximum depth of the tree. (&gt;= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. Must be in range [0, 30]. (default: 5) maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256) minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0) minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be &gt;= 1. (default: 1) minWeightFractionPerNode: Minimum fraction of the weighted sample count that each child must have after split. If a split causes the fraction of the total weight in the left or right child to be less than minWeightFractionPerNode, the split will be discarded as invalid. Should be in interval [0.0, 0.5). (default: 0.0) predictionCol: prediction column name. (default: prediction) probabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability) rawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction) seed: random seed. (default: -447065854948693456) thresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values &gt; 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class&#39;s threshold. (undefined) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . dtModel = dt.fit(bInput) . &#47004;&#45924; &#54252;&#47112;&#49828;&#53944;&#50752; &#44536;&#47000;&#46356;&#50616;&#53944; &#48512;&#49828;&#54000;&#46300; &#53944;&#47532; . from pyspark.ml.classification import RandomForestClassifier rfClassifier = RandomForestClassifier() print(rfClassifier.explainParams()) . bootstrap: Whether bootstrap samples are used when building trees. (default: True) cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False) checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) featureSubsetStrategy: The number of features to consider for splits at each tree node. Supported options: &#39;auto&#39; (choose automatically for task: If numTrees == 1, set to &#39;all&#39;. If numTrees &gt; 1 (forest), set to &#39;sqrt&#39; for classification and to &#39;onethird&#39; for regression), &#39;all&#39; (use all features), &#39;onethird&#39; (use 1/3 of the features), &#39;sqrt&#39; (use sqrt(number of features)), &#39;log2&#39; (use log2(number of features)), &#39;n&#39; (when n is in the range (0, 1.0], use n * number of features. When n is in the range (1, number of features), use n features). default = &#39;auto&#39; (default: auto) featuresCol: features column name. (default: features) impurity: Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini (default: gini) labelCol: label column name. (default: label) leafCol: Leaf indices column name. Predicted leaf index of each instance in each tree by preorder. (default: ) maxBins: Max number of bins for discretizing continuous features. Must be &gt;=2 and &gt;= number of categories for any categorical feature. (default: 32) maxDepth: Maximum depth of the tree. (&gt;= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. Must be in range [0, 30]. (default: 5) maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256) minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0) minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be &gt;= 1. (default: 1) minWeightFractionPerNode: Minimum fraction of the weighted sample count that each child must have after split. If a split causes the fraction of the total weight in the left or right child to be less than minWeightFractionPerNode, the split will be discarded as invalid. Should be in interval [0.0, 0.5). (default: 0.0) numTrees: Number of trees to train (&gt;= 1). (default: 20) predictionCol: prediction column name. (default: prediction) probabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability) rawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction) seed: random seed. (default: 5607017822375671492) subsamplingRate: Fraction of the training data used for learning each decision tree, in range (0, 1]. (default: 1.0) thresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values &gt; 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class&#39;s threshold. (undefined) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . trainedModel = rfClassifier.fit(bInput) . from pyspark.ml.classification import GBTClassifier gbtClassifier = GBTClassifier() print(gbtClassifier.explainParams()) . cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False) checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) featureSubsetStrategy: The number of features to consider for splits at each tree node. Supported options: &#39;auto&#39; (choose automatically for task: If numTrees == 1, set to &#39;all&#39;. If numTrees &gt; 1 (forest), set to &#39;sqrt&#39; for classification and to &#39;onethird&#39; for regression), &#39;all&#39; (use all features), &#39;onethird&#39; (use 1/3 of the features), &#39;sqrt&#39; (use sqrt(number of features)), &#39;log2&#39; (use log2(number of features)), &#39;n&#39; (when n is in the range (0, 1.0], use n * number of features. When n is in the range (1, number of features), use n features). default = &#39;auto&#39; (default: all) featuresCol: features column name. (default: features) impurity: Criterion used for information gain calculation (case-insensitive). Supported options: variance (default: variance) labelCol: label column name. (default: label) leafCol: Leaf indices column name. Predicted leaf index of each instance in each tree by preorder. (default: ) lossType: Loss function which GBT tries to minimize (case-insensitive). Supported options: logistic (default: logistic) maxBins: Max number of bins for discretizing continuous features. Must be &gt;=2 and &gt;= number of categories for any categorical feature. (default: 32) maxDepth: Maximum depth of the tree. (&gt;= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. Must be in range [0, 30]. (default: 5) maxIter: max number of iterations (&gt;= 0). (default: 20) maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256) minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0) minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be &gt;= 1. (default: 1) minWeightFractionPerNode: Minimum fraction of the weighted sample count that each child must have after split. If a split causes the fraction of the total weight in the left or right child to be less than minWeightFractionPerNode, the split will be discarded as invalid. Should be in interval [0.0, 0.5). (default: 0.0) predictionCol: prediction column name. (default: prediction) probabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability) rawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction) seed: random seed. (default: -2078210181601159107) stepSize: Step size (a.k.a. learning rate) in interval (0, 1] for shrinking the contribution of each estimator. (default: 0.1) subsamplingRate: Fraction of the training data used for learning each decision tree, in range (0, 1]. (default: 1.0) thresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values &gt; 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class&#39;s threshold. (undefined) validationIndicatorCol: name of the column that indicates whether each row is for training or for validation. False indicates training; true indicates validation. (undefined) validationTol: Threshold for stopping early when fit with validation is used. If the error rate on the validation input changes by less than the validationTol, then learning will stop early (before `maxIter`). This parameter is ignored when fit without validation is used. (default: 0.01) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . trainedModel = gbtClassifier.fit(bInput) . &#45208;&#51060;&#48652; &#48288;&#51060;&#51592; . from pyspark.ml.classification import NaiveBayes nb = NaiveBayes() print(nb.explainParams()) . featuresCol: features column name. (default: features) labelCol: label column name. (default: label) modelType: The model type which is a string (case-sensitive). Supported options: multinomial (default), bernoulli and gaussian. (default: multinomial) predictionCol: prediction column name. (default: prediction) probabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability) rawPredictionCol: raw prediction (a.k.a. confidence) column name. (default: rawPrediction) smoothing: The smoothing parameter, should be &gt;= 0, default is 1.0 (default: 1.0) thresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values &gt; 0, excepting that at most one value may be 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class&#39;s threshold. (undefined) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . trainedModel = nb.fit(bInput.where(&quot;label != 0&quot;)) . &#54217;&#44032;&#51648;&#54364; . from pyspark.ml.classification import RandomForestClassifier rfClassifier = RandomForestClassifier() trainedModel = rfClassifier.fit(bInput) . from pyspark.mllib.evaluation import BinaryClassificationMetrics out = trainedModel.transform(bInput) .select(&quot;prediction&quot;, &quot;label&quot;) .rdd.map(lambda x: (float(x[0]), float(x[1]))) metrics = BinaryClassificationMetrics(out) . metrics.areaUnderROC . 1.0 . metrics.areaUnderPR . 1.0 .",
            "url": "https://safenumz.github.io/blog/spark/2020/05/20/pyspark-ml-classification.html",
            "relUrl": "/spark/2020/05/20/pyspark-ml-classification.html",
            "date": " • May 20, 2020"
        }
        
    
  
    
        ,"post37": {
            "title": "[Spark] PySpark 비지도 학습 모델",
            "content": "&#48708;&#51648;&#46020; &#54617;&#49845; . import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . from pyspark.ml.feature import VectorAssembler va = VectorAssembler() .setInputCols([&quot;Quantity&quot;, &quot;UnitPrice&quot;]) .setOutputCol(&quot;features&quot;) sales_raw = spark.read.format(&quot;csv&quot;) .option(&quot;header&quot;, &quot;true&quot;) .option(&quot;inferSchema&quot;, &quot;true&quot;) .load(&quot;s3a://data/retail-data/by-day/*.csv&quot;) .limit(50) .coalesce(1) .where(&quot;Description IS NOT NULL&quot;) sales_raw.show(5) . +++--+--+-++-+--+ |InvoiceNo|StockCode| Description|Quantity| InvoiceDate|UnitPrice|CustomerID| Country| +++--+--+-++-+--+ | 580538| 23084| RABBIT NIGHT LIGHT| 48|2011-12-05 08:38:00| 1.79| 14075.0|United Kingdom| | 580538| 23077| DOUGHNUT LIP GLOSS | 20|2011-12-05 08:38:00| 1.25| 14075.0|United Kingdom| | 580538| 22906|12 MESSAGE CARDS ...| 24|2011-12-05 08:38:00| 1.65| 14075.0|United Kingdom| | 580538| 21914|BLUE HARMONICA IN...| 24|2011-12-05 08:38:00| 1.25| 14075.0|United Kingdom| | 580538| 22467| GUMBALL COAT RACK| 6|2011-12-05 08:38:00| 2.55| 14075.0|United Kingdom| +++--+--+-++-+--+ only showing top 5 rows . sales = va.transform(sales_raw) sales.cache() . DataFrame[InvoiceNo: string, StockCode: string, Description: string, Quantity: int, InvoiceDate: string, UnitPrice: double, CustomerID: double, Country: string, features: vector] . sales.show(5) . +++--+--+-++-+--+--+ |InvoiceNo|StockCode| Description|Quantity| InvoiceDate|UnitPrice|CustomerID| Country| features| +++--+--+-++-+--+--+ | 580538| 23084| RABBIT NIGHT LIGHT| 48|2011-12-05 08:38:00| 1.79| 14075.0|United Kingdom|[48.0,1.79]| | 580538| 23077| DOUGHNUT LIP GLOSS | 20|2011-12-05 08:38:00| 1.25| 14075.0|United Kingdom|[20.0,1.25]| | 580538| 22906|12 MESSAGE CARDS ...| 24|2011-12-05 08:38:00| 1.65| 14075.0|United Kingdom|[24.0,1.65]| | 580538| 21914|BLUE HARMONICA IN...| 24|2011-12-05 08:38:00| 1.25| 14075.0|United Kingdom|[24.0,1.25]| | 580538| 22467| GUMBALL COAT RACK| 6|2011-12-05 08:38:00| 2.55| 14075.0|United Kingdom| [6.0,2.55]| +++--+--+-++-+--+--+ only showing top 5 rows . K-&#54217;&#44512; . 사용자가 지정한 군집 수인 k가 데이터셋 내 서로 다른 포인트에 무작위로 할당 | 할당되지 않은 포인트들은 직전에 할당된 포인트와의 거리, 즉 유클리드 거리를 계산하여 가장 가까이에 위치한 군집으로 할당 | 이렇게 각 포인트를 사전에 정의된 군집(k개의 군집)으로 모두 할당하는 작업이 끝나면 센트로이드라는 각 군집의 중심이 계산되고, 프로세스가 반복 | 모든 포인트가 특정 중심에 할당되면 새로운 중심값이 계산 | 이과정은 지정한 횟수만큼 반복되거나 중심값이 변경되지 않는 수렴convergence 에 도달할 때 까지 반복 | . from pyspark.ml.clustering import KMeans km = KMeans().setK(5) print(km.explainParams()) kmModel = km.fit(sales) . distanceMeasure: the distance measure. Supported options: &#39;euclidean&#39; and &#39;cosine&#39;. (default: euclidean) featuresCol: features column name. (default: features) initMode: The initialization algorithm. This can be either &#34;random&#34; to choose random points as initial cluster centers, or &#34;k-means||&#34; to use a parallel variant of k-means++ (default: k-means||) initSteps: The number of steps for k-means|| initialization mode. Must be &gt; 0. (default: 2) k: The number of clusters to create. Must be &gt; 1. (default: 2, current: 5) maxIter: max number of iterations (&gt;= 0). (default: 20) predictionCol: prediction column name. (default: prediction) seed: random seed. (default: 2732625111183068529) tol: the convergence tolerance for iterative algorithms (&gt;= 0). (default: 0.0001) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . summary = kmModel.summary print(summary.clusterSizes) . [10, 3, 10, 19, 8] . centers = kmModel.clusterCenters() print(&quot;Cluster Centers: &quot;) for center in centers: print(center) . Cluster Centers: [12. 0.93] [44. 1.16333333] [23.2 0.956] [5.21052632 3.74105263] [ 2.5 11.24375] . &#51060;&#48516;&#48277; $k-$&#54217;&#44512; . 이분법Bisecting $k-$평균은 $k-$평균에서 변형된 알고리즘 | $k-$평균은 초기 데이터에 여러 그룹을 할당함으로써 데이터 포인트들을 군집화하는 상향식bottom-up 군집화 방법인 반면, 이분법 $k-$평균은 이와는 반대로 하향식top-down 군집화 방법 | 최초에 단일 그룹을 생성한 다음 해당 그룹을 더 작은 그룹으로 나누고 마지막에는 사용자가 지정한 수의 군집으로 끝나게 됨 | 일반적으로 $k-$평균보다 빠르며 군집결과도 차이가 있음 | . from pyspark.ml.clustering import BisectingKMeans bkm = BisectingKMeans().setK(5).setMaxIter(5) bkmModel = bkm.fit(sales) . summary = bkmModel.summary print(summary.clusterSizes) . [8, 16, 13, 10, 3] . bkmModel.computeCost(sales) centers = bkmModel.clusterCenters() print(&quot;Cluster Centers: &quot;) for center in centers: print(center) . Cluster Centers: [ 2.5 11.24375] [4.8125 4.095625] [10.92307692 1.14230769] [23.2 0.956] [44. 1.16333333] . /Users/a/spark/python/pyspark/ml/clustering.py:822: FutureWarning: Deprecated in 3.0.0. It will be removed in future versions. Use ClusteringEvaluator instead. You can also get the cost on the training dataset in the summary. &#34;dataset in the summary.&#34;, FutureWarning) . &#44032;&#50864;&#49884;&#50504; &#54844;&#54633; &#47784;&#45944; . 가우시안 혼합 모델Gaussian Mixture Model GMM 은 이분법 k- 평균이나 k- 평균과는 다른 가정 | k- 평균 알고리즘이 군집의 중심으로부터 거리제곱합을 줄임으로써 데이터를 그룹화하는 반면 가우시안 혼합 모델은 각 군집이 가우시안 분포Gaussian distribution 으로부터 무작위 추출을 하여 데이터를 생성한다고 가정 | 생성된 군집 가장자리에는 데이터가 포함될 확률이 낮아야 하며(가우시안 분포에 반영), 군집 중앙에는 데이터가 포함될 확률이 훨씬 높아야 함 | . from pyspark.ml.clustering import GaussianMixture gmm = GaussianMixture().setK(5) print(gmm.explainParams()) . aggregationDepth: suggested depth for treeAggregate (&gt;= 2). (default: 2) featuresCol: features column name. (default: features) k: Number of independent Gaussians in the mixture model. Must be &gt; 1. (default: 2, current: 5) maxIter: max number of iterations (&gt;= 0). (default: 100) predictionCol: prediction column name. (default: prediction) probabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. (default: probability) seed: random seed. (default: 1554811416070000952) tol: the convergence tolerance for iterative algorithms (&gt;= 0). (default: 0.01) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . model = gmm.fit(sales) . summary = model.summary print(model.weights) . [0.19996361501436077, 0.2650758391757304, 0.4549241736967528, 0.0600363721131339, 0.02000000000002211] . model.gaussiansDF.show() . /Users/a/spark/python/pyspark/sql/context.py:127: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead. FutureWarning . +--+--+ | mean| cov| +--+--+ |[23.1998838713342...|2.560278699114912...| |[3.12998187641630...|1.222198686648849...| |[8.33175706727699...|11.78027654132310...| |[43.9877858780125...|32.22708770259816...| |[8.00000000001486...|6.062776947139928...| +--+--+ . summary.cluster.show() . +-+ |prediction| +-+ | 3| | 0| | 0| | 0| | 2| | 3| | 4| | 0| | 2| | 2| | 1| | 2| | 2| | 2| | 2| | 2| | 3| | 0| | 2| | 2| +-+ only showing top 20 rows . summary.clusterSizes . [10, 11, 25, 3, 1] . summary.probability.show() . +--+ | probability| +--+ |[1.37632436456510...| |[0.99999639767391...| |[0.99999717659721...| |[0.99997707446759...| |[1.33915680121729...| |[1.37558540775791...| |[8.24399594549003...| |[0.99999776336008...| |[1.06905010900131...| |[1.06905010900131...| |[1.65702583224003...| |[1.98857135239437...| |[8.70737611462661...| |[8.70737611462661...| |[4.99008297332649...| |[1.08580292118476...| |[4.39868445087168...| |[0.99997707446759...| |[1.06905010900131...| |[1.06905010900131...| +--+ only showing top 20 rows . &#51104;&#51116; &#46356;&#47532;&#53364;&#47112; &#54624;&#45817; . 잠재 디리클레 할당Latent Dirichlet Allocation, LDA은 일반적으로 텍스트 문서에 대한 토픽 모델링을 수행하는 데 사용되는 계층적 군집화 모델 | 주제와 관련된 일련의 문서와 키워드로부터 주제를 추출하고 각 문서가 입력된 여러 주제에 얼마나 기여했는지 횟수를 계산 | 스파크에서 LDA 모델을 구현하는 방법은 온라인online LDA와 기댓값 최대화expectation maximization | 일반적으로 온라인 LDA는 샘플 데이터가 많은 경우에 적합하며, 기댓값 최대화는 어휘수가 많은 경우에 적합 | 확장성 관점에서는 수백에서 수천 개의 주제까지 가능 | . from pyspark.ml.feature import Tokenizer, CountVectorizer tkn = Tokenizer().setInputCol(&quot;Description&quot;).setOutputCol(&quot;DescOut&quot;) tokenized = tkn.transform(sales.drop(&quot;features&quot;)) cv = CountVectorizer() .setInputCol(&quot;DescOut&quot;) .setOutputCol(&quot;features&quot;) .setVocabSize(500) .setMinTF(0) .setMinDF(0) .setBinary(True) cvFitted = cv.fit(tokenized) prepped = cvFitted.transform(tokenized) . from pyspark.ml.clustering import LDA lda = LDA().setK(10).setMaxIter(5) print(lda.explainParams()) . checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) docConcentration: Concentration parameter (commonly named &#34;alpha&#34;) for the prior placed on documents&#39; distributions over topics (&#34;theta&#34;). (undefined) featuresCol: features column name. (default: features) k: The number of topics (clusters) to infer. Must be &gt; 1. (default: 10, current: 10) keepLastCheckpoint: (For EM optimizer) If using checkpointing, this indicates whether to keep the last checkpoint. If false, then the checkpoint will be deleted. Deleting the checkpoint can cause failures if a data partition is lost, so set this bit with care. (default: True) learningDecay: Learning rate, set as anexponential decay rate. This should be between (0.5, 1.0] to guarantee asymptotic convergence. (default: 0.51) learningOffset: A (positive) learning parameter that downweights early iterations. Larger values make early iterations count less (default: 1024.0) maxIter: max number of iterations (&gt;= 0). (default: 20, current: 5) optimizeDocConcentration: Indicates whether the docConcentration (Dirichlet parameter for document-topic distribution) will be optimized during training. (default: True) optimizer: Optimizer or inference algorithm used to estimate the LDA model. Supported: online, em (default: online) seed: random seed. (default: -9149679861596847839) subsamplingRate: Fraction of the corpus to be sampled and used in each iteration of mini-batch gradient descent, in range (0, 1]. (default: 0.05) topicConcentration: Concentration parameter (commonly named &#34;beta&#34; or &#34;eta&#34;) for the prior placed on topic&#39; distributions over terms. (undefined) topicDistributionCol: Output column with estimates of the topic mixture distribution for each document (often called &#34;theta&#34; in the literature). Returns a vector of zeros for an empty document. (default: topicDistribution) . model = lda.fit(prepped) . model.describeTopics(3).show() . +--++--+ |topic| termIndices| termWeights| +--++--+ | 0| [60, 116, 124]|[0.00913991758035...| | 1| [114, 11, 92]|[0.01183209974899...| | 2| [55, 112, 27]|[0.01574372445964...| | 3| [56, 106, 88]|[0.01117898536785...| | 4| [7, 40, 102]|[0.01211664967569...| | 5|[112, 139, 121]|[0.00933025066380...| | 6| [122, 2, 4]|[0.01118652206493...| | 7| [78, 6, 51]|[0.00880822582151...| | 8| [23, 48, 100]|[0.01152078111328...| | 9| [59, 127, 19]|[0.01128129509911...| +--++--+ . cvFitted.vocabulary . [&#39;water&#39;, &#39;hot&#39;, &#39;vintage&#39;, &#39;bottle&#39;, &#39;paperweight&#39;, &#39;6&#39;, &#39;home&#39;, &#39;doormat&#39;, &#39;landmark&#39;, &#39;bicycle&#39;, &#39;frame&#39;, &#39;ribbons&#39;, &#39;&#39;, &#39;classic&#39;, &#39;rose&#39;, &#39;kit&#39;, &#39;leaf&#39;, &#39;sweet&#39;, &#39;bag&#39;, &#39;airline&#39;, &#39;doorstop&#39;, &#39;light&#39;, &#39;in&#39;, &#39;christmas&#39;, &#39;heart&#39;, &#39;calm&#39;, &#39;set&#39;, &#39;keep&#39;, &#39;balloons&#39;, &#39;night&#39;, &#39;lights&#39;, &#39;12&#39;, &#39;tin&#39;, &#39;english&#39;, &#39;caravan&#39;, &#39;stuff&#39;, &#39;tidy&#39;, &#39;oxford&#39;, &#39;full&#39;, &#39;cottage&#39;, &#39;notting&#39;, &#39;drawer&#39;, &#39;mushrooms&#39;, &#39;chrome&#39;, &#39;champion&#39;, &#39;amelie&#39;, &#39;mini&#39;, &#39;the&#39;, &#39;giant&#39;, &#39;design&#39;, &#39;elegant&#39;, &#39;tins&#39;, &#39;jet&#39;, &#39;fairy&#39;, &#34;50&#39;s&#34;, &#39;holder&#39;, &#39;message&#39;, &#39;blue&#39;, &#39;storage&#39;, &#39;tier&#39;, &#39;covent&#39;, &#39;world&#39;, &#39;skulls&#39;, &#39;font&#39;, &#39;hearts&#39;, &#39;skull&#39;, &#39;clips&#39;, &#39;bell&#39;, &#39;red&#39;, &#39;party&#39;, &#39;chalkboard&#39;, &#39;save&#39;, &#39;4&#39;, &#39;coloured&#39;, &#39;poppies&#39;, &#39;garden&#39;, &#39;nine&#39;, &#39;girl&#39;, &#39;shimmering&#39;, &#39;doughnut&#39;, &#39;dog&#39;, &#39;3&#39;, &#39;tattoos&#39;, &#39;chilli&#39;, &#39;coat&#39;, &#39;torch&#39;, &#39;sunflower&#39;, &#39;tale&#39;, &#39;cards&#39;, &#39;puncture&#39;, &#39;woodland&#39;, &#39;bomb&#39;, &#39;knack&#39;, &#39;lip&#39;, &#39;collage&#39;, &#39;rabbit&#39;, &#39;sex&#39;, &#39;of&#39;, &#39;rack&#39;, &#39;wall&#39;, &#39;cracker&#39;, &#39;scottie&#39;, &#39;hill&#39;, &#39;led&#39;, &#39;black&#39;, &#39;art&#39;, &#39;envelopes&#39;, &#39;flytrap&#39;, &#39;box&#39;, &#39;pinks&#39;, &#39;camouflage&#39;, &#39;gingham&#39;, &#39;popcorn&#39;, &#39;with&#39;, &#39;knick&#39;, &#39;empire&#39;, &#39;grow&#39;, &#39;fancy&#39;, &#39;plate&#39;, &#39;natural&#39;, &#39;feltcraft&#39;, &#39;brown&#39;, &#39;paisley&#39;, &#39;repair&#39;, &#39;gumball&#39;, &#39;white&#39;, &#39;regency&#39;, &#39;cakestand&#39;, &#39;rocket&#39;, &#39;harmonica&#39;, &#39;a&#39;, &#39;or&#39;, &#39;transfer&#39;, &#39;street&#39;, &#39;planet&#39;, &#39;office&#39;, &#39;gloss&#39;, &#39;slate&#39;, &#39;towel&#39;, &#39;tea&#39;, &#39;breakfast&#39;] .",
            "url": "https://safenumz.github.io/blog/spark/2020/05/18/pyspark-ml-unsupervised-learning.html",
            "relUrl": "/spark/2020/05/18/pyspark-ml-unsupervised-learning.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post38": {
            "title": "[Spark] PySpark Regression Model",
            "content": "import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . df = spark.read.load(&quot;s3a://data/regression&quot;) . df.show() . +--+--+ | features|label| +--+--+ |[3.0,10.1,3.0]| 2.0| | [2.0,1.1,1.0]| 1.0| |[1.0,0.1,-1.0]| 0.0| |[1.0,0.1,-1.0]| 0.0| | [2.0,4.1,1.0]| 2.0| +--+--+ . &#49440;&#54805; &#54924;&#44480; . from pyspark.ml.regression import LinearRegression lr = LinearRegression().setMaxIter(10).setRegParam(0.3).setElasticNetParam(0.8) print(lr.explainParams()) . aggregationDepth: suggested depth for treeAggregate (&gt;= 2). (default: 2) elasticNetParam: the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. (default: 0.0, current: 0.8) epsilon: The shape parameter to control the amount of robustness. Must be &gt; 1.0. Only valid when loss is huber (default: 1.35) featuresCol: features column name. (default: features) fitIntercept: whether to fit an intercept term. (default: True) labelCol: label column name. (default: label) loss: The loss function to be optimized. Supported options: squaredError, huber. (default: squaredError) maxBlockSizeInMB: maximum memory in MB for stacking input data into blocks. Data is stacked within partitions. If more than remaining data size in a partition then it is adjusted to the data size. Default 0.0 represents choosing optimal value, depends on specific algorithm. Must be &gt;= 0. (default: 0.0) maxIter: max number of iterations (&gt;= 0). (default: 100, current: 10) predictionCol: prediction column name. (default: prediction) regParam: regularization parameter (&gt;= 0). (default: 0.0, current: 0.3) solver: The solver algorithm for optimization. Supported options: auto, normal, l-bfgs. (default: auto) standardization: whether to standardize the training features before fitting the model. (default: True) tol: the convergence tolerance for iterative algorithms (&gt;= 0). (default: 1e-06) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . lrModel = lr.fit(df) . summary = lrModel.summary summary.residuals.show() . /Users/a/spark/python/pyspark/sql/context.py:127: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead. FutureWarning . +--+ | residuals| +--+ | 0.12805046585610147| | -0.1446826926157201| |-0.41903832622420606| |-0.41903832622420606| | 0.8547088792080306| +--+ . print(summary.totalIterations) print(summary.objectiveHistory) print(summary.rootMeanSquaredError) print(summary.r2) . 5 [0.5000000000000001, 0.43152958103627864, 0.313233593388102, 0.312256926665541, 0.30915060819830303, 0.30915058933480266] 0.47308424392175985 0.720239122691221 . &#51068;&#48152;&#54868; &#49440;&#54805; &#54924;&#44480; . from pyspark.ml.regression import GeneralizedLinearRegression glr = GeneralizedLinearRegression() .setFamily(&quot;gaussian&quot;) .setLink(&quot;identity&quot;) .setMaxIter(10) .setRegParam(0.3) .setLinkPredictionCol(&quot;linkOut&quot;) print(glr.explainParams()) . aggregationDepth: suggested depth for treeAggregate (&gt;= 2). (default: 2) family: The name of family which is a description of the error distribution to be used in the model. Supported options: gaussian (default), binomial, poisson, gamma and tweedie. (default: gaussian, current: gaussian) featuresCol: features column name. (default: features) fitIntercept: whether to fit an intercept term. (default: True) labelCol: label column name. (default: label) link: The name of link function which provides the relationship between the linear predictor and the mean of the distribution function. Supported options: identity, log, inverse, logit, probit, cloglog and sqrt. (current: identity) linkPower: The index in the power link function. Only applicable to the Tweedie family. (undefined) linkPredictionCol: link prediction (linear predictor) column name (current: linkOut) maxIter: max number of iterations (&gt;= 0). (default: 25, current: 10) offsetCol: The offset column name. If this is not set or empty, we treat all instance offsets as 0.0 (undefined) predictionCol: prediction column name. (default: prediction) regParam: regularization parameter (&gt;= 0). (default: 0.0, current: 0.3) solver: The solver algorithm for optimization. Supported options: irls. (default: irls) tol: the convergence tolerance for iterative algorithms (&gt;= 0). (default: 1e-06) variancePower: The power in the variance function of the Tweedie distribution which characterizes the relationship between the variance and mean of the distribution. Only applicable for the Tweedie family. Supported values: 0 and [1, Inf). (default: 0.0) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . glrModel = glr.fit(df) . &#51032;&#49324;&#44208;&#51221;&#53944;&#47532; . from pyspark.ml.regression import DecisionTreeRegressor dtr = DecisionTreeRegressor() print(dtr.explainParams()) . cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False) checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) featuresCol: features column name. (default: features) impurity: Criterion used for information gain calculation (case-insensitive). Supported options: variance (default: variance) labelCol: label column name. (default: label) leafCol: Leaf indices column name. Predicted leaf index of each instance in each tree by preorder. (default: ) maxBins: Max number of bins for discretizing continuous features. Must be &gt;=2 and &gt;= number of categories for any categorical feature. (default: 32) maxDepth: Maximum depth of the tree. (&gt;= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. Must be in range [0, 30]. (default: 5) maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256) minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0) minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be &gt;= 1. (default: 1) minWeightFractionPerNode: Minimum fraction of the weighted sample count that each child must have after split. If a split causes the fraction of the total weight in the left or right child to be less than minWeightFractionPerNode, the split will be discarded as invalid. Should be in interval [0.0, 0.5). (default: 0.0) predictionCol: prediction column name. (default: prediction) seed: random seed. (default: 3881760858960463587) varianceCol: column name for the biased sample variance of prediction. (undefined) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . dtrModel = dtr.fit(df) . &#47004;&#45924; &#54252;&#47112;&#49828;&#53944;&#50752; &#44536;&#47000;&#46356;&#50616;&#53944; &#48512;&#49828;&#54000;&#46300; &#53944;&#47532; . from pyspark.ml.regression import RandomForestRegressor from pyspark.ml.regression import GBTRegressor rf = RandomForestRegressor() print(rf.explainParams()) . bootstrap: Whether bootstrap samples are used when building trees. (default: True) cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False) checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) featureSubsetStrategy: The number of features to consider for splits at each tree node. Supported options: &#39;auto&#39; (choose automatically for task: If numTrees == 1, set to &#39;all&#39;. If numTrees &gt; 1 (forest), set to &#39;sqrt&#39; for classification and to &#39;onethird&#39; for regression), &#39;all&#39; (use all features), &#39;onethird&#39; (use 1/3 of the features), &#39;sqrt&#39; (use sqrt(number of features)), &#39;log2&#39; (use log2(number of features)), &#39;n&#39; (when n is in the range (0, 1.0], use n * number of features. When n is in the range (1, number of features), use n features). default = &#39;auto&#39; (default: auto) featuresCol: features column name. (default: features) impurity: Criterion used for information gain calculation (case-insensitive). Supported options: variance (default: variance) labelCol: label column name. (default: label) leafCol: Leaf indices column name. Predicted leaf index of each instance in each tree by preorder. (default: ) maxBins: Max number of bins for discretizing continuous features. Must be &gt;=2 and &gt;= number of categories for any categorical feature. (default: 32) maxDepth: Maximum depth of the tree. (&gt;= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. Must be in range [0, 30]. (default: 5) maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256) minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0) minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be &gt;= 1. (default: 1) minWeightFractionPerNode: Minimum fraction of the weighted sample count that each child must have after split. If a split causes the fraction of the total weight in the left or right child to be less than minWeightFractionPerNode, the split will be discarded as invalid. Should be in interval [0.0, 0.5). (default: 0.0) numTrees: Number of trees to train (&gt;= 1). (default: 20) predictionCol: prediction column name. (default: prediction) seed: random seed. (default: 5577414067263728280) subsamplingRate: Fraction of the training data used for learning each decision tree, in range (0, 1]. (default: 1.0) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . gbt = GBTRegressor() print(gbt.explainParams()) . cacheNodeIds: If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval. (default: False) checkpointInterval: set checkpoint interval (&gt;= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext. (default: 10) featureSubsetStrategy: The number of features to consider for splits at each tree node. Supported options: &#39;auto&#39; (choose automatically for task: If numTrees == 1, set to &#39;all&#39;. If numTrees &gt; 1 (forest), set to &#39;sqrt&#39; for classification and to &#39;onethird&#39; for regression), &#39;all&#39; (use all features), &#39;onethird&#39; (use 1/3 of the features), &#39;sqrt&#39; (use sqrt(number of features)), &#39;log2&#39; (use log2(number of features)), &#39;n&#39; (when n is in the range (0, 1.0], use n * number of features. When n is in the range (1, number of features), use n features). default = &#39;auto&#39; (default: all) featuresCol: features column name. (default: features) impurity: Criterion used for information gain calculation (case-insensitive). Supported options: variance (default: variance) labelCol: label column name. (default: label) leafCol: Leaf indices column name. Predicted leaf index of each instance in each tree by preorder. (default: ) lossType: Loss function which GBT tries to minimize (case-insensitive). Supported options: squared, absolute (default: squared) maxBins: Max number of bins for discretizing continuous features. Must be &gt;=2 and &gt;= number of categories for any categorical feature. (default: 32) maxDepth: Maximum depth of the tree. (&gt;= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes. Must be in range [0, 30]. (default: 5) maxIter: max number of iterations (&gt;= 0). (default: 20) maxMemoryInMB: Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. (default: 256) minInfoGain: Minimum information gain for a split to be considered at a tree node. (default: 0.0) minInstancesPerNode: Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be &gt;= 1. (default: 1) minWeightFractionPerNode: Minimum fraction of the weighted sample count that each child must have after split. If a split causes the fraction of the total weight in the left or right child to be less than minWeightFractionPerNode, the split will be discarded as invalid. Should be in interval [0.0, 0.5). (default: 0.0) predictionCol: prediction column name. (default: prediction) seed: random seed. (default: 4218092065474231699) stepSize: Step size (a.k.a. learning rate) in interval (0, 1] for shrinking the contribution of each estimator. (default: 0.1) subsamplingRate: Fraction of the training data used for learning each decision tree, in range (0, 1]. (default: 1.0) validationIndicatorCol: name of the column that indicates whether each row is for training or for validation. False indicates training; true indicates validation. (undefined) validationTol: Threshold for stopping early when fit with validation is used. If the error rate on the validation input changes by less than the validationTol, then learning will stop early (before `maxIter`). This parameter is ignored when fit without validation is used. (default: 0.01) weightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (undefined) . gbtModel = gbt.fit(df) . &#54217;&#44032;&#44592;&#50752; &#47784;&#45944; &#53916;&#45789; &#51088;&#46041;&#54868; . from pyspark.ml.evaluation import RegressionEvaluator from pyspark.ml.regression import GeneralizedLinearRegression from pyspark.ml import Pipeline from pyspark.ml.tuning import CrossValidator, ParamGridBuilder glr = GeneralizedLinearRegression().setFamily(&quot;gaussian&quot;).setLink(&quot;identity&quot;) pipeline = Pipeline().setStages([glr]) params = ParamGridBuilder().addGrid(glr.regParam, [0.0, 0.5, 1.0]).build() evaluator = RegressionEvaluator() .setMetricName(&quot;rmse&quot;) .setPredictionCol(&quot;label&quot;) cv = CrossValidator() .setEstimator(pipeline) .setEvaluator(evaluator) .setEstimatorParamMaps(params) .setNumFolds(2) model = cv.fit(df) . &#54217;&#44032;&#51648;&#54364; . from pyspark.mllib.evaluation import RegressionMetrics out = model.transform(df) .select(&quot;prediction&quot;, &quot;label&quot;).rdd.map(lambda x: (float(x[0]), float(x[1]))) metrics = RegressionMetrics(out) print(&quot;MSE: &quot; + str(metrics.meanSquaredError)) print(&quot;RMSE: &quot; + str(metrics.rootMeanSquaredError)) print(&quot;R-squred: &quot; + str(metrics.r2)) print(&quot;MAE: &quot; + str(metrics.meanAbsoluteError)) print(&quot;Explained variance: &quot; + str(metrics.explainedVariance)) . /Users/a/spark/python/pyspark/sql/context.py:127: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead. FutureWarning . MSE: 0.15705521472392636 RMSE: 0.39630192369445594 R-squred: 0.803680981595092 MAE: 0.3141104294478528 Explained variance: 0.6429447852760728 .",
            "url": "https://safenumz.github.io/blog/spark/2020/05/17/pyspark-ml-regression.html",
            "relUrl": "/spark/2020/05/17/pyspark-ml-regression.html",
            "date": " • May 17, 2020"
        }
        
    
  
    
        ,"post39": {
            "title": "[Spark] PySpark Feature Engineering 기법들",
            "content": "import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . sales = spark.read.format(&quot;csv&quot;) .option(&quot;header&quot;, &quot;true&quot;) .option(&quot;inferSchema&quot;, &quot;true&quot;) .load(&quot;s3a://data/retail-data/by-day/*.csv&quot;) .where(&quot;Description IS NOT NULL&quot;) . fakeIntDF = spark.read.parquet(&quot;s3a://data/simple-ml-integers&quot;) simpleDF = spark.read.json(&quot;s3a://data/simple-ml&quot;) scaleDF = spark.read.parquet(&quot;s3a://data/simple-ml-scaling&quot;) . 세일즈 데이터셋은 여러번 엑세스할 것이므로 캐시를 함 | . sales.cache() sales.show() . +++--+--+-++-+--+ |InvoiceNo|StockCode| Description|Quantity| InvoiceDate|UnitPrice|CustomerID| Country| +++--+--+-++-+--+ | 580538| 23084| RABBIT NIGHT LIGHT| 48|2011-12-05 08:38:00| 1.79| 14075.0|United Kingdom| | 580538| 23077| DOUGHNUT LIP GLOSS | 20|2011-12-05 08:38:00| 1.25| 14075.0|United Kingdom| | 580538| 22906|12 MESSAGE CARDS ...| 24|2011-12-05 08:38:00| 1.65| 14075.0|United Kingdom| | 580538| 21914|BLUE HARMONICA IN...| 24|2011-12-05 08:38:00| 1.25| 14075.0|United Kingdom| | 580538| 22467| GUMBALL COAT RACK| 6|2011-12-05 08:38:00| 2.55| 14075.0|United Kingdom| | 580538| 21544|SKULLS WATER TRA...| 48|2011-12-05 08:38:00| 0.85| 14075.0|United Kingdom| | 580538| 23126|FELTCRAFT GIRL AM...| 8|2011-12-05 08:38:00| 4.95| 14075.0|United Kingdom| | 580538| 21833|CAMOUFLAGE LED TORCH| 24|2011-12-05 08:38:00| 1.69| 14075.0|United Kingdom| | 580539| 21479|WHITE SKULL HOT W...| 4|2011-12-05 08:39:00| 4.25| 18180.0|United Kingdom| | 580539| 84030E|ENGLISH ROSE HOT ...| 4|2011-12-05 08:39:00| 4.25| 18180.0|United Kingdom| | 580539| 23355|HOT WATER BOTTLE ...| 4|2011-12-05 08:39:00| 4.95| 18180.0|United Kingdom| | 580539| 22111|SCOTTIE DOG HOT W...| 3|2011-12-05 08:39:00| 4.95| 18180.0|United Kingdom| | 580539| 21115|ROSE CARAVAN DOOR...| 8|2011-12-05 08:39:00| 1.95| 18180.0|United Kingdom| | 580539| 21411|GINGHAM HEART DO...| 8|2011-12-05 08:39:00| 1.95| 18180.0|United Kingdom| | 580539| 23235|STORAGE TIN VINTA...| 12|2011-12-05 08:39:00| 1.25| 18180.0|United Kingdom| | 580539| 23239|SET OF 4 KNICK KN...| 6|2011-12-05 08:39:00| 1.65| 18180.0|United Kingdom| | 580539| 22197| POPCORN HOLDER| 36|2011-12-05 08:39:00| 0.85| 18180.0|United Kingdom| | 580539| 22693|GROW A FLYTRAP OR...| 24|2011-12-05 08:39:00| 1.25| 18180.0|United Kingdom| | 580539| 22372|AIRLINE BAG VINTA...| 4|2011-12-05 08:39:00| 4.25| 18180.0|United Kingdom| | 580539| 22375|AIRLINE BAG VINTA...| 4|2011-12-05 08:39:00| 4.25| 18180.0|United Kingdom| +++--+--+-++-+--+ only showing top 20 rows . 1. &#48320;&#54872;&#51088; . 다양한 방법으로 원시 데이터를 변환시키는 함수 | 하나의 변수를 두 개의 다른 변수로 변환하거나, 변수를 Double 타입 등으로 변환하는 기능 | 예) Tokenizer | . from pyspark.ml.feature import Tokenizer tkn = Tokenizer().setInputCol(&quot;Description&quot;) tkn.transform(sales.select(&quot;Description&quot;)).show(5) . +--++ | Description|Tokenizer_f8c5e492a92d__output| +--++ | RABBIT NIGHT LIGHT| [rabbit, night, l...| | DOUGHNUT LIP GLOSS | [doughnut, lip, g...| |12 MESSAGE CARDS ...| [12, message, car...| |BLUE HARMONICA IN...| [blue, harmonica,...| | GUMBALL COAT RACK| [gumball, coat, r...| +--++ only showing top 5 rows . 2. &#51204;&#52376;&#47532; &#52628;&#51221;&#51088; . 수행하려는 변환이 입력 컬럼에 대한 데이터 또는 정보로 초기화되어야 할 때 필요 | 특정 입력 데이터에 따라 구성되는 변환자 | 예) StandardScaler | . from pyspark.ml.feature import StandardScaler ss = StandardScaler().setInputCol(&quot;features&quot;) ss.fit(scaleDF).transform(scaleDF).show(5) . ++--+--+ | id| features|StandardScaler_f10c68da2d39__output| ++--+--+ | 0|[1.0,0.1,-1.0]| [1.19522860933439...| | 1| [2.0,1.1,1.0]| [2.39045721866878...| | 0|[1.0,0.1,-1.0]| [1.19522860933439...| | 1| [2.0,1.1,1.0]| [2.39045721866878...| | 1|[3.0,10.1,3.0]| [3.58568582800318...| ++--+--+ . 3. &#44256;&#49688;&#51456; &#48320;&#54872;&#51088; . 3.1 RFormula . 원 핫 인코딩을 수행해 문자열로 지정된 범주화된 입력변수를 자동으로 처리 | . from pyspark.ml.feature import RFormula supervised = RFormula(formula=&quot;lab ~ . + color:value1 + color:value2&quot;) supervised.fit(simpleDF).transform(simpleDF).show() . +--+-+++--+--+ |color| lab|value1| value2| features|label| +--+-+++--+--+ |green|good| 1|14.386294994851129|(10,[1,2,3,5,8],[...| 1.0| | blue| bad| 8|14.386294994851129|(10,[2,3,6,9],[8....| 0.0| | blue| bad| 12|14.386294994851129|(10,[2,3,6,9],[12...| 0.0| |green|good| 15| 38.97187133755819|(10,[1,2,3,5,8],[...| 1.0| |green|good| 12|14.386294994851129|(10,[1,2,3,5,8],[...| 1.0| |green| bad| 16|14.386294994851129|(10,[1,2,3,5,8],[...| 0.0| | red|good| 35|14.386294994851129|(10,[0,2,3,4,7],[...| 1.0| | red| bad| 1| 38.97187133755819|(10,[0,2,3,4,7],[...| 0.0| | red| bad| 2|14.386294994851129|(10,[0,2,3,4,7],[...| 0.0| | red| bad| 16|14.386294994851129|(10,[0,2,3,4,7],[...| 0.0| | red|good| 45| 38.97187133755819|(10,[0,2,3,4,7],[...| 1.0| |green|good| 1|14.386294994851129|(10,[1,2,3,5,8],[...| 1.0| | blue| bad| 8|14.386294994851129|(10,[2,3,6,9],[8....| 0.0| | blue| bad| 12|14.386294994851129|(10,[2,3,6,9],[12...| 0.0| |green|good| 15| 38.97187133755819|(10,[1,2,3,5,8],[...| 1.0| |green|good| 12|14.386294994851129|(10,[1,2,3,5,8],[...| 1.0| |green| bad| 16|14.386294994851129|(10,[1,2,3,5,8],[...| 0.0| | red|good| 35|14.386294994851129|(10,[0,2,3,4,7],[...| 1.0| | red| bad| 1| 38.97187133755819|(10,[0,2,3,4,7],[...| 0.0| | red| bad| 2|14.386294994851129|(10,[0,2,3,4,7],[...| 0.0| +--+-+++--+--+ only showing top 20 rows . 3.2 SQL &#48320;&#54872;&#51088; . from pyspark.ml.feature import SQLTransformer basicTransformation = SQLTransformer() .setStatement(&quot;&quot;&quot; SELECT sum(Quantity), count(*), CustomerID FROM __THIS__ GROUP BY CustomerID &quot;&quot;&quot;) basicTransformation.transform(sales).show() . +-+--+-+ |sum(Quantity)|count(1)|CustomerID| +-+--+-+ | 119| 62| 14452.0| | 440| 143| 16916.0| | 630| 72| 17633.0| | 34| 6| 14768.0| | 1542| 30| 13094.0| | 854| 117| 17884.0| | 97| 12| 16596.0| | 756| 67| 15145.0| | 83| 13| 16858.0| | 56| 4| 13160.0| | 8873| 80| 16656.0| | 241| 43| 16212.0| | 258| 23| 13142.0| | 67| 14| 13811.0| | 1145| 62| 16600.0| | 568| 87| 15898.0| | 37720| 2491| 15311.0| | 1467| 62| 18263.0| | 2006| 94| 16353.0| | 1486| 161| 17659.0| +-+--+-+ only showing top 20 rows . 3.3 &#48289;&#53552; &#51312;&#54633;&#44592; . 모든 특징을 하나의 큰 벡터로 연결하여 추정자에 전달하는 기능을 제공 | . fakeIntDF.show() . +-+-+-+ |int1|int2|int3| +-+-+-+ | 1| 2| 3| | 4| 5| 6| | 7| 8| 9| +-+-+-+ . from pyspark.ml.feature import VectorAssembler va = VectorAssembler().setInputCols([&quot;int1&quot;, &quot;int2&quot;, &quot;int3&quot;]) va.transform(fakeIntDF).show() . +-+-+-++ |int1|int2|int3|VectorAssembler_7237f61f3237__output| +-+-+-++ | 1| 2| 3| [1.0,2.0,3.0]| | 4| 5| 6| [4.0,5.0,6.0]| | 7| 8| 9| [7.0,8.0,9.0]| +-+-+-++ . 4. &#50672;&#49549;&#54805; &#53945;&#51669; &#52376;&#47532; . 버켓팅이라는 프로세스를 통해 연속형 특징을 범주형 특징으로 변환 | 여러 요구사항에 따라 특징을 스케일링하거나 정규화할 수 있음 | Double 타입에서만 작동하므로 다른 형식의 숫자값이 있다면 Double Type으로 변경해야 함 | . contDF = spark.range(20).selectExpr(&quot;cast(id as double)&quot;) contDF.show() . +-+ | id| +-+ | 0.0| | 1.0| | 2.0| | 3.0| | 4.0| | 5.0| | 6.0| | 7.0| | 8.0| | 9.0| |10.0| |11.0| |12.0| |13.0| |14.0| |15.0| |16.0| |17.0| |18.0| |19.0| +-+ . 4.1 &#48260;&#53011;&#54021; . Bucketizer를 사용하면 주어진 연속형 특징을 지정한 버켓으로 분할 | 예를 들어, 체중을 분석하고 싶을 때, 과체중, 평균, 저체중의 세 가지 버켓으로 나누어 활용하는 것이 간단한 접근이 될 수 있음 | 경계 지정 규칙 분할 배열의 최소값은 DF의 최소값보다 작아야 함 | 분할 배열의 최대값은 DF의 최대값보다 커야 함 | 분할 배열은 최소 세 개 이상의 값을 지정해서 두 개 이상의 버켓을 만들도록 해야 함 | . | 가능한 모든 범위를 포함하기 위해 float(&quot;inf&quot;), float(&quot;-inf&quot;) 를 사용할 수 있음 | . from pyspark.ml.feature import Bucketizer bucketBorders = [-1.0, 5.0, 10.0, 250.0, 600.0] bucketer = Bucketizer().setSplits(bucketBorders).setInputCol(&quot;id&quot;) bucketer.transform(contDF).show() . +-+-+ | id|Bucketizer_e67baba75dea__output| +-+-+ | 0.0| 0.0| | 1.0| 0.0| | 2.0| 0.0| | 3.0| 0.0| | 4.0| 0.0| | 5.0| 1.0| | 6.0| 1.0| | 7.0| 1.0| | 8.0| 1.0| | 9.0| 1.0| |10.0| 2.0| |11.0| 2.0| |12.0| 2.0| |13.0| 2.0| |14.0| 2.0| |15.0| 2.0| |16.0| 2.0| |17.0| 2.0| |18.0| 2.0| |19.0| 2.0| +-+-+ . 기준을 직접 지정하지 않고 백분위수를 기준으로 분할하는 방법도 있음 | . from pyspark.ml.feature import QuantileDiscretizer bucketer = QuantileDiscretizer().setNumBuckets(5).setInputCol(&quot;id&quot;).setOutputCol(&quot;result&quot;) fittedBucketer = bucketer.fit(contDF) fittedBucketer.transform(contDF).show() . +-++ | id|result| +-++ | 0.0| 0.0| | 1.0| 0.0| | 2.0| 0.0| | 3.0| 1.0| | 4.0| 1.0| | 5.0| 1.0| | 6.0| 1.0| | 7.0| 2.0| | 8.0| 2.0| | 9.0| 2.0| |10.0| 2.0| |11.0| 3.0| |12.0| 3.0| |13.0| 3.0| |14.0| 3.0| |15.0| 4.0| |16.0| 4.0| |17.0| 4.0| |18.0| 4.0| |19.0| 4.0| +-++ . 4.3 StandardScaler . 특징들이 평균이 0이고 표준편차가 1인 분포를 갖도록 데이터를 표준화 | . from pyspark.ml.feature import StandardScaler sScaler = StandardScaler().setInputCol(&quot;features&quot;) sScaler.fit(scaleDF).transform(scaleDF).show() . ++--+--+ | id| features|StandardScaler_003a7eaa6e31__output| ++--+--+ | 0|[1.0,0.1,-1.0]| [1.19522860933439...| | 1| [2.0,1.1,1.0]| [2.39045721866878...| | 0|[1.0,0.1,-1.0]| [1.19522860933439...| | 1| [2.0,1.1,1.0]| [2.39045721866878...| | 1|[3.0,10.1,3.0]| [3.58568582800318...| ++--+--+ . 4.4 MinMaxScaler . 벡터의 값을 주어진 최솟값에서 최댓값까지의 비례 값으로 스케일링 함 | . from pyspark.ml.feature import MinMaxScaler minMax = MinMaxScaler().setMin(5).setMax(10).setInputCol(&quot;features&quot;) fittedminMax = minMax.fit(scaleDF) fittedminMax.transform(scaleDF).show() . ++--++ | id| features|MinMaxScaler_7af6603d580f__output| ++--++ | 0|[1.0,0.1,-1.0]| [5.0,5.0,5.0]| | 1| [2.0,1.1,1.0]| [7.5,5.5,7.5]| | 0|[1.0,0.1,-1.0]| [5.0,5.0,5.0]| | 1| [2.0,1.1,1.0]| [7.5,5.5,7.5]| | 1|[3.0,10.1,3.0]| [10.0,10.0,10.0]| ++--++ . 4.5 MaxAbsScaler . 각 값을 해당 컬럼의 최대 절댓값으로 나눠서 데이터의 범위를 조정 | 모든 값은 -1과 1사이에서 끝남 | . from pyspark.ml.feature import MaxAbsScaler maScaler = MaxAbsScaler().setInputCol(&quot;features&quot;) fittedmaScaler = maScaler.fit(scaleDF) fittedmaScaler.transform(scaleDF).show() . ++--++ | id| features|MaxAbsScaler_035b244c7f59__output| ++--++ | 0|[1.0,0.1,-1.0]| [0.33333333333333...| | 1| [2.0,1.1,1.0]| [0.66666666666666...| | 0|[1.0,0.1,-1.0]| [0.33333333333333...| | 1| [2.0,1.1,1.0]| [0.66666666666666...| | 1|[3.0,10.1,3.0]| [1.0,1.0,1.0]| ++--++ . 4.6 ElementwiseProduct . 벡터의 각 값을 임의의 값으로 조정할 수 있음 | . from pyspark.ml.feature import ElementwiseProduct from pyspark.ml.linalg import Vectors scaleUpVec = Vectors.dense(10.0, 15.0, 20.0) scalingUp = ElementwiseProduct() .setScalingVec(scaleUpVec) .setInputCol(&quot;features&quot;) scalingUp.transform(scaleDF).show() . ++--++ | id| features|ElementwiseProduct_fd2f8252b564__output| ++--++ | 0|[1.0,0.1,-1.0]| [10.0,1.5,-20.0]| | 1| [2.0,1.1,1.0]| [20.0,16.5,20.0]| | 0|[1.0,0.1,-1.0]| [10.0,1.5,-20.0]| | 1| [2.0,1.1,1.0]| [20.0,16.5,20.0]| | 1|[3.0,10.1,3.0]| [30.0,151.5,60.0]| ++--++ . 4.7 Normalizer . 여러 가지 표준 중 하나를 사용하여(파라미터 p로 지정) 다차원 벡터를 스케일링할 수 있음 | 예를 들어, 맨해튼 표준은 p=1, 유클리드 표준은 p=2 | . from pyspark.ml.feature import Normalizer manhattanDistance = Normalizer().setP(1).setInputCol(&quot;features&quot;) manhattanDistance.transform(scaleDF).show() . ++--+-+ | id| features|Normalizer_3faba6829ca5__output| ++--+-+ | 0|[1.0,0.1,-1.0]| [0.47619047619047...| | 1| [2.0,1.1,1.0]| [0.48780487804878...| | 0|[1.0,0.1,-1.0]| [0.47619047619047...| | 1| [2.0,1.1,1.0]| [0.48780487804878...| | 1|[3.0,10.1,3.0]| [0.18633540372670...| ++--+-+ . 5. &#48276;&#51452;&#54805; &#53945;&#51669; &#52376;&#47532; . 5.1 StringIndexer . DF에 첨부된 메타데이터를 생성하여 어떤 입력이 어떤 출력에 해당하는지 지정, 이렇게 하면 나중에 각 색인값에서 입력값을 다시 가져올 수 있음 | . from pyspark.ml.feature import StringIndexer lblIndxr = StringIndexer().setInputCol(&quot;lab&quot;).setOutputCol(&quot;labelInd&quot;) idxRes = lblIndxr.fit(simpleDF).transform(simpleDF) idxRes.show() . +--+-+++--+ |color| lab|value1| value2|labelInd| +--+-+++--+ |green|good| 1|14.386294994851129| 1.0| | blue| bad| 8|14.386294994851129| 0.0| | blue| bad| 12|14.386294994851129| 0.0| |green|good| 15| 38.97187133755819| 1.0| |green|good| 12|14.386294994851129| 1.0| |green| bad| 16|14.386294994851129| 0.0| | red|good| 35|14.386294994851129| 1.0| | red| bad| 1| 38.97187133755819| 0.0| | red| bad| 2|14.386294994851129| 0.0| | red| bad| 16|14.386294994851129| 0.0| | red|good| 45| 38.97187133755819| 1.0| |green|good| 1|14.386294994851129| 1.0| | blue| bad| 8|14.386294994851129| 0.0| | blue| bad| 12|14.386294994851129| 0.0| |green|good| 15| 38.97187133755819| 1.0| |green|good| 12|14.386294994851129| 1.0| |green| bad| 16|14.386294994851129| 0.0| | red|good| 35|14.386294994851129| 1.0| | red| bad| 1| 38.97187133755819| 0.0| | red| bad| 2|14.386294994851129| 0.0| +--+-+++--+ only showing top 20 rows . 문자열이 아닌 컬럼에도 StringIndexer를 적용할 수 있음, 색인을 생성하기 전에 문자열로 변환 | . valIndexer = StringIndexer().setInputCol(&quot;value1&quot;).setOutputCol(&quot;valueInd&quot;) valIndexer.fit(simpleDF).transform(simpleDF).show() . +--+-+++--+ |color| lab|value1| value2|valueInd| +--+-+++--+ |green|good| 1|14.386294994851129| 0.0| | blue| bad| 8|14.386294994851129| 7.0| | blue| bad| 12|14.386294994851129| 1.0| |green|good| 15| 38.97187133755819| 3.0| |green|good| 12|14.386294994851129| 1.0| |green| bad| 16|14.386294994851129| 2.0| | red|good| 35|14.386294994851129| 5.0| | red| bad| 1| 38.97187133755819| 0.0| | red| bad| 2|14.386294994851129| 4.0| | red| bad| 16|14.386294994851129| 2.0| | red|good| 45| 38.97187133755819| 6.0| |green|good| 1|14.386294994851129| 0.0| | blue| bad| 8|14.386294994851129| 7.0| | blue| bad| 12|14.386294994851129| 1.0| |green|good| 15| 38.97187133755819| 3.0| |green|good| 12|14.386294994851129| 1.0| |green| bad| 16|14.386294994851129| 2.0| | red|good| 35|14.386294994851129| 5.0| | red| bad| 1| 38.97187133755819| 0.0| | red| bad| 2|14.386294994851129| 4.0| +--+-+++--+ only showing top 20 rows . 학습할 때 보지 못한 입력이 들어오면 기본적으로 오류가 발생함 | 유효하지 않은 입력에 대해 오류를 출력하거나 로우를 건너뛰고 처리하는 옵션만 선택할 수 있음 | . valIndexer.setHandleInvalid(&quot;skip&quot;) valIndexer.fit(simpleDF).setHandleInvalid(&quot;skip&quot;) . StringIndexerModel: uid=StringIndexer_fcfe830fcc9b, handleInvalid=skip . 5.2 &#49353;&#51064;&#46108; &#44050;&#51012; &#53581;&#49828;&#53944;&#47196; &#48320;&#54872; . 다양하게 변환된 결과값을 기존 값으로 다시 매핑하여 진행 | . from pyspark.ml.feature import IndexToString labelReverse = IndexToString().setInputCol(&quot;labelInd&quot;) labelReverse.transform(idxRes).show() . +--+-+++--+-+ |color| lab|value1| value2|labelInd|IndexToString_b45fc27c6240__output| +--+-+++--+-+ |green|good| 1|14.386294994851129| 1.0| good| | blue| bad| 8|14.386294994851129| 0.0| bad| | blue| bad| 12|14.386294994851129| 0.0| bad| |green|good| 15| 38.97187133755819| 1.0| good| |green|good| 12|14.386294994851129| 1.0| good| |green| bad| 16|14.386294994851129| 0.0| bad| | red|good| 35|14.386294994851129| 1.0| good| | red| bad| 1| 38.97187133755819| 0.0| bad| | red| bad| 2|14.386294994851129| 0.0| bad| | red| bad| 16|14.386294994851129| 0.0| bad| | red|good| 45| 38.97187133755819| 1.0| good| |green|good| 1|14.386294994851129| 1.0| good| | blue| bad| 8|14.386294994851129| 0.0| bad| | blue| bad| 12|14.386294994851129| 0.0| bad| |green|good| 15| 38.97187133755819| 1.0| good| |green|good| 12|14.386294994851129| 1.0| good| |green| bad| 16|14.386294994851129| 0.0| bad| | red|good| 35|14.386294994851129| 1.0| good| | red| bad| 1| 38.97187133755819| 0.0| bad| | red| bad| 2|14.386294994851129| 0.0| bad| +--+-+++--+-+ only showing top 20 rows . 5.3 &#48289;&#53552; &#51064;&#45937;&#49905; . from pyspark.ml.feature import VectorIndexer from pyspark.ml.linalg import Vectors idxIn = spark.createDataFrame([ (Vectors.dense(1, 2, 3), 1), (Vectors.dense(2, 5, 6), 2), (Vectors.dense(1, 8, 9), 3) ]).toDF(&quot;features&quot;, &quot;label&quot;) idxIn.show() . +-+--+ | features|label| +-+--+ |[1.0,2.0,3.0]| 1| |[2.0,5.0,6.0]| 2| |[1.0,8.0,9.0]| 3| +-+--+ . indxr = VectorIndexer() .setInputCol(&quot;features&quot;) .setOutputCol(&quot;idxed&quot;) .setMaxCategories(2) indxr.fit(idxIn).transform(idxIn).show() . +-+--+-+ | features|label| idxed| +-+--+-+ |[1.0,2.0,3.0]| 1|[0.0,2.0,3.0]| |[2.0,5.0,6.0]| 2|[1.0,5.0,6.0]| |[1.0,8.0,9.0]| 3|[0.0,8.0,9.0]| +-+--+-+ . 5.4 &#50896;-&#54635; &#51064;&#53076;&#46377; . from pyspark.ml.feature import OneHotEncoder, StringIndexer lblIndxr = StringIndexer().setInputCol(&quot;color&quot;).setOutputCol(&quot;colorInd&quot;) colorLab = lblIndxr.fit(simpleDF).transform(simpleDF.select(&quot;color&quot;)) ohe = OneHotEncoder().setInputCol(&quot;colorInd&quot;) ohe.fit(colorLab).transform(colorLab).show() . +--+--+-+ |color|colorInd|OneHotEncoder_650f9bb5b001__output| +--+--+-+ |green| 1.0| (2,[1],[1.0])| | blue| 2.0| (2,[],[])| | blue| 2.0| (2,[],[])| |green| 1.0| (2,[1],[1.0])| |green| 1.0| (2,[1],[1.0])| |green| 1.0| (2,[1],[1.0])| | red| 0.0| (2,[0],[1.0])| | red| 0.0| (2,[0],[1.0])| | red| 0.0| (2,[0],[1.0])| | red| 0.0| (2,[0],[1.0])| | red| 0.0| (2,[0],[1.0])| |green| 1.0| (2,[1],[1.0])| | blue| 2.0| (2,[],[])| | blue| 2.0| (2,[],[])| |green| 1.0| (2,[1],[1.0])| |green| 1.0| (2,[1],[1.0])| |green| 1.0| (2,[1],[1.0])| | red| 0.0| (2,[0],[1.0])| | red| 0.0| (2,[0],[1.0])| | red| 0.0| (2,[0],[1.0])| +--+--+-+ only showing top 20 rows . colorLab.show() . +--+--+ |color|colorInd| +--+--+ |green| 1.0| | blue| 2.0| | blue| 2.0| |green| 1.0| |green| 1.0| |green| 1.0| | red| 0.0| | red| 0.0| | red| 0.0| | red| 0.0| | red| 0.0| |green| 1.0| | blue| 2.0| | blue| 2.0| |green| 1.0| |green| 1.0| |green| 1.0| | red| 0.0| | red| 0.0| | red| 0.0| +--+--+ only showing top 20 rows . 6. &#53581;&#49828;&#53944; &#45936;&#51060;&#53552; &#48320;&#54872;&#51088; . 6.1 &#53581;&#49828;&#53944; &#53664;&#53360;&#54868; . from pyspark.ml.feature import Tokenizer tkn = Tokenizer().setInputCol(&quot;Description&quot;).setOutputCol(&quot;DescOut&quot;) tokenized = tkn.transform(sales.select(&quot;Description&quot;)) tokenized.show(20, False) . +--++ |Description |DescOut | +--++ |RABBIT NIGHT LIGHT |[rabbit, night, light] | |DOUGHNUT LIP GLOSS |[doughnut, lip, gloss] | |12 MESSAGE CARDS WITH ENVELOPES |[12, message, cards, with, envelopes] | |BLUE HARMONICA IN BOX |[blue, harmonica, in, box] | |GUMBALL COAT RACK |[gumball, coat, rack] | |SKULLS WATER TRANSFER TATTOOS |[skulls, , water, transfer, tattoos] | |FELTCRAFT GIRL AMELIE KIT |[feltcraft, girl, amelie, kit] | |CAMOUFLAGE LED TORCH |[camouflage, led, torch] | |WHITE SKULL HOT WATER BOTTLE |[white, skull, hot, water, bottle] | |ENGLISH ROSE HOT WATER BOTTLE |[english, rose, hot, water, bottle] | |HOT WATER BOTTLE KEEP CALM |[hot, water, bottle, keep, calm] | |SCOTTIE DOG HOT WATER BOTTLE |[scottie, dog, hot, water, bottle] | |ROSE CARAVAN DOORSTOP |[rose, caravan, doorstop] | |GINGHAM HEART DOORSTOP RED |[gingham, heart, , doorstop, red] | |STORAGE TIN VINTAGE LEAF |[storage, tin, vintage, leaf] | |SET OF 4 KNICK KNACK TINS POPPIES |[set, of, 4, knick, knack, tins, poppies] | |POPCORN HOLDER |[popcorn, holder] | |GROW A FLYTRAP OR SUNFLOWER IN TIN |[grow, a, flytrap, or, sunflower, in, tin]| |AIRLINE BAG VINTAGE WORLD CHAMPION |[airline, bag, vintage, world, champion] | |AIRLINE BAG VINTAGE JET SET BROWN |[airline, bag, vintage, jet, set, brown] | +--++ only showing top 20 rows . RegexTokenizer를 이용하면 공백뿐만 아니라 정규 표현식을 이용한 Tokenizer를 만들 수 있음 | Java의 정규 표현식RegEx구문을 준수해야 함 | . from pyspark.ml.feature import RegexTokenizer rt = RegexTokenizer() .setInputCol(&quot;Description&quot;) .setOutputCol(&quot;DescOut&quot;) .setPattern(&quot; &quot;) .setToLowercase(True) rt.transform(sales.select(&quot;Description&quot;)).show(20, False) . +--++ |Description |DescOut | +--++ |RABBIT NIGHT LIGHT |[rabbit, night, light] | |DOUGHNUT LIP GLOSS |[doughnut, lip, gloss] | |12 MESSAGE CARDS WITH ENVELOPES |[12, message, cards, with, envelopes] | |BLUE HARMONICA IN BOX |[blue, harmonica, in, box] | |GUMBALL COAT RACK |[gumball, coat, rack] | |SKULLS WATER TRANSFER TATTOOS |[skulls, water, transfer, tattoos] | |FELTCRAFT GIRL AMELIE KIT |[feltcraft, girl, amelie, kit] | |CAMOUFLAGE LED TORCH |[camouflage, led, torch] | |WHITE SKULL HOT WATER BOTTLE |[white, skull, hot, water, bottle] | |ENGLISH ROSE HOT WATER BOTTLE |[english, rose, hot, water, bottle] | |HOT WATER BOTTLE KEEP CALM |[hot, water, bottle, keep, calm] | |SCOTTIE DOG HOT WATER BOTTLE |[scottie, dog, hot, water, bottle] | |ROSE CARAVAN DOORSTOP |[rose, caravan, doorstop] | |GINGHAM HEART DOORSTOP RED |[gingham, heart, doorstop, red] | |STORAGE TIN VINTAGE LEAF |[storage, tin, vintage, leaf] | |SET OF 4 KNICK KNACK TINS POPPIES |[set, of, 4, knick, knack, tins, poppies] | |POPCORN HOLDER |[popcorn, holder] | |GROW A FLYTRAP OR SUNFLOWER IN TIN |[grow, a, flytrap, or, sunflower, in, tin]| |AIRLINE BAG VINTAGE WORLD CHAMPION |[airline, bag, vintage, world, champion] | |AIRLINE BAG VINTAGE JET SET BROWN |[airline, bag, vintage, jet, set, brown] | +--++ only showing top 20 rows . 공백을 사용하는 것이 아니라 사전에 제시된 패턴에 매칭되는 값을 출력할 수 있음 | gaps 파라미터를 false로 설정하여 이 작업을 수행 | . from pyspark.ml.feature import RegexTokenizer rt = RegexTokenizer() .setInputCol(&quot;Description&quot;) .setOutputCol(&quot;DescOut&quot;) .setPattern(&quot; &quot;) .setGaps(False) .setToLowercase(True) rt.transform(sales.select(&quot;Description&quot;)).show(20, False) . +--++ |Description |DescOut | +--++ |RABBIT NIGHT LIGHT |[ , ] | |DOUGHNUT LIP GLOSS |[ , , ] | |12 MESSAGE CARDS WITH ENVELOPES |[ , , , ] | |BLUE HARMONICA IN BOX |[ , , , ] | |GUMBALL COAT RACK |[ , ] | |SKULLS WATER TRANSFER TATTOOS |[ , , , , ] | |FELTCRAFT GIRL AMELIE KIT |[ , , ] | |CAMOUFLAGE LED TORCH |[ , ] | |WHITE SKULL HOT WATER BOTTLE |[ , , , , ] | |ENGLISH ROSE HOT WATER BOTTLE |[ , , , ] | |HOT WATER BOTTLE KEEP CALM |[ , , , ] | |SCOTTIE DOG HOT WATER BOTTLE |[ , , , ] | |ROSE CARAVAN DOORSTOP |[ , ] | |GINGHAM HEART DOORSTOP RED |[ , , , ] | |STORAGE TIN VINTAGE LEAF |[ , , ] | |SET OF 4 KNICK KNACK TINS POPPIES |[ , , , , , ]| |POPCORN HOLDER |[ ] | |GROW A FLYTRAP OR SUNFLOWER IN TIN |[ , , , , , ]| |AIRLINE BAG VINTAGE WORLD CHAMPION |[ , , , , ] | |AIRLINE BAG VINTAGE JET SET BROWN |[ , , , , ] | +--++ only showing top 20 rows . 6.2 &#51068;&#48152;&#51201;&#51064; &#45800;&#50612; &#51228;&#44144; . from pyspark.ml.feature import StopWordsRemover englishStopWords = StopWordsRemover.loadDefaultStopWords(&quot;english&quot;) stops = StopWordsRemover() .setStopWords(englishStopWords) .setInputCol(&quot;DescOut&quot;) stops.transform(tokenized).show(5, False) . +-+-+-+ |Description |DescOut |StopWordsRemover_52dbe61992eb__output| +-+-+-+ |RABBIT NIGHT LIGHT |[rabbit, night, light] |[rabbit, night, light] | |DOUGHNUT LIP GLOSS |[doughnut, lip, gloss] |[doughnut, lip, gloss] | |12 MESSAGE CARDS WITH ENVELOPES|[12, message, cards, with, envelopes]|[12, message, cards, envelopes] | |BLUE HARMONICA IN BOX |[blue, harmonica, in, box] |[blue, harmonica, box] | |GUMBALL COAT RACK |[gumball, coat, rack] |[gumball, coat, rack] | +-+-+-+ only showing top 5 rows . 6.3 &#45800;&#50612; &#51312;&#54633; &#47564;&#46308;&#44592; . 단어 조합이란 기술적으로 길이가 n인 단어의 시퀀스, 즉 n-gram으로 간주 | . from pyspark.ml.feature import NGram unigram = NGram().setInputCol(&quot;DescOut&quot;).setN(1) bigram = NGram().setInputCol(&quot;DescOut&quot;).setN(2) unigram.transform(tokenized.select(&quot;DescOut&quot;)).show(10, False) bigram.transform(tokenized.select(&quot;DescOut&quot;)).show(10, False) . +-+-+ |DescOut |NGram_88f7dd6c0325__output | +-+-+ |[rabbit, night, light] |[rabbit, night, light] | |[doughnut, lip, gloss] |[doughnut, lip, gloss] | |[12, message, cards, with, envelopes]|[12, message, cards, with, envelopes]| |[blue, harmonica, in, box] |[blue, harmonica, in, box] | |[gumball, coat, rack] |[gumball, coat, rack] | |[skulls, , water, transfer, tattoos] |[skulls, , water, transfer, tattoos] | |[feltcraft, girl, amelie, kit] |[feltcraft, girl, amelie, kit] | |[camouflage, led, torch] |[camouflage, led, torch] | |[white, skull, hot, water, bottle] |[white, skull, hot, water, bottle] | |[english, rose, hot, water, bottle] |[english, rose, hot, water, bottle] | +-+-+ only showing top 10 rows +-+-+ |DescOut |NGram_9932ae155e60__output | +-+-+ |[rabbit, night, light] |[rabbit night, night light] | |[doughnut, lip, gloss] |[doughnut lip, lip gloss] | |[12, message, cards, with, envelopes]|[12 message, message cards, cards with, with envelopes]| |[blue, harmonica, in, box] |[blue harmonica, harmonica in, in box] | |[gumball, coat, rack] |[gumball coat, coat rack] | |[skulls, , water, transfer, tattoos] |[skulls , water, water transfer, transfer tattoos] | |[feltcraft, girl, amelie, kit] |[feltcraft girl, girl amelie, amelie kit] | |[camouflage, led, torch] |[camouflage led, led torch] | |[white, skull, hot, water, bottle] |[white skull, skull hot, hot water, water bottle] | |[english, rose, hot, water, bottle] |[english rose, rose hot, hot water, water bottle] | +-+-+ only showing top 10 rows . 6.4 &#45800;&#50612;&#47484; &#49707;&#51088;&#47196; &#48320;&#54872; . CountVectorizer . Output: (총 어휘 크기, 어휘에 포함된 단어 색인, 특정 단어의 출현 빈도) | . from pyspark.ml.feature import CountVectorizer cv = CountVectorizer() .setInputCol(&quot;DescOut&quot;) .setOutputCol(&quot;countVec&quot;) .setVocabSize(500) .setMinTF(1) .setMinDF(2) fittedCV = cv.fit(tokenized) fittedCV.transform(tokenized).show(10, False) . +-+-++ |Description |DescOut |countVec | +-+-++ |RABBIT NIGHT LIGHT |[rabbit, night, light] |(500,[149,185,212],[1.0,1.0,1.0]) | |DOUGHNUT LIP GLOSS |[doughnut, lip, gloss] |(500,[462,463,492],[1.0,1.0,1.0]) | |12 MESSAGE CARDS WITH ENVELOPES|[12, message, cards, with, envelopes]|(500,[35,41,166],[1.0,1.0,1.0]) | |BLUE HARMONICA IN BOX |[blue, harmonica, in, box] |(500,[10,16,36,352],[1.0,1.0,1.0,1.0]) | |GUMBALL COAT RACK |[gumball, coat, rack] |(500,[228,280,408],[1.0,1.0,1.0]) | |SKULLS WATER TRANSFER TATTOOS |[skulls, , water, transfer, tattoos] |(500,[11,40,133],[1.0,1.0,1.0]) | |FELTCRAFT GIRL AMELIE KIT |[feltcraft, girl, amelie, kit] |(500,[60,64,69],[1.0,1.0,1.0]) | |CAMOUFLAGE LED TORCH |[camouflage, led, torch] |(500,[264],[1.0]) | |WHITE SKULL HOT WATER BOTTLE |[white, skull, hot, water, bottle] |(500,[15,34,39,40,118],[1.0,1.0,1.0,1.0,1.0])| |ENGLISH ROSE HOT WATER BOTTLE |[english, rose, hot, water, bottle] |(500,[34,39,40,46,169],[1.0,1.0,1.0,1.0,1.0])| +-+-++ only showing top 10 rows . TF-IDF . tfIdfIn = tokenized .where(&quot;array_contains(DescOut, &#39;red&#39;)&quot;) .select(&quot;DescOut&quot;) .limit(10) tfIdfIn.show(10, False) . ++ |DescOut | ++ |[red, star, card, holder] | |[jumbo, bag, red, retrospot] | |[red, diner, wall, clock] | |[lunch, bag, red, retrospot] | |[red, flock, love, heart, photo, frame]| |[red, woolly, hottie, white, heart.] | |[jumbo, bag, red, retrospot] | |[edwardian, parasol, red] | |[jumbo, bag, red, retrospot] | |[red, hanging, heart, t-light, holder] | ++ . from pyspark.ml.feature import HashingTF, IDF tf = HashingTF() .setInputCol(&quot;DescOut&quot;) .setOutputCol(&quot;TFOut&quot;) .setNumFeatures(10000) idf = IDF() .setInputCol(&quot;TFOut&quot;) .setOutputCol(&quot;IDFCol&quot;) .setMinDocFreq(2) idf.fit(tf.transform(tfIdfIn)).transform(tf.transform(tfIdfIn)).show(10, False) . +-+++ |DescOut |TFOut |IDFCol | +-+++ |[wrap, red, apples] |(10000,[52,3405,9749],[1.0,1.0,1.0]) |(10000,[52,3405,9749],[0.0,1.2992829841302609,0.0]) | |[pack, of, 20, napkins, red, apples] |(10000,[52,429,3405,4495,6547,9012],[1.0,1.0,1.0,1.0,1.0,1.0]) |(10000,[52,429,3405,4495,6547,9012],[0.0,1.2992829841302609,1.2992829841302609,0.0,0.0,0.0]) | |[red, diner, wall, clock] |(10000,[52,5265,6404,8737],[1.0,1.0,1.0,1.0]) |(10000,[52,5265,6404,8737],[0.0,0.0,0.0,1.2992829841302609]) | |[red, retrospot, charlotte, bag] |(10000,[52,415,4175,8448],[1.0,1.0,1.0,1.0]) |(10000,[52,415,4175,8448],[0.0,0.0,0.0,1.2992829841302609]) | |[red, baby, bunting] |(10000,[52,1348,7997],[1.0,1.0,1.0]) |(10000,[52,1348,7997],[0.0,0.0,0.0]) | |[alarm, clock, bakelike, red] |(10000,[52,4995,8737,9001],[1.0,1.0,1.0,1.0]) |(10000,[52,4995,8737,9001],[0.0,0.0,1.2992829841302609,0.0]) | |[3, tier, cake, tin, red, and, cream] |(10000,[52,1923,2891,3791,4206,7815,9042],[1.0,1.0,1.0,1.0,1.0,1.0,1.0])|(10000,[52,1923,2891,3791,4206,7815,9042],[0.0,0.0,0.0,0.0,0.0,0.0,0.0]) | |[set/20, red, retrospot, paper, napkins]|(10000,[52,429,6283,8448,8690],[1.0,1.0,1.0,1.0,1.0]) |(10000,[52,429,6283,8448,8690],[0.0,1.2992829841302609,0.0,1.2992829841302609,1.0116009116784799]) | |[set/6, red, spotty, paper, plates] |(10000,[52,2390,5712,6260,8690],[1.0,1.0,1.0,1.0,1.0]) |(10000,[52,2390,5712,6260,8690],[0.0,0.0,1.2992829841302609,1.2992829841302609,1.0116009116784799])| |[set/6, red, spotty, paper, cups] |(10000,[52,2572,5712,6260,8690],[1.0,1.0,1.0,1.0,1.0]) |(10000,[52,2572,5712,6260,8690],[0.0,0.0,1.2992829841302609,1.2992829841302609,1.0116009116784799])| +-+++ . 6.5 Word2Vec . from pyspark.ml.feature import Word2Vec from pyspark.ml.linalg import Vector from pyspark.sql import Row documentDF = spark.createDataFrame([ (&quot;Hi I heard about Spark&quot;.split(&quot; &quot;), ), (&quot;I with Java could use case classes&quot;.split(&quot; &quot;), ), (&quot;Logistic regression models are neat&quot;.split(&quot; &quot;), ) ], [&quot;text&quot;]) word2Vec = Word2Vec() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;result&quot;) .setVectorSize(3) .setMinCount(0) model = word2Vec.fit(documentDF) result = model.transform(documentDF) for row in result.collect(): text, vector = row print(&quot;Text: [%s] =&gt; nVector: %s n&quot; % (&quot;, &quot;.join(text), str(vector))) . Text: [Hi, I, heard, about, Spark] =&gt; Vector: [0.06367666050791741,-0.047254581749439244,0.0387911431491375] Text: [I, with, Java, could, use, case, classes] =&gt; Vector: [0.010081456042826176,-0.08104146995382117,0.07273546925612857] Text: [Logistic, regression, models, are, neat] =&gt; Vector: [0.05691406726837159,-0.005072242021560669,-0.059899924695491796] . 7. &#53945;&#51669; &#51312;&#51089; . 7.1 &#51452;&#49457;&#48516; &#48516;&#49437; . 주성분 분석Principal Components Analysis은 데이터의 가장 중요한 측면을 찾는 수학적 기법 | . from pyspark.ml.feature import PCA pca = PCA().setInputCol(&quot;features&quot;).setK(2) pca.fit(scaleDF).transform(scaleDF).show(20, False) . ++--++ |id |features |PCA_b3c7be1d1cac__output | ++--++ |0 |[1.0,0.1,-1.0]|[0.0713719499248417,-0.4526654888147805] | |1 |[2.0,1.1,1.0] |[-1.6804946984073723,1.2593401322219198] | |0 |[1.0,0.1,-1.0]|[0.0713719499248417,-0.4526654888147805] | |1 |[2.0,1.1,1.0] |[-1.6804946984073723,1.2593401322219198] | |1 |[3.0,10.1,3.0]|[-10.872398139848944,0.030962697060155975]| ++--++ . 7.2 ChiSqSelector . from pyspark.ml.feature import ChiSqSelector, Tokenizer tkn = Tokenizer().setInputCol(&quot;Description&quot;).setOutputCol(&quot;DescOut&quot;) tokenized = tkn .transform(sales.select(&quot;Description&quot;, &quot;CustomerId&quot;)) .where(&quot;CustomerId IS NOT NULL&quot;) prechi = fittedCV.transform(tokenized) .where(&quot;CustomerId IS NOT NULL&quot;) chisq = ChiSqSelector() .setFeaturesCol(&quot;countVec&quot;) .setLabelCol(&quot;CustomerId&quot;) .setNumTopFeatures(2) chisq.fit(prechi).transform(prechi) .drop(&quot;customerId&quot;, &quot;Description&quot;, &quot;DescOut&quot;).show() . +--+-+ | countVec|ChiSqSelector_c638e4b9988e__output| +--+-+ |(500,[149,185,212...| (2,[],[])| |(500,[462,463,492...| (2,[],[])| |(500,[35,41,166],...| (2,[],[])| |(500,[10,16,36,35...| (2,[],[])| |(500,[228,280,408...| (2,[],[])| |(500,[11,40,133],...| (2,[],[])| |(500,[60,64,69],[...| (2,[],[])| | (500,[264],[1.0])| (2,[],[])| |(500,[15,34,39,40...| (2,[],[])| |(500,[34,39,40,46...| (2,[],[])| |(500,[34,39,40,14...| (2,[],[])| |(500,[34,39,40,14...| (2,[],[])| |(500,[46,297],[1....| (2,[],[])| |(500,[3,4,11,143,...| (2,[],[])| |(500,[6,45,109,16...| (2,[],[])| |(500,[0,1,49,70,3...| (2,[0,1],[1.0,1.0])| |(500,[21,296],[1....| (2,[],[])| |(500,[36,45,378],...| (2,[],[])| |(500,[2,6,328],[1...| (2,[],[])| |(500,[0,2,6,328,4...| (2,[0],[1.0])| +--+-+ only showing top 20 rows .",
            "url": "https://safenumz.github.io/blog/spark/2020/05/12/pyspark-ml-feature-engineering.html",
            "relUrl": "/spark/2020/05/12/pyspark-ml-feature-engineering.html",
            "date": " • May 12, 2020"
        }
        
    
  
    
        ,"post40": {
            "title": "[Linux] ssh 설정 스크립트",
            "content": "ssh 설정 스크립트 . Kubernetes, Kafka 등의 Cluster 학습을 할 때, public key 공유를 하기 번거로워 작성함 | 가상환경 구성 등의 간단한 실습용으로 실무에서 사용하려면 코드를 더 수정해야 함 | 각 SERVER, CLIENT에 ~/.ssh/authorized_keys 쓰기 권한이 있어야 함, 400으로 막혀있으면 안됨 | CLIENT가 있다면, 사전에 CLIENT에 sshpass가 설치되어 있어야 함 | . ssh_config.sh . CLIENT, SERVER 들의 USER_NAME, IP, Password, PORT, HOSTNAME 정보 설정 | . #!/bin/bash # ssh_config.sh # CLIENT # CLIENT 서버가 있다면 사전에 sshpass가 설치되어 있어야 함 # Available OS: CentOS, Ubuntu, Mac # CLIENT=(user ip password port nickname) CLIENT=(a 192.168.0.99 &lt;password&gt; 22 lab) # SERVER # Available OS: CentOS, Ubuntu # SERVER=(user ip password port nickname) SERVER_1=(root 192.168.0.100 &lt;password&gt; 22 lab100) SERVER_2=(root 192.168.0.101 &lt;password&gt; 22 lab101) SERVER_3=(root 192.168.0.102 &lt;password&gt; 22 lab102) SERVER_4=(root 192.168.0.103 &lt;password&gt; 22 lab103) SERVER_LIST=( SERVER_1[@] SERVER_2[@] SERVER_3[@] SERVER_4[@] ) . setup_ssh.sh . 각 서버들에 sshpass 설치, ssh-keygen, public key 공유 | . #!/bin/bash # =========================================================================== # Program: setup_ssh.sh # Path: . # Usage: bash setup_ssh.sh $1 # $1: $PWD/ssh_config.sh # ============================================================================ source $1 function remote_cmd() { local user=$1 local ip=$2 local passwd=$3 local port=$4 local command=$5 sshpass -p ${passwd} ssh -p ${port} -o StrictHostKeyChecking=no ${user}@${ip} &quot;export PATH=$PATH:/usr/local/bin:/usr/bin &amp;&amp; ${command}&quot; } function install_sshpass() { local user=$1 local ip=$2 local passwd=$3 local port=$4 echo &quot;*** install-sshpass ${ip}:${port}&quot; if [[ $(remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;cat /etc/*release&quot;) =~ &quot;CentOS&quot; ]]; then remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;yum install -y sshpass&quot; elif [[ $(remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;cat /etc/*release&quot;) =~ &quot;Ubuntu&quot; ]]; then remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;apt-get install -y sshpass&quot; else echo &quot;[ERROR] Invalid OS... (Valid OS: CentOS, Ubuntu)&quot; exit 1 fi } function ssh_keygen() { local user=$1 local ip=$2 local passwd=$3 local port=$4 local nickname=$5 echo &quot;*** ssh-keygen ${nickname}(${user}@${ip}:${port})&quot; remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;ssh-keygen -t rsa -P &#39;&#39; -f ~/.ssh/id_rsa &amp;&amp; cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys&quot; &lt;&lt;&lt; y &gt; /dev/null } function share_ssh_key() { local src_user=$1 local src_ip=$2 local src_passwd=$3 local src_port=$4 local src_nickname=$5 local dst_user=$6 local dst_ip=$7 local dst_passwd=$8 local dst_port=$9 local dst_nickname=$10 local dst_home=$(remote_cmd &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_passwd&quot; &quot;$dst_port&quot; &quot;echo $HOME&quot;) echo &quot;*** share ssh-key ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_nickname}(${dst_user}@${dst_ip}:${dst_port})&quot; echo &quot;sshpass -p ${dst_passwd} scp -P ${dst_port} -o StrictHostKeyChecking=no ~/.ssh/id_rsa.pub ${dst_user}@${dst_ip}:/${dst_home}/.ssh/${src_nickname}.pub&quot; remote_cmd &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;sshpass -p ${dst_passwd} scp -P ${dst_port} -o StrictHostKeyChecking=no ~/.ssh/id_rsa.pub ${dst_user}@${dst_ip}:/${dst_home}/.ssh/${src_nickname}.pub&quot; remote_cmd &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_passwd&quot; &quot;$dst_port&quot; &quot;cat ~/.ssh/${src_nickname}.pub &gt;&gt; ~/.ssh/authorized_keys&quot; } function set_authority() { local user=$1 local ip=$2 local passwd=$3 local port=$4 local nickname=$5 echo &quot;*** set authority ${nickname}(${user}@${ip}:${port})&quot; remote_cmd &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;chmod 400 ~/.ssh/authorized_keys&quot; } function validate_ssh_conn() { local src_user=$1 local src_ip=$2 local src_passwd=$3 local src_port=$4 local src_nickname=$5 local dst_user=$6 local dst_ip=$7 local dst_port=$8 local dst_nickname=$9 echo -e &quot; n n*** validate ssh-connection ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_nickname}(${dst_user}@${dst_ip}:${dst_port})&quot; remote_cmd &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;ssh ${dst_user}@${dst_ip} -p ${dst_port} &#39;echo 2&gt;&amp;1&#39; &amp;&amp; echo &#39;[SSH CONNECTION SUCCESS] ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_nickname}(${dst_user}@${dst_ip}:${dst_port})&#39; || echo &#39;[SSH CONNECTION FAILURE] ${src_nickname}(${src_user}@${src_ip}:${src_port}) -&gt; ${dst_user}@${dst_nickname}(${dst_ip}:${dst_port})&#39;&quot; } function main() { # client if [ ! -z $CLIENT ]; then ssh-keygen -t rsa -P &#39;&#39; -f ~/.ssh/id_rsa &lt;&lt;&lt; y &gt; /dev/null cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys chmod 400 ~/.ssh/authorized_keys fi # server: sshpass 설치 및 ssh-keygen for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local user=${!SERVER_LIST[i]:0:1} local ip=${!SERVER_LIST[i]:1:1} local passwd=${!SERVER_LIST[i]:2:1} local port=${!SERVER_LIST[i]:3:1} local nickname=${!SERVER_LIST[i]:4:1} # sshpass 설치 install_sshpass &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; # ssh-keygen ssh_keygen &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;$nickname&quot; done # server: 각 서버 간 public key 공유 for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local src_user=${!SERVER_LIST[i]:0:1} local src_ip=${!SERVER_LIST[i]:1:1} local src_passwd=${!SERVER_LIST[i]:2:1} local src_port=${!SERVER_LIST[i]:3:1} local src_nickname=${!SERVER_LIST[i]:4:1} # client if [ ! -z $CLIENT ]; then local client_nickname=${CLIENT[4]} sshpass -p &quot;$src_passwd&quot; scp -P &quot;$src_port&quot; -o StrictHostKeyChecking=no ~/.ssh/id_rsa.pub &quot;${src_user}&quot;@&quot;${src_ip}&quot;:/$(echo $HOME)/.ssh/${client_nickname}.pub remote_cmd &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;cat ~/.ssh/${client_nickname}.pub &gt;&gt; ~/.ssh/authorized_keys&quot; fi for ((j=0; j&lt;${#SERVER_LIST[@]}; j++)) do local dst_user=${!SERVER_LIST[j]:0:1} local dst_ip=${!SERVER_LIST[j]:1:1} local dst_passwd=${!SERVER_LIST[j]:2:1} local dst_port=${!SERVER_LIST[j]:3:1} local dst_nickname=${!SERVER_LIST[j]:4:1} if [[ &quot;${src_ip}:${src_port}&quot; != &quot;${dst_ip}:${dst_port}&quot; ]]; then share_ssh_key &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;$src_nickname&quot; &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_passwd&quot; &quot;$dst_port&quot; &quot;$dst_nickname&quot; fi done done # authorized_keys 보안 설정 for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local user=${!SERVER_LIST[i]:0:1} local ip=${!SERVER_LIST[i]:1:1} local passwd=${!SERVER_LIST[i]:2:1} local port=${!SERVER_LIST[i]:3:1} local nickname=${!SERVER_LIST[i]:4:1} set_authority &quot;$user&quot; &quot;$ip&quot; &quot;$passwd&quot; &quot;$port&quot; &quot;$nickname&quot; done # 패스워드없이 잘 접속되는지 최종 확인 for ((i=0; i&lt;${#SERVER_LIST[@]}; i++)) do local src_user=${!SERVER_LIST[i]:0:1} local src_ip=${!SERVER_LIST[i]:1:1} local src_passwd=${!SERVER_LIST[i]:2:1} local src_port=${!SERVER_LIST[i]:3:1} local src_nickname=${!SERVER_LIST[i]:4:1} for ((j=0; j&lt;${#SERVER_LIST[@]}; j++)) do local dst_user=${!SERVER_LIST[j]:0:1} local dst_ip=${!SERVER_LIST[j]:1:1} local dst_port=${!SERVER_LIST[j]:3:1} local dst_nickname=${!SERVER_LIST[j]:4:1} if [[ &quot;${src_ip}:${src_port}&quot; != &quot;${dst_ip}:${dst_port}&quot; ]]; then validate_ssh_conn &quot;$src_user&quot; &quot;$src_ip&quot; &quot;$src_passwd&quot; &quot;$src_port&quot; &quot;$src_nickname&quot; &quot;$dst_user&quot; &quot;$dst_ip&quot; &quot;$dst_port&quot; &quot;$dst_nickname&quot; fi done done } main .",
            "url": "https://safenumz.github.io/blog/linux/2020/04/15/Linux-ssh_setting.html",
            "relUrl": "/linux/2020/04/15/Linux-ssh_setting.html",
            "date": " • Apr 15, 2020"
        }
        
    
  
    
        ,"post41": {
            "title": "[Linux] 비밀번호 없이 다른 머신에 접속",
            "content": "비밀번호 없이 다른 머신에 접속 . host: hd1, hd2 | . 1번 머신(hd1) 설정 . # 개인키와 공개키를 생성 $ ssh-keygen -t dsa -P &#39;&#39; -f ~/.ssh/id_dsa # 공개키 이름을 식별하기 쉽게 변경 $ mv ~/.ssh/id_dsa.pub ~/.ssh/hd1.pub # 1번 머신의 공개키를 2번 머신에 전송 $ scp ~/.ssh/hd1.pub username@hd2://home/username/.ssh/hd1.pub . 2번 머신(hd2) 설정 . # 개인키와 공개키를 생성 $ ssh-keygen -t dsa -P &#39;&#39; -f ~/.ssh/id_dsa # 공개키 이름을 식별하기 쉽게 변경 $ mv ~/.ssh/id_dsa.pub ~/.ssh/hd2.pub # 2번 머신의 공개키를 1번 머신에 전송 $ scp ~/.ssh/hd2.pub username@hd1://home/username/.ssh/hd2.pub . 1번 머신(hd1) 설정 . # 공개키를 키박스에 추가 $ cat ~/.ssh/hd1.pub &gt;&gt; ~/.ssh/authorized_keys $ cat ~/.ssh/hd2.pub &gt;&gt; ~/.ssh/authorized_keys # 접근권한 설정 $ chmod 400 ~/.ssh/authorized_keys . 2번 머신(hd1) 설정 . # 공개키를 키박스에 추가 $ cat ~/.ssh/hd1.pub &gt;&gt; ~/.ssh/authorized_keys $ cat ~/.ssh/hd2.pub &gt;&gt; ~/.ssh/authorized_keys # 접근권한 설정 $ chmod 400 ~/.ssh/authorized_keys .",
            "url": "https://safenumz.github.io/blog/linux/2020/04/14/Linux-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8_%EC%97%86%EC%9D%B4_%EB%8B%A4%EB%A5%B8_%EB%A8%B8%EC%8B%A0%EC%97%90_%EC%A0%91%EC%86%8D.html",
            "relUrl": "/linux/2020/04/14/Linux-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8_%EC%97%86%EC%9D%B4_%EB%8B%A4%EB%A5%B8_%EB%A8%B8%EC%8B%A0%EC%97%90_%EC%A0%91%EC%86%8D.html",
            "date": " • Apr 14, 2020"
        }
        
    
  
    
        ,"post42": {
            "title": "[Kubernetes] kubeadm upgrade",
            "content": "kubeadm upgrade . kubeadm, kubelet, kubectl을 1.22.4에서 1.23.3 버전으로 업그레이드 kubeadm: 클러스터를 부트스트랩하는 명령 | kubelet: Pod와 Container 시작과 같은 작업을 수행하는 컴포넌트 | kubectl: 클러스터와 통신하기 위한 커맨드 라인 유틸리티 | . | . 문제 . 작업 클러스터 : k8s | 마스터 노드의 모든 Kubernetes control plane및 node 구성 요소를 버전 1.23.3으로 업그레이드 | master 노드를 업그레이드하기 전에 drain 하고 업그레이드 후에 uncordon해야 함 | . Control-plane Upgrade . # hk8s-m 서버 접속 $ ssh hk8s-m $ sudo -i # 업그레이드 할 버전 확인 $ sudo yum list --showduplicates kubeadm --disableexcludes=kubernetes | tail -5 # kubeadm 업그레이드 $ sudo yum install -y kubeadm-1.23.3-0 --disableexcludes=kubernetes $ kubeadm version $ sudo kubeadm upgrade plan v1.23.3 $ sudo kubeadm upgrade apply v1.23.3 # 노드 드레인 : console이나 master에서 실행 $ kubectl drain hk8s-m --ignore-daemonsets # kubelet과 kubectl 업그레이드 $ sudo yum install -y kubelet-1.23.3-0 kubectl-1.23.3-0 --disableexcludes=kubernetes $ sudo systemctl daemon-reload $ sudo systemctl restart kubelet # 노드 uncordon $ kubectl uncordon hk8s-m # 업그레이드 버전 확인 $ kubectl get nodes . Worker node Upgrade . # Upgrade할 node에 접속 ssh &lt;node&gt; # kubeadm 업그레이드 $ sudo yum install -y kubeadm-1.23.3-0 --disableexcludes=kubernetes # &quot;kubeadm upgrade&quot; 호출 $ sudo kubeadm upgrade node # console로 빠져 나와서 노드 드레인 $ exit $ kubectl drain &lt;node&gt; --ignore-daemonsets # kubelet, kubeadm 업그레이드 $ ssh &lt;node&gt; $ sudo yum install -y kubelet-1.23.3-0 kubectl-1.23.3-0 --disableexcludes=kubernetes $ sudo systemctl daemon-reload $ sudo systemctl restart kubelet # console로 빠져 나와서 노드 uncordon $ exit $ kubectl uncordon &lt;node&gt; .",
            "url": "https://safenumz.github.io/blog/kuberntetes/2020/04/05/kubeadm-upgrade.html",
            "relUrl": "/kuberntetes/2020/04/05/kubeadm-upgrade.html",
            "date": " • Apr 5, 2020"
        }
        
    
  
    
        ,"post43": {
            "title": "[Kubernetes] ETCD Backup and Restore",
            "content": "ETCD . Coreos가 만든 분산 key:value 형태의 데이터 스토리지 | 쿠버네티스 클러스터의 정보를 저장(memory)해서 사용 | 모든 etcd 데이터는 etcd 데이터베이스 파일에 보관: /var/lib/etcd | etcd 관리 명령: etcdctl | etcdctl 설치 확인 | . # ETCD를 호스팅 할 시스템에 ssh 로그인 $ ssh k8s-master # 동작중인 etcd 버전과 etcdctl 툴이 설치여부 확인 $ etcd --version $ etcdctl version # 쿠버네티스 동작에 필요한 namespace $ kubectl get pod -n kube-system $ cd /etc/kubenetes/manifests $ cat etcd.yaml . Backup . master의 장애와 같은 예기치 못한 사고로 인해 ETCD 데이터베이스가 유실될 경우를 대비해서 Backup API를 제공 | /var/lib/etcd -&gt; /tmp/etcd_backup | . $ etcdctl snapshot save &lt;SNAPSHOT_FILENAME&gt; . # etcd를 호스팅 할 시스템에 ssh 로그인 $ ssh k8s-master # etcd 설치 여부 확인 $ etcdctl version # trusted-ca-file 확인 $ ps -ef | grep kube | grep trusted-ca-file # cert-file 확인 $ ps -ef | grep kube | grep cert-file # key-file 확인 $ ps -ef | grep kube | grep key-file $ sudo ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.crt snapshot save /tmp/etcd-backup $ ls -l /tmp/ . Restore . Sanpshot으로 저장한 database 파일을 동작중인 etcd에 적용하여 snapshot 생성시점으로 되돌리기 | 단계 snapshot 파일을 데이터베이스 파일로 복원 | 동작중인 etcd Pod의 구성정보를 복원된 데이터베이스 위치로 수정 적용 | . | . # /data/etcd-snapshot.db -&gt; /var/lib/etcd-new/ $ etcdctl snapshot restore &lt;SNAPSHOT_FILENAME&gt; . $ sudo ETCDCTL_API=3 etcdctl --data-dir=/var/lib/ctcd-new snapshot restore /tmp/etcd-backup $ sudo tree /var/lib/etcd-new/ # 수정해서 저장되면 자동으로 restart 됨 $ sudo vi /etc/kubernetes/manifests/etcd.yaml # hostPath 부분 신규 경로로 수정 $ sudo docker ps -a | grep etcd $ kubectl get pods $ sudo ls /var/lib/etcd-new $ sudo tree /var/lib/etcd-new .",
            "url": "https://safenumz.github.io/blog/kuberntetes/2020/04/04/kubernetes-etcd.html",
            "relUrl": "/kuberntetes/2020/04/04/kubernetes-etcd.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
        ,"post44": {
            "title": "[Kubernetes] 클러스터 목록 확인 및 클러스터 이동",
            "content": "클러스터 목록 확인 . $kubectl config get-context # 현재 클러스터 확인 $ kubectl config current-context # 노드 명 확인 $ kubectl get nodes | cut -d &#39; &#39; -f1 | grep -v NAME &gt; /var/CKA2022/hk8s-node-info.txt # ready 상태의 노드 이름만 추출 $ kubectl get nodes | grep -i -w ready | cut -d &#39; &#39; -f1 | grep -v NAME &gt; /var/CKA2022/hk8s-node-ready.txt $ kubectl config current-context # k8s 클러스터로 이동 $ kubectl config use-context k8s # k8s 현재 클러스터의 상태 정보 확인 $ kubectl cluster-info # gcp node 접속 $ kubectl get nodes $ gcloud compute ssh --zone asia-northeast3-a &lt;GCP_NODE_NAME&gt; .",
            "url": "https://safenumz.github.io/blog/kuberntetes/2020/04/03/kubernetes-config.html",
            "relUrl": "/kuberntetes/2020/04/03/kubernetes-config.html",
            "date": " • Apr 3, 2020"
        }
        
    
  
    
        ,"post45": {
            "title": "[Hadoop] Hadoop 명령어",
            "content": "HDFS 명령어 . File System(FS) shell은 Hadoop Distributed Fiel System(HDFS)를 여타 파일시스템처럼 관리하기 위한 목적으로 command를 사용할 수 있음 | 총 33개의 hdfs 명령어를 지원 | . 1. appendToFile . Local 파일들을 hdfs에 append 저장하기 위한 목적 | . Usage: hdfs dfs -appendToFile {localsrc} .. {dst} . 2. cat . 해당 파일을 stdout으로 찍어서 보여 줌 (linux 명령어 cat과 동일) | . Usage: hdfs dfs -cat URL [URI ...] . 3. chgrp . 해당 파일의 오너이거나 슈퍼오너라면, 해당 파일의 그룹 권한을 변경 가능 | . Usage: hdfs dfs -chgrp [-R] GROUP URL [URI ...] . 4. chmod . 해당 파일의 오너이거나 슈퍼오너라면, 특정 파일의 permission 수정, -R 옵션과 함께라면 예하 파일들에 대해서도 적용 | . Usage: hdfs dfs -chmod [-R] GROUP URI [URI ...] . 5. chown . 슈퍼오너일 경우 해당 파일의 owner를 변경 | . Usage: hdfs dfs -chown [-R] [OWNER][:[GROUP]] URI [URI ] . 6. copyFromLocal . local 파일을 hdfs에 업로드. put 명령어와 유사 | . Usage: hdfs dfs -copyFromLocal {localsrc} URI . 7. copyToLocal . hdfs에 있는 파일을 local directory에 다운로드, get 명령어와 유사 | . Usage: hdfs dfs -copyToLocal [-ignorectc] [-crc] URL {localdst} . 8. count . Directory 개수, file 개수 등을 카운트하여 숫자로 보여줌 | count: DIR_COUNT, FILE_COUNT, CONTENT_SIZE, FILE_NAME을 보여줌 | count -q: QUOTA, REMAINING_QUATA, SPACE_QUOTA, REMAINING_SPACE_QUOTA, DIR_COUNT, FILE_COUNT, CONTENT_SIZE, FILE_NAME을 보여줌 | -h: show sizes human readable format | . Usage: hdfs dfs -count [-q] [-h] . 9. cp . hdfs 내부에서 파일을 복붙함. 만약 복사하고자 하는 대상이 여러개라면 붙여넣는 곳은 반드시 Directory 여야 함 | -f: overwrite thedestination if it already exist | -p: 파일 속성(timestamps, ownership, permission, ACL, XAttr)을 유지하고 복붙 수행 | . Usage: hdfs dfs -cp [-f] [p | p[topax]] URI [URI ...] {dest} . 10. du . hdfs 내부의 특정 file이나 directory의 size를 보여줌 | -s: 각각의 파일(혹은 directory) size의 sum 값을 보여줌 | -h: show human readable format | . Usage: hdfs dfs -du [-s] [-h] URI [URI ...] . 11. dus . 특정 file의 length를 보여줌 | . Usage: hdfs dfs -dus {args} . 12. expunge . 휴지통 비우기(완전 삭제) | . Usage: hdfs dfs -expunge . 13. get . hdfs의 파일을 local directory로 다운로드 | . Usage: hdfs dfs -get [ignorectc] [-crc] {src} {localdst} . 14. getfacl . hdfs의 특정 파일 혹은 디렉토리의 ACLs(Access Control Lists) 정보를 보여줌 | . Usage: hdfs dfs -getfacl [-R] {path} . 15. getfattr . hdfs의 특정 파일 혹은 디렉토리의 속성 정보들을 나열, 보여줌 | . Usage: hdfs dfs -getfattr [-R] -n name | -d [-e en] {path} . 16. getmerge . hdfs 내부의 source file에 append하여 다운로드 | . Usage: hdfs dfs -getmerge {src} {localdst} [addnl] . 17. ls . 특정 디렉토리의 파일 혹은 디렉토리를 보여줌 | -R: 특정 디렉토리 이하에 대해서 정보를 보여줌 | . Usage: dfs dfs -ls [-R] {args} . 18. lsr . ls -R과 동일하게 작동 | . Usage: hdfs dfs -lsr {args} . 19. mkdir . 특정 path에 directory 생성 | . Usage: hdfs dfs -mkdir [-p] {path} . 20. moveformLocal . Local의 파일을 hdfs에 저장. put과 비슷하지만 저장 이후 local file은 삭제 | . Usage: hdfs dfs -moveFromLocal {localsrc} {dst} . 21. moveToLocal . hdfs의 파일을 local에 저장, get과 비슷하지만 저장 이후 hdfs file은 삭제 | . Usage: hdfs dfs -moveToLocal [-crc] {src} {dst} . 22. mv . hdfs 내부에서 파일을 옮김 | . Usage: hdfs dfs -mv URI [URI ...] {dest} . 23. put . Local의 파일들을 hdfs에 저장 | . Usage: hdfs dfs -put {localsrc} .. {dst} . 24. rm . hdfs의 특정 폴더 혹은 파일을 삭제 | -R: 특정 디렉토리 이하의 폴더 모두 제거 | -r: -R과 동일 | skipTrash: 즉시 완전 삭제 | . Usage: hdfs dfs -rm [-f] [-r|-R] [-skipTrash] URI [URI ...] . 25. rmr . rm -r과 동일한 명령어 | . Usage: hdfs dfs -rmr [-skipTrash] URI [URI ...] . 26. setfacl . hdfs의 특정 폴더 혹은 파일에 대해 Access Control Lists(ACLs)를 set | . Usage: hdfs dfs -setfattr -n name [-v value] | -x name {path} . 27. setfattr . hdfs의 특정 폴더 혹은 파일에 대해 속성을 set | . Usage: hdfs dfs -setfattr -n name [-v value] | -x name {path} . 28. setrep . hdfs의 특정 파일에 대해 replication factor을 수정 | . Usage: hdfs dfs -setrep [-R] [-w] {numReplicas} {path} . 29. stat . hdfs의 특정 디렉토리의 stat information 확인 | . Usage: hdfs dfs -stat URI [URI ...] . 30. tail . 특정 file에 대해 마지막 kiobyte을 stdout으로 보여줌 | . Usage: hdfs dfs -tail [-f] URI . 31. test . 옵션과 함께 파일 혹은 디렉토리의 이상 유무를 체크 | -e: fiel exist, return 0 | -z: file is zero length, return 0 | -d: path is directory, return 0 | . Usage: hdfs dfs -test -[ezd] URI . 32. text . hdfs의 특정 파일을 text format으로 확인 | . Usage: hdfs dfs -text {src} . 33. touchz . Zero length인 file을 생성 | . Usage: hdfs dfs -touchz URI [URI ...] .",
            "url": "https://safenumz.github.io/blog/hadoop/2020/02/04/Hadoop_%EB%AA%85%EB%A0%B9%EC%96%B4.html",
            "relUrl": "/hadoop/2020/02/04/Hadoop_%EB%AA%85%EB%A0%B9%EC%96%B4.html",
            "date": " • Feb 4, 2020"
        }
        
    
  
    
        ,"post46": {
            "title": "[AWS] EMR Cluster 생성 후 Zeppelin 접속",
            "content": "Environment . MacOS 10.14.6 | . 서비스 &gt; 분석 &gt; EMR . 하나의 EC2 서버가 아니라 하둡, 스파크 클러스터 내에서 데이터 분석 가능 | . Amazon EC2 키 페어 생성 . Amazon EC2 콘솔로 이동 (서비스 &gt; EC2 &gt; 네트워크 및 보안 &gt; 키 페어) | [탐색] 창에서 [키 페어]를 클릭 | [키 페어] 페이지에서 [키 페어 생성]을 클릭 | [키 페어 생성] 대화 상자에서 키 페어의 이름을 입력(예: mykeypair) | [생성]을 클릭 | 생성된 PEM 파일을 안전한 위치에 저장 | . 다운받은 PEM 파일에 권한 부여 . $ chmod og-rwx data-engineering.pem . 클러스터 생성 . 일반 구성 클러스터 이름: data-engineering | 시작 모드(Launch mode): 클러스터 | . | 소프트웨어 구성(Software configuration) 릴리스(Release): emr 5.28.1 | 애플리케이션(Application): Spark: Spark 2.4.4 on Hadoop 2.8.5 YARN with Ganglia 3.7.2 and Zeppelin 0.8.2 | . | 하드웨어 구성(Hardware configuration) 인스턴트 유형(Instance type): c4.large | 인스턴트 개수(Number of instance): 3 | . | 보안 및 액세스(Security and access) EC2 key pair | . | . EMR &gt; 클러스터 목록 &gt; 요약 &gt; 보안 및 액세스 &gt; 마스터 보안 그룹 . 마스터 노드 및 워커노드의 인바운드 규칙을 각각 편집 (규칙 추가) . 유형: SSH | 프로토콜: TCP | 포트범위: 22 | 소스: 사용자지정 0.0.0.0/0 | . EMR &gt; 클러스터 목록 &gt; 요약 &gt; 웹 연결 활성화 . $ ssh -i ~/aws/data-engineering.pem -ND 8157 hadoop@ec2-3-133-131-137.us-east-2.compute.amazonaws.com . 프록시 관리 도구 설정 . 다음 위치에서 표준 버전의 FoxyProxy를 다운로드하여 설치 http://foxyproxy.mozdev.org/downloads.html | FoxyProxy를 설치한 후 Chrome을 다시 시작 | 텍스트 편집기를 사용하여 다음 내용이 포함된 foxyproxy-settings.xml이라는 이름의 파일을 생성 | . foxyproxy-settings.xml . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;foxyproxy&gt; &lt;proxies&gt; &lt;proxy name=&quot;emr-socks-proxy&quot; id=&quot;2322596116&quot; notes=&quot;&quot; fromSubscription=&quot;false&quot; enabled=&quot;true&quot; mode=&quot;manual&quot; selectedTabIndex=&quot;2&quot; lastresort=&quot;false&quot; animatedIcons=&quot;true&quot; includeInCycle=&quot;true&quot; color=&quot;#0055E5&quot; proxyDNS=&quot;true&quot; noInternalIPs=&quot;false&quot; autoconfMode=&quot;pac&quot; clearCacheBeforeUse=&quot;false&quot; disableCache=&quot;false&quot; clearCookiesBeforeUse=&quot;false&quot; rejectCookies=&quot;false&quot;&gt; &lt;matches&gt; &lt;match enabled=&quot;true&quot; name=&quot;*ec2*.amazonaws.com*&quot; pattern=&quot;*ec2*.amazonaws.com*&quot; isRegEx=&quot;false&quot; isBlackList=&quot;false&quot; isMultiLine=&quot;false&quot; caseSensitive=&quot;false&quot; fromSubscription=&quot;false&quot; /&gt; &lt;match enabled=&quot;true&quot; name=&quot;*ec2*.compute*&quot; pattern=&quot;*ec2*.compute*&quot; isRegEx=&quot;false&quot; isBlackList=&quot;false&quot; isMultiLine=&quot;false&quot; caseSensitive=&quot;false&quot; fromSubscription=&quot;false&quot; /&gt; &lt;match enabled=&quot;true&quot; name=&quot;10.*&quot; pattern=&quot;http://10.*&quot; isRegEx=&quot;false&quot; isBlackList=&quot;false&quot; isMultiLine=&quot;false&quot; caseSensitive=&quot;false&quot; fromSubscription=&quot;false&quot; /&gt; &lt;match enabled=&quot;true&quot; name=&quot;*10*.amazonaws.com*&quot; pattern=&quot;*10*.amazonaws.com*&quot; isRegEx=&quot;false&quot; isBlackList=&quot;false&quot; isMultiLine=&quot;false&quot; caseSensitive=&quot;false&quot; fromSubscription=&quot;false&quot; /&gt; &lt;match enabled=&quot;true&quot; name=&quot;*10*.compute*&quot; pattern=&quot;*10*.compute*&quot; isRegEx=&quot;false&quot; isBlackList=&quot;false&quot; isMultiLine=&quot;false&quot; caseSensitive=&quot;false&quot; fromSubscription=&quot;false&quot; /&gt; &lt;match enabled=&quot;true&quot; name=&quot;*.compute.internal*&quot; pattern=&quot;*.compute.internal*&quot; isRegEx=&quot;false&quot; isBlackList=&quot;false&quot; isMultiLine=&quot;false&quot; caseSensitive=&quot;false&quot; fromSubscription=&quot;false&quot; /&gt; &lt;match enabled=&quot;true&quot; name=&quot;*.ec2.internal*&quot; pattern=&quot;*.ec2.internal*&quot; isRegEx=&quot;false&quot; isBlackList=&quot;false&quot; isMultiLine=&quot;false&quot; caseSensitive=&quot;false&quot; fromSubscription=&quot;false&quot; /&gt; &lt;/matches&gt; &lt;manualconf host=&quot;localhost&quot; port=&quot;8157&quot; socksversion=&quot;5&quot; isSocks=&quot;true&quot; username=&quot;&quot; password=&quot;&quot; domain=&quot;&quot; /&gt; &lt;/proxy&gt; &lt;/proxies&gt; &lt;/foxyproxy&gt; . FOXY PROXY &gt; Import/Export &gt; Choose File . foxyproxy-settings.xml를 등록한 후 replace 함 | 크롬 우측 상단 Foxy Proxy 아이콘 클릭 후 use proxy emr socks proxy for all URLs 체크 | . EMR &gt; 클러스터 목록 &gt; 요약 &gt; 마스터 퍼블릭 DNS . 마스터 퍼블릭 DNS 주소 복사 후 크롬 주소창에 넣어 접속 | . EMR &gt; 클러스터 목록 &gt; 요약 &gt; Zeppelin . Zeppelin 활성화 됨 | Zeppelin 접속 | .",
            "url": "https://safenumz.github.io/blog/devops/2020/01/30/AWS-EMR_Zeppelin.html",
            "relUrl": "/devops/2020/01/30/AWS-EMR_Zeppelin.html",
            "date": " • Jan 30, 2020"
        }
        
    
  
    
        ,"post47": {
            "title": "[AWS] Presto 기반의 Athena",
            "content": "서비스 &gt; 분석 &gt; Athena . Presto 엔진 사용 | EXTERNAL TABLE을 만들고 이를 S3 저장소의 데이터와 연결하여 쿼리 결과를 얻음 | . EXTERNAL TABLE 생성 . CREATE EXTERNAL TABLE IF NOT EXISTS top_tracks ( id string, artist_id string, popularity int, external_url string ) PARTITIONED BY (dt string) STORED AS PARQUET LOCATION &quot;s3://spotify-folder/top-tracks/&quot; tblproperties(&quot;parquest.compress&quot;=&quot;SNAPPY&quot;) MSCK REPAIR TABLE top_tracks . CREATE EXTERNAL TABLE IF NOT EXISTS audio_features ( id string, danceability DOUBLE, energy DOUBLE, key int, loudness DOUBLE, mode int, speechiness DOUBLE, acousticness DOUBLE, instrumentalness DOUBLE ) PARTITIONED BY (dt string) STORED AS PARQUET LOCATION &quot;s3://spotify-folder/audio-features/&quot; tblproperties(&quot;parquest.compress&quot;=&quot;SNAPPY&quot;) MSCK REPAIR TABLE audio_features . SELECT Data . -- 최근 7일 동안의 파티션 데이터 확인 SELECT * FROM top_tracks WHERE CAST(dt AS date) &gt;= CURRENT_DATE - INTERVAL &#39;7&#39; DAY LIMIT 10 SELECT * FROM audio_features LIMIT 10 SELECT AVG(danceability), AVG(loudness) FROM audio_features WHERE CAST(dt AS date) = CURRENT_DATE .",
            "url": "https://safenumz.github.io/blog/devops/2020/01/30/AWS-Athena_Presto.html",
            "relUrl": "/devops/2020/01/30/AWS-Athena_Presto.html",
            "date": " • Jan 30, 2020"
        }
        
    
  
    
        ,"post48": {
            "title": "[AWS] S3, Glue",
            "content": "S3 . 버킷 만들기를 통해 저장 폴더를 생성할 수 있음 | . S3에 데이터 저장 . import sys import os import logging import boto3 import requests import base64 import json import pymysql from datetime import datetime import pandas as pd import jsonpath # pip3 install jsonpath --user client_id = &lt;api id&gt; client_secret = &lt;api password&gt; host = &lt;endpoint&gt; port = 3306 username = &lt;id&gt; database = &lt;database&gt; password = &lt;password&gt; def main(): try: conn = pymysql.connect(host, user=username, passwd=password, db=database, port=port, use_unicode=True, charset=&#39;utf8&#39;) cursor = conn.cursor() except: logging.error(&quot;could not connect to rds&quot;) sys.exit(1) headers = get_headers(client_id, client_secret) # RDS - 아티스트 ID를 가져오고 cursor.execute(&quot;SELECT id FROM artists LIMIT 10&quot;) top_track_keys = { &quot;id&quot;: &quot;id&quot;, &quot;name&quot;: &quot;name&quot;, &quot;popularity&quot;: &quot;popularity&quot;, &quot;external_url&quot;: &quot;external_urls.spotify&quot; } # Top Tracks Spotify 가져오고 top_tracks = [] for (id, ) in cursor.fetchall(): URL = &quot;https://api.spotify.com/v1/artists/{}/top-tracks&quot;.format(id) params = { &#39;country&#39;: &#39;US&#39; } r = requests.get(URL, params=params, headers=headers) raw = json.loads(r.text) for i in raw[&#39;tracks&#39;]: top_track = {} for k, v in top_track_keys.items(): top_track.update({k: jsonpath.jsonpath(i, v)}) top_track.update({&#39;artist_id&#39;: id}) top_tracks.append(top_track) # track_ids track_ids = [i[&#39;id&#39;][0] for i in top_tracks] top_tracks = pd.DataFrame(top_tracks) top_tracks.to_parquet(&#39;top-tracks.parquet&#39;, engine=&#39;pyarrow&#39;, compression=&#39;snappy&#39;) # utc 시간 (korea: utc + 9) dt = datetime.utcnow().strftime(&quot;%Y-%m-%d&quot;) s3 = boto3.resource(&#39;s3&#39;) object = s3.Object(&#39;spotify-folder&#39;, &#39;top-tracks/dt={}/top-tracks.parquet&#39;.format(dt)) data = open(&#39;top-tracks.parquet&#39;, &#39;rb&#39;) object.put(Body=data) # S3 import tracks_batch = [track_ids[i: i+100] for i in range(0, len(track_ids), 100)] audio_features = [] for i in tracks_batch: ids = &#39;,&#39;.join(i) URL = &quot;https://api.spotify.com/v1/audio-features/?ids={}&quot;.format(ids) r = requests.get(URL, headers=headers) raw = json.loads(r.text) audio_features.extend(raw[&#39;audio_features&#39;]) audio_features = pd.DataFrame(audio_features) audio_features.to_parquet(&#39;audio-features.parquet&#39;, engine=&#39;pyarrow&#39;, compression=&#39;snappy&#39;) s3 = boto3.resource(&#39;s3&#39;) object = s3.Object(&#39;spotify-folder&#39;, &#39;audio-features/dt={}/top-tracks.parquet&#39;.format(dt)) data = open(&#39;audio-features.parquet&#39;, &#39;rb&#39;) object.put(Body=data) def get_headers(client_id, client_secret): endpoint = &quot;https://accounts.spotify.com/api/token&quot; encoded = base64.b64encode(&quot;{}:{}&quot;.format(client_id, client_secret).encode(&#39;utf-8&#39;)).decode(&#39;ascii&#39;) headers = { &quot;Authorization&quot;: &quot;Basic {}&quot;.format(encoded) } payload = { &quot;grant_type&quot;: &quot;client_credentials&quot; } r = requests.post(endpoint, data=payload, headers=headers) access_token = json.loads(r.text)[&#39;access_token&#39;] headers = { &quot;Authorization&quot;: &quot;Bearer {}&quot;.format(access_token) } return headers if __name__==&#39;__main__&#39;: main() . Glue . 스키마 저장 | Crawler | .",
            "url": "https://safenumz.github.io/blog/devops/2020/01/29/AWS-S3_Glue.html",
            "relUrl": "/devops/2020/01/29/AWS-S3_Glue.html",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post49": {
            "title": "[AWS] MySQL 설정",
            "content": "서비스 &gt; RDS &gt; Create databases . Engine option . MySQL 체크 | version: 5.7.22 | Templates: production 체크 | . Setting . DB instance identifier: engineering | Master username: admin | Master password: . | . Storage . Storage type Genral Purpose (SSD): 저장을 위해 주로 쓰임 | Provisoned IOPS: Input, Output을 얼마나 빠르게 할 수 있는가를 설정 | . | . VPC . 연결 &gt; Public accessibility: Yes 체크 . | Inbound . Type: MySQL/aurora | Protocol: TCP | Port Range: 3306 | Source: Anywhere 0.0.0.0/0, ::/0 | . | . 엔드포인트 및 포트 . 엔드포인트: | 포트: 3306 | . MySQL 접속 . $ mysql -h &lt;엔드포인트&gt; -P 3306 -u &lt;아이디&gt; -p &lt;패스워드&gt; .",
            "url": "https://safenumz.github.io/blog/devops/2020/01/29/AWS-MySQL_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/devops/2020/01/29/AWS-MySQL_%EC%84%A4%EC%A0%95.html",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post50": {
            "title": "[AWS] DynamoDB 설정",
            "content": "Not Only SQL . 관계형 데이터 베이스와의 극명한 차이 | . 다이나믹 스키마 . Structure를 정의하지 않고도 Documents, Key Values 등을 생성 | 각각의 다큐먼트는 유니크한 Structure로 구성 가능 | 데이터베이스들마다 다른 Syntax | 필드들을 지속적으로 추가 가능 | . Scalability . SQL Databases are vertically scalable - CPU, RAM or SSD | NoSQL Databases are horizontally scalable - Sharding / Partitioning | . 파티션(Partition)에 대한 이해 . 데이터 매니지먼트, 퍼포먼스 등 다양한 이유로 데이터를 나누는 일 | Vertical vs Horisonal Partition | 버티컬 파티션은 테이블을 더 작은 테이블로 나누는 작업으로써 노멀라이제이션 후에도 경우에 따라 파티션 칼럼을 나누는 파티션 작업을 함 | Schema / Structure 자체를 카피하여 데이터 자체를 Sharded Key로 분리 | . 서비스 &gt; 데이터베이스 &gt; DynamoDB . Create Table . Table name*: top_tracks | Primary key: Partition Key: artist_id String | Add sort key: id String | . | 읽기/쓰기 용량 모드 Provisioned(free-tier eligible): auto scaling이 가능한 부분(scaling하는 데 시간 소요), 서버를 정해서 쓰기 때문에 free-tier로 쓸 수 있는 부분이 있음 | On-demand: 얼마나 쓸지 모를 때, 사용한 만큼만 비용을 지불하고 싶을 때 | . | Auto Scaling 읽기 용량: 70% 사용되면 자동으로 늘어나도록 설정 | . | . Create Index . Primary key: genre | Index name: genre_index | Projected attributes: All | . Python과 DynamoDB 연동 . boto3 패키지 설치 . # MacOS 경우 $ pip3 install boto3 --user . INSERT Data . import sys import os import boto3 import requests import base64 import json import logging import pymysql client_id = &lt;api id&gt; client_secret = &lt;api password&gt; host = &lt;aws endpoint&gt; port = 3306 username = &lt;id&gt; database = &lt;database&gt; password = &lt;password&gt; def main(): try: dynamodb = boto3.resource(&#39;dynamodb&#39;, region_name=&#39;ap-northeast-2&#39;, endpoint_url=&#39;http://dynamodb.ap-northeast-2.amazonaws.com&#39;) except: logging.error(&#39;could not connect to dynamodb&#39;) sys.exit(1) try: conn = pymysql.connect(host, user=username, passwd=password, db=database, port=port, use_unicode=True, charset=&#39;utf8&#39;) cursor = conn.cursor() except: logging.error(&quot;could not connect to rds&quot;) sys.exit(1) headers = get_headers(client_id, client_secret) table = dynamodb.Table(&#39;top_tracks&#39;) cursor.execute(&#39;SELECT id FROM artists&#39;) countries = [&#39;US&#39;, &#39;CA&#39;] for country in countries: for (artist_id, ) in cursor.fetchall(): URL = &quot;https://api.spotify.com/v1/artists/{}/top-tracks&quot;.format(artist_id) params = { &#39;country&#39;: &#39;US&#39; } r = requests.get(URL, params=params, headers=headers) raw = json.loads(r.text) for track in raw[&#39;tracks&#39;]: data = { &#39;artist_id&#39;: artist_id, &#39;country&#39;: country } data.update(track) table.put_item( Item=data ) def get_headers(client_id, client_secret): endpoint = &quot;https://accounts.spotify.com/api/token&quot; encoded = base64.b64encode(&quot;{}:{}&quot;.format(client_id, client_secret).encode(&#39;utf-8&#39;)).decode(&#39;ascii&#39;) headers = { &quot;Authorization&quot;: &quot;Basic {}&quot;.format(encoded) } payload = { &quot;grant_type&quot;: &quot;client_credentials&quot; } r = requests.post(endpoint, data=payload, headers=headers) access_token = json.loads(r.text)[&#39;access_token&#39;] headers = { &quot;Authorization&quot;: &quot;Bearer {}&quot;.format(access_token) } return headers if __name__==&#39;__main__&#39;: main() . SELECT Data . import sys import os import boto3 from boto3.dynamodb.conditions import Key, Attr def main(): try: dynamodb = boto3.resource(&#39;dynamodb&#39;, region_name=&#39;ap-northeast-2&#39;, endpoint_url=&#39;http://dynamodb.ap-northeast-2.amazonaws.com&#39;) except: logging.error(&#39;could not connect to dynamodb&#39;) sys.exit(1) table = dynamodb.Table(&#39;top_tracks&#39;) # table.scan (테이블 전체 스캔 속도가 느림, 왠만하면 query로 사용) response = table.query( #KeyConditionExpression=Key(&#39;artist_id&#39;).eq(&#39;0cc6vw3VN8YlIcvr1v7tBL&#39;), #KeyFilter FilterExpression=Attr(&#39;popularity&#39;).gt(90) ) print(response[&#39;Items&#39;]) print(len(response[&#39;Items&#39;])) if __name__==&#39;__main__&#39;: main() .",
            "url": "https://safenumz.github.io/blog/devops/2020/01/29/AWS-DynaoDB_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/devops/2020/01/29/AWS-DynaoDB_%EC%84%A4%EC%A0%95.html",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post51": {
            "title": "[Spark] PySpark Config 추가",
            "content": "Config 추가 . # 기존 config 저장 base_conf = spark.sparkContext._conf.getAll() # 추가할 config append base_conf.append((&quot;spark.speculation&quot;,&quot;false&quot;)) # spark conf 세팅 conf = spark.sparkContext._conf.setAll(base_conf) # 기존 spark context stop spark.sparkContext.stop() spark = SparkSession.builder.config(conf=conf).getOrCreate() . jars 추가 . spark.sparkContext.addPyFile(&quot;/path/to/jar/xxxx.jar&quot;) . extraClassPath 추가 . jars을 extraClassPath에 넣으면 됨 | . $ vi ${SPARK_HOME}/conf/spark-defaults.conf . # spark-defaults.conf spark.driver.extraClassPath /Users/a/spark/drivers/* . import os from typing import Tuple import findspark findspark.init() import pyspark from pyspark.sql import SparkSession from pyspark.context import SparkContext def setup_spark(app_name: str) -&gt; Tuple[SparkSession, SparkContext]: # Submit args is actually set via the file `jupyter-env.sh`, but I&#39;ll leave it here for completion os.environ[&#39;PYSPARK_SUBMIT_ARGS&#39;] = &quot;--packages org.apache.hadoop:hadoop-aws:3.2.2,com.microsoft.ml.spark:mmlspark_2.11:1.0.0-rc3,org.apache.spark:spark-avro_2.12:2.4.5,com.amazonaws:aws-java-sdk:1.11.956 --repositories https://mmlspark.azureedge.net/maven pyspark-shell&quot; spark = ( SparkSession.builder.appName(app_name) .config(&quot;spark.sql.execution.arrow.enabled&quot;, &quot;true&quot;) .config(&quot;spark.sql.repl.eagerEval.enabled&quot;, &quot;true&quot;) .getOrCreate() ) sc = spark.sparkContext sc.setSystemProperty(&quot;com.amazonaws.services.s3.enableV4&quot;, &quot;true&quot;) sc._jsc.hadoopConfiguration().set( &quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot; ) return (spark, sc) .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/27/pyspark-conf.html",
            "relUrl": "/spark/2020/01/27/pyspark-conf.html",
            "date": " • Jan 27, 2020"
        }
        
    
  
    
        ,"post52": {
            "title": "[Python] MinIO 연결",
            "content": "Python에서 minio 연결 . import boto3 client = boto3.client(&#39;s3&#39;, aws_access_key_id=&#39;&lt;MINIO_ACCESS_KEY&gt;&#39;, aws_secret_access_key=&#39;&lt;MINIO_SECRET_KEY&gt;&#39;, endpoint_url=&#39;http://&lt;MINIO_URL&gt;:&lt;MINIO_PORT&gt;&#39;, verify=False ) # 버킷 리스트 불러오기 client.list_buckets() import pandas as pd # 데이터 읽기 response = client.get_object(Bucket=&#39;bike&#39;, Key=&quot;raw_data/csv/2015.csv&quot;) df = pd.read_csv(response.get(&quot;Body&quot;), encoding=&#39;cp949&#39;) df # 데이터 쓰기 client.upload_file(Filename=&quot;./raw_bike_2015.parquet&quot;, Bucket=&quot;bike&quot;, Key=&quot;raw_data/parquet/raw_bike_2015.parquet&quot;) client.put_object( Body=open(&quot;2015.csv&quot;).read(), Bucket=&quot;bike&quot;, Key=&quot;raw_data/test/2015.csv&quot; ) .",
            "url": "https://safenumz.github.io/blog/python/2020/01/27/Python-minio-connection.html",
            "relUrl": "/python/2020/01/27/Python-minio-connection.html",
            "date": " • Jan 27, 2020"
        }
        
    
  
    
        ,"post53": {
            "title": "[Spark] 파티션 별 정렬 sortWithinPartitions",
            "content": "트랜스포메이션을 처리하기 전에 성능을 최적화하기 위해 파티션 별 정렬을 수행함 | . # 예시 spark.read.format(&quot;json&quot;).load(&quot;/data/*-mm.json).sortWithinPartitions(&quot;count&quot;) .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/26/Spark-sortWithinPartitions.html",
            "relUrl": "/spark/2020/01/26/Spark-sortWithinPartitions.html",
            "date": " • Jan 26, 2020"
        }
        
    
  
    
        ,"post54": {
            "title": "[Spark] PySpark에서 Jupyter Notebook 시작시 기본 설정",
            "content": "PySpark에서 jupyter notebook 시작시 전체 기본 설정 . %load_ext sparksql_magic spark.conf.set(&quot;spark.sql.repl.eagerEval.enabled&quot;, True) import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . jupyter notebook에서 Spark DataFrame 깔끔하게 보기 . 아래 옵션을 주면 Spark DataFrame df에 대하여, df.show() 명령어 없이 df 만으로도 Spark DataFrame을 깔끔하게 볼 수 있음 | Jupyter Notebook에서만 가능한 옵션 | . spark.conf.set(&quot;spark.sql.repl.eagerEval.enabled&quot;, True) . jupyter notebook에서 sparksql 사용 . # 설치 (pyspark)$ pip install sparksql-magic . %load_ext sparksql_magic . %%sparksql SELECT * FROM dfTable . MinIO Config . import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://&lt;MINIO_SERVICE_URL&gt;:&lt;MINIO_SERVICE_PORT&gt;&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/26/Spark-jupyter-basic-option.html",
            "relUrl": "/spark/2020/01/26/Spark-jupyter-basic-option.html",
            "date": " • Jan 26, 2020"
        }
        
    
  
    
        ,"post55": {
            "title": "[Spark] coalesce와 repartition 차이",
            "content": "coalesce와 repartition 차이 . 일반적으로 coalesce는 데이터 수가 줄어들어 파티션의 수를 줄일 때 사용하고, 파티션 수를 늘려야 할 때는 repartition을 사용함 | repartition이 파티션 수를 증가시키거나 줄이는 것이 모두 가능한 반면에, coalesce는 줄이는 것만 가능 | repartition이 shuffle을 하는 반면에 coalesce는 shuffle = true 옵션을 주지 않는 이상 셔플을 하지 않음 | coalesce에 shuffle = true 줄 경우에 사실상 repartition과 같으며, 파티션을 늘리는 것이 가능해짐 | . repartition 예시 . df.rdd.getNumPartitions() # 1 df.repartition(5) # 특정 칼럼을 기준으로 자주 필터링한다면 자주 필터링 되는 컬럼을 기준으로 파티션을 재분배 df.repartition(col(&quot;DEST_COUNTRY_NAME&quot;)) df.repartition(5, col(&quot;DEST_COUNTRY_NAME&quot;)) . coalesce 예시 . 전체 데이터를 셔플하지 않고 파티션을 병합하려는 경우에 주로 사용 | . # DEST_COUNTRY_NAME를 기준으로 셔플을 수행해 5개의 파티션으로 나누고, 전체 데이터를 셔플없이 병합 df.repartition(5, col(&quot;DEST_COUNTRY_NAME&quot;)).coalesce(2) .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/26/Spark-coalese-repartition.html",
            "relUrl": "/spark/2020/01/26/Spark-coalese-repartition.html",
            "date": " • Jan 26, 2020"
        }
        
    
  
    
        ,"post56": {
            "title": "[Python] username, home directory, hostname, ip address",
            "content": "Get username . import getpass username = getpass.getuser() print(username) . Get Home directory . import os homedir = os.path.expanduser(&quot;~&quot;) print(homedir) homedir2 = os.environ[&quot;HOME&quot;] print(homedir2) . Get hostname and IP . # Importing socket library import socket # Function to display hostname and IP address def get_hostname_ip(): try: host_name = socket.gethostname() host_ip = socket.gethostbyname(host_name) print(&quot;Hostname : &quot;,host_name) print(&quot;IP : &quot;,host_ip) except: print(&quot;Unable to get Hostname and IP&quot;) get_hostname_ip() .",
            "url": "https://safenumz.github.io/blog/python/2020/01/26/Python-user_hostname_path.html",
            "relUrl": "/python/2020/01/26/Python-user_hostname_path.html",
            "date": " • Jan 26, 2020"
        }
        
    
  
    
        ,"post57": {
            "title": "[Python] 로그 남기기 (logging)",
            "content": "Stream에 로그 남기기 . 스트림(콘솔)에 로그를 찍기 위해 logging을 사용함 | warning level만 출력 됨 logging의 default log level이 warning으로 되어 있기 때문 | . | . import logging logging.info(&#39;my INFO log&#39;) logging.warning(&#39;my WARNING log&#39;) . logging의 basicConfig level을 DEBUG로 변경하면 DEBUG 로깅도 출력됨 | . import logging logging.basicConfig(level=logging.DEBUG) logging.debug(&#39;my DEBUG log&#39;) logging.info(&#39;my INFO log&#39;) logging.warning(&#39;my WARNING log&#39;) logging.error(&#39;my ERROR log&#39;) logging.critical(&#39;my CRITICAL log&#39;) . File에 로그 남기기 . basicConfig의 filename을 설정하면 해당 위치에 로그 파일이 생성됨 | . import logging def get_logging(): logging.basicConfig(filename=&#39;./server.log&#39;, level=logging.DEBUG) logging.debug(&#39;my DEBUG log&#39;) logging.info(&#39;my INFO log&#39;) logging.warning(&#39;my WARNING log&#39;) logging.error(&#39;my ERROR log&#39;) logging.critical(&#39;my CRITICAL log&#39;) if __name__ == &quot;__main__&quot;: get_logging() . DEBUG:root:my DEBUG log INFO:root:my INFO log WARNING:root:my WARNING log ERROR:root:my ERROR log CRITICAL:root:my CRITICAL log . Stream과 File에 동시에 로그 남기기 . logging.getLogger(name)으로 logger instance를 생성 | stream과 file에 로그를 남기는 handler를 생성 | logger instance에 stream과 file handler를 설정 | logger instance로 log를 찍음 | . import logging def get_logging(): # logger instance 생성 logger = logging.getLogger(__name__) # handler 생성 (stream, file) streamHandler = logging.StreamHandler() fileHandler = logging.FileHandler(&#39;./server.log&#39;) # logger instance에 handler 설정 logger.addHandler(streamHandler) logger.addHandler(fileHandler) # logger instance로 log 찍기 logger.setLevel(level=logging.DEBUG) logger.debug(&#39;my DEBUG log&#39;) logger.info(&#39;my INFO log&#39;) logger.warning(&#39;my WARNING log&#39;) logger.error(&#39;my ERROR log&#39;) logger.critical(&#39;my CRITICAL log&#39;) if __name__ == &quot;__main__&quot;: get_logging() . 로그 형식(Formatting) . #-*- coding: utf-8 -*- import logging import logging.handlers def get_logging(): # logger instance 생성 logger = logging.getLogger(__name__) # formatter 생성 formatter = logging.Formatter(&#39;[%(asctime)s][%(levelname)s|%(filename)s:%(lineno)s] &gt;&gt; %(message)s&#39;) # handler 생성 (stream, file) streamHandler = logging.StreamHandler() fileHandler = logging.FileHandler(&#39;./server.log&#39;) # logger instance에 fomatter 설정 streamHandler.setFormatter(formatter) fileHandler.setFormatter(formatter) # logger instance에 handler 설정 logger.addHandler(streamHandler) logger.addHandler(fileHandler) # logger instance로 log 찍기 logger.setLevel(level=logging.DEBUG) logger.debug(&#39;my DEBUG log&#39;) logger.info(&#39;my INFO log&#39;) logger.warning(&#39;my WARNING log&#39;) logger.error(&#39;my ERROR log&#39;) logger.critical(&#39;my CRITICAL log&#39;) if __name__ == &quot;__main__&quot;: get_logging() . [2020-01-26 01:05:14,928][DEBUG|log3.py:29] &gt;&gt; my DEBUG log [2020-01-26 01:05:14,928][INFO|log3.py:30] &gt;&gt; my INFO log [2020-01-26 01:05:14,928][WARNING|log3.py:31] &gt;&gt; my WARNING log [2020-01-26 01:05:14,928][ERROR|log3.py:32] &gt;&gt; my ERROR log [2020-01-26 01:05:14,928][CRITICAL|log3.py:33] &gt;&gt; my CRITICAL log . 로그 파일이 커질 때 파일 분할 . 파일을 분할하기 위해서는 fileHandler 설정을 변경하면 됨 | maxBytes: 파일 하나의 최대 바이트 수 | backupCount: 백업 파일 개수 | . import logging import logging.handlers # 100MB 파일을 10개까지 남기겠다는 뜻 fileMaxByte = 1024 * 1024 * 100 filename=&quot;./server.log&quot; fileHandler = logging.handlers.RotatingFileHandler(filename, maxBytes=fileMaxByte, backupCount=10) . 매일 자정에 새로운 로그 파일 만들기 . 저장할 파일명은 car.log | when=’midnight’의 경우 매일밤 자정에 새로운 파일이 만들어진다. | 이때 만들어지는 형식은 suffix에 따라 설정된다. | 예를 들면 여기서는 carLogHandler.suffix = “%Y%m%d” 이므로 car.log.20200101 | . from logging import handlers import logging #log settings carLogFormatter = logging.Formatter(&#39;%(asctime)s,%(message)s&#39;) #handler settings carLogHandler = handlers.TimedRotatingFileHandler(filename=&#39;car.log&#39;, when=&#39;midnight&#39;, interval=1, encoding=&#39;utf-8&#39;) carLogHandler.setFormatter(carLogFormatter) carLogHandler.suffix = &quot;%Y%m%d&quot; #logger set carLogger = logging.getLogger() carLogger.setLevel(logging.INFO) carLogger.addHandler(carLogHandler) #use logger carLogger.info(&quot;car is coming&quot;) .",
            "url": "https://safenumz.github.io/blog/python/2020/01/26/Python-logging.html",
            "relUrl": "/python/2020/01/26/Python-logging.html",
            "date": " • Jan 26, 2020"
        }
        
    
  
    
        ,"post58": {
            "title": "[PySpark] Spark SQL",
            "content": "Spark SQL . zeppelin에서는 %sql 밑에 쿼리를 쓰면 sql 문법으로 데이터를 불러올 수 있음 | . %sql SELECT name, popularity, AVG(abs(popularity-track_popularity)) AS diff FROM master WHERE name IN (&#39;Drake&#39;, &#39;Post Malone&#39;, &#39;Travis Scott&#39;) GROUP BY 1, 2 ORDER BY 3 ASC LIMIT 20 . %sql SELECT track_popularity, COUNT(*) FROM master GROUP BY 1 ORDER BY 1 ASC . %sql SELECT AVG(acousticness), AVG(liveness), AVG(speechiness), AVG(tempo) FROM master WHERE popularity &gt; ${pupularity=80} AND track_popularity &gt; ${track_popularity=80} . %sql SELECT ROUND(acousticness, 2), COUNT(*) FROM amster GROUP BY 1 ORDER BY 1 ASC .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/25/Pyspark-Spark_SQL.html",
            "relUrl": "/spark/2020/01/25/Pyspark-Spark_SQL.html",
            "date": " • Jan 25, 2020"
        }
        
    
  
    
        ,"post59": {
            "title": "[AWS] awscli 설정",
            "content": "Environment . MacOS 10.14.6 | . AWS 사용자 추가 . https://console.aws.amazon.com/iam/home?region=ap-northeast-2#/home . 서비스 &gt; IAM &gt; 사용자 &gt; 사용자 추가 . 사용자 세부 정보 설정 . 사용자 이름 등록 | . AWS 액세스 유형 선택 . 액세스 유형: 프로그래밍 방식 액세스 체크 | . 권한 설정 &gt; 기존 정책 직접 연결 . AdministratorAccess 체크 | . 태그 추가(선택사항) . 공란으로 남겨 둠 | . 사용자 만들기 완료를 누르면 사용자, 액세스키 ID, 비밀 액세스키가 나타난다. . awscli 설치 . Python Packaging Authority에서 제공하는 스크립트를 사용하여 pip를 설치 . $ curl -O https://bootstrap.pypa.io/get-pip.py $ python3 get-pip.py --user . pip를 사용하여 AWS CLI를 설치 . $ pip3 install awscli --upgrade --user . AWS CLI가 올바르게 설치되었는지 확인 . $ aws --version . aws-cli/1.17.9 Python/3.7.3 Darwin/18.7.0 botocore/1.14.9 . 구성하기 . aws configure 명령을 실행하여 AWS CLI 설정할 수 있음 | . $ aws configure AWS Access Key ID [None]: &lt;액세스키 ID&gt; AWS Secret Access Key [None]: &lt;비밀 액세스키&gt; Default region name [None]: &lt;리전, ap-northeast-2&gt; Default output format [None]: .",
            "url": "https://safenumz.github.io/blog/devops/2020/01/25/AWS-awscli_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/devops/2020/01/25/AWS-awscli_%EC%84%A4%EC%A0%95.html",
            "date": " • Jan 25, 2020"
        }
        
    
  
    
        ,"post60": {
            "title": "[알고리즘] 복소수 계산 알고리즘",
            "content": "import math class ComplexNumber: def __init__(self, real, img): self.real = real self.img = img def __add__(self, cn): return ComplexNumber(self.real + cn.real, self.img + cn.img) def __sub__(self, cn): return ComplexNumber(self.real - cn.real, self.img - cn.img) def __mul__(self, x): if type(x) == int: return ComplexNumber(self.real * x, self.img * x) elif type(x) == ComplexNumber: # (a + bj) * (c + dj) = (ac - bd) + (ad + bc)j return ComplexNumber(self.real * x.real - self.img * x.img, self.real * x.img + self.img * x.real) def __str__(self): if self.img &gt;= 0: return &quot;{} + {}j&quot;.format(self.real, self.img) else: return &quot;{} - {}j&quot;.format(self.real, abs(self.img)) def __eq__(self, cn): return self.real == cn.real and self.img == cn.img def __ne__(self, cn): return not ( self.real == cn.real and self.img == cn.img) def __abs__(self): return math.sqrt(self.real ** 2 + self.img ** 2) def __len__(self): return self.real ** 2 + self.img ** 2 a = ComplexNumber(1, 2) b = ComplexNumber(3, 5) print(a - b) print(a * 3) print(a * b) print(a != b) print(abs(a)) print(len(a)) . -2 - 3j 3 + 6j -7 + 11j True 2.23606797749979 5 .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/25/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%B5%EC%86%8C%EC%88%98_%EA%B3%84%EC%82%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "relUrl": "/algorithm/2020/01/25/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%B5%EC%86%8C%EC%88%98_%EA%B3%84%EC%82%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "date": " • Jan 25, 2020"
        }
        
    
  
    
        ,"post61": {
            "title": "[PySpark] Join",
            "content": "Join . artists = sqlContext.read.format(&quot;parquet&quot;).load(&quot;s3://spotify-folder/artists/dt=2020-01-30/artists.parquet&quot;) artists.toDF(&quot;id&quot;, &quot;name&quot;, &quot;followers&quot;, &quot;popularity&quot;, &quot;url&quot;, &quot;image_url&quot;) artists.show() . ++--+--+--+-+--+ |followers| id| image_url| name|popularity| url| ++--+--+--+-+--+ | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...| Lana Del Rey| 89|https://open.spot...| | 294843|01C9OoXDvCKkGcf73...|https://i.scdn.co...| Serge Gainsbourg| 63|https://open.spot...| | 1053365|02rd0anEWfMtF7iMk...|https://i.scdn.co...| Reba McEntire| 66|https://open.spot...| | 367631|02uYdhMhCgdB49hZl...|https://i.scdn.co...|Eagles Of Death M...| 61|https://open.spot...| | 1498582|03r4iKL2g2442PT9n...|https://i.scdn.co...| Beastie Boys| 73|https://open.spot...| | 131513|03YhcM6fxypfwckPC...|https://i.scdn.co...| Wes Montgomery| 57|https://open.spot...| | 21913582|04gDigrS5kc9YWfZH...|https://i.scdn.co...| Maroon 5| 93|https://open.spot...| | 75688|04tBaW21jyUfeP5iq...|https://i.scdn.co...| Scott Walker| 52|https://open.spot...| | 581793|0543y7yrvny4Kymoa...|https://i.scdn.co...| Peter Frampton| 62|https://open.spot...| | 85779|05E3NBxNMdnrPtxF9...|https://i.scdn.co...| Lester Young| 53|https://open.spot...| | 26220658|06HL4z0CvFAxyc27G...|https://i.scdn.co...| Taylor Swift| 94|https://open.spot...| | 356508|06nevPmNVfWUXyZkc...|https://i.scdn.co...| Gregory Porter| 68|https://open.spot...| | 366125|06nsZ3qSOYZ2hPVIM...|https://i.scdn.co...| J.J. Cale| 66|https://open.spot...| | 2834825|085pc2PYOi8bGKj0P...|https://i.scdn.co...| will.i.am| 78|https://open.spot...| | 158043|08avsqaGIlK2x3i2C...|https://i.scdn.co...| Keith Richards| 49|https://open.spot...| | 265703|09C0xjtosNAIXP36w...|https://i.scdn.co...| Fats Domino| 61|https://open.spot...| | 4928415|0BvkDsjIUla7X0k6C...|https://i.scdn.co...| Luke Bryan| 80|https://open.spot...| | 24213|0bvRYuXRvd14RYEE7...|https://i.scdn.co...|Linton Kwesi Johnson| 44|https://open.spot...| | 5118810|0C0XlULifJtAgn6ZN...|https://i.scdn.co...| The Killers| 82|https://open.spot...| | 2356170|0cc6vw3VN8YlIcvr1...|https://i.scdn.co...| Mötley Crüe| 77|https://open.spot...| ++--+--+--+-+--+ only showing top 20 rows . import pandas as pd import pymysql host = &lt;endpoint&gt; port = 3306 username = &lt;id&gt; database = &lt;database&gt; password = &lt;password&gt; try: conn = pymysql.connect(host, user=username, passwd=password, db=database, port=port, use_unicode=True, charset=&#39;utf8&#39;) cursor = conn.cursor() except: logging.error(&quot;could not connect to rds&quot;) sys.exit(1) cursor.execute(&quot;SELECT * FROM artists&quot;) colnames = [d[0] for d in cursor.description] artists = [dict(zip(colnames, row)) for row in cursor.fetchall()] artists = pd.DataFrame(artists) artists.head() artists = sqlContext.createDataFrame(artists) artists.show() . ++--+--+--+-+--+ |followers| id| image_url| name|popularity| url| ++--+--+--+-+--+ | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...| Lana Del Rey| 89|https://open.spot...| | 294843|01C9OoXDvCKkGcf73...|https://i.scdn.co...| Serge Gainsbourg| 63|https://open.spot...| | 1053365|02rd0anEWfMtF7iMk...|https://i.scdn.co...| Reba McEntire| 66|https://open.spot...| | 367631|02uYdhMhCgdB49hZl...|https://i.scdn.co...|Eagles Of Death M...| 61|https://open.spot...| | 1498582|03r4iKL2g2442PT9n...|https://i.scdn.co...| Beastie Boys| 73|https://open.spot...| | 131513|03YhcM6fxypfwckPC...|https://i.scdn.co...| Wes Montgomery| 57|https://open.spot...| | 21913582|04gDigrS5kc9YWfZH...|https://i.scdn.co...| Maroon 5| 93|https://open.spot...| | 75688|04tBaW21jyUfeP5iq...|https://i.scdn.co...| Scott Walker| 52|https://open.spot...| | 581793|0543y7yrvny4Kymoa...|https://i.scdn.co...| Peter Frampton| 62|https://open.spot...| | 85779|05E3NBxNMdnrPtxF9...|https://i.scdn.co...| Lester Young| 53|https://open.spot...| | 26220658|06HL4z0CvFAxyc27G...|https://i.scdn.co...| Taylor Swift| 94|https://open.spot...| | 356508|06nevPmNVfWUXyZkc...|https://i.scdn.co...| Gregory Porter| 68|https://open.spot...| | 366125|06nsZ3qSOYZ2hPVIM...|https://i.scdn.co...| J.J. Cale| 66|https://open.spot...| | 2834825|085pc2PYOi8bGKj0P...|https://i.scdn.co...| will.i.am| 78|https://open.spot...| | 158043|08avsqaGIlK2x3i2C...|https://i.scdn.co...| Keith Richards| 49|https://open.spot...| | 265703|09C0xjtosNAIXP36w...|https://i.scdn.co...| Fats Domino| 61|https://open.spot...| | 4928415|0BvkDsjIUla7X0k6C...|https://i.scdn.co...| Luke Bryan| 80|https://open.spot...| | 24213|0bvRYuXRvd14RYEE7...|https://i.scdn.co...|Linton Kwesi Johnson| 44|https://open.spot...| | 5118810|0C0XlULifJtAgn6ZN...|https://i.scdn.co...| The Killers| 82|https://open.spot...| | 2356170|0cc6vw3VN8YlIcvr1...|https://i.scdn.co...| Mötley Crüe| 77|https://open.spot...| ++--+--+--+-+--+ only showing top 20 rows . top_tracks = sqlContext.read.format(&quot;parquet&quot;).load(&quot;s3://spotify-folder/top-tracks/dt=2020-01-29/top-tracks.parquet&quot;) top_tracks = top_tracks.toDF(&quot;id&quot;, &quot;artist_id&quot;, &quot;name&quot;, &quot;popularity&quot;, &quot;external_url&quot;) top_tracks = top_tracks.withColumnRenamed(&quot;id&quot;, &quot;track_id&quot;).withColumnRenamed(&quot;name&quot;, &quot;track_name&quot;) top_tracks = top_tracks.select(top_tracks[&quot;track_id&quot;].alias(&quot;track_id&quot;), top_tracks[&quot;track_name&quot;][0].alias(&quot;track_name&quot;), top_tracks[&quot;artist_id&quot;], top_tracks[&quot;popularity&quot;][0].alias(&quot;track_popularity&quot;)) joined = artists.join(top_tracks, top_tracks[&quot;track_id&quot;] == artists[&quot;id&quot;]) joined.show() features = sqlContext.read.format(&quot;parquet&quot;).load(&quot;s3://spotify-folder/audio-features/dt=2020-01-29/top-tracks.parquet&quot;) features = features.toDF(&quot;acousticness&quot;, &quot;analysis_url&quot;, &quot;danceability&quot;, &quot;duration_ms&quot;, &quot;energy&quot;, &quot;id&quot;, &quot;instrumentalness&quot;, &quot;key&quot;, &quot;liveness&quot;, &quot;loudness&quot;, &quot;mode&quot;, &quot;speechiness&quot;, &quot;tempo&quot;, &quot;time_signature&quot;, &quot;track_href&quot;, &quot;type&quot;, &quot;uri&quot;, &quot;valence&quot;) features = features.withColumnRenamed(&quot;id&quot;, &quot;track_id&quot;) master = joined.join(features, joined[&quot;track_id&quot;] == features[&quot;track_id&quot;], &quot;leftouter&quot;) master.show() . ++--+--++-+--+--+--+--+--+ |followers| id| image_url| name|popularity| url| track_id| track_name| artist_id| track_popularity| ++--+--++-+--+--+--+--+--+ | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| ++--+--++-+--+--+--+--+--+ only showing top 20 rows ++--+--++-+--+--+--+--+--++++--++--+-+-+--+--+-+--+--+--+-+-+-+-+ |followers| id| image_url| name|popularity| url| track_id| track_name| artist_id| track_popularity|acousticness|analysis_url|danceability|duration_ms|energy|track_id|instrumentalness| key|liveness|loudness|mode|speechiness|tempo|time_signature|track_href|type| uri|valence| ++--+--++-+--+--+--+--+--++++--++--+-+-+--+--+-+--+--+--+-+-+-+-+ | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|3hwQhakFwm9soLEBn...|[https://open.spo...| Venice Bitch| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6PUIzlqotEmPuBfjb...|[https://open.spo...|Summertime Sadnes...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|0fB77VOZ2FkQeKLv1...|[https://open.spo...|hope is a dangero...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|6OG05bPAwUuV3OMvy...|[https://open.spo...|Mariners Apartmen...| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| | 9824434|00FQb4jTyendYWaN8...|https://i.scdn.co...|Lana Del Rey| 89|https://open.spot...|00FQb4jTyendYWaN8...|2mdEsXPu8ZmkHRRtA...|[https://open.spo...| Cinnamon Girl| null| null| null| null| null| null| null|null| null| null|null| null| null| null| null|null|null| null| ++--+--++-+--+--+--+--+--++++--++--+-+-+--+--+-+--+--+--+-+-+-+-+ only showing top 20 rows .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/24/Pyspark-Join.html",
            "relUrl": "/spark/2020/01/24/Pyspark-Join.html",
            "date": " • Jan 24, 2020"
        }
        
    
  
    
        ,"post62": {
            "title": "[ShellScript] 배열 (Array)",
            "content": "배열에 값 추가하기 . #!/bin/bash PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; ) PLANETS[3]=&quot;SUN&quot; echo ${PLANETS[@]} . EARTH MARS VINUS SUN . #!/bin/bash PLANETS=() PLANETS+=(&quot;EARTH&quot;) PLANETS+=(&quot;MARS&quot;) PLANETS=(${PLANETS[@]} &quot;VINUS&quot;) echo ${PLANETS[@]} . EARTH MARS VINUS . 배열의 값 출력하기 . #!/bin/bash PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; ) # 인덱스 0부터 2개 출력하기 echo ${PLANETS[@]:0:2} # 맨 마지막 값 출력하기 echo ${PLANETS[@]: -1} # 맨 마지막 2개 출력하기 echo ${PLANETS[@]: -2} . EARTH MARS VINUS MARS VINUS . 배열의 값 제거 . #!/bin/bash PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; ) # 인덱스 1 값 제거 IDX=1 PLANETS_DEL=(&quot;${PLANETS[@]:0:$IDX}&quot; &quot;${PLANETS[@]:$(($IDX + 1))}&quot;) echo ${PLANETS_DEL[@]} unset PLANETS[1] echo ${PLANETS[@]} # 배열의 전체 값 제거 후 배열 개수 출력 unset PLANETS echo ${#PLANES[@]} . EARTH VINUS EARTH VINUS 0 . 배열의 값 패턴 추출 . #!/bin/bash PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; &quot;MAX&quot; ) # MA로 시작하는 값 빼고 출력 echo ${PLANETS[@]/MA*/} # 배열의 요소 변경하여 출력 echo ${PLANETS[@]/MARS/SATURN} . EARTH VINUS EARTH SATURN VINUS MAX . 배열 순환 (Array loop) . #!/bin/bash for NAME in &quot;ME&quot; &quot;YOU&quot; &quot;THEN&quot; &quot;ALL&quot; do echo &quot;Name is ${NAME}&quot; done . Name is ME Name is YOU Name is THEN Name is ALL . #!/bin/bash PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; ) for PLANET in ${PLANETS[@]} do echo &quot;This is ${PLANET}&quot; done . This is EARTH This is MARS This is VINUS . #!/bin/bash PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; ) for (( i=0; i&lt;${#PLANETS[@]}; i++ )) do echo &quot;Planet #$i is ${PLANETS[i]}&quot; done . Planet #0 is EARTH Planet #1 is MARS Planet #2 is VINUS . 배열과 함수 연동 . 배열 요소를 꺼낼 때는 !를 붙여줘서 배열 요소의 값을 참조하도록 함 | . 배열을 함수에 전달하기 . #!/bin/bash function planets_func() { for planet in ${1}[@] do echo ${!planet} done } PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; ) planets_func PLANETS . EARTH MARS VINUS . 배열의 요소 함수에 전달하기 . #!/bin/bash function planets_func() { for planet in ${!1} do echo ${planet} done } PLANETS=( &quot;EARTH&quot; &quot;MARS&quot; &quot;VINUS&quot; ) planets_func PLANETS[@] . EARTH MARS VINUS . 텍스트 파일의 내용을 배열로 불러오기 . $ cat planets.txt . ALIVE EARTH MARS VINUS . #!/bin/bash # 기존 IFS 백업 IFS_backup=&quot;$IFS&quot; # IFS 값을 줄바꿈으로 변경 IFS=$&#39; n&#39; # 배열 할당 PLANETS=( `cat planets.txt` ) for PLANET in &quot;${PLANETS[@]}&quot; do echo &quot;$PLANET&quot; done # IFS 원상복구 IFS=&quot;$IFS_backup&quot; . ALIVE EARTH MARS VINUS .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/24/ShellScript-%EB%B0%B0%EC%97%B4_(Array).html",
            "relUrl": "/linux/2020/01/24/ShellScript-%EB%B0%B0%EC%97%B4_(Array).html",
            "date": " • Jan 24, 2020"
        }
        
    
  
    
        ,"post63": {
            "title": "[PySpark] 사용자 지정 함수 (UDF)",
            "content": "사용자 지정 함수 (UDF) . import pyspark.sql.functions as F df_new = df1.select(df1[&quot;danceability&quot;], df1[&quot;acousticness&quot;], df1[&quot;liveness&quot;]).agg(F.avg(df1[&quot;danceability&quot;]).alias(&quot;avg_danceability&quot;), F.max(df1[&quot;acousticness&quot;]).alias(&quot;max_acousticness&quot;)) df_new.show() . ++-+ | avg_danceability|max_acousticness| ++-+ |0.4411668899999993| 0.948| ++-+ . from pyspark.sql.functions import udf from pyspark.sql.types import * udf1 = udf(lambda e: e.upper()) @udf(returnType=BooleanType()) def udf2(e): if e &gt;= 0.06: return True else: return False df_filtered = df1.filter(udf2(df1[&quot;danceability&quot;])) df_filtered.show() . ++--+--+--+--+--++--+--+-+--++-++--+--+--+--+ |danceability| energy| key|loudness| mode| speechiness|acousticness|instrumentalnesss|liveness|valence|tempo| type| id|uri| track_href| analysis_url| duration_ms|time_signature| ++--+--+--+--+--++--+--+-+--++-++--+--+--+--+ | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| | 0.839|https://api.spoti...|0.292| 300683|0.334|2mdEsXPu8ZmkHRRtA...| 0.345| 6| 0.151|-10.679| 0|0.0378| 67.836| 4|https://api.spoti...|audio_features|spotify:track:2md...| 0.148| | 0.839|https://api.spoti...|0.292| 300683|0.334|2mdEsXPu8ZmkHRRtA...| 0.345| 6| 0.151|-10.679| 0|0.0378| 67.836| 4|https://api.spoti...|audio_features|spotify:track:2md...| 0.148| | 0.839|https://api.spoti...|0.292| 300683|0.334|2mdEsXPu8ZmkHRRtA...| 0.345| 6| 0.151|-10.679| 0|0.0378| 67.836| 4|https://api.spoti...|audio_features|spotify:track:2md...| 0.148| | 0.839|https://api.spoti...|0.292| 300683|0.334|2mdEsXPu8ZmkHRRtA...| 0.345| 6| 0.151|-10.679| 0|0.0378| 67.836| 4|https://api.spoti...|audio_features|spotify:track:2md...| 0.148| ++--+--+--+--+--++--+--+-+--++-++--+--+--+--+ only showing top 20 rows .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/23/Pyspark-UDF.html",
            "relUrl": "/spark/2020/01/23/Pyspark-UDF.html",
            "date": " • Jan 23, 2020"
        }
        
    
  
    
        ,"post64": {
            "title": "[Linux] 스트림 편집기 (sed)",
            "content": "sed (streamlined editor) . sed는 대화형 기능이 없는 편집기이다. 명령행에서 직접 편집 명령어와 파일을 지정하여 작업한 후 결과를 화면으로 확인한다. sed 편집기는 원본을 손상하지 않는다. 리다이렉션을 이용하여 편집 결과를 파일로 저장하여 확인할 수 있다. | MacOS에서는 gnu-sed를 설치하여 gsed 명령어로 리눅스의 sed 명령어와 동일한 결과를 나타낼 수 있다. | . 주소 지정 . 주소 지정이란 편집하고자 하는 행을 선택하는 것을 말한다. 이 주소는 숫자나 정규표현식 또는 둘의 조합으로 표현한다. 주소를 지정하지 않은 경우 입력 파일 전체 행에 대하여 작업을 진행한다. | . # datafile의 1행에서 3행까지 출력한다. p는 행을 출력하라는 명령어이다. $ sed &#39;1,3p&#39; datafile # datafile에서 Love나 love를 포함하는 행만 출력한다. $ sed -n &#39;/[Ll]ove/p&#39; datafile . 명령어 . 명령어 내용 . a | 현재 행에 하나 이상의 새로운 행을 추가 | . c | 현재 행의 내용을 새로운 내용으로 바꿈 | . i | 현재 행의 위에 삽입 | . d | 행을 삭제 | . l | 출력되지 않는 특수문자를 출력 | . p | 행을 출력 | . n | 다음 입력 행을 첫 번째 명령어가 아닌 다음 명령어에서 처리하게 함 | . q | sed를 종료 | . r | 파일로부터 행을 읽어옴 | . ! | 선택된 행을 제외한 나머지 전체 행에 명령어를 적용 | . s | 문자열을 치환 | . 옵션 . 옵션 내용 . -e | 다중 편집시 사용. | . -f | sed 스크립트 파일 지정에 사용. | . -n | 출력을 생략한다. | . 다중명령어를 사용하거나 주소 지정이 다른 주소 지정 범위와 중첩되는 경우에는 명령어들을 중괄호안에 넣고, 각 명령어의 끝에 세미콜론을 붙인다. !는 명령어를 반전하는데 사용한다. 다음 예는 love를 포함하지 않은 행들을 삭제한다. | . $ sed &#39;/love/!d&#39; datafile . 메타문자 . grep 등과 마찬가지로 sed는 패턴검색을 위하여 특별한 메타문자를 제공한다. | . 메타문자 설명 예시 . ^ | 행의 시작 지시자 | /^love/ love로 시작하는 행 | . $ | 행의 끝 지시자 | /love$/ love로 끝나는 행 | . . | 하나의 문자와 대응 | /l..e/ l 다음에 두 글자가 오고 e로 끝나는 문자열을 포함하는 행 | . * | 0개 혹은 임의의 임의 갯수 | / *love/ 0개 혹은 임의 갯수의 공백 문자 후에 love로 끝나는 문자열을 포함한 행 | . [] | [] 사이의 문자 집합중 하나와 대응 | /[Ll]ove/ Love 또는 love를 포함한 행 | . [^] | 문자 집합에 속하지 않는 한 문자와 대응 | /[^A-K]ove/ A 와 K 사이의 범위에 포함되지 않는 한 문자와 ove가 붙어있는 문자열 | . (..) | 태그로 저장할 수 있는 문자열 지정에 사용 | s/(lov)able/ 1er/ 지정된 부분(lov)을 태그 1에 저장하였다가 사용함. 태그를 참조하기 위해서는 1을 사용함. 태그는 9개까지 사용할 수 있음. 예제에서 lovable이 lover로 치환됨. | . &amp; | 검색열을 저장하여 치환열에서 사용할 수 있게함 | s/love/&amp;/ 검색열 love가 love로 치환됨 | . &lt; | 단어의 시작 지시자 | /&lt;love/ love로 시작하는 단어를 포함하는 행 | . &gt; | 단어의 끝 지시자 | /love&gt;/ love로 끝나는 단어를 포함하는 행 | . x{m} | 문자 x를 m번 반복 | /a{5}/ a가 5번 반복 | . x{m,} | 적어도 m번 반복 | /a{5,}/ a가 적어도 5번 반복 | . x{m,n} | m회 이상 n회 이하 반복 | /a{5,10}/ a가 5회에서 10회 사이로 반복 | . 예제 . 출력 : p . # 기본 설정에서는 모든 행을 표준 출력으로 내보낸다. 패턴 love가 있는 행을 찾으면 그 행을 한 번 더 출력한다. $ sed &#39;/love/p&#39; datafile # 기본 설정에 의한 p 명령어의 동작을 제한한다. -n 옵션을 사용하면 love 패턴을 포함하는 행들만 출력한다. $ sed -n &#39;/love/p&#39; datafile . 삭제 : d . # 3번 행을 삭제한다. 다른 행들은 기본적으로 한번 출력된다. $ sed &#39;3d&#39; datafile # 3번 행부터 마지막 행까지 삭제한다. 그리고 나머지 행들이 출력된다. $ sed &#39;3,$d&#39; datafile # 마지막 행을 삭제한다. 삭제된 행 이외의 모든 행들이 출력된다. $ sed &#39;$d&#39; datafile # love를 포함한 모든 행을 삭제하고, 나머지 행들을 출력한다. $ sed &#39;/love/d&#39; datafile . 치환 : s . # love를 peace로 치환한다. g플래그는 행 전체에 치환이 적용됨을 의미한다. g플래그가 없으면 행에서 맨 처음 등장하는 love만 peace로 치환된다. $ sed &#39;s/love/peace/g&#39; datafile # -n 옵션은 p플래그와 같이 사용되어 치환이 일어난 행만 출력한다. $ sed -n &#39;s/^love/peace/p&#39; datafile # &amp;는 검색열에서 지정한 문자열을 대신한다. 즉 두자리 숫자로 끝나는 행은 그 숫자들에 .5가 추가된다. $ sed &#39;s/[0-9][0-9]$/&amp;.5/&#39; datafile # love가 peace로 치환된 행들만 출력한다. -n 옵션이 p 명령어와 함께 사용되어 출력을 간단하게 줄여준다. g플래그는 각 행에서 전체 치환이 일어나게 한다. $ sed -n &#39;s/love/peace/gp&#39; datafile # s 명령어 바로 다음에 오는 문자는 검색열과 치환열을 구분해주는 구분자이다. 기본적으로 /를 구분자로 사용하지만, 다른 문자로 바꾸어 쓸 수 있다. 이는 / 자체를 포함하는 문자열을 검색할 때 유용하다. $ sed &#39;s#3#99#g&#39; datafile . 행의 선택 범위 : 쉼표(,) . # love가 나오는 행과 peace가 나오는 행 사이의 모든 행들이 출력된다. love가 peace 다음에 나오면 love가 나오는 행부터 마지막 행까지 출력된다. $ sed -n &#39;/love/,/peace/p&#39; datafile # 5번째 행부터 love로 시작하는 행까지 출력한다. sed -n &#39;5,/^love/p&#39; datafile . 다중 편집 : e . # 첫 번째 명령은 1행부터 3행까지 삭제하고, 두 번째 명령은 love를 peace로 치환하는 것이다. $ sed -e &#39;1,3d’ -e ‘s/love/peace/&#39; datafile . 파일로 부터 읽기 : r . # newfile의 내용을 읽어 datafile의 패턴 love를 찾은 곳에 삽입한다. 패턴이 여러번 나오면 매번 중복해서 출력된다. $ sed &#39;/love/r newfile&#39; datafile . 파일로 쓰기 : w . # love를 포함하는 행들이 newfile에 저장된다. $ sed -n &#39;/love/w newfile&#39; datafile . 붙이기 : a . # 패턴 love로 시작하고 공백문자가 있는 행 다음에 명령어 a 뒤의 문자열을 추가한다. $ sed &#39;/^love /a --&#39; datafile . 삽입 : i . # 패턴 love를 찾은 후 명령어 i 다음에 오는 텍스트를 love가 포함된 행 위에 삽입한다. $ sed &#39;/love/i --&#39; datafile . 종료 : q . # 5행까지 출력한 후 sed프로그램 종료한다. $ sed &#39;5q&#39; datafile # 패턴 love를 찾은 행에서 love가 peace로 치환되고 q 명령어로 sed 종료한다. # 다중명령어 처리시 중괄호를 사용하며, 이때 각 명령어의 끝에 세미콜론을 붙인다. $ sed &#39;/love/{ s/love/peace/;q; }&#39; datafile .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/23/Linux-%EC%8A%A4%ED%8A%B8%EB%A6%BC_%ED%8E%B8%EC%A7%91%EA%B8%B0_(sed).html",
            "relUrl": "/linux/2020/01/23/Linux-%EC%8A%A4%ED%8A%B8%EB%A6%BC_%ED%8E%B8%EC%A7%91%EA%B8%B0_(sed).html",
            "date": " • Jan 23, 2020"
        }
        
    
  
    
        ,"post65": {
            "title": "[자료구조] 힙 (Heap)",
            "content": "&lt;!DOCTYPE html&gt; . 2020-01-23-자료구조-힙_(Heap) . &#45824;&#54364;&#51201;&#51064; &#51088;&#47308;&#44396;&#51312;: &#55193; (Heap)&#182; . 1. &#55193; (Heap) &#51060;&#46976;?&#182; . 힙: 데이터에서 최대값과 최소값을 빠르게 찾기 위해 고안된 완전 이진 트리(Complete Binary Tree) 완전 이진 트리: 노드를 삽입할 때 최하단 왼쪽 노드부터 차례대로 삽입하는 트리 | . | . . 힙을 사용하는 이유 배열에 데이터를 넣고, 최대값과 최소값을 찾으려면 O(n) 이 걸림 | 이에 반해, 힙에 데이터를 넣고, 최대값과 최소값을 찾으면, $ O(log n) $ 이 걸림 | 우선순위 큐와 같이 최대값 또는 최소값을 빠르게 찾아야 하는 자료구조 및 알고리즘 구현 등에 활용됨 | . | . 2. &#55193; (Heap) &#44396;&#51312;&#182; . 힙은 최대값을 구하기 위한 구조 (최대 힙, Max Heap) 와, 최소값을 구하기 위한 구조 (최소 힙, Min Heap) 로 분류할 수 있음 | 힙은 다음과 같이 두 가지 조건을 가지고 있는 자료구조임 각 노드의 값은 해당 노드의 자식 노드가 가진 값보다 크거나 같다. (최대 힙의 경우) 최소 힙의 경우는 각 노드의 값은 해당 노드의 자식 노드가 가진 값보다 크거나 작음 | . | 완전 이진 트리 형태를 가짐 | | . &#55193;&#44284; &#51060;&#51652; &#53456;&#49353; &#53944;&#47532;&#51032; &#44277;&#53685;&#51216;&#44284; &#52264;&#51060;&#51216;&#182; . 공통점: 힙과 이진 탐색 트리는 모두 이진 트리임 | 차이점: 힙은 각 노드의 값이 자식 노드보다 크거나 같음(Max Heap의 경우) | 이진 탐색 트리는 왼쪽 자식 노드의 값이 가장 작고, 그 다음 부모 노드, 그 다음 오른쪽 자식 노드 값이 가장 큼 | 힙은 이진 탐색 트리의 조건인 자식 노드에서 작은 값은 왼쪽, 큰 값은 오른쪽이라는 조건은 없음 힙의 왼쪽 및 오른쪽 자식 노드의 값은 오른쪽이 클 수도 있고, 왼쪽이 클 수도 있음 | . | . | 이진 탐색 트리는 탐색을 위한 구조, 힙은 최대/최소값 검색을 위한 구조 중 하나로 이해하면 됨 | . 3. &#55193; (Heap) &#46041;&#51089;&#182; . 데이터를 힙 구조에 삽입, 삭제하는 과정을 그림을 통해 선명하게 이해하기 | . &#55193;&#50640; &#45936;&#51060;&#53552; &#49341;&#51077;&#54616;&#44592; - &#44592;&#48376; &#46041;&#51089;&#182; . 힙은 완전 이진 트리이므로, 삽입할 노드는 기본적으로 왼쪽 최하단부 노드부터 채워지는 형태로 삽입 | . &#55193;&#50640; &#45936;&#51060;&#53552; &#49341;&#51077;&#54616;&#44592; - &#49341;&#51077;&#54624; &#45936;&#51060;&#53552;&#44032; &#55193;&#51032; &#45936;&#51060;&#53552;&#48372;&#45796; &#53364; &#44221;&#50864; (Max Heap &#51032; &#50696;)&#182; . 먼저 삽입된 데이터는 완전 이진 트리 구조에 맞추어, 최하단부 왼쪽 노드부터 채워짐 | 채워진 노드 위치에서, 부모 노드보다 값이 클 경우, 부모 노드와 위치를 바꿔주는 작업을 반복함 (swap) | . &#55193;&#51032; &#45936;&#51060;&#53552; &#49325;&#51228;&#54616;&#44592; (Max Heap &#51032; &#50696;)&#182; . 보통 삭제는 최상단 노드 (root 노드)를 삭제하는 것이 일반적임 힙의 용도는 최대값 또는 최소값을 root 노드에 놓아서, 최대값과 최소값을 바로 꺼내 쓸 수 있도록 하는 것임 | . | 상단의 데이터 삭제시, 가장 최하단부 왼쪽에 위치한 노드 (일반적으로 가장 마지막에 추가한 노드) 를 root 노드로 이동 | root 노드의 값이 child node 보다 작을 경우, root 노드의 child node 중 가장 큰 값을 가진 노드와 root 노드 위치를 바꿔주는 작업을 반복함 (swap) | . . 4. &#55193; &#44396;&#54788;&#182; . &#55193;&#44284; &#48176;&#50676;&#182; . 일반적으로 힙 구현시 배열 자료구조를 활용함 | 배열은 인덱스가 0번부터 시작하지만, 힙 구현의 편의를 위해, root 노드 인덱스 번호를 1로 지정하면, 구현이 좀더 수월함 부모 노드 인덱스 번호 (parent node&#39;s index) = 자식 노드 인덱스 번호 (child node&#39;s index) // 2 | 왼쪽 자식 노드 인덱스 번호 (left child node&#39;s index) = 부모 노드 인덱스 번호 (parent node&#39;s index) * 2 | 오른쪽 자식 노드 인덱스 번호 (right child node&#39;s index) = 부모 노드 인덱스 번호 (parent node&#39;s index) * 2 + 1 | . | . In&nbsp;[4]: # 예1 - 10 노드의 부모 노드 인덱스 2 // 2 . Out[4]: 1 . In&nbsp;[6]: # 예1 - 15 노드의 왼쪽 자식 노드 인덱스 번호 1 * 2 . Out[6]: 2 . In&nbsp;[7]: # 예1 - 15 노드의 오른쪽 자식 노드 인덱스 번호 2 * 2 + 1 . Out[7]: 5 . &#55193;&#50640; &#45936;&#51060;&#53552; &#49341;&#51077; &#44396;&#54788; (Max Heap &#50696;)&#182; . 힙 클래스 구현1 | . In&nbsp;[8]: class Heap: def __init__(self, data): self.heap_array = list() self.heap_array.append(None) self.heap_array.append(data) . In&nbsp;[9]: heap = Heap(1) heap.heap_array . Out[9]: [None, 1] . 힙 클래스 구현2 - insert1 인덱스 번호는 1번부터 시작하도록 변경 | . | . . In&nbsp;[11]: class Heap: def __init__(self, data): self.heap_array = list() self.heap_array.append(None) self.heap_array.append(data) def insert(self, data): if len(self.heap_array) == 0: self.heap_array.append(None) self.heap_array.append(data) return True self.heap_array.append(data) return True . 힙 클래스 구현3 - insert2 삽입한 노드가 부모 노드의 값보다 클 경우, 부모 노드와 삽입한 노드 위치를 바꿈 | 삽입한 노드가 루트 노드가 되거나, 부모 노드보다 값이 작거나 같을 경우까지 반복 | . | . . 특정 노드의 관련 노드 위치 알아내기 부모 노드 인덱스 번호 (parent node&#39;s index) = 자식 노드 인덱스 번호 (child node&#39;s index) // 2 | 왼쪽 자식 노드 인덱스 번호 (left child node&#39;s index) = 부모 노드 인덱스 번호 (parent node&#39;s index) * 2 | 오른쪽 자식 노드 인덱스 번호 (right child node&#39;s index) = 부모 노드 인덱스 번호 (parent node&#39;s index) * 2 + 1 | . | . . In&nbsp;[16]: heap = Heap(15) heap.insert(10) heap.insert(8) heap.insert(5) heap.insert(4) heap.insert(20) heap.heap_array . Out[16]: [None, 20, 10, 15, 5, 4, 8] . In&nbsp;[15]: class Heap: def __init__(self, data): self.heap_array = list() self.heap_array.append(None) self.heap_array.append(data) def move_up(self, inserted_idx): if inserted_idx &lt;= 1: return False parent_idx = inserted_idx // 2 if self.heap_array[inserted_idx] &gt; self.heap_array[parent_idx]: return True else: return False def insert(self, data): if len(self.heap_array) == 0: self.heap_array.append(None) self.heap_array.append(data) return True self.heap_array.append(data) inserted_idx = len(self.heap_array) - 1 while self.move_up(inserted_idx): parent_idx = inserted_idx // 2 self.heap_array[inserted_idx], self.heap_array[parent_idx] = self.heap_array[parent_idx], self.heap_array[inserted_idx] inserted_idx = parent_idx return True . &#55193;&#50640; &#45936;&#51060;&#53552; &#49325;&#51228; &#44396;&#54788; (Max Heap &#50696;)&#182; . 힙 클래스 구현4 - delete1 | 보통 삭제는 최상단 노드 (root 노드)를 삭제하는 것이 일반적임 힙의 용도는 최대값 또는 최소값을 root 노드에 놓아서, 최대값과 최소값을 바로 꺼내 쓸 수 있도록 하는 것임 | . | . In&nbsp;[18]: class Heap: def __init__(self, data): self.heap_array = list() self.heap_array.append(None) self.heap_array.append(data) def pop(self): if len(self.heap_array) &lt;= 1: return None returned_data = self.heap_array[1] return returned_data . 힙 클래스 구현4 - delete2 상단의 데이터 삭제시, 가장 최하단부 왼쪽에 위치한 노드 (일반적으로 가장 마지막에 추가한 노드) 를 root 노드로 이동 | root 노드의 값이 child node 보다 작을 경우, root 노드의 child node 중 가장 큰 값을 가진 노드와 root 노드 위치를 바꿔주는 작업을 반복함 (swap) | . | . . 특정 노드의 관련 노드 위치 알아내기 부모 노드 인덱스 번호 (parent node&#39;s index) = 자식 노드 인덱스 번호 (child node&#39;s index) // 2 | 왼쪽 자식 노드 인덱스 번호 (left child node&#39;s index) = 부모 노드 인덱스 번호 (parent node&#39;s index) * 2 | 오른쪽 자식 노드 인덱스 번호 (right child node&#39;s index) = 부모 노드 인덱스 번호 (parent node&#39;s index) * 2 + 1 | . | . . In&nbsp;[23]: heap = Heap(15) heap.insert(10) heap.insert(8) heap.insert(5) heap.insert(4) heap.insert(20) heap.heap_array . Out[23]: [None, 20, 10, 15, 5, 4, 8] . In&nbsp;[24]: heap.pop() . Out[24]: 20 . In&nbsp;[25]: heap.heap_array . Out[25]: [None, 15, 10, 8, 5, 4] . In&nbsp;[22]: class Heap: def __init__(self, data): self.heap_array = list() self.heap_array.append(None) self.heap_array.append(data) def move_down(self, popped_idx): left_child_popped_idx = popped_idx * 2 right_child_popped_idx = popped_idx * 2 + 1 # case1: 왼쪽 자식 노드도 없을 때 if left_child_popped_idx &gt;= len(self.heap_array): return False # case2: 오른쪽 자식 노드만 없을 때 elif right_child_popped_idx &gt;= len(self.heap_array): if self.heap_array[popped_idx] &lt; self.heap_array[left_child_popped_idx]: return True else: return False # case3: 왼쪽, 오른쪽 자식 노드 모두 있을 때 else: if self.heap_array[left_child_popped_idx] &gt; self.heap_array[right_child_popped_idx]: if self.heap_array[popped_idx] &lt; self.heap_array[left_child_popped_idx]: return True else: return False else: if self.heap_array[popped_idx] &lt; self.heap_array[right_child_popped_idx]: return True else: return False def pop(self): if len(self.heap_array) &lt;= 1: return None returned_data = self.heap_array[1] self.heap_array[1] = self.heap_array[-1] del self.heap_array[-1] popped_idx = 1 while self.move_down(popped_idx): left_child_popped_idx = popped_idx * 2 right_child_popped_idx = popped_idx * 2 + 1 # case2: 오른쪽 자식 노드만 없을 때 if right_child_popped_idx &gt;= len(self.heap_array): if self.heap_array[popped_idx] &lt; self.heap_array[left_child_popped_idx]: self.heap_array[popped_idx], self.heap_array[left_child_popped_idx] = self.heap_array[left_child_popped_idx], self.heap_array[popped_idx] popped_idx = left_child_popped_idx # case3: 왼쪽, 오른쪽 자식 노드 모두 있을 때 else: if self.heap_array[left_child_popped_idx] &gt; self.heap_array[right_child_popped_idx]: if self.heap_array[popped_idx] &lt; self.heap_array[left_child_popped_idx]: self.heap_array[popped_idx], self.heap_array[left_child_popped_idx] = self.heap_array[left_child_popped_idx], self.heap_array[popped_idx] popped_idx = left_child_popped_idx else: if self.heap_array[popped_idx] &lt; self.heap_array[right_child_popped_idx]: self.heap_array[popped_idx], self.heap_array[right_child_popped_idx] = self.heap_array[right_child_popped_idx], self.heap_array[popped_idx] popped_idx = right_child_popped_idx return returned_data def move_up(self, inserted_idx): if inserted_idx &lt;= 1: return False parent_idx = inserted_idx // 2 if self.heap_array[inserted_idx] &gt; self.heap_array[parent_idx]: return True else: return False def insert(self, data): if len(self.heap_array) == 1: self.heap_array.append(data) return True self.heap_array.append(data) inserted_idx = len(self.heap_array) - 1 while self.move_up(inserted_idx): parent_idx = inserted_idx // 2 self.heap_array[inserted_idx], self.heap_array[parent_idx] = self.heap_array[parent_idx], self.heap_array[inserted_idx] inserted_idx = parent_idx return True . 5. &#55193; (Heap) &#49884;&#44036; &#48373;&#51105;&#46020;&#182; . depth (트리의 높이) 를 h라고 표기한다면, | n개의 노드를 가지는 heap 에 데이터 삽입 또는 삭제시, 최악의 경우 root 노드에서 leaf 노드까지 비교해야 하므로 $h = log_2{n} $ 에 가까우므로, 시간 복잡도는 $ O(log{n}) $ 참고: 빅오 표기법에서 $log{n}$ 에서의 log의 밑은 10이 아니라, 2입니다. | 한번 실행시마다, 50%의 실행할 수도 있는 명령을 제거한다는 의미. 즉 50%의 실행시간을 단축시킬 수 있다는 것을 의미함 | . | . .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/23/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%9E%99_(Heap).html",
            "relUrl": "/algorithm/2020/01/23/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%9E%99_(Heap).html",
            "date": " • Jan 23, 2020"
        }
        
    
  
    
        ,"post66": {
            "title": "[PySpark] Select Subset Columns, Filter",
            "content": "Select Subset Columns . %pyspark raw = sqlContext.read.format(&quot;parquet&quot;).load(&quot;s3://spotify-folder/audio-features/dt=2020-01-29/top-tracks.parquet&quot;) df1 = raw.toDF(&quot;danceability&quot;, &quot;energy&quot;, &quot;key&quot;, &quot;loudness&quot;, &quot;mode&quot;, &quot;speechiness&quot;, &quot;acousticness&quot;, &quot;instrumentalnesss&quot;, &quot;liveness&quot;, &quot;valence&quot;, &quot;tempo&quot;, &quot;type&quot;, &quot;id&quot;, &quot;uri&quot;, &quot;track_href&quot;, &quot;analysis_url&quot;, &quot;duration_ms&quot;, &quot;time_signature&quot;) df1.show() . ++--+--+--+--+--++--+--+-+--++-++--+--+--+--+ |danceability| energy| key|loudness| mode| speechiness|acousticness|instrumentalnesss|liveness|valence|tempo| type| id|uri| track_href| analysis_url| duration_ms|time_signature| ++--+--+--+--+--++--+--+-+--++-++--+--+--+--+ | 0.00237|https://api.spoti...|0.644| 190067|0.755|6zegtH6XXd2PDPLvy...| 7.64E-6| 1| 0.0859| -5.325| 1|0.0448|102.861| 4|https://api.spoti...|audio_features|spotify:track:6ze...| 0.334| | 0.00237|https://api.spoti...|0.644| 190067|0.755|6zegtH6XXd2PDPLvy...| 7.64E-6| 1| 0.0859| -5.325| 1|0.0448|102.861| 4|https://api.spoti...|audio_features|spotify:track:6ze...| 0.334| | 0.00237|https://api.spoti...|0.644| 190067|0.755|6zegtH6XXd2PDPLvy...| 7.64E-6| 1| 0.0859| -5.325| 1|0.0448|102.861| 4|https://api.spoti...|audio_features|spotify:track:6ze...| 0.334| | 0.00237|https://api.spoti...|0.644| 190067|0.755|6zegtH6XXd2PDPLvy...| 7.64E-6| 1| 0.0859| -5.325| 1|0.0448|102.861| 4|https://api.spoti...|audio_features|spotify:track:6ze...| 0.334| | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.372|https://api.spoti...|0.649| 202193|0.538|0Oqc0kKFsQ6MhFOLB...| 0.00632| 7| 0.0951|-11.196| 0|0.0519|144.979| 4|https://api.spoti...|audio_features|spotify:track:0Oq...| 0.496| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.262|https://api.spoti...|0.324| 236053|0.416|2nMeu6UenVvwUktBC...| 3.69E-5| 11| 0.11| -8.92| 0|0.0368|113.986| 4|https://api.spoti...|audio_features|spotify:track:2nM...| 0.151| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.967|https://api.spoti...|0.218| 248934|0.215|3RIgHHpnFKj5Rni1s...| 0.0847| 5| 0.0948| -12.49| 1|0.0368| 76.74| 1|https://api.spoti...|audio_features|spotify:track:3RI...| 0.138| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| | 0.892|https://api.spoti...|0.532| 218288|0.452|7MtVPRGtZl6rPjMfL...| 0.00113| 9| 0.127|-10.654| 0| 0.043|129.895| 4|https://api.spoti...|audio_features|spotify:track:7Mt...| 0.203| ++--+--+--+--+--++--+--+-+--++-++--+--+--+--+ only showing top 20 rows . %pyspark df2 = df1.select(df1[&quot;danceability&quot;], df1[&quot;id&quot;], df1[&quot;acousticness&quot;]) df2.show() . ++-++ |danceability| id|acousticness| ++-++ | 0.00237|102.861| 7.64E-6| | 0.00237|102.861| 7.64E-6| | 0.00237|102.861| 7.64E-6| | 0.00237|102.861| 7.64E-6| | 0.372|144.979| 0.00632| | 0.372|144.979| 0.00632| | 0.372|144.979| 0.00632| | 0.372|144.979| 0.00632| | 0.262|113.986| 3.69E-5| | 0.262|113.986| 3.69E-5| | 0.262|113.986| 3.69E-5| | 0.262|113.986| 3.69E-5| | 0.967| 76.74| 0.0847| | 0.967| 76.74| 0.0847| | 0.967| 76.74| 0.0847| | 0.967| 76.74| 0.0847| | 0.892|129.895| 0.00113| | 0.892|129.895| 0.00113| | 0.892|129.895| 0.00113| | 0.892|129.895| 0.00113| ++-++ only showing top 20 rows . Filter . df3 = df2.filter((df2[&quot;danceability&quot;] &gt;= 0.30) &amp; (df2[&quot;acousticness&quot;] &gt;= 0.1)).distinct() df3.show() . ++-++ |danceability| id|acousticness| ++-++ | 0.924|204.049| 0.768| | 0.961|152.929| 0.204| | 0.839| 67.836| 0.345| | 0.991| 92.249| 0.902| | 0.981|116.882| 0.688| | 0.984|119.471| 0.896| | 0.944|129.272| 0.922| | 0.564| 98.445| 0.299| | 0.938|120.781| 0.916| | 0.991| 89.408| 0.948| | 0.991|119.381| 0.912| | 0.932| 155.94| 0.826| | 0.875|107.601| 0.432| | 0.955|104.465| 0.706| | 0.978| 83.4| 0.823| | 0.984| 62.287| 0.749| | 0.937|111.705| 0.898| | 0.986| 66.283| 0.6| | 0.957|107.971| 0.809| | 0.987| 173.61| 0.927| ++-++ only showing top 20 rows .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/22/Pyspark-Select_Subset_Columns_Filter.html",
            "relUrl": "/spark/2020/01/22/Pyspark-Select_Subset_Columns_Filter.html",
            "date": " • Jan 22, 2020"
        }
        
    
  
    
        ,"post67": {
            "title": "[Linux] 날짜 형식 (date)",
            "content": "date 포맷 형식 . %%: % 자체를 표시 | %n: 개행문자 | %t: 탭문자 | %F: %Y-%m-%d | %X: %H:%M:%S | %x: mm/dd/yy | %D: mm/dd/yy (01/22/20) | %s: UTC 기준 (1970-01-01 부터 지금까지 흐른 초) | %T: 24시간 (00:00:00) | %a: 요일 이름을 표시 (일, 토) | %A: 완전한 요일 이름을 표시 (일요일, 토요일) | %b: 월 이름을 표시 (1, 12) | %h: 월 이름을 표시 (%b와 동일) | %B: 완전한 월 이름을 표시 (1월, 12월) | %c: 날짜와 시간을 표시 | %C: 세기를 나타냄 (년을 100으로 나눈 몫) | %d: 일 (01, 31) | %e: 일 (1, 31) | %g: 년도 (yy) | %G: 년도 (yyyy) | %Y: 년도 (yyyy) | %H: 시간 (00, 23) | %k: 시간 (0, 23) | %I: 시간 (01, 12) | %l: 시간 (1, 12) | %j: 1년 기준으로 몇번째 일 (001, 366) | %m: 월 (01, 12) | %M: 분 (00, 59) | %N: 나노초 (000000000, 999999999) | %P: 오전/오후 (A, P) | %p: 오전/오후 (AM, PM) | %r: 시간 (00:00:00 AM) | %R: 시간 (00:00) | %u: 주중 요일, 1은 월요일 (1, 7) | %w: 주중 요일, 0은 일요일 (0, 6) | %U: 1년 중 몇번째 주인지, 일요일 기준 (00, 53) | %V: 1년 중 몇번째 주인지, 월요일 기준 (00, 53) | . date 활용 예시 . 오늘 날짜 . $ echo `date +%Y-%m-%d&#39;` . 오늘 날짜에 하루 더하기 . $ echo `date -d &#39;1 day&#39; &#39;+%Y-%m-%d&#39;` . 오늘 날짜에 이틀 더하기 . $ echo `date -d &#39;+2 day&#39; &#39;+%Y-%m-%d&#39;` . 특정 기준일로부터 하루 더하기 . $ echo `date -d &#39;2018-01-01 00:00:00 1 day&#39; &#39;+Y-%m-%d&#39;` . 오늘 날짜에 하루 빼기 . $ echo `date -d &#39;-1 day&#39; &#39;+%Y-%m-%d&#39;` $ echo `date -d &#39;1 day ago&#39; &#39;+%Y-%m-%d&#39;` . 현재 년도에 1년을 더하기 . $ echo `date -d &#39;1 year&#39; &#39;+%Y-%m-%d&#39;` . 현재 달에 1달을 더하기 . $ echo `date -d &#39;1 month&#39; &#39;+%Y-%m-%d&#39;` .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/22/Linux-%EB%82%A0%EC%A7%9C_%ED%98%95%EC%8B%9D_(date).html",
            "relUrl": "/linux/2020/01/22/Linux-%EB%82%A0%EC%A7%9C_%ED%98%95%EC%8B%9D_(date).html",
            "date": " • Jan 22, 2020"
        }
        
    
  
    
        ,"post68": {
            "title": "[자료구조] 트리 (Tree)",
            "content": "&lt;!DOCTYPE html&gt; . 2020-01-22-자료구조-트리_(Tree) . &#45824;&#54364;&#51201;&#51064; &#51088;&#47308;&#44396;&#51312;: &#53944;&#47532; (Tree)&#182; . 1. &#53944;&#47532; (Tree) &#44396;&#51312;&#182; . 트리: Node와 Branch를 이용해서, 사이클을 이루지 않도록 구성한 데이터 구조 | 실제로 어디에 많이 사용되나? 트리 중 이진 트리 (Binary Tree) 형태의 구조로, 탐색(검색) 알고리즘 구현을 위해 많이 사용됨 | . | . 2. &#50508;&#50500;&#46168; &#50857;&#50612;&#182; . Node: 트리에서 데이터를 저장하는 기본 요소 (데이터와 다른 연결된 노드에 대한 Branch 정보 포함) | Root Node: 트리 맨 위에 있는 노드 | Level: 최상위 노드를 Level 0으로 하였을 때, 하위 Branch로 연결된 노드의 깊이를 나타냄 | Parent Node: 어떤 노드의 다음 레벨에 연결된 노드 | Child Node: 어떤 노드의 상위 레벨에 연결된 노드 | Leaf Node (Terminal Node): Child Node가 하나도 없는 노드 | Sibling (Brother Node): 동일한 Parent Node를 가진 노드 | Depth: 트리에서 Node가 가질 수 있는 최대 Level | . 3. &#51060;&#51652; &#53944;&#47532;&#50752; &#51060;&#51652; &#53456;&#49353; &#53944;&#47532; (Binary Search Tree)&#182; . 이진 트리: 노드의 최대 Branch가 2인 트리 | 이진 탐색 트리 (Binary Search Tree, BST): 이진 트리에 다음과 같은 추가적인 조건이 있는 트리 왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 해당 노드보다 큰 값을 가지고 있음! | . | . . (출처: https://www.mathwarehouse.com/programming/gifs/binary-search-tree.php#binary-search-tree-insertion-node) . 4. &#51088;&#47308; &#44396;&#51312; &#51060;&#51652; &#53456;&#49353; &#53944;&#47532;&#51032; &#51109;&#51216;&#44284; &#51452;&#50836; &#50857;&#46020;&#182; . 주요 용도: 데이터 검색(탐색) | 장점: 탐색 속도를 개선할 수 있음 | . 단점은 이진 탐색 트리 알고리즘 이해 후에 살펴보기로 함 . &#51060;&#51652;&#53944;&#47532;&#50752; &#51221;&#47148;&#46108; &#48176;&#50676;&#44036;&#51032; &#53456;&#49353; &#48708;&#44368;&#182; . (출처: https://www.mathwarehouse.com/programming/gifs/binary-search-tree.php#binary-search-tree-insertion-node) . 5. &#54028;&#51060;&#50028; &#44061;&#52404;&#51648;&#54693; &#54532;&#47196;&#44536;&#47000;&#48141;&#51004;&#47196; &#47553;&#53356;&#46300; &#47532;&#49828;&#53944; &#44396;&#54788;&#54616;&#44592;&#182; . 5.1 &#45432;&#46300; &#53364;&#47000;&#49828; &#47564;&#46308;&#44592;&#182; . In&nbsp;[&nbsp;]: class Node: def __init__(self, value): self.value = value self.left = None self.right = None . 5.2 &#51060;&#51652; &#53456;&#49353; &#53944;&#47532;&#50640; &#45936;&#51060;&#53552; &#45347;&#44592;&#182; . 이진 탐색 트리 조건에 부합하게 데이터를 넣어야 함 | . In&nbsp;[&nbsp;]: class NodeMgmt: def __init__(self, head): self.head = head def insert(self, value): self.current_node = self.head while True: if value &lt; self.current_node.value: if self.current_node.left != None: self.current_node = self.current_node.left else: self.current_node.left = Node(value) break else: if self.current_node.right != None: self.current_node = self.current_node.right else: self.current_node.right = Node(value) break . In&nbsp;[&nbsp;]: head = Node(1) BST = NodeMgmt(head) BST.insert(2) . 5.3 &#51060;&#51652; &#53456;&#49353; &#53944;&#47532; &#53456;&#49353;&#182; . In&nbsp;[&nbsp;]: class NodeMgmt: def __init__(self, head): self.head = head def insert(self, value): self.current_node = self.head while True: if value &lt; self.current_node.value: if self.current_node.left != None: self.current_node = self.current_node.left else: self.current_node.left = Node(value) break else: if self.current_node.right != None: self.current_node = self.current_node.right else: self.current_node.right = Node(value) break def search(self, value): self.current_node = self.head while self.current_node: if self.current_node.value == value: return True elif value &lt; self.current_node.value: self.current_node = self.current_node.left else: self.current_node = self.current_node.right return False . In&nbsp;[&nbsp;]: head = Node(1) BST = NodeMgmt(head) BST.insert(2) BST.insert(3) BST.insert(0) BST.insert(4) BST.insert(8) . In&nbsp;[&nbsp;]: BST.search(-1) . 5.4 &#51060;&#51652; &#53456;&#49353; &#53944;&#47532; &#49325;&#51228;&#182; . 매우 복잡함. 경우를 나누어서 이해하는 것이 좋음 | . 5.4.1 Leaf Node &#49325;&#51228;&#182; . Leaf Node: Child Node 가 없는 Node | 삭제할 Node의 Parent Node가 삭제할 Node를 가리키지 않도록 한다. | . 5.4.2 Child Node &#44032; &#54616;&#45208;&#51064; Node &#49325;&#51228;&#182; . 삭제할 Node의 Parent Node가 삭제할 Node의 Child Node를 가리키도록 한다. | . 5.4.3 Child Node &#44032; &#46160; &#44060;&#51064; Node &#49325;&#51228;&#182; . 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다. | 삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다. | 5.4.3.1 &#49325;&#51228;&#54624; Node&#51032; &#50724;&#47480;&#51901; &#51088;&#49885;&#51473;, &#44032;&#51109; &#51089;&#51008; &#44050;&#51012; &#49325;&#51228;&#54624; Node&#51032; Parent Node&#44032; &#44032;&#47532;&#53412;&#44172; &#54624; &#44221;&#50864;&#182; . 삭제할 Node의 오른쪽 자식 선택 | 오른쪽 자식의 가장 왼쪽에 있는 Node를 선택 | 해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 함 | 해당 Node의 왼쪽 Branch가 삭제할 Node의 왼쪽 Child Node를 가리키게 함 | 해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함 | 만약 해당 Node가 오른쪽 Child Node를 가지고 있었을 경우에는, 해당 Node의 본래 Parent Node의 왼쪽 Branch가 해당 오른쪽 Child Node를 가리키게 함 | . 5.5 &#51060;&#51652; &#53456;&#49353; &#53944;&#47532; &#49325;&#51228; &#53076;&#46300; &#44396;&#54788;&#44284; &#48516;&#49437;&#182; . 5.5.1 &#49325;&#51228;&#54624; Node &#53456;&#49353;&#182; . 삭제할 Node가 없는 경우도 처리해야 함 이를 위해 삭제할 Node가 없는 경우는 False를 리턴하고, 함수를 종료 시킴 | . | . In&nbsp;[&nbsp;]: # def delete(self, value): searched = False self.current_node = self.head self.parent = self.head while self.current_node: if self.current_node.value == value: searched = True break elif value &lt; self.current_node.value: self.parent = self.current_node self.current_node = self.current_node.left else: self.parent = self.current_node self.current_node = self.current_node.right if searched == False: return False ### 이후부터 Case들을 분리해서, 코드 작성 . 5.5.2 Case1: &#49325;&#51228;&#54624; Node&#44032; Leaf Node&#51064; &#44221;&#50864;&#182; . In&nbsp;[&nbsp;]: # self.current_node 가 삭제할 Node, self.parent는 삭제할 Node의 Parent Node인 상태 if self.current_node.left == None and self.current_node.right == None: if value &lt; self.parent.value: self.parent.left = None else: self.parent.right = None del self.current_node . 5.5.2. Case2: &#49325;&#51228;&#54624; Node&#44032; Child Node&#47484; &#54620; &#44060; &#44032;&#51648;&#44256; &#51080;&#51012; &#44221;&#50864;&#182; . In&nbsp;[&nbsp;]: if self.current_node.left != None and self.current_node.right == None: if value &lt; self.parent.value: self.parent.left = self.current_node.left else: self.parent.right = self.current_node.left elif self.current_node.left == None and self.current_node.right != None: if value &lt; self.parent.value: self.parent.left = self.current_node.right else: self.parent.right = self.current_node.right . 5.5.3 Case3-1: &#49325;&#51228;&#54624; Node&#44032; Child Node&#47484; &#46160; &#44060; &#44032;&#51648;&#44256; &#51080;&#51012; &#44221;&#50864; (&#49325;&#51228;&#54624; Node&#44032; Parent Node &#50812;&#51901;&#50640; &#51080;&#51012; &#46412;)&#182; . 기본 사용 가능 전략 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다. | 삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다. | | 기본 사용 가능 전략 중, 1번 전략을 사용하여 코드를 구현하기로 함 경우의 수가 또다시 두가지가 있음 Case3-1-1: 삭제할 Node가 Parent Node의 왼쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 Child Node가 없을 때 | Case3-1-2: 삭제할 Node가 Parent Node의 왼쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 오른쪽에 Child Node가 있을 때 가장 작은 값을 가진 Node의 Child Node가 왼쪽에 있을 경우는 없음, 왜냐하면 왼쪽 Node가 있다는 것은 해당 Node보다 더 작은 값을 가진 Node가 있다는 뜻이기 때문임 | . | . | . | . . In&nbsp;[&nbsp;]: if self.current_node.left != None and self.current_node.right != None: # case3 if value &lt; self.parent.value: # case3-1 self.change_node = self.current_node.right self.change_node_parent = self.current_node.right while self.change_node.left != None: self.change_node_parent = self.change_node self.change_node = self.change_node.left if self.change_node.right != None: self.change_node_parent.left = self.change_node.right else: self.change_node_parent.left = None self.parent.left = self.change_node self.change_node.right = self.current_node.right self.change_node.left = self.change_node.left . 5.5.4 Case3-2: &#49325;&#51228;&#54624; Node&#44032; Child Node&#47484; &#46160; &#44060; &#44032;&#51648;&#44256; &#51080;&#51012; &#44221;&#50864; (&#49325;&#51228;&#54624; Node&#44032; Parent Node &#50724;&#47480;&#51901;&#50640; &#51080;&#51012; &#46412;)&#182; . 기본 사용 가능 전략 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다. | 삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다. | | 기본 사용 가능 전략 중, 1번 전략을 사용하여 코드를 구현하기로 함 경우의 수가 또다시 두가지가 있음 Case3-2-1: 삭제할 Node가 Parent Node의 오른쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 Child Node가 없을 때 | Case3-2-2: 삭제할 Node가 Parent Node의 오른쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 오른쪽에 Child Node가 있을 때 가장 작은 값을 가진 Node의 Child Node가 왼쪽에 있을 경우는 없음, 왜냐하면 왼쪽 Node가 있다는 것은 해당 Node보다 더 작은 값을 가진 Node가 있다는 뜻이기 때문임 | . | . | . | . . In&nbsp;[&nbsp;]: else: self.change_node = self.current_node.right self.change_node_parent = self.current_node.right while self.change_node.left != None: self.change_node_parent = self.change_node self.change_node = self.change_node.left if self.change_node.right != None: self.change_node_parent.left = self.change_node.right else: self.change_node_parent.left = None self.parent.right = self.change_node self.change_node.left = self.current_node.left self.change_node.right = self.current_node.right . 5.5.5 &#54028;&#51060;&#50028; &#51204;&#52404; &#53076;&#46300; &#44396;&#54788;&#182; . In&nbsp;[15]: class Node: def __init__(self, value): self.value = value self.left = None self.right = None class NodeMgmt: def __init__(self, head): self.head = head def insert(self, value): self.current_node = self.head while True: if value &lt; self.current_node.value: if self.current_node.left != None: self.current_node = self.current_node.left else: self.current_node.left = Node(value) break else: if self.current_node.right != None: self.current_node = self.current_node.right else: self.current_node.right = Node(value) break def search(self, value): self.current_node = self.head while self.current_node: if self.current_node.value == value: return True elif value &lt; self.current_node.value: self.current_node = self.current_node.left else: self.current_node = self.current_node.right return False def delete(self, value): # 삭제할 노드 탐색 searched = False self.current_node = self.head self.parent = self.head while self.current_node: if self.current_node.value == value: searched = True break elif value &lt; self.current_node.value: self.parent = self.current_node self.current_node = self.current_node.left else: self.parent = self.current_node self.current_node = self.current_node.right if searched == False: return False # case1 if self.current_node.left == None and self.current_node.right == None: if value &lt; self.parent.value: self.parent.left = None else: self.parent.right = None # case2 elif self.current_node.left != None and self.current_node.right == None: if value &lt; self.parent.value: self.parent.left = self.current_node.left else: self.parent.right = self.current_node.left elif self.current_node.left == None and self.current_node.right != None: if value &lt; self.parent.value: self.parent.left = self.current_node.right else: self.parent.right = self.current_node.right # case 3 elif self.current_node.left != None and self.current_node.right != None: # case3-1 if value &lt; self.parent.value: self.change_node = self.current_node.right self.change_node_parent = self.current_node.right while self.change_node.left != None: self.change_node_parent = self.change_node self.change_node = self.change_node.left if self.change_node.right != None: self.change_node_parent.left = self.change_node.right else: self.change_node_parent.left = None self.parent.left = self.change_node self.change_node.right = self.current_node.right self.change_node.left = self.change_node.left # case 3-2 else: self.change_node = self.current_node.right self.change_node_parent = self.current_node.right while self.change_node.left != None: self.change_node_parent = self.change_node self.change_node = self.change_node.left if self.change_node.right != None: self.change_node_parent.left = self.change_node.right else: self.change_node_parent.left = None self.parent.right = self.change_node self.change_node.right = self.current_node.right self.change_node.left = self.current_node.left return True . 참고: http://ejklike.github.io/2018/01/09/traversing-a-binary-tree-1.html . 5.5.6 &#54028;&#51060;&#50028; &#51204;&#52404; &#53076;&#46300; &#53580;&#49828;&#53944;&#182; . random 라이브러리 활용 random.randint(첫번째 숫자, 마지막 숫자): 첫번째 숫자부터 마지막 숫자 사이에 있는 숫자를 랜덤하게 선택해서 리턴 예: random.randint(0, 99): 0에서 99까지 숫자중 특정 숫자를 랜덤하게 선택해서 리턴해줌 | . | . | . In&nbsp;[19]: # 0 ~ 999 숫자 중에서 임의로 100개를 추출해서, 이진 탐색 트리에 입력, 검색, 삭제 import random # 0 ~ 999 중, 100 개의 숫자 랜덤 선택 bst_nums = set() while len(bst_nums) != 100: bst_nums.add(random.randint(0, 999)) # print (bst_nums) # 선택된 100개의 숫자를 이진 탐색 트리에 입력, 임의로 루트노드는 500을 넣기로 함 head = Node(500) binary_tree = NodeMgmt(head) for num in bst_nums: binary_tree.insert(num) # 입력한 100개의 숫자 검색 (검색 기능 확인) for num in bst_nums: if binary_tree.search(num) == False: print (&#39;search failed&#39;, num) # 입력한 100개의 숫자 중 10개의 숫자를 랜덤 선택 delete_nums = set() bst_nums = list(bst_nums) while len(delete_nums) != 10: delete_nums.add(bst_nums[random.randint(0, 99)]) # 선택한 10개의 숫자를 삭제 (삭제 기능 확인) for del_num in delete_nums: if binary_tree.delete(del_num) == False: print(&#39;delete failed&#39;, del_num) . 6. &#51060;&#51652; &#53456;&#49353; &#53944;&#47532;&#51032; &#49884;&#44036; &#48373;&#51105;&#46020;&#50752; &#45800;&#51216;&#182; . 6.1 &#49884;&#44036; &#48373;&#51105;&#46020; (&#53456;&#49353;&#49884;)&#182; . depth (트리의 높이) 를 h라고 표기한다면, O(h) | n개의 노드를 가진다면, $h = log_2{n} $ 에 가까우므로, 시간 복잡도는 $ O(log{n}) $ 참고: 빅오 표기법에서 $log{n}$ 에서의 log의 밑은 10이 아니라, 2입니다. 한번 실행시마다, 50%의 실행할 수도 있는 명령을 제거한다는 의미. 즉 50%의 실행시간을 단축시킬 수 있다는 것을 의미함 | . | . | . (출처: https://www.mathwarehouse.com/programming/gifs/binary-search-tree.php#binary-search-tree-insertion-node) . 6.2 &#51060;&#51652; &#53456;&#49353; &#53944;&#47532; &#45800;&#51216;&#182; . 평균 시간 복잡도는 $ O(log{n}) $ 이지만, 이는 트리가 균형잡혀 있을 때의 평균 시간복잡도이며, | . | 다음 예와 같이 구성되어 있을 경우, 최악의 경우는 링크드 리스트등과 동일한 성능을 보여줌 ( $O(n)$ ) | . .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/22/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%8A%B8%EB%A6%AC_(Tree).html",
            "relUrl": "/algorithm/2020/01/22/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%8A%B8%EB%A6%AC_(Tree).html",
            "date": " • Jan 22, 2020"
        }
        
    
  
    
        ,"post69": {
            "title": "[PySpark] Spark DataFrame",
            "content": "Spark DataFrame 생성 . from datetime import datetime raw = sqlContext.read.format(&quot;parquet&quot;).load(&quot;s3://spotify-folder/top-tracks/dt=2020-01-29/top-tracks.parquet&quot;) # raw = sqlContext.read.format(&quot;parquet&quot;).load(&quot;s3://spotify-folder/top-tracks/dt={}/top-tracks.parquet&quot;.format(dt)) # data = sc.textFile(&quot;text.txt&quot;) raw.printSchema() . root |-- artist_id: string (nullable = true) |-- external_url: array (nullable = true) | |-- element: string (containsNull = true) |-- id: array (nullable = true) | |-- element: string (containsNull = true) |-- name: array (nullable = true) | |-- element: string (containsNull = true) |-- popularity: array (nullable = true) | |-- element: long (containsNull = true) . df = raw.toDF(&quot;id&quot;, &quot;artist_id&quot;, &quot;name&quot;, &quot;popularity&quot;, &quot;external_url&quot;) df.show() . +--+--+--+--++ | id| artist_id| name| popularity|external_url| +--+--+--+--++ |00FQb4jTyendYWaN8...|[https://open.spo...|[6zegtH6XXd2PDPLv...|[Don’t Call Me An...| [82]| |00FQb4jTyendYWaN8...|[https://open.spo...|[6zegtH6XXd2PDPLv...|[Don’t Call Me An...| [82]| |00FQb4jTyendYWaN8...|[https://open.spo...|[6zegtH6XXd2PDPLv...|[Don’t Call Me An...| [82]| |00FQb4jTyendYWaN8...|[https://open.spo...|[6zegtH6XXd2PDPLv...|[Don’t Call Me An...| [82]| |00FQb4jTyendYWaN8...|[https://open.spo...|[0Oqc0kKFsQ6MhFOL...| [Doin&#39; Time]| [78]| |00FQb4jTyendYWaN8...|[https://open.spo...|[0Oqc0kKFsQ6MhFOL...| [Doin&#39; Time]| [78]| |00FQb4jTyendYWaN8...|[https://open.spo...|[0Oqc0kKFsQ6MhFOL...| [Doin&#39; Time]| [78]| |00FQb4jTyendYWaN8...|[https://open.spo...|[0Oqc0kKFsQ6MhFOL...| [Doin&#39; Time]| [78]| |00FQb4jTyendYWaN8...|[https://open.spo...|[2nMeu6UenVvwUktB...|[Young And Beauti...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[2nMeu6UenVvwUktB...|[Young And Beauti...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[2nMeu6UenVvwUktB...|[Young And Beauti...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[2nMeu6UenVvwUktB...|[Young And Beauti...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[3RIgHHpnFKj5Rni1...|[Norman fucking R...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[3RIgHHpnFKj5Rni1...|[Norman fucking R...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[3RIgHHpnFKj5Rni1...|[Norman fucking R...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[3RIgHHpnFKj5Rni1...|[Norman fucking R...| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[7MtVPRGtZl6rPjMf...|[Fuck it I love you]| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[7MtVPRGtZl6rPjMf...|[Fuck it I love you]| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[7MtVPRGtZl6rPjMf...|[Fuck it I love you]| [75]| |00FQb4jTyendYWaN8...|[https://open.spo...|[7MtVPRGtZl6rPjMf...|[Fuck it I love you]| [75]| +--+--+--+--++ only showing top 20 rows . raw = sqlContext.read.format(&quot;parquet&quot;).load(&quot;s3://spotify-folder/audio-features/dt=2020-01-29/top-tracks.parquet&quot;) raw.printSchema() . root |-- acousticness: double (nullable = true) |-- analysis_url: string (nullable = true) |-- danceability: double (nullable = true) |-- duration_ms: long (nullable = true) |-- energy: double (nullable = true) |-- id: string (nullable = true) |-- instrumentalness: double (nullable = true) |-- key: long (nullable = true) |-- liveness: double (nullable = true) |-- loudness: double (nullable = true) |-- mode: long (nullable = true) |-- speechiness: double (nullable = true) |-- tempo: double (nullable = true) |-- time_signature: long (nullable = true) |-- track_href: string (nullable = true) |-- type: string (nullable = true) |-- uri: string (nullable = true) |-- valence: double (nullable = true) .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/21/Pyspark-DataFrame.html",
            "relUrl": "/spark/2020/01/21/Pyspark-DataFrame.html",
            "date": " • Jan 21, 2020"
        }
        
    
  
    
        ,"post70": {
            "title": "[PySpark] Spark rdd",
            "content": "&lt;!DOCTYPE html&gt; . 2020-01-20-PySpark-Spark_rdd . &#44592;&#51316; python &#48169;&#49885;&#182; . In&nbsp;[4]: import json raw = &#39;{&quot;name&quot;: &quot;Drake&quot;}&#39; print(json.loads(raw)[&#39;name&#39;]) . Drake . In&nbsp;[6]: raw = [&#39;{&quot;name&quot;: &quot;Drake&quot;}&#39;, &#39;{&quot;name&quot;: &quot;Travis Scott&quot;}&#39;, &#39;{&quot;name&quot;: &quot;Post Malone&quot;}&#39;] for entry in raw: print(json.loads(entry)[&#39;name&#39;]) . Drake Travis Scott Post Malone . PySpark rdd &#48169;&#49885;&#182; . In&nbsp;[14]: # 3개의 데이터를 쪼개서 rdd를 만듬 rdd = sc.parallelize(raw) rdd.count() . Out[14]: 3 . In&nbsp;[15]: # json.loads function mapping rdd.map(json.loads).map(lambda entry: entry[&#39;name&#39;]).collect() . Out[15]: [&#39;Drake&#39;, &#39;Travis Scott&#39;, &#39;Post Malone&#39;] . In&nbsp;[16]: rdd.map(json.loads).map(lambda entry: entry[&#39;name&#39;]).count() . Out[16]: 3 . .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/20/PySpark-Spark_rdd.html",
            "relUrl": "/spark/2020/01/20/PySpark-Spark_rdd.html",
            "date": " • Jan 20, 2020"
        }
        
    
  
    
        ,"post71": {
            "title": "[자료구조] 해쉬 테이블 (Hash Table)",
            "content": "&lt;!DOCTYPE html&gt; . 2020-01-19-자료구조-해쉬_테이블_(Hash_Table) . &#45824;&#54364;&#51201;&#51064; &#51088;&#47308;&#44396;&#51312;: &#54644;&#49772; &#53580;&#51060;&#48660; (Hash Table)&#182; . 1. &#54644;&#49772; &#44396;&#51312;&#182; . Hash Table: 키(Key)에 데이터(Value)를 저장하는 데이터 구조 Key를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라짐 | 파이썬 딕셔너리(Dictionary) 타입이 해쉬 테이블의 예: Key를 가지고 바로 데이터(Value)를 꺼냄 | 보통 배열로 미리 Hash Table 사이즈만큼 생성 후에 사용 (공간과 탐색 시간을 맞바꾸는 기법) | 단, 파이썬에서는 해쉬를 별도 구현할 이유가 없음 - 딕셔너리 타입을 사용하면 됨 | . | . 2. &#50508;&#50500;&#46168; &#50857;&#50612;&#182; . 해쉬(Hash): 임의 값을 고정 길이로 변환하는 것 | 해쉬 테이블(Hash Table): 키 값의 연산에 의해 직접 접근이 가능한 데이터 구조 | 해싱 함수(Hashing Function): Key에 대해 산술 연산을 이용해 데이터 위치를 찾을 수 있는 함수 | 해쉬 값(Hash Value) 또는 해쉬 주소(Hash Address): Key를 해싱 함수로 연산해서, 해쉬 값을 알아내고, 이를 기반으로 해쉬 테이블에서 해당 Key에 대한 데이터 위치를 일관성있게 찾을 수 있음 | 슬롯(Slot): 한 개의 데이터를 저장할 수 있는 공간 | 저장할 데이터에 대해 Key를 추출할 수 있는 별도 함수도 존재할 수 있음 | . 3. &#44036;&#45800;&#54620; &#54644;&#49772; &#50696;&#182; . 3.1 hash table &#47564;&#46308;&#44592;&#182; . In&nbsp;[15]: hash_table = list([i for i in range(10)]) hash_table . Out[15]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . 3.2 &#54644;&#49772; &#54632;&#49688; &#49373;&#49457;&#182; . 다양한 해쉬 함수 고안 기법이 있으며, 가장 간단한 방식이 Division 법 (나누기를 통한 나머지 값을 사용하는 기법) | . In&nbsp;[16]: def hash_func(key): return key % 5 . 3.3 &#54644;&#49772; &#53580;&#51060;&#48660;&#50640; &#51200;&#51109;&#182; . 데이터에 따라 필요시 key 생성 방법 정의가 필요함 | . In&nbsp;[17]: data1 = &#39;Andy&#39; data2 = &#39;Dave&#39; data3 = &#39;Trump&#39; data4 = &#39;Anthor&#39; ## ord(): 문자의 ASCII(아스키)코드 리턴 print(ord(data1[0]), ord(data2[0]), ord(data3[0])) print(ord(data1[0]), hash_func(ord(data1[0]))) print(ord(data1[0]), ord(data4[0])) . 65 68 84 65 0 65 65 . &#54644;&#49772; &#53580;&#51060;&#48660;&#50640; &#44050; &#51200;&#51109; &#50696;&#182; . data:value 와 같이 data 와 value를 넣으면, 해당 data에 대한 key를 찾아서, 해당 key에 대응하는 해쉬주소에 value를 저장하는 예 | . In&nbsp;[13]: def storage_data(data, value): key = ord(data[0]) hash_address = hash_func(key) hash_table[hash_address] = value . 3.4 &#54644;&#49772; &#53580;&#51060;&#48660;&#50640;&#49436; &#53945;&#51221; &#51452;&#49548;&#51032; &#45936;&#51060;&#53552;&#47484; &#44032;&#51256;&#50724;&#45716; &#54632;&#49688;&#182; . In&nbsp;[18]: storage_data(&#39;Andy&#39;, &#39;01055553333&#39;) storage_data(&#39;Dave&#39;, &#39;01044443333&#39;) storage_data(&#39;Trump&#39;, &#39;01022223333&#39;) . 3.5 &#49892;&#51228; &#45936;&#51060;&#53552;&#47484; &#51200;&#51109;&#182; . In&nbsp;[19]: def get_data(data): key = ord(data[0]) hash_address = hash_func(key) return hash_table[hash_address] . In&nbsp;[21]: get_data(&#39;Andy&#39;) . Out[21]: &#39;01055553333&#39; . 4. &#51088;&#47308; &#44396;&#51312; &#54644;&#49772; &#53580;&#51060;&#48660;&#51032; &#51109;&#45800;&#51216;&#44284; &#51452;&#50836; &#50857;&#46020;&#182; . 장점 데이터 저장/읽기 속도가 빠르다. (검색 속도가 빠르다.) | 해쉬는 키에 대한 데이터가 있는지(중복) 확인이 쉬움 | . | 단점 일반적으로 저장공간이 좀더 많이 필요하다. | 여러 키에 해당하는 주소가 동일할 경우 충돌을 해결하기 위한 별도 자료구조가 필요함 | . | 주요 용도 검색이 많이 필요한 경우 | 저장, 삭제, 읽기가 빈번한 경우 | 캐쉬 구현시 (중복 확인이 쉽기 때문) | . | . 5. &#54532;&#47196;&#44536;&#47000;&#48141; &#50672;&#49845;&#182; . &#50672;&#49845;1: &#47532;&#49828;&#53944; &#48320;&#49688;&#47484; &#54876;&#50857;&#54644;&#49436; &#54644;&#49772; &#53580;&#51060;&#48660; &#44396;&#54788;&#54644;&#48372;&#44592;&#182; . 해쉬 함수: key % 8 | 해쉬 키 생성: hash(data) | In&nbsp;[27]: hash_table = list([0 for i in range(8)]) def get_key(data): return hash(data) def hash_function(key): return key % 8 def save_data(data, value): hash_address = hash_function(get_key(data)) hash_table[hash_address] = value def read_data(data): hash_address = hash_function(get_key(data)) return hash_table[hash_address] . In&nbsp;[28]: save_data(&#39;Dave&#39;, &#39;0102030200&#39;) save_data(&#39;Andy&#39;, &#39;01033232200&#39;) read_data(&#39;Dave&#39;) . Out[28]: &#39;0102030200&#39; . In&nbsp;[29]: hash_table . Out[29]: [0, 0, &#39;0102030200&#39;, &#39;01033232200&#39;, 0, 0, 0, 0] . 6. &#52649;&#46028;(Collision) &#54644;&#44208; &#50508;&#44256;&#47532;&#51608; (&#51339;&#51008; &#54644;&#49772; &#54632;&#49688; &#49324;&#50857;&#54616;&#44592;)&#182; . 해쉬 테이블의 가장 큰 문제는 충돌(Collision)의 경우 | 이 문제를 충돌(Collision) 또는 해쉬 충돌(Hash Collision)이라고 부름 | . 6.1 Chaining &#44592;&#48277;&#182; . 개방 해슁 또는 Open Hashing 기법 중 하나: 해쉬 테이블 저장공간 외의 공간을 활용하는 기법 | 충돌이 일어나면, 링크드 리스트라는 자료 구조를 사용해서, 링크드 리스트로 데이터를 추가로 뒤에 연결시켜서 저장하는 기법 | . &#50672;&#49845;2: &#50672;&#49845;1&#51032; &#54644;&#49772; &#53580;&#51060;&#48660; &#53076;&#46300;&#50640; Chaining &#44592;&#48277;&#51004;&#47196; &#52649;&#46028;&#54644;&#44208; &#53076;&#46300;&#47484; &#52628;&#44032;&#54644;&#48372;&#44592;&#182; . 해쉬 함수: key % 8 | 해쉬 키 생성: hash(data) | In&nbsp;[41]: hash_table = list([0 for i in range(8)]) def get_key(data): return hash(data) def hash_function(key): return key % 8 def save_data(data, value): index_key = get_key(data) hash_address = hash_function(index_key) if hash_table[hash_address] != 0: for index in range(len(hash_table[hash_address])): if hash_table[hash_address][index][0] == index_key: hash_table[hash_address][index][1] = value return hash_table[hash_address].append([index_key, value]) else: hash_table[hash_address] = [[index_key, value]] def read_data(data): index_key = get_key(data) hash_address = hash_function(index_key) if hash_table[hash_address] != 0: for index in range(len(hash_table[hash_address])): if hash_table[hash_address][index][0] == index_key: return hash_table[hash_address][index][1] return None else: return None . In&nbsp;[45]: print (hash(&#39;Dave&#39;) % 8) print (hash(&#39;Dd&#39;) % 8) print (hash(&#39;Data&#39;) % 8) . 2 0 4 . In&nbsp;[43]: save_data(&#39;Dd&#39;, &#39;1201023010&#39;) save_data(&#39;Data&#39;, &#39;3301023010&#39;) read_data(&#39;Dd&#39;) . Out[43]: &#39;1201023010&#39; . In&nbsp;[44]: hash_table . Out[44]: [[[-5625120649288497088, &#39;1201023010&#39;]], 0, 0, 0, [[-5435802071562264372, &#39;3301023010&#39;]], 0, 0, 0] . 6.2 Linear Probing &#44592;&#48277;&#182; . 폐쇄 해슁 또는 Close Hashing 기법 중 하나: 해쉬 테이블 저장공간 안에서 충돌 문제를 해결하는 기법 | 충돌이 일어나면, 해당 hash address의 다음 address부터 맨 처음 나오는 빈공간에 저장하는 기법 저장공간 활용도를 높이기 위한 기법 | . | . &#50672;&#49845;3: &#50672;&#49845;1&#51032; &#54644;&#49772; &#53580;&#51060;&#48660; &#53076;&#46300;&#50640; Linear Probling &#44592;&#48277;&#51004;&#47196; &#52649;&#46028;&#54644;&#44208; &#53076;&#46300;&#47484; &#52628;&#44032;&#54644;&#48372;&#44592;&#182; . 해쉬 함수: key % 8 | 해쉬 키 생성: hash(data) | In&nbsp;[6]: hash_table = list([0 for i in range(8)]) def get_key(data): return hash(data) def hash_function(key): return key % 8 def save_data(data, value): index_key = get_key(data) hash_address = hash_function(index_key) if hash_table[hash_address] != 0: for index in range(hash_address, len(hash_table)): if hash_table[index] == 0: hash_table[index] = [index_key, value] return elif hash_table[index][0] == index_key: hash_table[index][1] = value return else: hash_table[hash_address] = [index_key, value] def read_data(data): index_key = get_key(data) hash_address = hash_function(index_key) if hash_table[hash_address] != 0: for index in range(hash_address, len(hash_table)): if hash_table[index] == 0: return None elif hash_table[index][0] == index_key: return hash_table[index][1] else: return None . In&nbsp;[9]: print(hash(&#39;dk&#39;) % 8) print(hash(&#39;da&#39;) % 8) print(hash(&#39;dc&#39;) % 8) . 5 0 6 . In&nbsp;[8]: save_data(&#39;dk&#39;, &#39;01200123123&#39;) save_data(&#39;da&#39;, &#39;3333333333&#39;) read_data(&#39;dk&#39;) . Out[8]: &#39;01200123123&#39; . 6.3 &#48712;&#48264;&#54620; &#52649;&#46028;&#51012; &#44060;&#49440;&#54616;&#45716; &#44592;&#48277;&#182; . 해쉬 함수을 재정의 및 해쉬 테이블 저장공간을 확대 | 예: | . hash_table = list([None for i in range(16)]) def hash_function(key): return key % 16 . &#52280;&#44256;: &#54644;&#49772; &#54632;&#49688;&#50752; &#53412; &#49373;&#49457; &#54632;&#49688;&#182; . 파이썬의 hash() 함수는 실행할 때마다, 값이 달라질 수 있음 | 유명한 해쉬 함수들이 있음: SHA(Secure Hash Algorithm, 안전한 해시 알고리즘) 어떤 데이터도 유일한 고정된 크기의 고정값을 리턴해주므로, 해쉬 함수로 유용하게 활용 가능 | . | . SHA-1&#182; . In&nbsp;[13]: import hashlib data = &#39;test&#39;.encode() # b&#39;test&#39; hash_object = hashlib.sha1() hash_object.update(data) hex_dig = hash_object.hexdigest() # 16진수 print(hex_dig) . a94a8fe5ccb19ba61c4c0873d391e987982fbbd3 . SHA-256&#182; . In&nbsp;[14]: import hashlib data = &#39;test&#39;.encode() hash_object = hashlib.sha256() hash_object.update(data) hex_dig = hash_object.hexdigest() print(hex_dig) . 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 . 연습4: 연습2의 Chaining 기법을 적용한 해쉬 테이블 코드에 키 생성 함수를 sha256 해쉬 알고리즘을 사용하도록 변경해보기&lt;/strong&gt; . 해쉬 함수: key % 8 | 해쉬 키 생성: hash(data) | In&nbsp;[15]: import hashlib hash_table = list([0 for i in range(8)]) def get_key(data): hash_object = hashlib.sha256() hash_object.update(data.encode()) hex_dig = hash_object.hexdigest() return int(hex_dig, 16) def hash_function(key): return key % 8 def save_data(data, value): index_key = get_key(data) hash_address = hash_function(index_key) if hash_table[hash_address] != 0: for index in range(hash_address, len(hash_table)): if hash_table[index] == 0: hash_table[index] = [index_key, value] return elif hash_table[index][0] == index_key: hash_table[index][1] = value return else: hash_table[hash_address] = [index_key, value] def read_data(data): index_key = get_key(data) hash_address = hash_function(index_key) if hash_table[hash_address] != 0: for index in range(hash_address, len(hash_table)): if hash_table[index] == 0: return None elif hash_table[index][0] == index_key: return hash_table[index][1] else: return None . In&nbsp;[17]: print(get_key(&#39;db&#39;) % 8) print(get_key(&#39;da&#39;) % 8) print(get_key(&#39;dh&#39;) % 8) . 1 2 2 . In&nbsp;[18]: save_data(&#39;da&#39;, &#39;01200123123&#39;) save_data(&#39;dh&#39;, &#39;3333333333&#39;) read_data(&#39;dh&#39;) . Out[18]: &#39;3333333333&#39; . 7. &#49884;&#44036; &#48373;&#51105;&#46020;&#182; . 일반적인 경우(Collision이 없는 경우)는 O(1) | 최악의 경우(Collision이 모두 발생하는 경우)는 O(n) | . 해쉬 테이블의 경우, 일반적인 경우를 기대하고 만들기 때문에, 시간 복잡도는 O(1) 이라고 말할 수 있음 . &#44160;&#49353;&#50640;&#49436; &#54644;&#49772; &#53580;&#51060;&#48660;&#51032; &#49324;&#50857; &#50696;&#182; . 16개의 배열에 데이터를 저장하고, 검색할 때 O(n) | 16개의 데이터 저장공간을 가진 위의 해쉬 테이블에 데이터를 저장하고, 검색할 때 O(1) | . .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/19/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%95%B4%EC%89%AC_%ED%85%8C%EC%9D%B4%EB%B8%94_(Hash_Table).html",
            "relUrl": "/algorithm/2020/01/19/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%95%B4%EC%89%AC_%ED%85%8C%EC%9D%B4%EB%B8%94_(Hash_Table).html",
            "date": " • Jan 19, 2020"
        }
        
    
  
    
        ,"post72": {
            "title": "[자료구조] 링크드 리스트 (Linked List)",
            "content": "&lt;!DOCTYPE html&gt; . 2020-01-19-링크드_리스트_(Linked_List) . &#45824;&#54364;&#51201;&#51064; &#51088;&#47308;&#44396;&#51312;: &#47553;&#53356;&#46300; &#47532;&#49828;&#53944; (Linked List)&#182; . 1. &#47553;&#53356;&#46300; &#47532;&#49828;&#53944; (Linked List) &#44396;&#51312;&#182; . 연결 리스트라고도 함 | 배열은 순차적으로 연결된 공간에 데이터를 나열하는 데이터 구조 | 링크드 리스트는 떨어진 곳에 존재하는 데이터를 화살표로 연결해서 관리하는 데이터 구조 | 본래 C언어에서는 주요한 데이터 구조이지만, 파이썬은 리스트 타입이 링크드 리스트의 기능을 모두 지원 | 링크드 리스트 기본 구조와 용어 노드(Node): 데이터 저장 단위 (데이터값, 포인터)로 구성 | 포인터(Pointer): 각 노드 안에서, 다음이나 이전의 노드와의 연결 정보를 가지고 있는 공간 | . | . 2. &#44036;&#45800;&#54620; &#47553;&#53356;&#46300; &#47532;&#49828;&#53944; &#50696;&#182; . Node &#44396;&#54788;&#182; . 보통 파이썬에서 링크드 리스트 구현시, 파이썬 클래스를 활용함 파이썬 객체지향 문법 이해 필요 | . | . In&nbsp;[&nbsp;]: class Node: def __init__(self, data): self.data = data self.next = None . In&nbsp;[&nbsp;]: class Node: def __init__(self, data, next=None): self.data = data self.next = next . Node&#50752; Node &#50672;&#44208;&#54616;&#44592; (&#54252;&#51064;&#53552; &#54876;&#50857;)&#182; . In&nbsp;[&nbsp;]: node1 = Node(1) node2 = Node(2) node1.next = node2 head = node1 . &#47553;&#53356;&#46300; &#47532;&#49828;&#53944;&#47196; &#45936;&#51060;&#53552; &#52628;&#44032;&#54616;&#44592;&#182; . In&nbsp;[&nbsp;]: class Node: def __init__(self, data, next=None): self.data = data self.next = next def add(data): node = head while node.next: node = node.next node.next = Node(data) . In&nbsp;[&nbsp;]: node1 = Node(1) head = node1 for index in range(2, 10): Node.add(index) . In&nbsp;[&nbsp;]: for i in range(2, 10): print(i) . &#47553;&#53356;&#46300; &#47532;&#49828;&#53944; &#45936;&#51060;&#53552; &#52636;&#47141;&#54616;&#44592; (&#44160;&#49353;&#54616;&#44592;)&#182; . In&nbsp;[&nbsp;]: node = head while node.next: print(node.data) node = node.next print(node.data) . 3. &#47553;&#53356;&#46300; &#47532;&#49828;&#53944;&#51032; &#51109;&#45800;&#51216; (&#51204;&#53685;&#51201;&#51064; C&#50616;&#50612;&#50640;&#49436;&#51032; &#48176;&#50676;&#44284; &#47553;&#53356;&#46300; &#47532;&#49828;&#53944;)&#182; . 장점 미리 데이터 공간을 할당하지 않아됨 배열은 미리 데이터 공간을 할당해야 함 | . | . | 단점 연결을 위한 별도 데이터 공간이 필요하므로, 저장공간 효율이 높지 않음 | 연결 정보를 찾는 시간이 필요하므로 접근 속도가 느림 | 중간 데이터 삭제시, 앞뒤 데이터의 연결을 재구성해야 하는 부가적인 작업 필요 | . | . 4. &#47553;&#53356;&#46300; &#47532;&#49828;&#53944;&#51032; &#48373;&#51105;&#54620; &#44592;&#45733;1 (&#47553;&#53356;&#46300; &#47532;&#49828;&#53944; &#45936;&#51060;&#53552; &#49324;&#51060;&#50640; &#45936;&#51060;&#53552;&#47484; &#52628;&#44032;)&#182; . 링크드 리스트는 유지관리에 부가적인 구현이 필요함 | . In&nbsp;[&nbsp;]: node = head while node.next: print(node.data) node = node.next print(node.data) . In&nbsp;[&nbsp;]: node3 = Node(1.5) . In&nbsp;[&nbsp;]: node = head search = True while search: if node.data == 1: search = False else: node = node.next node_next = node.next node.next = node3 node3.next = node_next . In&nbsp;[&nbsp;]: node = head while node.next: print(node.data) node = node.next print(node.data) . 5. &#54028;&#51060;&#50028; &#44061;&#52404;&#51648;&#54693; &#54532;&#47196;&#44536;&#47000;&#48141;&#51004;&#47196; &#47553;&#53356;&#46300; &#47532;&#49828;&#53944; &#44396;&#54788;&#54616;&#44592;&#182; . In&nbsp;[26]: class Node: def __init__(self, data, next = None): self.data = data self.next = next class NodeMgmt: def __init__(self, data): self.head = Node(data) def add(self, data): if self.head == &quot;&quot;: self.head = Node(data) else: node = self.head while node.next: node = node.next node.next = Node(data) def desc(self): node = self.head while node: print(node.data) node = node.next . In&nbsp;[27]: linkedlist1 = NodeMgmt(0) linkedlist1.desc() . 0 . In&nbsp;[28]: for data in range(1, 10): linkedlist1.add(data) linkedlist1.desc() . 0 1 2 3 4 5 6 7 8 9 . 6. &#47553;&#53356;&#46300; &#47532;&#49828;&#53944;&#51032; &#48373;&#51105;&#54620; &#44592;&#45733;2 (&#53945;&#51221; &#45432;&#46300;&#47484; &#49325;&#51228;)&#182; . 다음 코드는 위에 코드에서 delete 매서드만 추가한 것이므로 해당 매서드를 확인하면 됨 | . In&nbsp;[32]: class Node: def __init__(self, data, next = None): self.data = data self.next = next class NodeMgmt: def __init__(self, data): self.head = Node(data) def add(self, data): if self.head == &quot;&quot;: self.head = Node(data) else: node = self.head while node.next: node = node.next node.next = Node(data) def desc(self): node = self.head while node: print(node.data) node = node.next def delete(self, data): if self.head == &quot;&quot;: print(&quot;해당 값을 가진 노드가 없습니다&quot;) return if self.head.data == data: temp = self.head self.head = self.head.next del temp else: node = self.head while node.next: if node.next.data == data: temp = node.next node.next = node.next.next del temp else: node = node.next . &#53580;&#49828;&#53944;&#47484; &#50948;&#54644; 1&#44060; &#45432;&#46300;&#47484; &#47564;&#46308;&#50612; &#48388;&#182; . In&nbsp;[34]: linkedlist1 = NodeMgmt(0) linkedlist1.desc() . 0 . head&#44032; &#49332;&#50500;&#51080;&#51020;&#51012; &#54869;&#51064;&#182; . In&nbsp;[35]: linkedlist1.head . Out[35]: &lt;__main__.Node at 0x117263a90&gt; . head&#47484; &#51648;&#50892;&#48388;(&#50948;&#50640;&#49436; &#50616;&#44553;&#54620; &#44221;&#50864;&#51032; &#49688;1)&#182; . In&nbsp;[36]: linkedlist1.delete(0) . &#45796;&#51020; &#53076;&#46300; &#49892;&#54665;&#49884; &#50500;&#47924;&#44163;&#46020; &#50504;&#45208;&#50728; &#45796;&#45716; &#44163;&#51008; linkedlist1.head&#44032; &#51221;&#49345;&#51201;&#51004;&#47196; &#49325;&#51228;&#46104;&#50632;&#51020;&#51012; &#51032;&#48120;&#182; . In&nbsp;[37]: linkedlist1.head . &#45796;&#49884; &#54616;&#45208;&#51032; &#45432;&#46300;&#47484; &#47564;&#46308;&#50612; &#48388;&#182; . In&nbsp;[38]: linkedlist1 = NodeMgmt(0) linkedlist1.desc() . 0 . &#51060;&#48264;&#50644; &#50668;&#47084; &#45432;&#46300;&#47484; &#45908; &#52628;&#44032;&#54644; &#48388;&#182; . In&nbsp;[39]: for data in range(1, 10): linkedlist1.add(data) linkedlist1.desc() . 0 1 2 3 4 5 6 7 8 9 . &#45432;&#46300; &#51473;&#50640; &#54620;&#44060;&#47484; &#45908; &#49325;&#51228;&#54632; (&#50948;&#50640;&#49436; &#50616;&#44553;&#54620;)&#182; . In&nbsp;[40]: linkedlist1.delete(4) . In&nbsp;[41]: linkedlist1.desc() . 0 1 2 3 5 6 7 8 9 . In&nbsp;[42]: linkedlist1.delete(9) . In&nbsp;[43]: linkedlist1.desc() . 0 1 2 3 5 6 7 8 . 7. &#45796;&#50577;&#54620; &#47553;&#53356;&#46300; &#47532;&#49828;&#53944; &#44396;&#51312;&#182; . 더블 링크드 리스트(Doubly linked list) 기본 구조 이중 연결 리스트라고도 함 | 장점: 양방향으로 연결되어 있어서 노드 탐색이 양쪽으로 모두 가능 | . | . In&nbsp;[48]: class Node: def __init__(self, data, prev=None, next=None): self.prev = prev self.data = data self.next = next class NodeMgmt: def __init__(self, data): self.head = Node(data) self.tail = self.head def insert(self, data): if self.head == None: self.head = Node(data) self.tail = self.head else: node = self.head while node.next: node = node.next new = Node(data) node.next = new new.prev = node self.tail = new def desc(self): node = self.head while node: print(node.data) node = node.next . In&nbsp;[49]: double_linked_list = NodeMgmt(0) for data in range(1, 10): double_linked_list.insert(data) double_linked_list.desc() . 0 1 2 3 4 5 6 7 8 9 . &#50672;&#49845;3:&#50948; &#53076;&#46300;&#50640;&#49436; &#45432;&#46300; &#45936;&#51060;&#53552;&#44032; &#53945;&#51221; &#49707;&#51088;&#51064; &#45432;&#46300; &#50526;&#50640; &#45936;&#51060;&#53552;&#47484; &#52628;&#44032;&#54616;&#45716; &#54632;&#49688;&#47484; &#47564;&#46308;&#44256; &#53580;&#49828;&#53944;&#54644;&#48372;&#44592;&#182; . 더블 링크드 리스트의 tail에서부터 뒤로 이동하며, 특정 숫자만 노드를 찾는 방식으로 함수를 구현하기 | 테스트: 임의로 0 ~ 9까지의 데이터를 링크드 리스트에 넣어보고, 데이터 값이 2인 노드 앞에 1.5 데이터 값을 가진 노드를 추가해보기 | . In&nbsp;[61]: class Node: def __init__(self, data, prev=None, next=None): self.prev = prev self.data = data self.next = next class NodeMgmt: def __init__(self, data): self.head = Node(data) self.tail = self.head def insert(self, data): if self.head == None: self.head = Node(data) self.tail = self.head else: node = self.head while node.next: node = node.next new = Node(data) node.next = new new.prev = node self.tail = new def desc(self): node = self.head while node: print(node.data) node = node.next def search_from_head(self, data): if self.head == None: return False node = self.head while node: if node.data == data: return node else: node = node.next return False def search_from_tail(self, data): if self.head == None: return False node = self.tail while node: if node.data == data: return node else: node = node.prev return False def insert_before(self, data, before_data): if self.head == None: self.head = Node(data) return True else: node = self.tail while node.data != before_data: node = node.prev if node == None: return False new = Node(data) before_new = node.prev before_new.next = new new.prev = before_new new.next = node node.prev = new return True . In&nbsp;[62]: double_linked_list = NodeMgmt(0) for data in range(1, 10): double_linked_list.insert(data) double_linked_list.desc() . 0 1 2 3 4 5 6 7 8 9 . In&nbsp;[63]: node_3 = double_linked_list.search_from_head(3) if node_3: print(node_3.data) else: print(&quot;No data&quot;) . 3 . In&nbsp;[64]: double_linked_list.insert_before(1.5, 2) double_linked_list.desc() . 0 1 1.5 2 3 4 5 6 7 8 9 . In&nbsp;[65]: node_3 = double_linked_list.search_from_tail(1.5) node_3.data . Out[65]: 1.5 . &#50672;&#49845;4: &#50948; &#53076;&#46300;&#50640;&#49436; &#45432;&#46300; &#45936;&#51060;&#53552;&#44032; &#53945;&#51221; &#49707;&#51088;&#51064; &#45432;&#46300; &#46244;&#50640; &#45936;&#51060;&#53552;&#47484; &#52628;&#44032;&#54616;&#45716; &#54632;&#49688;&#47484; &#47564;&#46308;&#44256; &#53580;&#49828;&#53944;&#54644;&#48372;&#44592;&#182; . 더블 링크드 리스트의 head에서부터 다음으로 이동하며, 특정 숫자인 노드를 찾는 방식으로 함수를 구현하기 | 테스트: 임의로 0~9까지의 데이터를 링크드 리스트에 넣어보고, 데이터 값이 1인 노드 다음에 1.7 데이터 값을 가진 노드를 추가해보기 | . In&nbsp;[68]: class Node: def __init__(self, data, prev=None, next=None): self.prev = prev self.data = data self.next = next class NodeMgmt: def __init__(self, data): self.head = Node(data) self.tail = self.head def insert_before(self, data, before_data): if self.head == None: self.head = Node(data) return True else: node = self.tail while node.data != before_data: node = node.prev if node == None: return False new = Node(data) before_new = node.prev before_new.next = new new.next = node return True def insert_after(self, data, after_data): if self.head == None: self.head = Node(data) return True else: node = self.head while node.data != after_data: node = node.next if node == None: return False new = Node(data) after_new = node.next new.next = after_new new.prev = node node.next = new if new.next == None: self.tail = new return True def insert(self, data): if self.head == None: self.head = Node(data) else: node = self.head while node.next: node = node.next new = Node(data) node.next = new new.prev = node self.tail = new def desc(self): node = self.head while node: print (node.data) node = node.next . In&nbsp;[69]: node_mgmt = NodeMgmt(0) for data in range(1, 10): node_mgmt.insert(data) node_mgmt.desc() node_mgmt.insert_after(1.5, 1) node_mgmt.desc() . 0 1 2 3 4 5 6 7 8 9 0 1 1.5 2 3 4 5 6 7 8 9 . .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/19/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%A7%81%ED%81%AC%EB%93%9C_%EB%A6%AC%EC%8A%A4%ED%8A%B8_(Linked_List).html",
            "relUrl": "/algorithm/2020/01/19/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%A7%81%ED%81%AC%EB%93%9C_%EB%A6%AC%EC%8A%A4%ED%8A%B8_(Linked_List).html",
            "date": " • Jan 19, 2020"
        }
        
    
  
    
        ,"post73": {
            "title": "[자료구조] 큐 (Queue)",
            "content": "&lt;!DOCTYPE html&gt; . 큐_(Queue) . &#45824;&#54364;&#51201;&#51064; &#51088;&#47308;&#44396;&#51312;: &#53328; (Queue)&#182; . 1. &#53328; &#44396;&#51312;&#182; . 가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조 음식점에서 가장 먼저 줄을 선 사람이 제일 먼저 음식점에 입장하는 것과 동일 | FIFO(First-In, First-Out) 또는 LILO(Last-In, Last-Out) 방식으로 스택과 꺼내는 순서가 반대 | . | . 2. &#50508;&#50500;&#46168; &#50857;&#50612;&#182; . Enqueue: 큐에 데이터를 넣는 기능 | Dequeue: 큐에서 데이터를 꺼내는 기능 | . 3. &#54028;&#51060;&#50028; queue &#46972;&#51060;&#48652;&#47084;&#47532; &#54876;&#50857;&#54644;&#49436; &#53328; &#51088;&#47308; &#44396;&#51312; &#49324;&#50857;&#54616;&#44592;&#182; . queue 라이브러리에는 다양한 큐 구조로 Queue(), LifoQueue(), PriorityQueue() 제공 | 프로그램을 작성할 때 프로그램에 따라 적합한 자료 구조를 사용 Queue(): 가장 일반적인 큐 자료 구조 | LifoQueue(): 나중에 입력된 데이터가 먼저 출력되는 구조 (스택 구조라고 보면 됨) | PriorityQueue(): 데이터마다 우선순위를 넣어서, 우선순위가 높은 순으로 데이터 출력 | . | . 3.1 Queue()&#47196; &#53328; &#47564;&#46308;&#44592; (&#44032;&#51109; &#51068;&#48152;&#51201;&#51064; &#53328;, FIFO(First-In, First-Out))&#182; . In&nbsp;[2]: import queue data_queue = queue.Queue() . In&nbsp;[3]: data_queue.put(&quot;funcoding&quot;) data_queue.put(1) . In&nbsp;[4]: data_queue.qsize() . Out[4]: 2 . In&nbsp;[5]: data_queue.get() . Out[5]: &#39;funcoding&#39; . In&nbsp;[7]: data_queue.qsize() . Out[7]: 1 . In&nbsp;[8]: data_queue.get() . Out[8]: 1 . In&nbsp;[9]: data_queue.qsize() . Out[9]: 0 . 3.2 LifoQueue()&#47196; &#53328; &#47564;&#46308;&#44592; (LIFO(Last-In, First-Out))&#182; . In&nbsp;[10]: import queue data_queue = queue.LifoQueue() . In&nbsp;[11]: data_queue.put(&quot;funcoding&quot;) data_queue.put(1) . In&nbsp;[12]: data_queue.qsize() . Out[12]: 2 . In&nbsp;[13]: data_queue.get() . Out[13]: 1 . 3.3 PriorityQueue()&#47196; &#53328; &#47564;&#46308;&#44592;&#182; . In&nbsp;[25]: import queue data_queue = queue.PriorityQueue() . In&nbsp;[26]: data_queue.put((10, &quot;korea&quot;)) data_queue.put((5, 1)) data_queue.put((15, &quot;china&quot;)) . In&nbsp;[27]: data_queue.qsize() . Out[27]: 3 . In&nbsp;[28]: data_queue.get() . Out[28]: (5, 1) . &#52280;&#44256;: &#50612;&#46356;&#50640; &#53328;&#44032; &#47566;&#51060; &#50416;&#51068;&#44620;?&#182; . 멀티 태스킹을 위한 프로세스 스케쥴링 방식을 구현하기 위해 많이 사용됨 (운영체제 참조) | 큐의 경우에는 장단점 보다는 (특별히 언급되는 장단점이 없음), 큐의 활용 예로 프로세스 스케쥴링 방식을 함께 이해해두는 것이 좋음 | . 4. &#54532;&#47196;&#44536;&#47000;&#48141; &#50672;&#49845;&#182; . &#50672;&#49845;1: &#47532;&#49828;&#53944; &#48320;&#49688;&#47196; &#53328;&#47484; &#45796;&#47336;&#45716; enqueue, dequeue &#44592;&#45733; &#44396;&#54788;&#54644;&#48372;&#44592;&#182; . In&nbsp;[29]: queue_list = list() def enqueue(data): queue_list.append(data) def dequeue(): data = queue_list[0] del queue_list[0] return data . In&nbsp;[30]: for index in range(10): enqueue(index) . In&nbsp;[31]: len(queue_list) . Out[31]: 10 . In&nbsp;[32]: dequeue() . Out[32]: 0 . In&nbsp;[33]: dequeue() . Out[33]: 1 . .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/18/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%81%90_(Queue).html",
            "relUrl": "/algorithm/2020/01/18/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%81%90_(Queue).html",
            "date": " • Jan 18, 2020"
        }
        
    
  
    
        ,"post74": {
            "title": "[자료구조] 스택 (Stack)",
            "content": "&lt;!DOCTYPE html&gt; . 스택_(Stack) . &#45824;&#54364;&#51201;&#51064; &#51088;&#47308;&#44396;&#51312;: &#49828;&#53469; (Stack)&#182; . 데이터를 제한적으로 접근할 수 있는 구조 한쪽 끝에서만 자료를 넣거나 뺄 수 있는 구조 | . | 가장 나중에 쌓은 데이터를 가장 먼저 빼낼 수 있는 데이터 구조 큐: FIFO 정책 | 스택: LIFO 정책 | . | . 1. &#49828;&#53469; &#44396;&#51312;&#182; . 스택은 LIFO(Last In, First Out) 또는 FIFO(First In, Last Out) 데이터 관리 방식을 따름 LIFO: 마지막에 넣은 데이터를 가장 먼저 추출하는 데이터 관리 정책 | FILO: 처음에 넣은 데이터를 가장 마지막에 추출하는 데이터 관리 정책 | . | 대표적인 스택의 활용 컴퓨터 내부의 프로세스 구조의 함수 동작 방식 | . | 주요 기능 push(): 데이터를 스택에 넣기 | pop(): 데이터를 스택에서 꺼내기 | . | . 2. &#49828;&#53469; &#44396;&#51312;&#50752; &#54532;&#47196;&#49464;&#49828; &#49828;&#53469;&#182; . 스택 구조는 프로세스 실행 구조의 가장 기본 함수 호출시 프로세스 실행 구조를 스택과 비교해서 이해 필요 | . | . In&nbsp;[1]: def recursive(data): if data &lt; 0: print(&quot;ended&quot;) else: print(data) recursive(data - 1) print(&quot;returned&quot;, data) . In&nbsp;[2]: recursive(4) . 4 3 2 1 0 ended returned 0 returned 1 returned 2 returned 3 returned 4 . 3. &#51088;&#47308;&#44396;&#51312; &#49828;&#53469;&#51032; &#51109;&#45800;&#51216;&#182; . 장점 구조가 단순해서, 구현이 쉽다 | 데이터 저장/읽기 속도가 빠르다 | . | 단점 (일반적인 스택 구현시) . 데이터 최대 갯수를 미리 정해야 한다 파이썬의 경우 재귀 함수는 1000번까지만 호출이 가능함 | . | 저장 공간의 낭비가 발생할 수 있음 미리 최대 갯수만큼 저장 공간을 확보해야 함 | . | . | 스택은 단순하고 빠른 성능을 위해 사용되므로, 보동 배열 구조를 활용해서 구현하는 것이 일반적임. 이 경우, 위에서 열거한 단점이 있을 수 있음 . | . 4. &#54028;&#51060;&#50028; &#47532;&#49828;&#53944; &#44592;&#45733;&#50640;&#49436; &#51228;&#44277;&#54616;&#45716; &#47700;&#49436;&#46300;&#47196; &#49828;&#53469; &#49324;&#50857;&#54644;&#48372;&#44592;&#182; . append(push), pop 메서드 제공 | . In&nbsp;[3]: data_stack = list() data_stack.append(1) data_stack.append(2) . In&nbsp;[4]: data_stack . Out[4]: [1, 2] . In&nbsp;[5]: data_stack.pop() . Out[5]: 2 . 5. &#54532;&#47196;&#44536;&#47000;&#48141; &#50672;&#49845;&#182; . &#50672;&#49845;1: &#47532;&#49828;&#53944; &#48320;&#49688;&#47196; &#49828;&#53469;&#51012; &#45796;&#47336;&#45716; pop, push &#44592;&#45733; &#44396;&#54788;&#54644;&#48372;&#44592; (pop, push &#54632;&#49688; &#49324;&#50857;&#54616;&#51648; &#50506;&#44256; &#51649;&#51217; &#44396;&#54788;&#54644;&#48372;&#44592;)&#182; . In&nbsp;[6]: stack_list = list() def push(data): stack_list.append(data) def pop(): data = stack_list[-1] del stack_list[-1] return data . In&nbsp;[7]: for index in range(10): push(index) . In&nbsp;[8]: pop() . Out[8]: 9 . .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/18/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D_(Stack).html",
            "relUrl": "/algorithm/2020/01/18/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D_(Stack).html",
            "date": " • Jan 18, 2020"
        }
        
    
  
    
        ,"post75": {
            "title": "[자료구조] 배열 (Array)",
            "content": "&lt;!DOCTYPE html&gt; . 배열_(Array) . &#45824;&#54364;&#51201;&#51064; &#51088;&#47308;&#44396;&#51312;: &#48176;&#50676; (Array)&#182; . 데이터를 나열하고, 각 데이터를 인덱스에 대응하도록 구성한 데이터 구조 | 파이썬에서는 리스트 타입이 배열 기능을 제공하고 있음 | . 1. &#48176;&#50676;&#51060; &#50780; &#54596;&#50836;&#54624;&#44620;?&#182; . 같은 종류의 데이터를 효율적으로 관리하기 위해 사용 | 같은 종류의 데이터를 순차적으로 저장 | . &#48176;&#50676;&#51032; &#51109;&#51216;&#182; . 빠른 접근 가능 | . &#48176;&#50676;&#51032; &#45800;&#51216;&#182; . 추가/삭제가 쉽지 않음 | 최대 길이를 미리 지정해야 함 | . 2. &#54028;&#51060;&#50028;&#44284; C&#50616;&#50612;&#51032; &#48176;&#50676; &#50696;&#51228;&#182; . In&nbsp;[&nbsp;]: #include &lt;stdio.h&gt; int main(int argc, char*argv[]) { char country[3] = &quot;US&quot;; printf(&quot;%c%c n&quot;, country[0], country[1]); printf(&quot;%s n&quot;, country); return 0; } . In&nbsp;[2]: country = &quot;US&quot; print(country) country = country + &quot;A&quot; print(country) . US USA . 3. &#54028;&#51060;&#50028;&#44284; &#48176;&#50676;&#182; . In&nbsp;[1]: # 1차원 배열: 리스트로 구현시 data = [1, 2, 3, 4, 5] print(data) . [1, 2, 3, 4, 5] . In&nbsp;[2]: # 2차원 배열: 리스트로 구현시 data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] data . Out[2]: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] . In&nbsp;[3]: print(data[0]) . [1, 2, 3] . In&nbsp;[5]: print(data[0][0]) print(data[0][1]) print(data[0][2]) print(data[1][0]) . 1 2 3 4 . 3. &#54532;&#47196;&#44536;&#47000;&#48141; &#50672;&#49845;&#182; . &#50672;&#49845;1: &#50948;&#51032; 2&#52264;&#50896; &#48176;&#50676;&#50640;&#49436; 9, 8, 7 &#49692;&#49436;&#47196; &#52636;&#47141;&#54644;&#48372;&#44592;&#182; . In&nbsp;[7]: for idx in data[2][::-1]: print(idx) . 9 8 7 . In&nbsp;[8]: print(data[2][2], data[2][1], data[2][1]) . 9 8 8 . &#50672;&#49845;2: &#45796;&#51020; dataset&#50640;&#49436; &#51204;&#52404; &#51060;&#47492; &#50504;&#50640; M&#51060; &#47751;&#48264; &#45208;&#50772;&#45716;&#51648; &#48712;&#46020;&#49688; &#52636;&#47141;&#54616;&#44592;&#182; . In&nbsp;[14]: dataset = [&quot;Braud, Mr, O&quot;, &quot;Fynney, Mr.Joseph&quot;, &quot;Morgan&quot;, &quot;Todoroff, Mr. Lalio&quot;] . In&nbsp;[15]: m_count = 0 for data in dataset: for index in range(len(data)): if data[index] == &quot;M&quot;: m_count += 1 print(m_count) . 4 . .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/17/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%B0%B0%EC%97%B4_(Array).html",
            "relUrl": "/algorithm/2020/01/17/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%B0%B0%EC%97%B4_(Array).html",
            "date": " • Jan 17, 2020"
        }
        
    
  
    
        ,"post76": {
            "title": "[ShellScript] Jupyter Notebook을 jekyll 블로그에 업로드하기",
            "content": "Jupyter Notebook 컨텐츠를 jekyll 블로그에 업로드하기 위한 자동화 스크립트 . jupyter notebook을 jekyll blog에 업로드하기 위한 자동화 스크립트이다. 반복적이고 번거로운 작업이라 자동화가 필요하다. | . blog_script.sh . #!/bin/bash #=================================================================== # Script for uploading jupyter notebook to jekyll blog # Author : Jason Ahn # Path : / # Name : blog_script.sh # Usage : /blog_script.sh $1 $2 $3 $4 $5 # $1 : /Users/a/notebook/배열.ipynb # $2 : &quot;자료구조/배열&quot; # $3 : &quot;Algorithm&quot; # $4 : &quot;algorithm, array&quot; # $5 : &quot;/Users/a/onedrive/safenumero.github.io&quot; #=================================================================== #- # set sed to use the sed command in MacOS #- if [ $(uname -s) == &quot;Darwin&quot; ] then if [[ -z $(brew list | grep gnu-sed) ]] then brew install gnu-sed fi SED=gsed else SED=sed fi #- # set parameter and path #- if [ -f $1 ] then #JUPYTER_PATH=${1%/*} JUPYTER_FILE=$1 JUPYTER_NAME=${1##*/} else echo &quot;[ERROR] ipynb file does not exist!&quot; exit 2 fi TITLE_RAW=$2 CATEGORY=$3 TAGS=$4 # blog path setting if [ -z $5 ] then # default blog path BLOG_PATH=/Users/a/onedrive/git/safenumero.github.io/ else BLOG_PATH=$5 fi if [ ! -d &quot;$BLOG_PATH/_posts/$CATEGORY&quot; ] then #mkdir -p &quot;$BLOG_PATH/_posts/$CATEGORY&quot; #echo &quot;make directory: $BLOG_PATH/_posts/$CATEGORY&quot; echo &quot;[ERROR] category folder does not exist!&quot; exit 2 fi if [ ! -d &quot;$BLOG_PATH/_ipynb/$CATEGORY&quot; ] then mkdir -p &quot;$BLOG_PATH/_ipynb/$CATEGORY&quot; echo &quot;make directory: $BLOG_PATH/_ipynb/$CATEGORY&quot; fi #- # convert ipynb to html #- jupyter nbconvert --to html ${JUPYTER_FILE} #- # set jekyll header #- if [ ! -z $(echo &quot;${JUPYTER_NAME:0:11}&quot; | grep [1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]-) ] then if [ ! -z $(echo &quot;${JUPYTER_NAME:11}&quot; | grep -) ] then JUPYTER_TMP=&quot;$(echo &quot;${JUPYTER_NAME:11}&quot;)&quot; TITLE_HEADER=&quot;[${JUPYTER_TMP%%-*}] &quot; TITLE_DETAIL_TMP=&quot;$(echo &quot;${JUPYTER_TMP#*-}&quot; | $SED -e &#39;s/^ *//&#39; -e &#39;s/ *$//&#39;)&quot; TITLE_DETAIL=&quot;$(echo ${TITLE_DETAIL_TMP%.*} | $SED &#39;s/_/ /g&#39;)&quot; else TITLE_HEADER=&quot;&quot; TITLE_DETAIL_TMP=&quot;$(echo &quot;${JUPYTER_NAME:11}&quot; | $SED -e &#39;s/^ *//&#39; -e &#39;s/ *$//&#39;)&quot; TITLE_DETAIL=&quot;$(echo ${TITLE_DETAIL_TMP%.*} | $SED &#39;s/_/ /g&#39;)&quot; fi else if [ ! -z $(echo &quot;${JUPYTER_NAME}&quot; | grep -) ] then TITLE_HEADER=&quot;[${JUPYTER_NAME%%-*}] &quot; TITLE_DETAIL_TMP=&quot;$(echo &quot;${JUPYTER_NAME#*-}&quot; | $SED -e &#39;s/^ *//&#39; -e &#39;s/ *$//&#39;)&quot; TITLE_DETAIL=&quot;$(echo ${TITLE_DETAIL_TMP%.*} | $SED &#39;s/_/ /g&#39;)&quot; else TITLE_HEADER=&quot;&quot; TITLE_DETAIL_TMP=&quot;$(echo &quot;${JUPYTER_NAME}&quot; | $SED -e &#39;s/^ *//&#39; -e &#39;s/ *$//&#39;)&quot; TITLE_DETAIL=&quot;$(echo ${TITLE_DETAIL_TMP%.*} | $SED &#39;s/_/ /g&#39;)&quot; fi fi if [[ ! -z $(echo $TITLE_RAW | grep /) ]] then TITLE_HEADER_TMP=&quot;${TITLE_RAW%%/*}&quot; TITLE_DETAIL_TMP=&quot;$(echo &quot;${TITLE_RAW#*/}&quot; | $SED -e &#39;s/^ *//&#39; -e &#39;s/ *$//&#39;)&quot; if [ ! &quot;$TITLE_HEADER_TMP&quot; == &quot;&quot; ] then TITLE_HEADER=&quot;[${TITLE_HEADER_TMP}] &quot; else TITLE_HEADER=&quot;&quot; fi if [ ! &quot;$TITLE_DETAIL_TMP&quot; == &quot;&quot; ] then TITLE_DETAIL=&quot;$TITLE_DETAIL_TMP&quot; fi else if [ ! &quot;$TITLE_RAW&quot; == &quot;&quot; ] then TITLE_HEADER=&quot;&quot; TITLE_DETAIL=&quot;$TITLE_RAW&quot; fi fi HEADER=&quot; nlayout: post ntitle: &#39;${TITLE_HEADER}${TITLE_DETAIL}&#39; ncategory: ${CATEGORY} ntags: [${TAGS}] ncomments: true n n&quot; $SED -i &#39;1 i &#39;&quot;$HEADER&quot; ${JUPYTER_FILE%.*}.html #- # move html and ipynb file #- if [ -z $(echo &quot;${JUPYTER_NAME:0:11}&quot; | grep [1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]-) ] then TIMESTAMP=$(date &quot;+%Y-%m-%d&quot;) mv &quot;${JUPYTER_FILE%.*}.html&quot; &quot;${BLOG_PATH}/_posts/${CATEGORY}/${TIMESTAMP}-${JUPYTER_NAME%.*}.html&quot; cp -f &quot;${JUPYTER_FILE}&quot; &quot;${BLOG_PATH}/_ipynb/${CATEGORY}/${TIMESTAMP}-${JUPYTER_NAME}&quot; else mv &quot;${JUPYTER_FILE%.*}.html&quot; &quot;${BLOG_PATH}/_posts/${CATEGORY}/${JUPYTER_NAME%.*}.html&quot; cp -f &quot;${JUPYTER_FILE}&quot; &quot;${BLOG_PATH}/_ipynb/${CATEGORY}/${JUPYTER_NAME}&quot; fi # # upload to github jekyll blog # cd $BLOG_PATH git add . git commit -m &quot;upload contents to jekyll blog &gt;&gt;&gt; ${TITLE_DETAIL}&quot; git push origin master # upload to a jekyll blog jekyll serve . 실행 . layout: post title: &#39;[&lt;헤더&gt;] &lt;제목&gt;&#39; category: &lt;카테고리명&gt; tags: [&lt;태그목록&gt;] comments: true . $ ./blog_script.sh &lt;jupyter_notebook_파일명&gt; &lt;헤더/제목&gt; &lt;카테고리명&gt; &lt;태그목록&gt; &lt;블로그경로&gt; .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/16/ShellScript-Jupyter_notebook_html_%EB%B3%80%ED%99%98.html",
            "relUrl": "/linux/2020/01/16/ShellScript-Jupyter_notebook_html_%EB%B3%80%ED%99%98.html",
            "date": " • Jan 16, 2020"
        }
        
    
  
    
        ,"post77": {
            "title": "[ShellScript] 인자값 받기 (getopts)",
            "content": "getopts . #!/bin/bash ## 도움말 출력하는 함수 help() { echo &quot;splt [OPTIONS] FILE&quot; echo &quot; -h 도움말 출력.&quot; echo &quot; -a ARG 인자를 받는 opt.&quot; echo &quot; -b ARG 인자를 받는 opt2.&quot; exit 0 } while getopts &quot;a:b:h&quot; opt do case $opt in a) arg_a=$OPTARG echo &quot;Arg A: $arg_a&quot; ;; b) arg_b=$OPTARG echo &quot;Arg B: $arg_b&quot; echo &quot;$arg_b&quot; ;; h) help ;; ?) help ;; esac done # getopt 부분 끝나고 난 후의 인자(FILE) 읽기 shift $(( $OPTIND - 1)) file=$1 echo &quot;$file&quot; .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/15/ShellScript-%EC%9D%B8%EC%9E%90%EA%B0%92_%EB%B0%9B%EA%B8%B0_(getopts).html",
            "relUrl": "/linux/2020/01/15/ShellScript-%EC%9D%B8%EC%9E%90%EA%B0%92_%EB%B0%9B%EA%B8%B0_(getopts).html",
            "date": " • Jan 15, 2020"
        }
        
    
  
    
        ,"post78": {
            "title": "[ShellScript] 다수 패키지 설치 자동화",
            "content": "Ubuntu/CentOS 다수 패키지 설치 자동화 스크립트 . install_script.sh . #!/bin/bash PROGRAM_LIST=$1 LOG_FILE_NAME=$2 CURRENT_PATH=`pwd` LOG_FILE=$CURRENT_PATH/$LOG_FILE_NAME function os_check() { if [[ $(cat /etc/*release) =~ &quot;CentOS&quot; ]] then echo &quot;centos&quot; elif [[ $(cat /etc/*release) =~ &quot;Ubuntu&quot; ]] then echo &quot;ubuntu&quot; else echo &quot;[WARNING] it&#39;s not a centos or ubuntu&quot; exit 0 fi } function err_check() { status=$1 program_name=$2 if [ &quot;$status&quot; == &quot;0&quot; ] then echo &quot;[SUCCESS] $program_name&quot; &gt;&gt; $LOG_FILE echo &quot;[SUCCESS] $program_name&quot; return 0 else echo &quot;[FAILED] $program_name&quot; &gt;&gt; $LOG_FILE echo &quot;[FAILED] $program_name&quot; return 2 fi } OS=$(os_check) if [ &quot;$OS&quot; == &quot;centos&quot; ] then HEAD=&quot;yum&quot; elif [ &quot;$OS&quot; == &quot;ubuntu&quot; ] then HEAD=&quot;apt-get&quot; fi cat $PROGRAM_LIST | while read line do $HEAD install -y &quot;${line}&quot; err_check $? &quot;${line}&quot; done . 실행 . $ ./install_script.sh program_list.txt log_install.txt .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/15/ShellScript-%EB%8B%A4%EC%88%98%EC%9D%98_%ED%8C%A8%ED%82%A4%EC%A7%80_%EC%84%A4%EC%B9%98%EC%9E%90%EB%8F%99%ED%99%94.html",
            "relUrl": "/linux/2020/01/15/ShellScript-%EB%8B%A4%EC%88%98%EC%9D%98_%ED%8C%A8%ED%82%A4%EC%A7%80_%EC%84%A4%EC%B9%98%EC%9E%90%EB%8F%99%ED%99%94.html",
            "date": " • Jan 15, 2020"
        }
        
    
  
    
        ,"post79": {
            "title": "[Python pandas] isin",
            "content": "pandas isin . isin 구문은 열이 list의 값을 포함하고 있는 모든 행들을 골라낼 때 주로 쓰인다. | . df = DataFrame({&#39;A&#39;: [1, 2, 3], &#39;B&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;f&#39;]}) df.isin([1, 3, 12, &#39;a&#39;]) . A B 0 True True 1 False False 2 True False . A 칼럼이 1, 3, 12, ‘a’를 포함하는 것만 골라 냄 | . df[df[&#39;A&#39;].isin([1, 3, 12, &#39;a&#39;])] . A B 0 1 a 2 3 f .",
            "url": "https://safenumz.github.io/blog/python/2020/01/14/Python_pandas-isin.html",
            "relUrl": "/python/2020/01/14/Python_pandas-isin.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post80": {
            "title": "[Python numpy] 최소, 최대, 조건 색인값 (np.argmin, np.argmax, np.where)",
            "content": "numpy 최소, 최대, 조건 색인값 . 최소값(min), 최대값(max): np.min(), np.max() . import numpy as np x = np.array([5, 4, 3, 2, 1, 0]) print(x.min()) print(np.min(x)) print(x.max()) print(np.max(x)) . 0 0 5 5 . 최소값, 최대값의 색인 위치:np.argmin(), np.argmax() . print(x.argmin()) print(np.argmin(x)) print(x.argmax()) print(np.argmax(x)) . 5 5 0 0 . 조건에 맞는 값의 색인 위치: np.where() . 배열에서 3과 같거나 큰 값을 가지는 색인의 위치를 알고 싶을 때 | . np.where(x &gt;= 3) . (array([0, 1, 2], dtype=int64),) . 조건에 맞는 값을 indexing 하기: x[np.where()] . 배열에서 3과 같거나 큰 값을 indexing 하고 싶을 때 | . x[np.where(x &gt;= 3)] . array([5, 4, 3]) . 조건에 맞는 값을 특정 다른 값으로 변환하기: np.where(조건, 조건이 맞을 때 값, 조건과 다를 때 값) . 배열의 값이 3과 같거나 크면 3으로 변환하고 작으면 그대로 값을 유지하고 싶을 때 | for loop를 사용하는 것보다 더 빠르다 | . np.where(x &gt;= 3, 3, x) .",
            "url": "https://safenumz.github.io/blog/python/2020/01/14/Python_numpy-%EC%B5%9C%EC%86%8C_%EC%B5%9C%EB%8C%80_%EC%A1%B0%EA%B1%B4_%EC%83%89%EC%9D%B8%EA%B0%92.html",
            "relUrl": "/python/2020/01/14/Python_numpy-%EC%B5%9C%EC%86%8C_%EC%B5%9C%EB%8C%80_%EC%A1%B0%EA%B1%B4_%EC%83%89%EC%9D%B8%EA%B0%92.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post81": {
            "title": "[Python] csv 및 npy 파일 소수점 단위 동일성 검정",
            "content": "Python csv 및 npy 파일 소수점 단위 동일성 검정 . #-*- coding:utf-8 -*- import pandas as pd import numpy as np import argparse from datetime import datetime def logging(before_data, after_data, start_time, type, before_df=None, after_df=None): end_time = datetime.now() print(&quot;before data &gt;&gt;&gt; {}&quot;.format(before_data), flush = True) print(&quot;after data &gt;&gt;&gt; {}&quot;.format(after_data), flush = True) if type == True: print(&quot;before count: {} vs after count {}&quot;.format(len(before_df), len(after_df)), flush = True) print(&quot;The data are the same!&quot;, flush = True) result.append(True) elif type == False: print(&quot;before count: {} vs after count {}&quot;.format(len(before_df), len(after_df)), flush = True) print(&quot;The data are NOT the same!&quot;, flush = True) result.append(False) elif type == &quot;Error1&quot;: print(&quot;[ERROR] data comparison failed!&quot;, flush = True) result.append(False) elif type == &quot;Error2&quot;: print(&quot;[ERROR] please check the data type is csv or npy!&quot;, flush = True) result.append(False) print(&quot;duration time is {} sec&quot;.format((end_time - start_time).seconds), flush = True) print(&quot;-&quot;*50, flush = True) def main(before_data_list_file, after_data_list_file, decimal_point): global result result = [] start_time = datetime.now() print(&quot;=&quot;*50, flush = True) print(&quot;before vs after data comparison start!&quot;, flush = True) print(&quot;start time is {}&quot;.format(start_time)) print(&quot;=&quot;*50, flush = True) # before, after 프로그램 목록을 리스트에 각각 저장한다. before_data_list = [before.rstrip(&#39; n&#39;) for before in open(before_data_list_file)] after_data_list = [after.rstrip(&#39; n&#39;) for after in open(after_data_list_file)] # 소수점 절사 decimal_num = 10 ** decimal_point for before_data, after_data in zip(before_data_list, after_data_list): start_time_tmp = datetime.now() try: if before_data.split(&quot;.&quot;)[-1] == &quot;npy&quot; and after_data.split(&quot;.&quot;)[-1] == &quot;npy&quot;: before_arr = np.load(before_data) after_arr = np.load(after_data) try: before_arr = (before_arr * decimal_num // 1) / decimal_num after_arr = (after_arr * decimal_num // 1) / decimal_num except: print(&quot;The npy data type is not a numeric type.&quot;, flush = True) print(&quot;before data type: {} vs after data type: {}&quot;.format(before_arr.dtype, after_arr.dtype), flush = True) if np.array_equal(before_arr, after_arr): logging(before_data, after_data, start_time_tmp, True, before_arr, after_arr) else: logging(before_data, after_data, start_time_tmp, False, before_arr, after_arr) elif before_data.split(&quot;.&quot;)[-1] == &quot;csv&quot; and after_data.split(&quot;.&quot;)[-1] == &quot;csv&quot;: # before, after 프로그램 로드 before_df = pd.read_csv(before_data, engine=&quot;python&quot;) after_df = pd.read_csv(after_data, engine=&quot;python&quot;) before_numeric_columns = before_df.select_dtypes(include=np.number).columns.tolist() after_numeric_columns = after_df.select_dtypes(include=np.number).columns.tolist() before_df[before_numeric_columns] = before_df[before_numeric_columns].apply(lambda x: (x * decimal_num // 1) / decimal_num) after_df[after_numeric_columns] = after_df[after_numeric_columns].apply(lambda x: (x * decimal_num // 1) / decimal_num) # before_df.infer_objects() # before_df.dtypes[before_df.dtypes != &quot;object&quot;].index # before_df와 after_df의 동일성 비교 if before_df.equals(after_df): logging(before_data, after_data, start_time_tmp, True, before_df, after_df) else: logging(before_data, after_data, start_time_tmp, False, before_df, after_df) else: logging(before_data, after_data, start_time_tmp, &quot;Error2&quot;) continue except: logging(before_data, after_data, start_time_tmp, &quot;Error1&quot;) continue end_time = datetime.now() print(&quot;=&quot;*50, flush = True) print(&quot;before vs after data comparison finish!&quot;, flush = True) if set(result) == {True}: print(&quot;all data is the same&quot;, flush = True) else: print(&quot;[WARNING] NOT all data is the same&quot;, flush = True) print(&quot;end time is {}&quot;.format(end_time)) print(&quot;duration time is {} sec&quot;.format((end_time - start_time).seconds)) print(&quot;=&quot;*50, flush = True) if __name__ == &quot;__main__&quot;: parser = argparse.ArgumentParser() parser.add_argument(&#39;before&#39;, type=str, help=&quot;before data list file&quot;) parser.add_argument(&#39;after&#39;, type=str, help=&quot;after data list file&quot;) parser.add_argument(&#39;decimal&#39;, type=int, default=15, help=&quot;decimal point&quot;) args = parser.parse_args() _before_data_list_file = args.before _after_data_list_file = args.after _decimal_point = args.decimal main(_before_data_list_file, _after_data_list_file, _decimal_point) . 실행 . python ./compare.py . $ python ./compare.py com1.txt com2.txt 20 .",
            "url": "https://safenumz.github.io/blog/python/2020/01/14/Python-csv_npy_%ED%8C%8C%EC%9D%BC_%EB%8F%99%EC%9D%BC%EC%84%B1_%EA%B2%80%EC%A0%95.html",
            "relUrl": "/python/2020/01/14/Python-csv_npy_%ED%8C%8C%EC%9D%BC_%EB%8F%99%EC%9D%BC%EC%84%B1_%EA%B2%80%EC%A0%95.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post82": {
            "title": "[ShellScript] 프로세스 병렬 처리 (wait)",
            "content": "#!/bin/bash # run processes and store pids in array for i in $n_procs; do ./procs[${i}] &amp; pids[${i}]=$! done # wait for all pids for pid in ${pids[*]}; do wait $pid done .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/14/ShellScript-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EB%B3%91%EB%A0%AC%EC%B2%98%EB%A6%AC_(wait).html",
            "relUrl": "/linux/2020/01/14/ShellScript-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EB%B3%91%EB%A0%AC%EC%B2%98%EB%A6%AC_(wait).html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post83": {
            "title": "[ShellScript] 파일 백업 및 복구",
            "content": "파일 백업 스크립트 . backup_script.sh . #!/bin/bash BACKUP_LIST=$1 BACKUP_FORDER_NAME=$2 OPTION=$3 CURRENT_PATH=`pwd` BACKUP_PATH=${CURRENT_PATH}/${BACKUP_FORDER_NAME} BACKUP_LOG=${CURRENT_PATH}/${BACKUP_FORDER_NAME}.txt RECOVERY_LOG=${CURRENT_PATH}/rec_${BACKUP_FORDER_NAME}.txt # backup if [ &quot;$OPTION&quot; == &quot;0&quot; ] then if [ ! -d $BACKUP_PATH ] then mkdir -p $BACKUP_PATH else echo &quot;[ERROR] cannot create backup forder because such forder alreadly exists&quot; exit 0 fi cat $BACKUP_LIST | while read line do if [ -f &quot;${line}&quot; ] then mkdir -p &quot;${BACKUP_PATH}/${line%/*}&quot; cp -f &quot;$line&quot; &quot;${BACKUP_PATH}/${line%/*}&quot; echo &quot;[BACKUP SUCCESS] $line&quot; echo &quot;${BACKUP_PATH}/${line}&quot; &gt;&gt; $BACKUP_LOG else echo &quot;[ERROR] file to back up does not exist &gt;&gt;&gt; $line&quot; echo &quot;[ERROR] ${BACKUP_PATH}/${line}&quot; &gt;&gt; $BACKUP_LOG fi done # recovery elif [ &quot;$OPTION&quot; == &quot;1&quot; ] then cat $BACKUP_LIST | while read line do echo &quot;${BACKUP_PATH}/${line}&quot; if [ -f &quot;${BACKUP_PATH}/${line}&quot; ] then cp -f &quot;${BACKUP_PATH}/${line}&quot; &quot;${line%/*}&quot; echo &quot;[RECOVERY SUCCESS] ${BACKUP_PATH}/${line} -&gt; $line&quot; echo &quot;[RECOVERY SUCCESS] ${BACKUP_PATH}/${line} -&gt; $line&quot; &gt;&gt; $RECOVERY_LOG else echo &quot;[ERROR] failed to recover file &gt;&gt;&gt; ${BACKUP_PATH}/${line}&quot; echo &quot;[ERROR] ${BACKUP_PATH}/${line} -&gt; $line&quot; &gt;&gt; $RECOVERY_LOG fi done fi . 실행 . ./backup_script.sh &lt;백업: 0, 복구: 1&gt; . $ ./backup_script.sh backup_list.txt backup_forder 0 .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/14/ShellScript-%ED%8C%8C%EC%9D%BC_%EB%B0%B1%EC%97%85_%EB%B0%8F_%EB%B3%B5%EA%B5%AC.html",
            "relUrl": "/linux/2020/01/14/ShellScript-%ED%8C%8C%EC%9D%BC_%EB%B0%B1%EC%97%85_%EB%B0%8F_%EB%B3%B5%EA%B5%AC.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post84": {
            "title": "[Linux] 파일내용 정렬 (sort)",
            "content": "sort . sort는 텍스트로 된 파일의 행단위 정렬을 할 때 사용하는 명령어이다 | . 오름차순 정렬 . $ sort textfile.txt . 내림차순 정렬 . $ sort -r textfile.txt . 지정한 두번째 필드(-k 옵션)를 기준으로 정렬 . $ sort -k 2 textfile.txt . 중복된 내용을 하나로 취급하여 유일 정렬 . $ sort -u textfile.txt . 용량크기 순으로 오름차순 정렬 . $ ls -l /var/log | sort -k 5 . 파일이름 대상으로 오름차순 정렬 . $ ls -l /var/log | sort -k 8 .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/14/Linux-%ED%8C%8C%EC%9D%BC%EB%82%B4%EC%9A%A9_%EC%A0%95%EB%A0%AC_(sort).html",
            "relUrl": "/linux/2020/01/14/Linux-%ED%8C%8C%EC%9D%BC%EB%82%B4%EC%9A%A9_%EC%A0%95%EB%A0%AC_(sort).html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post85": {
            "title": "[알고리즘] 동적 계획법 (Dynamic Programming)과 분할 정복 (Divide and Conquer)",
            "content": "&#46041;&#51201; &#44228;&#54925;&#48277; (Dynamic Programming)&#44284; &#48516;&#54624; &#51221;&#48373; (Divide and Conquer) . 1. &#51221;&#51032; . 동적계획법 (DP 라고 많이 부름) 입력 크기가 작은 부분 문제들을 해결한 후, 해당 부분 문제의 해를 활용해서, 보다 큰 크기의 부분 문제를 해결, 최종적으로 전체 문제를 해결하는 알고리즘 | 상향식 접근법으로, 가장 최하위 해답을 구한 후, 이를 저장하고, 해당 결과값을 이용해서 상위 문제를 풀어가는 방식 | Memoization 기법을 사용함 Memoization (메모이제이션) 이란: 프로그램 실행 시 이전에 계산한 값을 저장하여, 다시 계산하지 않도록 하여 전체 실행 속도를 빠르게 하는 기술 | . | 문제를 잘게 쪼갤 때, 부분 문제는 중복되어, 재활용됨 예: 피보나치 수열 | . | . | 분할 정복 문제를 나눌 수 없을 때까지 나누어서 각각을 풀면서 다시 합병하여 문제의 답을 얻는 알고리즘 | 하향식 접근법으로, 상위의 해답을 구하기 위해, 아래로 내려가면서 하위의 해답을 구하는 방식 일반적으로 재귀함수로 구현 | . | 문제를 잘게 쪼갤 때, 부분 문제는 서로 중복되지 않음 예: 병합 정렬, 퀵 정렬 등 | . | . | . 2. &#44277;&#53685;&#51216;&#44284; &#52264;&#51060;&#51216; . 공통점 문제를 잘게 쪼개서, 가장 작은 단위로 분할 | . | 차이점 동적 계획법 부분 문제는 중복되어, 상위 문제 해결 시 재활용됨 | Memoization 기법 사용 (부분 문제의 해답을 저장해서 재활용하는 최적화 기법으로 사용) | . | 분할 정복 부분 문제는 서로 중복되지 않음 | Memoization 기법 사용 안함 | . | . | . 3. &#46041;&#51201; &#44228;&#54925;&#48277; &#50508;&#44256;&#47532;&#51608; &#51060;&#54644; . 피보나치 수열: n 을 입력받아서 다음과 같이 계산됨 | . . . Recursive call&#51012; &#54876;&#50857;&#54620; &#54588;&#48372;&#45208;&#52824; &#49688;&#50676; . stack에 쌓였다가 해소되는 과정에서 시간이 많이 소요됨 | . def fibo(num): if num &lt;= 1: return num return fibo(num - 1) + fibo(num - 2) fibo(10) . 55 . &#46041;&#51201; &#44228;&#54925;&#48277;&#51012; &#54876;&#50857;&#54620; &#54588;&#48372;&#45208;&#52824; &#49688;&#50676; . def fibo_dp(num): cache = [0 for i in range(num + 1)] cache[0] = 0 cache[1] = 1 for i in range(2, num + 1): cache[i] = cache[i - 1] + cache[i - 2] return cache[num] fibo_dp(10) . 55 .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/13/dynamic_programming_and_divide_and_conquer.html",
            "relUrl": "/algorithm/2020/01/13/dynamic_programming_and_divide_and_conquer.html",
            "date": " • Jan 13, 2020"
        }
        
    
  
    
        ,"post86": {
            "title": "[알고리즘] 복잡도 (Complexity)",
            "content": "&#48373;&#51105;&#46020; (Complexity) . 알고리즘 계산 복잡도는 시간 복잡도와 공간 복잡도로 표현될 수 있음 시간 복잡도: 얼마나 빠르게 실행되는지 | 공간 복잡도: 얼마나 많은 저장 공간이 필요한지 | . | . &#49884;&#44036; &#48373;&#51105;&#46020; (Time Complexity) . O(입력) 입력 n 에 따라 결정되는 시간 복잡도 함수 | O(1), O($log n$), O(n), O(n$log n$), O($n^2$), O($2^n$), O(n!)등으로 표기함 | 입력 n 의 크기에 따라 기하급수적으로 시간 복잡도가 늘어날 수 있음 O(1) &lt; O($log n$) &lt; O(n) &lt; O(n$log n$) &lt; O($n^2$) &lt; O($2^n$) &lt; O(n!) 참고: log n 의 베이스는 2 - $log_2 n$ | . | . | . | . . &#50696;&#51228; 1 . 1&#48512;&#53552; n&#44620;&#51648;&#51032; &#54633;&#51012; &#44396;&#54616;&#45716; &#50508;&#44256;&#47532;&#51608; . 합을 기록할 변수를 만들고 0을 저장 | n을 1부터 1씩 증가하면서 반복 | 반복문 안에서 합을 기록할 변수에 1씩 증가된 값을 더함 | 반복이 끝나면 합을 출력 | . &#49884;&#44036; &#48373;&#51105;&#46020; . 입력 n에 따라 덧셈을 n 번 해야 함 (반복문!) | 시간 복잡도: n, 빅 오 표기법으로는 O(n) | . def sum_all(n): total = 0 for num in range(1, n + 1): total += num return total sum_all(100) . 5050 . &#50696;&#51228; 2 . 1&#48512;&#53552; n&#44620;&#51648;&#51032; &#54633;&#51012; &#44396;&#54616;&#45716; &#50508;&#44256;&#47532;&#51608; . $ frac { n (n + 1) }{ 2 }$ | . &#49884;&#44036; &#48373;&#51105;&#46020; . 입력 n이 어떻든 간에, 곱셈/덧셈/나눗셈 하면 됨 (반복문이 없음!) | 시간 복잡도: 1, 빅 오 표기법으로는 O(1) | . def sum_all(n): return int(n * (n + 1) / 2) sum_all(100) . 5050 . &#44277;&#44036; &#48373;&#51105;&#46020; (Space Complexity) . 프로그램을 실행 및 완료하는데 필요한 저장공간의 양을 뜻함 | 총 필요 저장 공간 고정 공간 (알고리즘과 무관한 공간): 코드 저장 공간, 단순 변수 및 상수 | 가변 공간 (알고리즘 실행과 관련있는 공간): 실행 중 동적으로 필요한 공간 | $ S(P) = c + S_p(n) $ c: 고정 공간 | $ S_p(n) $: 가변 공간 | . | . | . 빅 오 표기법을 생각해볼 때, 고정 공간은 상수이므로 공간 복잡도는 가변 공간예 좌우됨 . &#50696;&#51228; 1 . n! 팩토리얼 구하기 n! = 1 x 2 x ... x n | . | n의 값에 상관없이 변수 n, 변수 fac, 변수 index 만 필요함 | 공간 복잡도는 O(1) | . 공간 복잡도 계산은 실제 알고리즘 실행시 사용되는 저장공간을 계산하면 됨 . def factorial(n): fac = 1 for index in range(2, n + 1): fac = fac * index return fac factorial(3) . 6 . &#50696;&#51228; 2 . n! 팩토리얼 구하기 n! = 1 x 2 x ... x n | . | 재귀함수를 사용하였으므로, n에 따라, 변수 n이 n개가 만들어지게 됨 factorial 함수를 재귀 함수로 1까지 호출하였을 경우, n부터 1까지 스택에 쌓이게 됨 | . | 공간 복잡도는 O(n) | . def factorial(n): if n &gt; 1: return n * factorial(n - 1) else: return 1 factorial(3) . 6 .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/12/complexity.html",
            "relUrl": "/algorithm/2020/01/12/complexity.html",
            "date": " • Jan 12, 2020"
        }
        
    
  
    
        ,"post87": {
            "title": "[알고리즘] 재귀 용법 (Recursive Call)",
            "content": "&#51116;&#44480; &#50857;&#48277; (Recursive Call) . 함수 안에서 동일한 함수를 호출하는 형태 | . &#50696;&#51228; 1: factorial . &#49884;&#44036; &#48373;&#51105;&#46020;&#50752; &#44277;&#44036; &#48373;&#51105;&#46020; . factorial(n) 은 n - 1 번의 factorial() 함수를 호출해서, 곱셈을 함 . 일종의 n-1번 반복문을 호출한 것과 동일 | factorial() 함수를 호출할 때마다, 지역변수 n 이 생성됨 | . | 시간 복잡도/공간 복잡도는 O(n-1) 이므로 결국, 둘 다 O(n) . | . def factorial(num): if num &gt; 1: return num * factorial(num - 1) else: return num for num in range(10): print (factorial(num)) . 0 1 2 6 24 120 720 5040 40320 362880 . &#51116;&#44480; &#54840;&#52636;&#51008; &#49828;&#53469;&#51032; &#51204;&#54805;&#51201;&#51064; &#50696; . 함수는 내부적으로 스택처럼 관리됨 | 파이썬에서 재귀 함수의 깊이는 1000회가 최대치 | . . &#50696;&#51228; 2: 1&#48512;&#53552; num&#44620;&#51648;&#51032; &#44273; . def multiple(num): if num &lt;= 1: return num return num * multiple(num - 1) multiple(10) . 3628800 . &#50696;&#51228; 3: &#47532;&#49828;&#53944;&#51032; &#54633; . def sum_list(data): if len(data) &lt;= 1: return data[0] return data[0] + sum_list(data[1:]) import random data = random.sample(range(100), 10) sum_list(data) . 579 . &#50696;&#51228; 4: &#54924;&#47928;(palindrome) &#54032;&#48324; . def palindrome(string): if len(string) &lt;= 1: return True if string[0] == string[-1]: return palindrome(string[1:-1]) else: return False palindrome(&#39;aoa&#39;) . True . &#50696;&#51228; 5 . 정수 n에 대해 n이 홀수이면 3 X n + 1 을 하고 n이 짝수이면 n 을 2로 나눈다. 이렇게 계속 진행해서 n 이 결국 1이 될 때까지 2와 3의 과정을 반복하는 알고리즘 작성. | . def func(n): print(n) if n == 1: return n if n % 2 == 1: return func(3 * n + 1) else: return func(int(n / 2)) func(5) . 5 16 8 4 2 1 . 1 . &#50696;&#51228; 6 . 정수 n이 입력으로 주어졌을 때, n을 1, 2, 3의 합으로 나타낼 수 있는 방법의 수 | f(n)은 f(n-1) + f(n-2) + f(n-3) | . def func(data): if data == 1: return 1 elif data == 2: return 2 elif data == 3: return 4 return func(data - 1) + func(data - 2) + func(data - 3) func(5) . 13 . &#50696;&#51228; 7: &#51652;&#48277; &#48320;&#54872; . def convert_base(number, base): T = list(range(10)) i, j = divmod(number, base) if i == 0: return str(T[j]) else: return convert_base(i, base) + str(T[j]) # 50을 2진법으로 변환 convert_base(50, 2) # 2진수 b = bin(value) # 8진수 o = oct(value) # 16진수 h = hex(value) # b = format(value, &#39;b&#39;) # o = format(value, &#39;o&#39;) # h = format(value, &#39;x&#39;) . &#39;110010&#39; .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/11/recursive.html",
            "relUrl": "/algorithm/2020/01/11/recursive.html",
            "date": " • Jan 11, 2020"
        }
        
    
  
    
        ,"post88": {
            "title": "[Trouble Pyspark] java.net.BindException 에러",
            "content": "Environment . MacOS 10.14.6 | Python 3.7.3 | Spark 2.4.0 | . Trouble . java.net.BindException: Can&#39;t assign requested address: Service &#39;sparkDriver&#39; . Shooting . 환경설정(~/.bash_profile, ${SPARK_HOME}/conf/spark-env.sh)에서 SPARK_LOCAL_IP가 사용자의 hostname과 일치하는지 확인 | . .bash_profile 수정 . SPARK_LOCAL_IP=127.0.0.1 . /etc/hosts 수정 . 127.0.0.1 localhost .",
            "url": "https://safenumz.github.io/blog/trouble/2020/01/10/Spark-java_net_BindException.html",
            "relUrl": "/trouble/2020/01/10/Spark-java_net_BindException.html",
            "date": " • Jan 10, 2020"
        }
        
    
  
    
        ,"post89": {
            "title": "[알고리즘] 정렬 알고리즘 (Sort Algorithm)",
            "content": "&#51221;&#47148; &#50508;&#44256;&#47532;&#51608; . &#48260;&#48660; &#51221;&#47148; (bubble sort) . 두 인접한 데이터를 비교해서, 앞에 있는 데이터가 뒤에 있는 데이터보다 크면, 자리를 바꾸는 정렬 알고리즘 | 반복문이 두 개 O($n^2$) 최악의 경우, $ frac { n * (n - 1)}{ 2 }$ | . | 완전 정렬이 되어 있는 상태라면 최선은 O(n) | . . def bubble_sort(data): for i in range(len(data) - 1): swap = False for j in range(len(data) - 1 - i): if data[j] &gt; data[j + 1]: data[j], data[j + 1] = data[j + 1], data[j] swap = True if not swap: break return data import random data_list = random.sample(range(100), 50) print(bubble_sort(data_list)) . [0, 1, 2, 3, 4, 8, 9, 14, 17, 18, 19, 20, 23, 25, 27, 31, 36, 37, 39, 42, 43, 44, 46, 47, 49, 50, 51, 54, 56, 57, 58, 59, 60, 64, 66, 69, 71, 73, 75, 76, 77, 78, 82, 84, 86, 87, 95, 96, 97, 98] . &#49341;&#51077; &#51221;&#47148; (insertion sort) . 삽입 정렬은 두 번째 인덱스부터 시작 | 해당 인덱스(key 값) 앞에 있는 데이터(B)부터 비교해서 key 값이 더 작으면, B값을 뒤 인덱스로 복사 | 이를 key 값이 더 큰 데이터를 만날때까지 반복, 그리고 큰 데이터를 만난 위치 바로 뒤에 key 값을 이동 | 반복문이 두 개 O($n^2$) 최악의 경우, $ frac { n * (n - 1)}{ 2 }$ | . | 완전 정렬이 되어 있는 상태라면 최선은 O(n) | . . def insertion_sort(data): for i in range(len(data) - 1): for j in range(i + 1, 0, -1): if data[j] &lt; data[j -1]: data[j] , data[j - 1] = data[j - 1], data[j] else: break return data import random data_list = random.sample(range(100), 50) print(insertion_sort(data_list)) . [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 18, 19, 21, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 45, 46, 47, 49, 51, 57, 65, 66, 69, 71, 77, 78, 79, 80, 82, 83, 84, 90, 91, 92, 96, 98, 99] . &#49440;&#53469; &#51221;&#47148; (selection sort) . 주어진 데이터 중, 최소값을 찾고, 해당 최소값을 데이터 맨 앞에 위치한 값과 교체함, 그리고 맨 앞의 위치를 뺀 나머지 데이터를 동일한 방법으로 반복하는 정렬 알고리즘 | 반복문이 두 개 O($n^2$) 실제로 상세하게 계산하면, $ frac { n * (n - 1)}{ 2 }$ | . | . . def selection_sort(data): for i in range(len(data) - 1): lowest = i for j in range(i + 1, len(data)): if data[lowest] &gt; data[j]: lowest = j data[lowest], data[i] = data[i], data[lowest] return data import random data_list = random.sample(range(100), 10) selection_sort(data_list) . [0, 2, 8, 14, 18, 26, 37, 62, 74, 79] .",
            "url": "https://safenumz.github.io/blog/algorithm/2020/01/10/sort.html",
            "relUrl": "/algorithm/2020/01/10/sort.html",
            "date": " • Jan 10, 2020"
        }
        
    
  
    
        ,"post90": {
            "title": "[Spark] PySpark DataTypes",
            "content": "%load_ext sparksql_magic spark.conf.set(&quot;spark.sql.repl.eagerEval.enabled&quot;,True) import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . df = spark.read.format(&quot;csv&quot;) .option(&quot;header&quot;, &quot;true&quot;) .option(&quot;inferSchema&quot;, &quot;true&quot;) .load(&quot;s3a://data/retail-data/by-day/2010-12-01.csv&quot;) df.printSchema() df.createOrReplaceTempView(&quot;dfTable&quot;) . root |-- InvoiceNo: string (nullable = true) |-- StockCode: string (nullable = true) |-- Description: string (nullable = true) |-- Quantity: integer (nullable = true) |-- InvoiceDate: string (nullable = true) |-- UnitPrice: double (nullable = true) |-- CustomerID: double (nullable = true) |-- Country: string (nullable = true) . df.show(5) . +++--+--+-++-+--+ |InvoiceNo|StockCode| Description|Quantity| InvoiceDate|UnitPrice|CustomerID| Country| +++--+--+-++-+--+ | 536365| 85123A|WHITE HANGING HEA...| 6|2010-12-01 08:26:00| 2.55| 17850.0|United Kingdom| | 536365| 71053| WHITE METAL LANTERN| 6|2010-12-01 08:26:00| 3.39| 17850.0|United Kingdom| | 536365| 84406B|CREAM CUPID HEART...| 8|2010-12-01 08:26:00| 2.75| 17850.0|United Kingdom| | 536365| 84029G|KNITTED UNION FLA...| 6|2010-12-01 08:26:00| 3.39| 17850.0|United Kingdom| | 536365| 84029E|RED WOOLLY HOTTIE...| 6|2010-12-01 08:26:00| 3.39| 17850.0|United Kingdom| +++--+--+-++-+--+ only showing top 5 rows . &#49828;&#54028;&#53356; &#45936;&#51060;&#53552; &#53440;&#51077;&#51004;&#47196; &#48320;&#54872; . lit 함수는 다른 언어의 데이터 타입을 스파크 데이터 타입에 맞게 변환 | . from pyspark.sql.functions import lit df.select(lit(5), lit(&quot;five&quot;), lit(5.0)) . DataFrame[5: int, five: string, 5.0: double] . &#48520;&#47532;&#50616; &#45936;&#51060;&#53552; &#53440;&#51077; . from pyspark.sql.functions import col df.where(col(&quot;InvoiceNo&quot;) != 536365) .select(&quot;InvoiceNo&quot;, &quot;Description&quot;) .show(5, False) . ++--+ |InvoiceNo|Description | ++--+ |536366 |HAND WARMER UNION JACK | |536366 |HAND WARMER RED POLKA DOT | |536367 |ASSORTED COLOUR BIRD ORNAMENT| |536367 |POPPY&#39;S PLAYHOUSE BEDROOM | |536367 |POPPY&#39;S PLAYHOUSE KITCHEN | ++--+ only showing top 5 rows . df.where(&quot;InvoiceNo = 536365&quot;).show(5, False) . +++--+--+-++-+--+ |InvoiceNo|StockCode|Description |Quantity|InvoiceDate |UnitPrice|CustomerID|Country | +++--+--+-++-+--+ |536365 |85123A |WHITE HANGING HEART T-LIGHT HOLDER |6 |2010-12-01 08:26:00|2.55 |17850.0 |United Kingdom| |536365 |71053 |WHITE METAL LANTERN |6 |2010-12-01 08:26:00|3.39 |17850.0 |United Kingdom| |536365 |84406B |CREAM CUPID HEARTS COAT HANGER |8 |2010-12-01 08:26:00|2.75 |17850.0 |United Kingdom| |536365 |84029G |KNITTED UNION FLAG HOT WATER BOTTLE|6 |2010-12-01 08:26:00|3.39 |17850.0 |United Kingdom| |536365 |84029E |RED WOOLLY HOTTIE WHITE HEART. |6 |2010-12-01 08:26:00|3.39 |17850.0 |United Kingdom| +++--+--+-++-+--+ only showing top 5 rows . from pyspark.sql.functions import col, instr priceFilter = col(&quot;UnitPrice&quot;) &gt; 600 descripFilter = instr(df.Description, &quot;POSTAGE&quot;) &gt;= 1 df.where(df.StockCode.isin(&quot;DOT&quot;)).where(priceFilter | descripFilter).show() . +++--+--+-++-+--+ |InvoiceNo|StockCode| Description|Quantity| InvoiceDate|UnitPrice|CustomerID| Country| +++--+--+-++-+--+ | 536544| DOT|DOTCOM POSTAGE| 1|2010-12-01 14:32:00| 569.77| null|United Kingdom| | 536592| DOT|DOTCOM POSTAGE| 1|2010-12-01 17:06:00| 607.49| null|United Kingdom| +++--+--+-++-+--+ . %%sparksql SELECT * FROM dfTable WHERE StockCode in (&quot;DOT&quot;) AND (UnitPrice &gt; 600 OR instr(Description, &quot;POSTAGE&quot;) &gt;= 1) . InvoiceNo | StockCode | Description | Quantity | InvoiceDate | UnitPrice | CustomerID | Country | . 536544 | DOT | DOTCOM POSTAGE | 1 | 2010-12-01 14:32:00 | 569.77 | null | United Kingdom | . 536592 | DOT | DOTCOM POSTAGE | 1 | 2010-12-01 17:06:00 | 607.49 | null | United Kingdom | . from pyspark.sql.functions import instr DOTCodeFilter = col(&quot;StockCode&quot;) == &quot;DOT&quot; priceFilter = col(&quot;UnitPrice&quot;) &gt; 600 descripFilter = instr(col(&quot;Description&quot;), &quot;POSTAGE&quot;) &gt;= 1 df.withColumn(&quot;isExpensive&quot;, DOTCodeFilter &amp; (priceFilter | descripFilter)) .where(&quot;isExpensive&quot;) .select(&quot;unitPrice&quot;, &quot;isExpensive&quot;).show(5) . ++--+ |unitPrice|isExpensive| ++--+ | 569.77| true| | 607.49| true| ++--+ . %%sparksql SELECT UnitPrice, (StockCode = &#39;DOT&#39; AND (UnitPrice &gt; 600 OR instr(Description, &quot;POSTAGE&quot;) &gt;= 1)) as isExpensive FROM dfTable WHERE (StockCode = &#39;DOT&#39; AND (UnitPrice &gt; 600 OR instr(Description, &quot;POSTAGE&quot;) &gt;= 1)) . UnitPrice | isExpensive | . 569.77 | True | . 607.49 | True | . from pyspark.sql.functions import expr df.withColumn(&quot;isExpensive&quot;, expr(&quot;NOT UnitPrice &lt;= 250&quot;)) .where(&quot;isExpensive&quot;) .select(&quot;Description&quot;, &quot;UnitPrice&quot;).show(5) . +--++ | Description|UnitPrice| +--++ |DOTCOM POSTAGE| 569.77| |DOTCOM POSTAGE| 607.49| +--++ . 두 컬럼 사이의 상관관계 | . from pyspark.sql.functions import corr df.stat.corr(&quot;Quantity&quot;, &quot;UnitPrice&quot;) df.select(corr(&quot;Quantity&quot;, &quot;UnitPrice&quot;)).show() . +-+ |corr(Quantity, UnitPrice)| +-+ | -0.04112314436835551| +-+ . %%sparksql SELECT corr(Quantity, UnitPrice) FROM dfTable . corr(Quantity, UnitPrice) | . -0.04112314436835551 | . 요약 통계 | . df.describe().show() . +-+--++--++-+++--+ |summary| InvoiceNo| StockCode| Description| Quantity| InvoiceDate| UnitPrice| CustomerID| Country| +-+--++--++-+++--+ | count| 3108| 3108| 3098| 3108| 3108| 3108| 1968| 3108| | mean| 536516.684944841|27834.304044117645| null| 8.627413127413128| null| 4.151946589446603|15661.388719512195| null| | stddev|72.89447869788873|17407.897548583845| null|26.371821677029203| null|15.638659854603892|1854.4496996893627| null| | min| 536365| 10002| 4 PURPLE FLOCK D...| -24|2010-12-01 08:26:00| 0.0| 12431.0| Australia| | max| C536548| POST|ZINC WILLIE WINKI...| 600|2010-12-01 17:35:00| 607.49| 18229.0|United Kingdom| +-+--++--++-+++--+ . 직접 집계 | . from pyspark.sql.functions import count, mean, stddev_pop, min, max . 데이터의 백분위수 계산 | . olNmae = &quot;UnitPrice&quot; quantileProbs = [0.5] relError = 0.05 df.stat.approxQuantile(&quot;UnitPrice&quot;, quantileProbs, relError) . [2.51] . 교차표, 자주 사용하는 항목 쌍 확인 | . df.stat.crosstab(&quot;StockCode&quot;, &quot;Quantity&quot;) . StockCode_Quantity-1-10-12-2-24-3-4-5-6-711010011121201281314144151617181919222020021216222324252522728288330323334363844404324748480550566606006477072880996 . 22578 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 21327 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22064 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 21080 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 22219 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 3 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 21908 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22818 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 15056BL | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 72817 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22545 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22988 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | . 22274 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 20750 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 82616C | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 21703 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22899 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 22379 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22422 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22769 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 22585 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . only showing top 20 rows df.stat.freqItems([&quot;StockCode&quot;, &quot;Quantity&quot;]).show() . +--+--+ | StockCode_freqItems| Quantity_freqItems| +--+--+ |[90214E, 20728, 2...|[200, 128, 23, 50...| +--+--+ . 모든 로우에 고유 ID 값 추가 | . from pyspark.sql.functions import monotonically_increasing_id df.select(monotonically_increasing_id()).show(2) . +--+ |monotonically_increasing_id()| +--+ | 0| | 1| +--+ only showing top 2 rows . &#47928;&#51088;&#50676; &#45936;&#51060;&#53552; &#53440;&#51077; . initcap 주어진 문자열에서 공백으로 나눠진 모든 단어의 첫 글자를 대문자로 변경 | . from pyspark.sql.functions import initcap df.select(initcap(col(&quot;Description&quot;))).show(2, False) . +-+ |initcap(Description) | +-+ |White Hanging Heart T-light Holder| |White Metal Lantern | +-+ only showing top 2 rows . %%sparksql SELECT initcap(Description) FROM dfTable LIMIT 2 . initcap(Description) | . White Hanging Heart T-light Holder | . White Metal Lantern | . upper, lower: 대소문자 변환 | . from pyspark.sql.functions import upper, lower df.select(col(&quot;Description&quot;), lower(col(&quot;Description&quot;)), upper(col(&quot;Description&quot;))).show(2) . +--+--+--+ | Description| lower(Description)| upper(Description)| +--+--+--+ |WHITE HANGING HEA...|white hanging hea...|WHITE HANGING HEA...| | WHITE METAL LANTERN| white metal lantern| WHITE METAL LANTERN| +--+--+--+ only showing top 2 rows . lpad, ltrim, rpad, rtrim, trim: 문자열 주변의 공백을 제거하거나 추가 | lpad 함수나 rpad 함수에 문자열에 길이 보다 작은 숫자를 넘기면 문자열의 오른쪽부터 제거됨 | . from pyspark.sql.functions import lit, ltrim, rtrim, rpad, lpad, trim df.select( ltrim(lit(&quot; HELLO &quot;)).alias(&quot;ltrim&quot;), rtrim(lit(&quot; HELLO &quot;)).alias(&quot;rtrim&quot;), trim(lit(&quot; HELLO &quot;)).alias(&quot;trim&quot;), lpad(lit(&quot;HELLO&quot;), 3, &quot; &quot;).alias(&quot;lpad&quot;), rpad(lit(&quot;HELLO&quot;), 10, &quot; &quot;).alias(&quot;rpad&quot;) ).show(2) . +--+--+--+-+-+ | ltrim| rtrim| trim|lpad| rpad| +--+--+--+-+-+ |HELLO | HELLO|HELLO| HEL|HELLO | |HELLO | HELLO|HELLO| HEL|HELLO | +--+--+--+-+-+ only showing top 2 rows . %%sparksql SELECT ltrim(&#39; HELLO &#39;), rtrim(&#39; HELLO &#39;), trim(&#39; HELLO &#39;), lpad(&#39;HELLOOO &#39;, 3, &#39; &#39;), rpad(&#39;HELLOOO &#39;, 10, &#39; &#39;) FROM dfTable LIMIT 2 . ltrim( HELLO ) | rtrim( HELLO ) | trim( HELLO ) | lpad(HELLOOO , 3, ) | rpad(HELLOOO , 10, ) | . HELLO | HELLO | HELLO | HEL | HELLOOO | . HELLO | HELLO | HELLO | HEL | HELLOOO | . &#51221;&#44508; &#54364;&#54788;&#49885; . 스파크는 정규 표현식을 위해 regexp_extract 함수와 regexp_replace 함수를 제공 | . from pyspark.sql.functions import regexp_replace regex_string = &quot;BLACK|WHITE|RED|GREEN|BLUE&quot; df.select( regexp_replace(col(&quot;Description&quot;), regex_string, &quot;COLOR&quot;).alias(&quot;color_clean&quot;), col(&quot;Description&quot;) ).show(2) . +--+--+ | color_clean| Description| +--+--+ |COLOR HANGING HEA...|WHITE HANGING HEA...| | COLOR METAL LANTERN| WHITE METAL LANTERN| +--+--+ only showing top 2 rows . %%sparksql SELECT regexp_replace(Description, &#39;BLACK|WHITE|RED|GREEN|BLUE&#39;, &#39;COLOR&#39;) as color_clean, Description FROM dfTable LIMIT 2 . color_clean | Description | . COLOR HANGING HEART T-LIGHT HOLDER | WHITE HANGING HEART T-LIGHT HOLDER | . COLOR METAL LANTERN | WHITE METAL LANTERN | . translate: 주어진 문자를 다른 문자로 치환 | . from pyspark.sql.functions import translate df.select(translate(col(&quot;Description&quot;), &quot;LEET&quot;, &quot;1337&quot;), col(&quot;Description&quot;)).show(2) . +-+--+ |translate(Description, LEET, 1337)| Description| +-+--+ | WHI73 HANGING H3A...|WHITE HANGING HEA...| | WHI73 M37A1 1AN73RN| WHITE METAL LANTERN| +-+--+ only showing top 2 rows . regexp_extract: 정규식으로 값 추출 | . from pyspark.sql.functions import regexp_extract extract_str = &quot;(BLACK|WHITE|RED|GREEN|BLUE)&quot; df.select( regexp_extract(col(&quot;Description&quot;), extract_str, 1).alias(&quot;color_clean&quot;), col(&quot;Description&quot;) ).show(2) . +--+--+ |color_clean| Description| +--+--+ | WHITE|WHITE HANGING HEA...| | WHITE| WHITE METAL LANTERN| +--+--+ only showing top 2 rows . 값 추출 없이 단순히 값의 존재 여부 확인 | . from pyspark.sql.functions import instr containBlack = instr(col(&quot;Description&quot;), &quot;BLACK&quot;) &gt;= 1 containWhite = instr(col(&quot;Description&quot;), &quot;WHITE&quot;) &gt;= 1 df.withColumn(&quot;hasSimpleColor&quot;, containBlack | containWhite) .where(&quot;hasSimpleColor&quot;) .select(&quot;Description&quot;).show(3, False) . +-+ |Description | +-+ |WHITE HANGING HEART T-LIGHT HOLDER| |WHITE METAL LANTERN | |RED WOOLLY HOTTIE WHITE HEART. | +-+ only showing top 3 rows . %%sparksql SELECT Description FROM dfTable WHERE instr(Description, &#39;BLACK&#39;) &gt;= 1 OR instr(Description, &#39;WHITE&#39;) &gt;= 1 LIMIT 3 . Description | . WHITE HANGING HEART T-LIGHT HOLDER | . WHITE METAL LANTERN | . RED WOOLLY HOTTIE WHITE HEART. | . locate: 문자열의 위치를 정수로 반환하는 locate 함수를 사용 | . from pyspark.sql.functions import expr, locate simpleColors = [&quot;black&quot;, &quot;white&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] def color_locator(column, color_string): return locate(color_string.upper(), column).cast(&quot;boolean&quot;).alias(&quot;is_&quot; + color_string) selectedColumns = [color_locator(df.Description, c) for c in simpleColors] selectedColumns.append(expr(&quot;*&quot;)) df.select(*selectedColumns).where(expr(&quot;is_white OR is_red&quot;)) .select(&quot;Description&quot;).show(3, False) . +-+ |Description | +-+ |WHITE HANGING HEART T-LIGHT HOLDER| |WHITE METAL LANTERN | |RED WOOLLY HOTTIE WHITE HEART. | +-+ only showing top 3 rows . &#45216;&#51676;&#50752; &#53440;&#51076;&#49828;&#53484;&#54532; &#45936;&#51060;&#53552; &#53440;&#51077; . 시간대 설정이 필요하면 spark.conf.sessionLocalTimeZone 속성에서 조정 가능 | 이 때, 시간대 포맷은 자바 TimeZone 포맷을 따라야 함 | . from pyspark.sql.functions import current_date, current_timestamp dateDF = spark.range(10) .withColumn(&quot;today&quot;, current_date()) .withColumn(&quot;now&quot;, current_timestamp()) dateDF.createOrReplaceTempView(&quot;dateTable&quot;) dateDF.printSchema() . root |-- id: long (nullable = false) |-- today: date (nullable = false) |-- now: timestamp (nullable = false) . 5일 전후의 날짜 계산 | . from pyspark.sql.functions import date_add, date_sub dateDF.select(date_sub(col(&quot;today&quot;), 5), date_add(col(&quot;today&quot;), 5)).show() . +++ |date_sub(today, 5)|date_add(today, 5)| +++ | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| | 2022-05-10| 2022-05-20| +++ . datediff: 두 날짜 사이의 일 수를 반환 | months_between: 두 날짜 사이의 개월 수 반환 | to_date: 문자열을 날짜로 변환 | . from pyspark.sql.functions import datediff, months_between, to_date dateDF.withColumn(&quot;week_age&quot;, date_sub(col(&quot;today&quot;), 7)) .select(datediff(col(&quot;week_age&quot;), col(&quot;today&quot;))).show(1) dateDF.select( to_date(lit(&quot;2016-01-01&quot;)).alias(&quot;start&quot;), to_date(lit(&quot;2017-05-22&quot;)).alias(&quot;end&quot;) ).select(months_between(col(&quot;start&quot;), col(&quot;end&quot;))).show(1) . +-+ |datediff(week_age, today)| +-+ | -7| +-+ only showing top 1 row +--+ |months_between(start, end, true)| +--+ | -16.67741935| +--+ only showing top 1 row . from pyspark.sql.functions import to_date, lit spark.range(5).withColumn(&quot;date&quot;, lit(&quot;2017-01-01&quot;)) .select(to_date(col(&quot;date&quot;))).show(1) . +-+ |to_date(date)| +-+ | 2017-01-01| +-+ only showing top 1 row . 년-월-일 형태가 아닌 년-일-월 형태의 날자 포맷에서는 파싱할 수 없으므로 null 값을 반환 | . dateDF.select(to_date(lit(&quot;2016-20-12&quot;)), to_date(lit(&quot;2017-12-11&quot;))).show(1) . +-+-+ |to_date(2016-20-12)|to_date(2017-12-11)| +-+-+ | null| 2017-12-11| +-+-+ only showing top 1 row . dateFormat을 지정하여 해결 | . from pyspark.sql.functions import to_date dateFormat = &quot;yyyy-dd-MM&quot; cleanDateDF = spark.range(1).select( to_date(lit(&quot;2017-12-11&quot;), dateFormat).alias(&quot;date&quot;), to_date(lit(&quot;2017-20-12&quot;), dateFormat).alias(&quot;date2&quot;) ) cleanDateDF.createOrReplaceTempView(&quot;dateTable2&quot;) . %%sparksql SELECT to_date(date, &#39;yyyy-dd-MM&#39;), to_date(date2, &#39;yyyy-dd-MM&#39;), to_date(date) FROM dateTable2 . to_date(date, yyyy-dd-MM) | to_date(date2, yyyy-dd-MM) | to_date(date) | . 2017-11-12 | 2017-12-20 | 2017-11-12 | . timestamp로 변경 | . from pyspark.sql.functions import col, to_timestamp cleanDateDF.select(to_timestamp(col(&quot;date&quot;), dateFormat)).show() . ++ |to_timestamp(date, yyyy-dd-MM)| ++ | 2017-11-12 00:00:00| ++ . %%sparksql SELECT to_timestamp(date, &#39;yyy-dd-MM&#39;), to_timestamp(date2, &#39;yyy-dd-MM&#39;) FROM dateTable2 . to_timestamp(date, yyy-dd-MM) | to_timestamp(date2, yyy-dd-MM) | . 2017-11-12 00:00:00 | 2017-12-20 00:00:00 | . cast(date as timestamp): date를 timestamp로 변환 | . %%sparksql SELECT cast(to_date(&quot;2017-01-01&quot;, &quot;yyyy-dd-MM&quot;) as timestamp) . CAST(to_date(2017-01-01, yyyy-dd-MM) AS TIMESTAMP) | . 2017-01-01 00:00:00 | . cleanDateDF.filter(col(&quot;date2&quot;) &gt; lit(&quot;2017-12-12&quot;)).show() . +-+-+ | date| date2| +-+-+ |2017-11-12|2017-12-20| +-+-+ . cleanDateDF.filter(col(&quot;date2&quot;) &gt; &quot;&#39;2017-12-12&#39;&quot;).show() . +-+--+ |date|date2| +-+--+ +-+--+ .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/10/pyspark-data-type.html",
            "relUrl": "/spark/2020/01/10/pyspark-data-type.html",
            "date": " • Jan 10, 2020"
        }
        
    
  
    
        ,"post91": {
            "title": "[ShellScript] 파일 내용 동일성 비교 (diff)",
            "content": "파일 내용 동일성 비교 . diff_check.sh . 비교해야 할 프로그램 리스트가 저장된 diff1.txt와 diff2.txt을 각각 한 줄씩 읽어들이면서 diff 명령어로 파일 내용의 동일성을 검증한다. . #!/bin/bash FILE1=$1 FILE2=$2 # 파일 라인 수 확인 function max_line() { file_name1=$1 file_name2=$2 file_num1=`cat $file_name1 | wc -l` file_num2=`cat $file_name2 | wc -l` if (( $file_num1 &gt;= $file_num2 )) then echo $file_num1 else echo $file_num2 fi } function read_file() { file_name=$1 line_num=$2 sed -n &quot;${line_num}p&quot; $file_name } max_num=$(max_line $FILE1 $FILE2) echo &quot;Max line num is ${max_num}&quot; for (( i=0; i&lt;$max_num; i++ )) do file1_line=$(read_file $FILE1 $i) file2_line=$(read_file $FILE2 $i) if diff $file1_line $file2_line &gt; /dev/null then echo &quot;Nothing changed: ${file1_line}, ${file2_line}&quot; else echo &quot;Something changed: ${file1_line}, ${file2_line}&quot; fi done . diff1.txt . Untitled.ipynb Untitled1.ipynb Untitled11.ipynb Untitled12.ipynb Untitled2.ipynb Untitled3.ipynb Untitled4.ipynb Untitled5.ipynb Untitled6.ipynb Untitled7.ipynb Untitled8.ipynb Untitled9.ipynb . diff2.txt . Untitled.ipynb Untitled1.ipynb Untitled11.ipynb Untitled12.ipynb Untitled2.ipynb Untitled3.ipynb Untitled4.ipynb Untitled.ipynb Untitled6.ipynb Untitled7.ipynb Untitled8.ipynb . 실행 . $ diff_check.sh diff1.txt diff2.txt Nothing changed: Untitled.ipynb, Untitled.ipynb Nothing changed: Untitled1.ipynb, Untitled1.ipynb Nothing changed: Untitled11.ipynb, Untitled11.ipynb Nothing changed: Untitled12.ipynb, Untitled12.ipynb Nothing changed: Untitled2.ipynb, Untitled2.ipynb Nothing changed: Untitled3.ipynb, Untitled3.ipynb Nothing changed: Untitled4.ipynb, Untitled4.ipynb Something changed: Untitled5.ipynb, Untitled.ipynb Nothing changed: Untitled6.ipynb, Untitled6.ipynb Nothing changed: Untitled7.ipynb, Untitled7.ipynb Nothing changed: Untitled8.ipynb, Untitled8.ipynb .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/05/ShellScript-%ED%8C%8C%EC%9D%BC_%EB%8F%99%EC%9D%BC%EC%84%B1_%EB%B9%84%EA%B5%90_(diff).html",
            "relUrl": "/linux/2020/01/05/ShellScript-%ED%8C%8C%EC%9D%BC_%EB%8F%99%EC%9D%BC%EC%84%B1_%EB%B9%84%EA%B5%90_(diff).html",
            "date": " • Jan 5, 2020"
        }
        
    
  
    
        ,"post92": {
            "title": "[ShellScript] 에러메세지 로그 저장",
            "content": "에러메시지 로그 저장 . err_check_script.sh . #!/bin/bash PYTHON_PATH=/anaconda3/bin/python3 MAIN_JOB=$1 shift PARAMETER=$@ # 로그 파일 생성 function make_log_file() { HEAD=$1 MID=$2 while true do TIMESTAMP=`date &quot;+%Y%m%d_%H%M%S&quot;` LOG_FILE=&quot;${HEAD}_${MID}_${TIMESTAMP}.chk&quot; if [ ! -f $LOG_FILE ] then touch $LOG_FILE echo $LOG_FILE break fi done } # 에러 체크 함수 function error_check() { status=$1 if [ &quot;$status&quot; == &quot;0&quot; ] then return 0 elif [ &quot;$status&quot; == &quot;1&quot; ] then err_time=`date &quot;+%Y-%m-%d %H:%M:%S&quot;` err_msg=`cat $err_tmp_file` LOG_FILE=$( make_log_file log $MAIN_JOB ) echo &quot;[ Log Time ]&quot; &gt;&gt; $LOG_FILE echo &quot;$err_time&quot; &gt;&gt; $LOG_FILE echo &quot;[ File Name ]&quot; &gt;&gt; $LOG_FILE echo &quot;$MAIN_JOB&quot; &gt;&gt; $LOG_FILE echo &quot;[ Error Message ]&quot; &gt;&gt; $LOG_FILE echo &quot;$err_msg&quot; &gt;&gt; $LOG_FILE return 2 fi } # Python MAIN_JOB 실행 err_tmp_file=$( make_log_file err $MAIN_JOB ) $PYTHON_PATH $MAIN_JOB $PARAMETER 2&gt; $err_tmp_file error_check $?; status=$? rm $err_tmp_file exit $status . 실행 . $ err_check_script.sh test.py 1 chk .",
            "url": "https://safenumz.github.io/blog/linux/2020/01/05/ShellScript-%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80_%EB%A1%9C%EA%B7%B8%EC%A0%80%EC%9E%A5.html",
            "relUrl": "/linux/2020/01/05/ShellScript-%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80_%EB%A1%9C%EA%B7%B8%EC%A0%80%EC%9E%A5.html",
            "date": " • Jan 5, 2020"
        }
        
    
  
    
        ,"post93": {
            "title": "[Spark] PySpark Read Write",
            "content": "import os MINIO_ACCESS_KEY = os.environ[&#39;MINIO_ACCESS_KEY&#39;] MINIO_SECRET_KEY = os.environ[&#39;MINIO_SECRET_KEY&#39;] spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.access.key&quot;, MINIO_ACCESS_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.secret.key&quot;, MINIO_SECRET_KEY) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.endpoint&quot;, &quot;http://lab101:10170&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.impl&quot;, &quot;org.apache.hadoop.fs.s3a.S3AFileSystem&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.connection.ssl.enabled&quot;, &quot;false&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.path.style.access&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;com.amazonaws.services.s3.enableV2&quot;, &quot;true&quot;) spark.sparkContext._jsc.hadoopConfiguration() .set(&quot;fs.s3a.aws.credentials.provider&quot;, &quot;org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider&quot;) . CSV &#54028;&#51068; . csvFile = spark.read.format(&quot;csv&quot;) .option(&quot;header&quot;, &quot;true&quot;) .option(&quot;mode&quot;, &quot;FAILFAST&quot;) .option(&quot;inferSchema&quot;, &quot;true&quot;) .load(&quot;s3a://data/flight-data/csv/2010-summary.csv&quot;) . csvFile.show() . +--+-+--+ | DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count| +--+-+--+ | United States| Romania| 1| | United States| Ireland| 264| | United States| India| 69| | Egypt| United States| 24| | Equatorial Guinea| United States| 1| | United States| Singapore| 25| | United States| Grenada| 54| | Costa Rica| United States| 477| | Senegal| United States| 29| | United States| Marshall Islands| 44| | Guyana| United States| 17| | United States| Sint Maarten| 53| | Malta| United States| 1| | Bolivia| United States| 46| | Anguilla| United States| 21| |Turks and Caicos ...| United States| 136| | United States| Afghanistan| 2| |Saint Vincent and...| United States| 1| | Italy| United States| 390| | United States| Russia| 156| +--+-+--+ only showing top 20 rows . csvFile.write.format(&quot;csv&quot;).mode(&quot;overwrite&quot;).option(&quot;sep&quot;, &quot; t&quot;) .save(&quot;s3a://tmp/my-tsv-file.csv&quot;) . JSON &#54028;&#51068; . 자바스크립트 객체 표기법(JavaScript Object Notation) | 스파크에서는 JSON 파일을 사용할 때, 줄로 구분된 JSON을 기본적으로 사용 | multiLine 옵션을 이용해 줄로 구분된 방식과 여러 줄로 구성된 방식을 선택적으로 사용할 수 있음 | multiLine 옵션을 true로 설정하면 전체 파일을 하나의 JSON 객체로 읽을 수 있음 | . df = spark.read.format(&quot;json&quot;).option(&quot;mode&quot;, &quot;FAILFAST&quot;) .option(&quot;inferSchema&quot;, &quot;true&quot;) .load(&quot;s3a://data/flight-data/json/2010-summary.json&quot;) df.show(5) . +--+-+--+ |DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count| +--+-+--+ | United States| Romania| 1| | United States| Ireland| 264| | United States| India| 69| | Egypt| United States| 24| |Equatorial Guinea| United States| 1| +--+-+--+ only showing top 5 rows . df.write.format(&quot;json&quot;).mode(&quot;overwrite&quot;).save(&quot;s3a://tmp/my-json-file.json&quot;) . Parquet &#54028;&#51068; . 읽기 연산시 JSON이나 CSV보다 효율적으로 동작 | . df = spark.read.format(&quot;parquet&quot;) .load(&quot;s3a://data/flight-data/parquet/2010-summary.parquet&quot;) df.show(5) . +--+-+--+ |DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count| +--+-+--+ | United States| Romania| 1| | United States| Ireland| 264| | United States| India| 69| | Egypt| United States| 24| |Equatorial Guinea| United States| 1| +--+-+--+ only showing top 5 rows . 읽기/쓰기 키 사용 가능한 값 기본값 설명 . 모두 | compression 또는 codec | none, uncompressed, bzip2, deflate, gzip, deflate, gzip, lz4, snappy | none | 스파크가 파일을 읽고 쓸 때 사용하는 압축 코덱 정의 | . 읽기 | mergeSchema | true, false | spark.sql.parquet.mergeSchema 속성의 설정 값 | 동일한 테이블이나 폴더에 신규 추가된 파케이 파일에 컬럼을 점진적으로 추가할 수 있음 | . df.write.format(&quot;parquet&quot;).mode(&quot;overwrite&quot;).save(&quot;s3a://tmp/my-parquet-file.parquet&quot;) . ORC &#54028;&#51068; . 하둡 워크로드를 위해 설계된 self-describing이며, 데이터 타입을 인식할 수 있는 컬럼 기반의 파일 포맷 | 대규모 스트리밍 읽기에 최적화 | 필요한 로우를 신속하게 찾아낼 수 있는 기능이 통합 | 파케이가 스파크에 최적화된 반면 ORC는 하이브에 최적화 | . df = spark.read.format(&quot;orc&quot;).load(&quot;s3a://data/flight-data/orc/2010-summary.orc&quot;) df.show(5) . +--+-+--+ |DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count| +--+-+--+ | United States| Romania| 1| | United States| Ireland| 264| | United States| India| 69| | Egypt| United States| 24| |Equatorial Guinea| United States| 1| +--+-+--+ only showing top 5 rows . df.write.format(&quot;orc&quot;).mode(&quot;overwrite&quot;).save(&quot;s3a://tmp/my-orc-file.orc&quot;) . &#53581;&#49828;&#53944; &#54028;&#51068; . txtFile = spark.read.format(&quot;text&quot;).load(&quot;s3a://data/flight-data/csv/2010-summary.csv&quot;).selectExpr(&quot;split(value, &#39;,&#39;) as rows&quot;) txtFile.show(5) . +--+ | rows| +--+ |[DEST_COUNTRY_NAM...| |[United States, R...| |[United States, I...| |[United States, I...| |[Egypt, United St...| +--+ only showing top 5 rows . csvFile_list = list(txtFile.toPandas()[&#39;rows&#39;]) csvFile_df = pd.DataFrame(csvFile_list[1:], columns = csvFile_list[:1][0] + [&quot;_3&quot;, &quot;_4&quot;]) csvFile = spark.createDataFrame(csvFile_df) csvFile.show(5) . +--+-+--+-+-+ |DEST_COUNTRY_NAME|ORIGIN_COUNTRY_NAME|count| _3| _4| +--+-+--+-+-+ | United States| Romania| 1|null|null| | United States| Ireland| 264|null|null| | United States| India| 69|null|null| | Egypt| United States| 24|null|null| |Equatorial Guinea| United States| 1|null|null| +--+-+--+-+-+ only showing top 5 rows . 텍스트 파일을 쓸 때는 문자열 컬럼이 하나만 존재해야 함 | . csvFile.select(&quot;DEST_COUNTRY_NAME&quot;).write.text(&quot;s3a://tmp/simple-text-file.txt&quot;) . 텍스트 파일에 데이터를 저장할 때 파티셔닝 작업을 수행하면 더 많은 컬럼을 저장 가능 | 모든 파일에 컬럼을 추가하는 것이 아니라 텍스트 파일이 저장되는 디렉터리에 폴더 별로 컬름을 저장함 | . csvFile.limit(10).select(&quot;DEST_COUNTRY_NAME&quot;, &quot;count&quot;) .write.partitionBy(&quot;count&quot;).text(&quot;s3a://tmp/five-csv-files2py.csv&quot;) . ML Model . from pyspark.ml.feature import PCA scaleDF = spark.read.parquet(&quot;s3a://data/simple-ml-scaling&quot;) pca = PCA().setInputCol(&quot;features&quot;).setK(2) fittedPCA = pca.fit(scaleDF) . fittedPCA.write().overwrite().save(&quot;s3a://tmp/fittedPCA&quot;) . from pyspark.ml.feature import PCAModel loadedPCA = PCAModel.load(&quot;s3a://tmp/fittedPCA&quot;) loadedPCA.transform(scaleDF).show() . ++--+--+ | id| features|PCAModel_06b47752a026__output| ++--+--+ | 0|[1.0,0.1,-1.0]| [0.07137194992484...| | 1| [2.0,1.1,1.0]| [-1.6804946984073...| | 0|[1.0,0.1,-1.0]| [0.07137194992484...| | 1| [2.0,1.1,1.0]| [-1.6804946984073...| | 1|[3.0,10.1,3.0]| [-10.872398139848...| ++--+--+ . &#44256;&#44553; I/O &#44060;&#45392; . &#48337;&#47148;&#47196; &#45936;&#51060;&#53552; &#50416;&#44592; . 데이터 파티션 당 하나의 파일이 작성 | . csvFile.repartition(5).write.format(&quot;csv&quot;).save(&quot;s3a://tmp/multiple.csv&quot;) . &#54028;&#54000;&#49492;&#45789; . 파티셔닝은 어떤 데이터를 어디에 저장할 것인지 제어할 수 있는 기능 | 데이터를 읽을 때 전체 데이터셋을 스캔하지 않고 필요한 컬럼의 데이터만 읽을 수 있음 | . csvFile.limit(10).write.mode(&quot;overwrite&quot;).partitionBy(&quot;DEST_COUNTRY_NAME&quot;) .save(&quot;s3a://tmp/partitioned-files.parquet&quot;) . &#48260;&#53011;&#54021; . 각 파일에 저장된 데이터를 제어할 수 있는 또 다른 파일 조직화 기법 | 버켓팅을 사용하면 동일한 버킷 ID를 가진 데이터가 하나의 물리적 파티션에 모두 모여 있기 때문에 데이터를 읽을 때 셔플을 피할 수 있음 | 버켓팅은 스파크 관리 테이블에서만 사용 가능 | . number_buckets = 10 column_to_bucket_by = &quot;count&quot; csvFile.write.format(&quot;parquet&quot;).mode(&quot;overwrite&quot;) .bucketBy(number_buckets, column_to_bucket_by).saveAsTable(&quot;bucketFiles&quot;) . &#54028;&#51068; &#53356;&#44592; &#44288;&#47532; . 파일당 최대 5000개의 로우를 포함하도록 보장 | . df.write.option(&quot;maxRecordPerFile&quot;, 5000) . MySQL . $ ./bin/spark-shell --driver-class-path mysql-connector-java-8.0.17.jar --jars mysql-connector-java-8.0.17.jar .",
            "url": "https://safenumz.github.io/blog/spark/2020/01/01/pyspark-read-write.html",
            "relUrl": "/spark/2020/01/01/pyspark-read-write.html",
            "date": " • Jan 1, 2020"
        }
        
    
  
    
        ,"post94": {
            "title": "[R tidyr] gather, spread, seperate, unite",
            "content": "&lt;!DOCTYPE html&gt; . 2019-12-12-R_패키지_tidyr_-_gather_spread_seperate_unite . tidyr &#54056;&#53412;&#51648; &#53580;&#49828;&#53944;&#47484; &#50948;&#54620; &#45936;&#51060;&#53552; &#51204;&#52376;&#47532;&#182; . In&nbsp;[2]: # 단정한 데이터 tidyr ## 실습 데이터 준비 library(dplyr) library(tqk) . filter()와 같이 사용한 grepl() 함수는 데이터에 목표로 하는 글자를 포함하는지를 TRUE/FALSE로 결과를 제공함. | . In&nbsp;[6]: # grepl(&quot;현대자동차&quot;, code_get()$name) code_get() %&gt;% filter(grepl(&quot;현대자동차&quot;, name)) %&gt;% select(code) %&gt;% tqk_get(from = &quot;2019-01-01&quot;, to = &quot;2019-02-28&quot;) %&gt;% mutate(comp = &quot;현대자동차&quot;) -&gt; hdcm hdcm . dateopenhighlowclosevolumeadjustedcomp . 2019-01-02 | 117500 | 118000 | 113500 | 114000 | 565493 | 114000 | 현대자동차 | . 2019-01-03 | 113000 | 118500 | 113000 | 116500 | 608591 | 116500 | 현대자동차 | . 2019-01-04 | 116000 | 123000 | 116000 | 119500 | 1326978 | 119500 | 현대자동차 | . 2019-01-07 | 121000 | 121500 | 119500 | 120500 | 428416 | 120500 | 현대자동차 | . 2019-01-08 | 121500 | 123500 | 118500 | 119500 | 582117 | 119500 | 현대자동차 | . 2019-01-09 | 119000 | 124000 | 119000 | 123000 | 846392 | 123000 | 현대자동차 | . 2019-01-10 | 121500 | 123000 | 119500 | 123000 | 648837 | 123000 | 현대자동차 | . 2019-01-11 | 123000 | 124500 | 122000 | 123000 | 440529 | 123000 | 현대자동차 | . 2019-01-14 | 122500 | 124000 | 121000 | 121500 | 297709 | 121500 | 현대자동차 | . 2019-01-15 | 121000 | 128000 | 120500 | 127500 | 828015 | 127500 | 현대자동차 | . 2019-01-16 | 127000 | 129000 | 126000 | 128500 | 397335 | 128500 | 현대자동차 | . 2019-01-17 | 128500 | 130000 | 127500 | 129500 | 513711 | 129500 | 현대자동차 | . 2019-01-18 | 129500 | 131500 | 129500 | 131000 | 556106 | 131000 | 현대자동차 | . 2019-01-21 | 132000 | 132000 | 126500 | 127000 | 657273 | 127000 | 현대자동차 | . 2019-01-22 | 126500 | 128000 | 125000 | 127500 | 446263 | 127500 | 현대자동차 | . 2019-01-23 | 128000 | 130000 | 127000 | 129000 | 422209 | 129000 | 현대자동차 | . 2019-01-24 | 128000 | 130000 | 124500 | 130000 | 778826 | 130000 | 현대자동차 | . 2019-01-25 | 127500 | 130000 | 127500 | 128500 | 535338 | 128500 | 현대자동차 | . 2019-01-28 | 128500 | 130000 | 125500 | 126500 | 541428 | 126500 | 현대자동차 | . 2019-01-29 | 126500 | 128500 | 126000 | 128000 | 445671 | 128000 | 현대자동차 | . 2019-01-30 | 128500 | 129500 | 126500 | 129500 | 463542 | 129500 | 현대자동차 | . 2019-01-31 | 130000 | 131000 | 128500 | 129500 | 509642 | 129500 | 현대자동차 | . 2019-02-01 | 129500 | 130000 | 128500 | 129500 | 392755 | 129500 | 현대자동차 | . 2019-02-07 | 128500 | 129000 | 125500 | 126000 | 530165 | 126000 | 현대자동차 | . 2019-02-08 | 125500 | 126500 | 124500 | 125500 | 365392 | 125500 | 현대자동차 | . 2019-02-11 | 126000 | 129000 | 126000 | 127500 | 425879 | 127500 | 현대자동차 | . 2019-02-12 | 129000 | 129000 | 126500 | 128500 | 443035 | 128500 | 현대자동차 | . 2019-02-13 | 128500 | 128500 | 124000 | 124500 | 620173 | 124500 | 현대자동차 | . 2019-02-14 | 123500 | 124000 | 119500 | 121500 | 1072937 | 121500 | 현대자동차 | . 2019-02-15 | 121000 | 121500 | 120000 | 121000 | 446734 | 121000 | 현대자동차 | . 2019-02-18 | 121000 | 122000 | 118500 | 120500 | 557734 | 120500 | 현대자동차 | . 2019-02-19 | 119500 | 120500 | 119000 | 119500 | 470357 | 119500 | 현대자동차 | . 2019-02-20 | 119500 | 121500 | 119000 | 119000 | 735087 | 119000 | 현대자동차 | . 2019-02-21 | 118500 | 121000 | 118500 | 120000 | 588691 | 120000 | 현대자동차 | . 2019-02-22 | 119500 | 121500 | 119500 | 121000 | 353516 | 121000 | 현대자동차 | . 2019-02-25 | 120500 | 122500 | 120000 | 121000 | 314081 | 121000 | 현대자동차 | . 2019-02-26 | 121500 | 124000 | 121500 | 122500 | 781497 | 122500 | 현대자동차 | . 2019-02-27 | 128000 | 130000 | 126000 | 129000 | 1233285 | 129000 | 현대자동차 | . 2019-02-28 | 127500 | 129000 | 126000 | 126500 | 946738 | 126500 | 현대자동차 | . In&nbsp;[9]: # 현대자동차가 포함되어 있는 데이터에 대해 TRUE/FALSE 형태로 반환 head(grepl(&quot;현대자동차&quot;, code_get()$name), 5) . &lt;ol class=list-inline&gt; FALSE | FALSE | FALSE | FALSE | FALSE | &lt;/ol&gt; wide to long &#48148;&#44984;&#44592; - gather() &#54632;&#49688;&#182; . In&nbsp;[16]: library(tidyr) hdcm %&gt;% select(-volume) %&gt;% gather(key = &quot;type&quot;, value = &quot;price&quot;, -date, -comp) -&gt; hdcm_long hdcm_long . datecomptypeprice . 2019-01-02 | 현대자동차 | open | 117500 | . 2019-01-03 | 현대자동차 | open | 113000 | . 2019-01-04 | 현대자동차 | open | 116000 | . 2019-01-07 | 현대자동차 | open | 121000 | . 2019-01-08 | 현대자동차 | open | 121500 | . 2019-01-09 | 현대자동차 | open | 119000 | . 2019-01-10 | 현대자동차 | open | 121500 | . 2019-01-11 | 현대자동차 | open | 123000 | . 2019-01-14 | 현대자동차 | open | 122500 | . 2019-01-15 | 현대자동차 | open | 121000 | . 2019-01-16 | 현대자동차 | open | 127000 | . 2019-01-17 | 현대자동차 | open | 128500 | . 2019-01-18 | 현대자동차 | open | 129500 | . 2019-01-21 | 현대자동차 | open | 132000 | . 2019-01-22 | 현대자동차 | open | 126500 | . 2019-01-23 | 현대자동차 | open | 128000 | . 2019-01-24 | 현대자동차 | open | 128000 | . 2019-01-25 | 현대자동차 | open | 127500 | . 2019-01-28 | 현대자동차 | open | 128500 | . 2019-01-29 | 현대자동차 | open | 126500 | . 2019-01-30 | 현대자동차 | open | 128500 | . 2019-01-31 | 현대자동차 | open | 130000 | . 2019-02-01 | 현대자동차 | open | 129500 | . 2019-02-07 | 현대자동차 | open | 128500 | . 2019-02-08 | 현대자동차 | open | 125500 | . 2019-02-11 | 현대자동차 | open | 126000 | . 2019-02-12 | 현대자동차 | open | 129000 | . 2019-02-13 | 현대자동차 | open | 128500 | . 2019-02-14 | 현대자동차 | open | 123500 | . 2019-02-15 | 현대자동차 | open | 121000 | . ... | ... | ... | ... | . 2019-01-15 | 현대자동차 | adjusted | 127500 | . 2019-01-16 | 현대자동차 | adjusted | 128500 | . 2019-01-17 | 현대자동차 | adjusted | 129500 | . 2019-01-18 | 현대자동차 | adjusted | 131000 | . 2019-01-21 | 현대자동차 | adjusted | 127000 | . 2019-01-22 | 현대자동차 | adjusted | 127500 | . 2019-01-23 | 현대자동차 | adjusted | 129000 | . 2019-01-24 | 현대자동차 | adjusted | 130000 | . 2019-01-25 | 현대자동차 | adjusted | 128500 | . 2019-01-28 | 현대자동차 | adjusted | 126500 | . 2019-01-29 | 현대자동차 | adjusted | 128000 | . 2019-01-30 | 현대자동차 | adjusted | 129500 | . 2019-01-31 | 현대자동차 | adjusted | 129500 | . 2019-02-01 | 현대자동차 | adjusted | 129500 | . 2019-02-07 | 현대자동차 | adjusted | 126000 | . 2019-02-08 | 현대자동차 | adjusted | 125500 | . 2019-02-11 | 현대자동차 | adjusted | 127500 | . 2019-02-12 | 현대자동차 | adjusted | 128500 | . 2019-02-13 | 현대자동차 | adjusted | 124500 | . 2019-02-14 | 현대자동차 | adjusted | 121500 | . 2019-02-15 | 현대자동차 | adjusted | 121000 | . 2019-02-18 | 현대자동차 | adjusted | 120500 | . 2019-02-19 | 현대자동차 | adjusted | 119500 | . 2019-02-20 | 현대자동차 | adjusted | 119000 | . 2019-02-21 | 현대자동차 | adjusted | 120000 | . 2019-02-22 | 현대자동차 | adjusted | 121000 | . 2019-02-25 | 현대자동차 | adjusted | 121000 | . 2019-02-26 | 현대자동차 | adjusted | 122500 | . 2019-02-27 | 현대자동차 | adjusted | 129000 | . 2019-02-28 | 현대자동차 | adjusted | 126500 | . In&nbsp;[17]: hdcm %&gt;% gather(key = &quot;type&quot;, value = &quot;price&quot;, -date, -comp) -&gt; hdcm_v . In&nbsp;[18]: hdcm_v %&gt;% group_by(type) %&gt;% summarise(n = n()) . typen . adjusted | 39 | . close | 39 | . high | 39 | . low | 39 | . open | 39 | . volume | 39 | . In&nbsp;[20]: hdcm %&gt;% gather(key = &quot;type&quot;, value = &quot;price&quot;, -date, -comp) %&gt;% filter(type != &quot;volume&quot;) -&gt; hdcm_vv # 먼저 빼고 모으나, 모으고 빼나 결과는 같음 # 그러나 먼저 빼야 속도가 빠름, filter로 제거하고 gather 작업 수행 identical(hdcm_long, hdcm_vv) . TRUE long to wide &#48148;&#44984;&#44592; - spread() &#54632;&#49688;&#182; . In&nbsp;[22]: hdcm_long %&gt;% spread(type, price) . datecompadjustedclosehighlowopen . 2019-01-02 | 현대자동차 | 114000 | 114000 | 118000 | 113500 | 117500 | . 2019-01-03 | 현대자동차 | 116500 | 116500 | 118500 | 113000 | 113000 | . 2019-01-04 | 현대자동차 | 119500 | 119500 | 123000 | 116000 | 116000 | . 2019-01-07 | 현대자동차 | 120500 | 120500 | 121500 | 119500 | 121000 | . 2019-01-08 | 현대자동차 | 119500 | 119500 | 123500 | 118500 | 121500 | . 2019-01-09 | 현대자동차 | 123000 | 123000 | 124000 | 119000 | 119000 | . 2019-01-10 | 현대자동차 | 123000 | 123000 | 123000 | 119500 | 121500 | . 2019-01-11 | 현대자동차 | 123000 | 123000 | 124500 | 122000 | 123000 | . 2019-01-14 | 현대자동차 | 121500 | 121500 | 124000 | 121000 | 122500 | . 2019-01-15 | 현대자동차 | 127500 | 127500 | 128000 | 120500 | 121000 | . 2019-01-16 | 현대자동차 | 128500 | 128500 | 129000 | 126000 | 127000 | . 2019-01-17 | 현대자동차 | 129500 | 129500 | 130000 | 127500 | 128500 | . 2019-01-18 | 현대자동차 | 131000 | 131000 | 131500 | 129500 | 129500 | . 2019-01-21 | 현대자동차 | 127000 | 127000 | 132000 | 126500 | 132000 | . 2019-01-22 | 현대자동차 | 127500 | 127500 | 128000 | 125000 | 126500 | . 2019-01-23 | 현대자동차 | 129000 | 129000 | 130000 | 127000 | 128000 | . 2019-01-24 | 현대자동차 | 130000 | 130000 | 130000 | 124500 | 128000 | . 2019-01-25 | 현대자동차 | 128500 | 128500 | 130000 | 127500 | 127500 | . 2019-01-28 | 현대자동차 | 126500 | 126500 | 130000 | 125500 | 128500 | . 2019-01-29 | 현대자동차 | 128000 | 128000 | 128500 | 126000 | 126500 | . 2019-01-30 | 현대자동차 | 129500 | 129500 | 129500 | 126500 | 128500 | . 2019-01-31 | 현대자동차 | 129500 | 129500 | 131000 | 128500 | 130000 | . 2019-02-01 | 현대자동차 | 129500 | 129500 | 130000 | 128500 | 129500 | . 2019-02-07 | 현대자동차 | 126000 | 126000 | 129000 | 125500 | 128500 | . 2019-02-08 | 현대자동차 | 125500 | 125500 | 126500 | 124500 | 125500 | . 2019-02-11 | 현대자동차 | 127500 | 127500 | 129000 | 126000 | 126000 | . 2019-02-12 | 현대자동차 | 128500 | 128500 | 129000 | 126500 | 129000 | . 2019-02-13 | 현대자동차 | 124500 | 124500 | 128500 | 124000 | 128500 | . 2019-02-14 | 현대자동차 | 121500 | 121500 | 124000 | 119500 | 123500 | . 2019-02-15 | 현대자동차 | 121000 | 121000 | 121500 | 120000 | 121000 | . 2019-02-18 | 현대자동차 | 120500 | 120500 | 122000 | 118500 | 121000 | . 2019-02-19 | 현대자동차 | 119500 | 119500 | 120500 | 119000 | 119500 | . 2019-02-20 | 현대자동차 | 119000 | 119000 | 121500 | 119000 | 119500 | . 2019-02-21 | 현대자동차 | 120000 | 120000 | 121000 | 118500 | 118500 | . 2019-02-22 | 현대자동차 | 121000 | 121000 | 121500 | 119500 | 119500 | . 2019-02-25 | 현대자동차 | 121000 | 121000 | 122500 | 120000 | 120500 | . 2019-02-26 | 현대자동차 | 122500 | 122500 | 124000 | 121500 | 121500 | . 2019-02-27 | 현대자동차 | 129000 | 129000 | 130000 | 126000 | 128000 | . 2019-02-28 | 현대자동차 | 126500 | 126500 | 129000 | 126000 | 127500 | . In&nbsp;[25]: # 월, 일 컬럼을 만들고 개별 날을 컬럼으로 하는 wide form 종가 데이터를 만드세요 library(lubridate) . In&nbsp;[28]: hdcm %&gt;% mutate(month = month(date)) %&gt;% mutate(day = day(date)) %&gt;% select(comp, month, day, close) %&gt;% spread(day, close) . compmonth123478910...22232425262728293031 . 현대자동차 | 1 | NA | 114000 | 116500 | 119500 | 120500 | 119500 | 123000 | 123000 | ... | 127500 | 129000 | 130000 | 128500 | NA | NA | 126500 | 128000 | 129500 | 129500 | . 현대자동차 | 2 | 129500 | NA | NA | NA | 126000 | 125500 | NA | NA | ... | 121000 | NA | NA | 121000 | 122500 | 129000 | 126500 | NA | NA | NA | . In&nbsp;[33]: # stks18 데이터 전처리 library(purrr) code_get() %&gt;% slice(11:20) -&gt; code_info head(code_info, 3) . codenamemarket . 011150 | CJ씨푸드 | KOSPI | . 097950 | CJ제일제당 | KOSPI | . 037560 | CJ헬로 | KOSPI | . In&nbsp;[55]: library(purrr) . In&nbsp;[&nbsp;]: code_get() %&gt;% slice(11:20) -&gt; code_info code_info %&gt;% select(code) %&gt;% map_dfr( ~ tqk_get(.x, from = &quot;2018-01-01&quot;, to = &quot;2018-12-31&quot;) %&gt;% mutate(code = .x) ) %&gt;% left_join(code_info %&gt;% select(code, name), by = &quot;code&quot;) %&gt;% select(-code) -&gt; stks18 . In&nbsp;[&nbsp;]: stks18 %&gt;% group_by(name) %&gt;% summarise(n()) . In&nbsp;[&nbsp;]: # wide form 형태로 각 회사의 월별 평균 종가 출력 stks18 %&gt;% mutate(month = month(date)) %&gt;% group_by(name, month) %&gt;% summarise(mclose = mean(close)) %&gt;% spread(month, mclose) . &#52972;&#47100; &#45208;&#45572;&#44592; - seperate() &#54632;&#49688;&#182; . In&nbsp;[57]: library(readr) . In&nbsp;[58]: ## tidyr 패키지의 separate() 함수 실습 ### 데이터 준비 library(readr) url &lt;- &quot;https://github.com/mrchypark/sejongFinData/raw/master/dataAll.csv&quot; download.file(url,destfile = &quot;./dataAll.csv&quot;) findata &lt;- read_csv(&quot;./dataAll.csv&quot;, locale = locale(encoding = &quot;cp949&quot;)) %&gt;% rename(company = country) findata %&gt;% select(company, year) -&gt; findata . Parsed with column specification: cols( country = col_character(), year = col_character(), 매출액 = col_number(), 영업이익 = col_number(), 순이익 = col_number(), 연결순이익 = col_number(), 자산총계 = col_number(), 부채총계 = col_number(), 자본총계 = col_number(), 부채비율 = col_number(), 영업이익률 = col_double(), 순이익률 = col_number(), 연결순이익률 = col_character(), ROE.순이익. = col_character(), ROE.연결순이익. = col_character(), 매출액.성장률 = col_number(), 영업이익.성장률 = col_character(), 순이익.성장률 = col_character() ) Warning message: “16 parsing failures. row col expected actual file 4980 영업이익률 no trailing characters ,314 &#39;./dataAll.csv&#39; 5609 영업이익률 no trailing characters ,709 &#39;./dataAll.csv&#39; 7967 영업이익률 no trailing characters ,310 &#39;./dataAll.csv&#39; 7968 영업이익률 no trailing characters ,954 &#39;./dataAll.csv&#39; 8895 영업이익률 no trailing characters ,141 &#39;./dataAll.csv&#39; .... .......... ...................... ...... ............... See problems(...) for more details. ” . In&nbsp;[59]: findata %&gt;% select(company, year) -&gt; findata findata . companyyear . 삼성전자 | 1997.12(GAAP연결) | . 삼성전자 | 1998.12(GAAP연결) | . 삼성전자 | 1999.12(GAAP연결) | . 삼성전자 | 2000.12(GAAP연결) | . 삼성전자 | 2001.12(GAAP연결) | . 삼성전자 | 2002.12(GAAP연결) | . 삼성전자 | 2003.12(GAAP연결) | . 삼성전자 | 2004.12(GAAP연결) | . 삼성전자 | 2005.12(GAAP연결) | . 삼성전자 | 2006.12(GAAP연결) | . 삼성전자 | 2007.12(GAAP연결) | . 삼성전자 | 2008.12(GAAP연결) | . 삼성전자 | 2009.12(GAAP연결) | . 삼성전자 | 2010.12(IFRS연결) | . 삼성전자 | 2011.12(IFRS연결) | . 삼성전자 | 2012.12(IFRS연결) | . 삼성전자 | 2013.12(IFRS연결) | . 삼성전자 | 2014.12(IFRS연결) | . 삼성전자 | 2015.12(IFRS연결) | . 삼성전자 | 2016.12(IFRS연결) | . SK하이닉스 | 1997.12(GAAP연결) | . SK하이닉스 | 1998.12(GAAP연결) | . SK하이닉스 | 1999.12(GAAP연결) | . SK하이닉스 | 2000.12(GAAP연결) | . SK하이닉스 | 2001.12(GAAP연결) | . SK하이닉스 | 2002.12(GAAP연결) | . SK하이닉스 | 2003.12(GAAP연결) | . SK하이닉스 | 2004.12(GAAP연결) | . SK하이닉스 | 2005.12(GAAP연결) | . SK하이닉스 | 2006.12(GAAP연결) | . ... | ... | . 노루홀딩스2우B | 2008.12(GAAP개별) | . 노루홀딩스2우B | 2009.12(GAAP개별) | . 노루홀딩스2우B | 2010.12(GAAP개별) | . 노루홀딩스2우B | 2011.12(GAAP개별) | . 노루홀딩스2우B | 2012.12(GAAP개별) | . 노루홀딩스2우B | 2013.12(GAAP개별) | . 노루홀딩스2우B | 2014.12(GAAP개별) | . 노루홀딩스2우B | 2015.12(GAAP개별) | . 노루홀딩스2우B | 2016.12(GAAP개별) | . 노루홀딩스2우B | 2017.12(GAAP개별) | . 세신버팔로 | 1995.12(GAAP개별) | . 세신버팔로 | 1996.12(GAAP개별) | . 세신버팔로 | 1997.12(GAAP개별) | . 세신버팔로 | 1998.12(GAAP개별) | . 세신버팔로 | 1999.12(GAAP개별) | . 세신버팔로 | 2000.12(GAAP개별) | . 세신버팔로 | 2001.12(GAAP개별) | . 세신버팔로 | 2002.12(GAAP개별) | . 세신버팔로 | 2003.12(GAAP개별) | . 세신버팔로 | 2004.12(GAAP개별) | . 세신버팔로 | 2005.12(GAAP개별) | . 세신버팔로 | 2006.12(GAAP개별) | . 세신버팔로 | 2007.12(GAAP개별) | . 세신버팔로 | 2008.12(GAAP개별) | . 세신버팔로 | 2009.12(GAAP개별) | . 세신버팔로 | 2010.12(GAAP개별) | . 세신버팔로 | 2011.12(GAAP개별) | . 세신버팔로 | 2012.12(GAAP개별) | . 세신버팔로 | 2013.12(GAAP개별) | . 세신버팔로 | 2014.12(GAAP개별) | . sep에 [^[:alnum:]]+ 정규표현식이 기본값으로 있어서 글자, 숫자가 아닌 값으로 나누기를 제공 | . In&nbsp;[61]: # year 컬럼을 separate() 함수로 별도의 컬럼들로 나눔 findata %&gt;% separate(year, into = c(&quot;year&quot;, &quot;month&quot;, &quot;standard&quot;)) . Warning message: “Expected 3 pieces. Additional pieces discarded in 44960 rows [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].” . companyyearmonthstandard . 삼성전자 | 1997 | 12 | GAAP연결 | . 삼성전자 | 1998 | 12 | GAAP연결 | . 삼성전자 | 1999 | 12 | GAAP연결 | . 삼성전자 | 2000 | 12 | GAAP연결 | . 삼성전자 | 2001 | 12 | GAAP연결 | . 삼성전자 | 2002 | 12 | GAAP연결 | . 삼성전자 | 2003 | 12 | GAAP연결 | . 삼성전자 | 2004 | 12 | GAAP연결 | . 삼성전자 | 2005 | 12 | GAAP연결 | . 삼성전자 | 2006 | 12 | GAAP연결 | . 삼성전자 | 2007 | 12 | GAAP연결 | . 삼성전자 | 2008 | 12 | GAAP연결 | . 삼성전자 | 2009 | 12 | GAAP연결 | . 삼성전자 | 2010 | 12 | IFRS연결 | . 삼성전자 | 2011 | 12 | IFRS연결 | . 삼성전자 | 2012 | 12 | IFRS연결 | . 삼성전자 | 2013 | 12 | IFRS연결 | . 삼성전자 | 2014 | 12 | IFRS연결 | . 삼성전자 | 2015 | 12 | IFRS연결 | . 삼성전자 | 2016 | 12 | IFRS연결 | . SK하이닉스 | 1997 | 12 | GAAP연결 | . SK하이닉스 | 1998 | 12 | GAAP연결 | . SK하이닉스 | 1999 | 12 | GAAP연결 | . SK하이닉스 | 2000 | 12 | GAAP연결 | . SK하이닉스 | 2001 | 12 | GAAP연결 | . SK하이닉스 | 2002 | 12 | GAAP연결 | . SK하이닉스 | 2003 | 12 | GAAP연결 | . SK하이닉스 | 2004 | 12 | GAAP연결 | . SK하이닉스 | 2005 | 12 | GAAP연결 | . SK하이닉스 | 2006 | 12 | GAAP연결 | . ... | ... | ... | ... | . 노루홀딩스2우B | 2008 | 12 | GAAP개별 | . 노루홀딩스2우B | 2009 | 12 | GAAP개별 | . 노루홀딩스2우B | 2010 | 12 | GAAP개별 | . 노루홀딩스2우B | 2011 | 12 | GAAP개별 | . 노루홀딩스2우B | 2012 | 12 | GAAP개별 | . 노루홀딩스2우B | 2013 | 12 | GAAP개별 | . 노루홀딩스2우B | 2014 | 12 | GAAP개별 | . 노루홀딩스2우B | 2015 | 12 | GAAP개별 | . 노루홀딩스2우B | 2016 | 12 | GAAP개별 | . 노루홀딩스2우B | 2017 | 12 | GAAP개별 | . 세신버팔로 | 1995 | 12 | GAAP개별 | . 세신버팔로 | 1996 | 12 | GAAP개별 | . 세신버팔로 | 1997 | 12 | GAAP개별 | . 세신버팔로 | 1998 | 12 | GAAP개별 | . 세신버팔로 | 1999 | 12 | GAAP개별 | . 세신버팔로 | 2000 | 12 | GAAP개별 | . 세신버팔로 | 2001 | 12 | GAAP개별 | . 세신버팔로 | 2002 | 12 | GAAP개별 | . 세신버팔로 | 2003 | 12 | GAAP개별 | . 세신버팔로 | 2004 | 12 | GAAP개별 | . 세신버팔로 | 2005 | 12 | GAAP개별 | . 세신버팔로 | 2006 | 12 | GAAP개별 | . 세신버팔로 | 2007 | 12 | GAAP개별 | . 세신버팔로 | 2008 | 12 | GAAP개별 | . 세신버팔로 | 2009 | 12 | GAAP개별 | . 세신버팔로 | 2010 | 12 | GAAP개별 | . 세신버팔로 | 2011 | 12 | GAAP개별 | . 세신버팔로 | 2012 | 12 | GAAP개별 | . 세신버팔로 | 2013 | 12 | GAAP개별 | . 세신버팔로 | 2014 | 12 | GAAP개별 | . In&nbsp;[62]: # convert 옵션으로 자료형을 처리할 수 있음 findata %&gt;% separate(year, into = c(&quot;year&quot;, &quot;month&quot;, &quot;standard&quot;), convert = T) . Warning message: “Expected 3 pieces. Additional pieces discarded in 44960 rows [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].” . companyyearmonthstandard . 삼성전자 | 1997 | 12 | GAAP연결 | . 삼성전자 | 1998 | 12 | GAAP연결 | . 삼성전자 | 1999 | 12 | GAAP연결 | . 삼성전자 | 2000 | 12 | GAAP연결 | . 삼성전자 | 2001 | 12 | GAAP연결 | . 삼성전자 | 2002 | 12 | GAAP연결 | . 삼성전자 | 2003 | 12 | GAAP연결 | . 삼성전자 | 2004 | 12 | GAAP연결 | . 삼성전자 | 2005 | 12 | GAAP연결 | . 삼성전자 | 2006 | 12 | GAAP연결 | . 삼성전자 | 2007 | 12 | GAAP연결 | . 삼성전자 | 2008 | 12 | GAAP연결 | . 삼성전자 | 2009 | 12 | GAAP연결 | . 삼성전자 | 2010 | 12 | IFRS연결 | . 삼성전자 | 2011 | 12 | IFRS연결 | . 삼성전자 | 2012 | 12 | IFRS연결 | . 삼성전자 | 2013 | 12 | IFRS연결 | . 삼성전자 | 2014 | 12 | IFRS연결 | . 삼성전자 | 2015 | 12 | IFRS연결 | . 삼성전자 | 2016 | 12 | IFRS연결 | . SK하이닉스 | 1997 | 12 | GAAP연결 | . SK하이닉스 | 1998 | 12 | GAAP연결 | . SK하이닉스 | 1999 | 12 | GAAP연결 | . SK하이닉스 | 2000 | 12 | GAAP연결 | . SK하이닉스 | 2001 | 12 | GAAP연결 | . SK하이닉스 | 2002 | 12 | GAAP연결 | . SK하이닉스 | 2003 | 12 | GAAP연결 | . SK하이닉스 | 2004 | 12 | GAAP연결 | . SK하이닉스 | 2005 | 12 | GAAP연결 | . SK하이닉스 | 2006 | 12 | GAAP연결 | . ... | ... | ... | ... | . 노루홀딩스2우B | 2008 | 12 | GAAP개별 | . 노루홀딩스2우B | 2009 | 12 | GAAP개별 | . 노루홀딩스2우B | 2010 | 12 | GAAP개별 | . 노루홀딩스2우B | 2011 | 12 | GAAP개별 | . 노루홀딩스2우B | 2012 | 12 | GAAP개별 | . 노루홀딩스2우B | 2013 | 12 | GAAP개별 | . 노루홀딩스2우B | 2014 | 12 | GAAP개별 | . 노루홀딩스2우B | 2015 | 12 | GAAP개별 | . 노루홀딩스2우B | 2016 | 12 | GAAP개별 | . 노루홀딩스2우B | 2017 | 12 | GAAP개별 | . 세신버팔로 | 1995 | 12 | GAAP개별 | . 세신버팔로 | 1996 | 12 | GAAP개별 | . 세신버팔로 | 1997 | 12 | GAAP개별 | . 세신버팔로 | 1998 | 12 | GAAP개별 | . 세신버팔로 | 1999 | 12 | GAAP개별 | . 세신버팔로 | 2000 | 12 | GAAP개별 | . 세신버팔로 | 2001 | 12 | GAAP개별 | . 세신버팔로 | 2002 | 12 | GAAP개별 | . 세신버팔로 | 2003 | 12 | GAAP개별 | . 세신버팔로 | 2004 | 12 | GAAP개별 | . 세신버팔로 | 2005 | 12 | GAAP개별 | . 세신버팔로 | 2006 | 12 | GAAP개별 | . 세신버팔로 | 2007 | 12 | GAAP개별 | . 세신버팔로 | 2008 | 12 | GAAP개별 | . 세신버팔로 | 2009 | 12 | GAAP개별 | . 세신버팔로 | 2010 | 12 | GAAP개별 | . 세신버팔로 | 2011 | 12 | GAAP개별 | . 세신버팔로 | 2012 | 12 | GAAP개별 | . 세신버팔로 | 2013 | 12 | GAAP개별 | . 세신버팔로 | 2014 | 12 | GAAP개별 | . In&nbsp;[69]: ### 직접 sep에 나누기를 할 글자를 지정할 수 있음 ### 정규표현식에서 &quot;(&quot; 괄호는 특별한 의미를 지니기 때문에 이후에 작성해야 글자로 인식함 findata %&gt;% separate(year, into = c(&quot;year&quot;, &quot;standard&quot;), sep = &quot; (&quot;) %&gt;% separate(standard, into = c(&quot;standard&quot;, &quot;Consolidated&quot;), sep = 4) . companyyearstandardConsolidated . 삼성전자 | 1997.12 | GAAP | 연결) | . 삼성전자 | 1998.12 | GAAP | 연결) | . 삼성전자 | 1999.12 | GAAP | 연결) | . 삼성전자 | 2000.12 | GAAP | 연결) | . 삼성전자 | 2001.12 | GAAP | 연결) | . 삼성전자 | 2002.12 | GAAP | 연결) | . 삼성전자 | 2003.12 | GAAP | 연결) | . 삼성전자 | 2004.12 | GAAP | 연결) | . 삼성전자 | 2005.12 | GAAP | 연결) | . 삼성전자 | 2006.12 | GAAP | 연결) | . 삼성전자 | 2007.12 | GAAP | 연결) | . 삼성전자 | 2008.12 | GAAP | 연결) | . 삼성전자 | 2009.12 | GAAP | 연결) | . 삼성전자 | 2010.12 | IFRS | 연결) | . 삼성전자 | 2011.12 | IFRS | 연결) | . 삼성전자 | 2012.12 | IFRS | 연결) | . 삼성전자 | 2013.12 | IFRS | 연결) | . 삼성전자 | 2014.12 | IFRS | 연결) | . 삼성전자 | 2015.12 | IFRS | 연결) | . 삼성전자 | 2016.12 | IFRS | 연결) | . SK하이닉스 | 1997.12 | GAAP | 연결) | . SK하이닉스 | 1998.12 | GAAP | 연결) | . SK하이닉스 | 1999.12 | GAAP | 연결) | . SK하이닉스 | 2000.12 | GAAP | 연결) | . SK하이닉스 | 2001.12 | GAAP | 연결) | . SK하이닉스 | 2002.12 | GAAP | 연결) | . SK하이닉스 | 2003.12 | GAAP | 연결) | . SK하이닉스 | 2004.12 | GAAP | 연결) | . SK하이닉스 | 2005.12 | GAAP | 연결) | . SK하이닉스 | 2006.12 | GAAP | 연결) | . ... | ... | ... | ... | . 노루홀딩스2우B | 2008.12 | GAAP | 개별) | . 노루홀딩스2우B | 2009.12 | GAAP | 개별) | . 노루홀딩스2우B | 2010.12 | GAAP | 개별) | . 노루홀딩스2우B | 2011.12 | GAAP | 개별) | . 노루홀딩스2우B | 2012.12 | GAAP | 개별) | . 노루홀딩스2우B | 2013.12 | GAAP | 개별) | . 노루홀딩스2우B | 2014.12 | GAAP | 개별) | . 노루홀딩스2우B | 2015.12 | GAAP | 개별) | . 노루홀딩스2우B | 2016.12 | GAAP | 개별) | . 노루홀딩스2우B | 2017.12 | GAAP | 개별) | . 세신버팔로 | 1995.12 | GAAP | 개별) | . 세신버팔로 | 1996.12 | GAAP | 개별) | . 세신버팔로 | 1997.12 | GAAP | 개별) | . 세신버팔로 | 1998.12 | GAAP | 개별) | . 세신버팔로 | 1999.12 | GAAP | 개별) | . 세신버팔로 | 2000.12 | GAAP | 개별) | . 세신버팔로 | 2001.12 | GAAP | 개별) | . 세신버팔로 | 2002.12 | GAAP | 개별) | . 세신버팔로 | 2003.12 | GAAP | 개별) | . 세신버팔로 | 2004.12 | GAAP | 개별) | . 세신버팔로 | 2005.12 | GAAP | 개별) | . 세신버팔로 | 2006.12 | GAAP | 개별) | . 세신버팔로 | 2007.12 | GAAP | 개별) | . 세신버팔로 | 2008.12 | GAAP | 개별) | . 세신버팔로 | 2009.12 | GAAP | 개별) | . 세신버팔로 | 2010.12 | GAAP | 개별) | . 세신버팔로 | 2011.12 | GAAP | 개별) | . 세신버팔로 | 2012.12 | GAAP | 개별) | . 세신버팔로 | 2013.12 | GAAP | 개별) | . 세신버팔로 | 2014.12 | GAAP | 개별) | . &#52972;&#47100; &#54633;&#52824;&#44592; - unite() &#54632;&#49688;&#182; . In&nbsp;[70]: library(tqk) code_info &lt;- code_get() code_info . codenamemarket . 095570 | AJ네트웍스 | KOSPI | . 068400 | AJ렌터카 | KOSPI | . 006840 | AK홀딩스 | KOSPI | . 027410 | BGF | KOSPI | . 282330 | BGF리테일 | KOSPI | . 138930 | BNK금융지주 | KOSPI | . 001460 | BYC | KOSPI | . 001040 | CJ | KOSPI | . 079160 | CJ CGV | KOSPI | . 000120 | CJ대한통운 | KOSPI | . 011150 | CJ씨푸드 | KOSPI | . 097950 | CJ제일제당 | KOSPI | . 037560 | CJ헬로 | KOSPI | . 000590 | CS홀딩스 | KOSPI | . 012030 | DB | KOSPI | . 016610 | DB금융투자 | KOSPI | . 005830 | DB손해보험 | KOSPI | . 000990 | DB하이텍 | KOSPI | . 139130 | DGB금융지주 | KOSPI | . 004840 | DRB동일 | KOSPI | . 155660 | DSR | KOSPI | . 069730 | DSR제강 | KOSPI | . 017940 | E1 | KOSPI | . 007700 | &lt;span style=white-space:pre-wrap&gt;F&amp;F &lt;/span&gt; | KOSPI | . 114090 | GKL | KOSPI | . 078930 | GS | KOSPI | . 006360 | GS건설 | KOSPI | . 001250 | GS글로벌 | KOSPI | . 007070 | GS리테일 | KOSPI | . 012630 | HDC | KOSPI | . ... | ... | ... | . 001450 | 현대해상 | KOSPI | . 057050 | 현대홈쇼핑 | KOSPI | . 093240 | 형지엘리트 | KOSPI | . 003010 | 혜인 | KOSPI | . 111110 | 호전실업 | KOSPI | . 008770 | 호텔신라 | KOSPI | . 002460 | 화성산업 | KOSPI | . 013520 | 화승알앤에이 | KOSPI | . 241590 | 화승엔터프라이즈 | KOSPI | . 006060 | 화승인더스트리 | KOSPI | . 010690 | 화신 | KOSPI | . 133820 | 화인베스틸 | KOSPI | . 010660 | 화천기계 | KOSPI | . 000850 | 화천기공 | KOSPI | . 016580 | 환인제약 | KOSPI | . 032560 | 황금에스티 | KOSPI | . 004800 | 효성 | KOSPI | . 094280 | 효성 ITX | KOSPI | . 298040 | 효성중공업 | KOSPI | . 298050 | 효성첨단소재 | KOSPI | . 298020 | 효성티앤씨 | KOSPI | . 298000 | 효성화학 | KOSPI | . 093370 | 후성 | KOSPI | . 081660 | 휠라코리아 | KOSPI | . 005870 | 휴니드테크놀러지스 | KOSPI | . 079980 | 휴비스 | KOSPI | . 005010 | 휴스틸 | KOSPI | . 069260 | 휴켐스 | KOSPI | . 000540 | 흥국화재 | KOSPI | . 003280 | 흥아해운 | KOSPI | . code와 name이 같은 의미를 지니므로 하나로 합칠 수 있음. | 물론 실제로는 code가 key 역할이나 tqk_get() 함수의 입력 역할을 하기 때문에 | 최종 결과물에서 정리의 의미로 하나로 합치거나 하는 것이라고 가정. | 여러 컬럼의 데이터를 합쳐서 하나의 컬럼으로 만드는 동작 | 새롭게 만들어지는 컬럼 이름을 먼저 작성 | 이후 대상이 되는 컬럼 이름을 나열. | . In&nbsp;[72]: code_info %&gt;% unite(&quot;company&quot;, name, code) . companymarket . AJ네트웍스_095570 | KOSPI | . AJ렌터카_068400 | KOSPI | . AK홀딩스_006840 | KOSPI | . BGF_027410 | KOSPI | . BGF리테일_282330 | KOSPI | . BNK금융지주_138930 | KOSPI | . BYC_001460 | KOSPI | . CJ_001040 | KOSPI | . CJ CGV_079160 | KOSPI | . CJ대한통운_000120 | KOSPI | . CJ씨푸드_011150 | KOSPI | . CJ제일제당_097950 | KOSPI | . CJ헬로_037560 | KOSPI | . CS홀딩스_000590 | KOSPI | . DB_012030 | KOSPI | . DB금융투자_016610 | KOSPI | . DB손해보험_005830 | KOSPI | . DB하이텍_000990 | KOSPI | . DGB금융지주_139130 | KOSPI | . DRB동일_004840 | KOSPI | . DSR_155660 | KOSPI | . DSR제강_069730 | KOSPI | . E1_017940 | KOSPI | . &lt;span style=white-space:pre-wrap&gt;F&amp;F_007700 &lt;/span&gt; | KOSPI | . GKL_114090 | KOSPI | . GS_078930 | KOSPI | . GS건설_006360 | KOSPI | . GS글로벌_001250 | KOSPI | . GS리테일_007070 | KOSPI | . HDC_012630 | KOSPI | . ... | ... | . 현대해상_001450 | KOSPI | . 현대홈쇼핑_057050 | KOSPI | . 형지엘리트_093240 | KOSPI | . 혜인_003010 | KOSPI | . 호전실업_111110 | KOSPI | . 호텔신라_008770 | KOSPI | . 화성산업_002460 | KOSPI | . 화승알앤에이_013520 | KOSPI | . 화승엔터프라이즈_241590 | KOSPI | . 화승인더스트리_006060 | KOSPI | . 화신_010690 | KOSPI | . 화인베스틸_133820 | KOSPI | . 화천기계_010660 | KOSPI | . 화천기공_000850 | KOSPI | . 환인제약_016580 | KOSPI | . 황금에스티_032560 | KOSPI | . 효성_004800 | KOSPI | . 효성 ITX_094280 | KOSPI | . 효성중공업_298040 | KOSPI | . 효성첨단소재_298050 | KOSPI | . 효성티앤씨_298020 | KOSPI | . 효성화학_298000 | KOSPI | . 후성_093370 | KOSPI | . 휠라코리아_081660 | KOSPI | . 휴니드테크놀러지스_005870 | KOSPI | . 휴비스_079980 | KOSPI | . 휴스틸_005010 | KOSPI | . 휴켐스_069260 | KOSPI | . 흥국화재_000540 | KOSPI | . 흥아해운_003280 | KOSPI | . sep 옵션으로 어떤 글자를 이용하여 연결할지 결정. | 기본값은 _(언더바) | . In&nbsp;[73]: code_info %&gt;% unite(&quot;company&quot;, name, code, sep = &quot;-&quot;) . companymarket . AJ네트웍스-095570 | KOSPI | . AJ렌터카-068400 | KOSPI | . AK홀딩스-006840 | KOSPI | . BGF-027410 | KOSPI | . BGF리테일-282330 | KOSPI | . BNK금융지주-138930 | KOSPI | . BYC-001460 | KOSPI | . CJ-001040 | KOSPI | . CJ CGV-079160 | KOSPI | . CJ대한통운-000120 | KOSPI | . CJ씨푸드-011150 | KOSPI | . CJ제일제당-097950 | KOSPI | . CJ헬로-037560 | KOSPI | . CS홀딩스-000590 | KOSPI | . DB-012030 | KOSPI | . DB금융투자-016610 | KOSPI | . DB손해보험-005830 | KOSPI | . DB하이텍-000990 | KOSPI | . DGB금융지주-139130 | KOSPI | . DRB동일-004840 | KOSPI | . DSR-155660 | KOSPI | . DSR제강-069730 | KOSPI | . E1-017940 | KOSPI | . &lt;span style=white-space:pre-wrap&gt;F&amp;F-007700 &lt;/span&gt; | KOSPI | . GKL-114090 | KOSPI | . GS-078930 | KOSPI | . GS건설-006360 | KOSPI | . GS글로벌-001250 | KOSPI | . GS리테일-007070 | KOSPI | . HDC-012630 | KOSPI | . ... | ... | . 현대해상-001450 | KOSPI | . 현대홈쇼핑-057050 | KOSPI | . 형지엘리트-093240 | KOSPI | . 혜인-003010 | KOSPI | . 호전실업-111110 | KOSPI | . 호텔신라-008770 | KOSPI | . 화성산업-002460 | KOSPI | . 화승알앤에이-013520 | KOSPI | . 화승엔터프라이즈-241590 | KOSPI | . 화승인더스트리-006060 | KOSPI | . 화신-010690 | KOSPI | . 화인베스틸-133820 | KOSPI | . 화천기계-010660 | KOSPI | . 화천기공-000850 | KOSPI | . 환인제약-016580 | KOSPI | . 황금에스티-032560 | KOSPI | . 효성-004800 | KOSPI | . 효성 ITX-094280 | KOSPI | . 효성중공업-298040 | KOSPI | . 효성첨단소재-298050 | KOSPI | . 효성티앤씨-298020 | KOSPI | . 효성화학-298000 | KOSPI | . 후성-093370 | KOSPI | . 휠라코리아-081660 | KOSPI | . 휴니드테크놀러지스-005870 | KOSPI | . 휴비스-079980 | KOSPI | . 휴스틸-005010 | KOSPI | . 휴켐스-069260 | KOSPI | . 흥국화재-000540 | KOSPI | . 흥아해운-003280 | KOSPI | . In&nbsp;[74]: code_info %&gt;% unite(&quot;company&quot;, name, code, sep = &quot;(&quot;) %&gt;% mutate(company = paste0(company,&quot;)&quot;)) . companymarket . AJ네트웍스(095570) | KOSPI | . AJ렌터카(068400) | KOSPI | . AK홀딩스(006840) | KOSPI | . BGF(027410) | KOSPI | . BGF리테일(282330) | KOSPI | . BNK금융지주(138930) | KOSPI | . BYC(001460) | KOSPI | . CJ(001040) | KOSPI | . CJ CGV(079160) | KOSPI | . CJ대한통운(000120) | KOSPI | . CJ씨푸드(011150) | KOSPI | . CJ제일제당(097950) | KOSPI | . CJ헬로(037560) | KOSPI | . CS홀딩스(000590) | KOSPI | . DB(012030) | KOSPI | . DB금융투자(016610) | KOSPI | . DB손해보험(005830) | KOSPI | . DB하이텍(000990) | KOSPI | . DGB금융지주(139130) | KOSPI | . DRB동일(004840) | KOSPI | . DSR(155660) | KOSPI | . DSR제강(069730) | KOSPI | . E1(017940) | KOSPI | . &lt;span style=white-space:pre-wrap&gt;F&amp;F(007700) &lt;/span&gt; | KOSPI | . GKL(114090) | KOSPI | . GS(078930) | KOSPI | . GS건설(006360) | KOSPI | . GS글로벌(001250) | KOSPI | . GS리테일(007070) | KOSPI | . HDC(012630) | KOSPI | . ... | ... | . 현대해상(001450) | KOSPI | . 현대홈쇼핑(057050) | KOSPI | . 형지엘리트(093240) | KOSPI | . 혜인(003010) | KOSPI | . 호전실업(111110) | KOSPI | . 호텔신라(008770) | KOSPI | . 화성산업(002460) | KOSPI | . 화승알앤에이(013520) | KOSPI | . 화승엔터프라이즈(241590) | KOSPI | . 화승인더스트리(006060) | KOSPI | . 화신(010690) | KOSPI | . 화인베스틸(133820) | KOSPI | . 화천기계(010660) | KOSPI | . 화천기공(000850) | KOSPI | . 환인제약(016580) | KOSPI | . 황금에스티(032560) | KOSPI | . 효성(004800) | KOSPI | . 효성 ITX(094280) | KOSPI | . 효성중공업(298040) | KOSPI | . 효성첨단소재(298050) | KOSPI | . 효성티앤씨(298020) | KOSPI | . 효성화학(298000) | KOSPI | . 후성(093370) | KOSPI | . 휠라코리아(081660) | KOSPI | . 휴니드테크놀러지스(005870) | KOSPI | . 휴비스(079980) | KOSPI | . 휴스틸(005010) | KOSPI | . 휴켐스(069260) | KOSPI | . 흥국화재(000540) | KOSPI | . 흥아해운(003280) | KOSPI | . 개인적으로는 mutate() 함수와 paste0() 함수를 함께 사용하는 편. | paste0() 함수는 글자를 합치는 기능을 제공. | . In&nbsp;[78]: code_info %&gt;% mutate(company = paste0(name, &quot;(&quot;, code, &quot;)&quot;)) . codenamemarketcompany . 095570 | AJ네트웍스 | KOSPI | AJ네트웍스(095570) | . 068400 | AJ렌터카 | KOSPI | AJ렌터카(068400) | . 006840 | AK홀딩스 | KOSPI | AK홀딩스(006840) | . 027410 | BGF | KOSPI | BGF(027410) | . 282330 | BGF리테일 | KOSPI | BGF리테일(282330) | . 138930 | BNK금융지주 | KOSPI | BNK금융지주(138930) | . 001460 | BYC | KOSPI | BYC(001460) | . 001040 | CJ | KOSPI | CJ(001040) | . 079160 | CJ CGV | KOSPI | CJ CGV(079160) | . 000120 | CJ대한통운 | KOSPI | CJ대한통운(000120) | . 011150 | CJ씨푸드 | KOSPI | CJ씨푸드(011150) | . 097950 | CJ제일제당 | KOSPI | CJ제일제당(097950) | . 037560 | CJ헬로 | KOSPI | CJ헬로(037560) | . 000590 | CS홀딩스 | KOSPI | CS홀딩스(000590) | . 012030 | DB | KOSPI | DB(012030) | . 016610 | DB금융투자 | KOSPI | DB금융투자(016610) | . 005830 | DB손해보험 | KOSPI | DB손해보험(005830) | . 000990 | DB하이텍 | KOSPI | DB하이텍(000990) | . 139130 | DGB금융지주 | KOSPI | DGB금융지주(139130) | . 004840 | DRB동일 | KOSPI | DRB동일(004840) | . 155660 | DSR | KOSPI | DSR(155660) | . 069730 | DSR제강 | KOSPI | DSR제강(069730) | . 017940 | E1 | KOSPI | E1(017940) | . 007700 | &lt;span style=white-space:pre-wrap&gt;F&amp;F &lt;/span&gt; | KOSPI | &lt;span style=white-space:pre-wrap&gt;F&amp;F(007700) &lt;/span&gt; | . 114090 | GKL | KOSPI | GKL(114090) | . 078930 | GS | KOSPI | GS(078930) | . 006360 | GS건설 | KOSPI | GS건설(006360) | . 001250 | GS글로벌 | KOSPI | GS글로벌(001250) | . 007070 | GS리테일 | KOSPI | GS리테일(007070) | . 012630 | HDC | KOSPI | HDC(012630) | . ... | ... | ... | ... | . 001450 | 현대해상 | KOSPI | 현대해상(001450) | . 057050 | 현대홈쇼핑 | KOSPI | 현대홈쇼핑(057050) | . 093240 | 형지엘리트 | KOSPI | 형지엘리트(093240) | . 003010 | 혜인 | KOSPI | 혜인(003010) | . 111110 | 호전실업 | KOSPI | 호전실업(111110) | . 008770 | 호텔신라 | KOSPI | 호텔신라(008770) | . 002460 | 화성산업 | KOSPI | 화성산업(002460) | . 013520 | 화승알앤에이 | KOSPI | 화승알앤에이(013520) | . 241590 | 화승엔터프라이즈 | KOSPI | 화승엔터프라이즈(241590) | . 006060 | 화승인더스트리 | KOSPI | 화승인더스트리(006060) | . 010690 | 화신 | KOSPI | 화신(010690) | . 133820 | 화인베스틸 | KOSPI | 화인베스틸(133820) | . 010660 | 화천기계 | KOSPI | 화천기계(010660) | . 000850 | 화천기공 | KOSPI | 화천기공(000850) | . 016580 | 환인제약 | KOSPI | 환인제약(016580) | . 032560 | 황금에스티 | KOSPI | 황금에스티(032560) | . 004800 | 효성 | KOSPI | 효성(004800) | . 094280 | 효성 ITX | KOSPI | 효성 ITX(094280) | . 298040 | 효성중공업 | KOSPI | 효성중공업(298040) | . 298050 | 효성첨단소재 | KOSPI | 효성첨단소재(298050) | . 298020 | 효성티앤씨 | KOSPI | 효성티앤씨(298020) | . 298000 | 효성화학 | KOSPI | 효성화학(298000) | . 093370 | 후성 | KOSPI | 후성(093370) | . 081660 | 휠라코리아 | KOSPI | 휠라코리아(081660) | . 005870 | 휴니드테크놀러지스 | KOSPI | 휴니드테크놀러지스(005870) | . 079980 | 휴비스 | KOSPI | 휴비스(079980) | . 005010 | 휴스틸 | KOSPI | 휴스틸(005010) | . 069260 | 휴켐스 | KOSPI | 휴켐스(069260) | . 000540 | 흥국화재 | KOSPI | 흥국화재(000540) | . 003280 | 흥아해운 | KOSPI | 흥아해운(003280) | . transmute() 함수로 필요한 컬럼만 출력 | . In&nbsp;[79]: code_info %&gt;% transmute(company = paste0(name, &quot;(&quot;, code, &quot;)&quot;), market) . companymarket . AJ네트웍스(095570) | KOSPI | . AJ렌터카(068400) | KOSPI | . AK홀딩스(006840) | KOSPI | . BGF(027410) | KOSPI | . BGF리테일(282330) | KOSPI | . BNK금융지주(138930) | KOSPI | . BYC(001460) | KOSPI | . CJ(001040) | KOSPI | . CJ CGV(079160) | KOSPI | . CJ대한통운(000120) | KOSPI | . CJ씨푸드(011150) | KOSPI | . CJ제일제당(097950) | KOSPI | . CJ헬로(037560) | KOSPI | . CS홀딩스(000590) | KOSPI | . DB(012030) | KOSPI | . DB금융투자(016610) | KOSPI | . DB손해보험(005830) | KOSPI | . DB하이텍(000990) | KOSPI | . DGB금융지주(139130) | KOSPI | . DRB동일(004840) | KOSPI | . DSR(155660) | KOSPI | . DSR제강(069730) | KOSPI | . E1(017940) | KOSPI | . &lt;span style=white-space:pre-wrap&gt;F&amp;F(007700) &lt;/span&gt; | KOSPI | . GKL(114090) | KOSPI | . GS(078930) | KOSPI | . GS건설(006360) | KOSPI | . GS글로벌(001250) | KOSPI | . GS리테일(007070) | KOSPI | . HDC(012630) | KOSPI | . ... | ... | . 현대해상(001450) | KOSPI | . 현대홈쇼핑(057050) | KOSPI | . 형지엘리트(093240) | KOSPI | . 혜인(003010) | KOSPI | . 호전실업(111110) | KOSPI | . 호텔신라(008770) | KOSPI | . 화성산업(002460) | KOSPI | . 화승알앤에이(013520) | KOSPI | . 화승엔터프라이즈(241590) | KOSPI | . 화승인더스트리(006060) | KOSPI | . 화신(010690) | KOSPI | . 화인베스틸(133820) | KOSPI | . 화천기계(010660) | KOSPI | . 화천기공(000850) | KOSPI | . 환인제약(016580) | KOSPI | . 황금에스티(032560) | KOSPI | . 효성(004800) | KOSPI | . 효성 ITX(094280) | KOSPI | . 효성중공업(298040) | KOSPI | . 효성첨단소재(298050) | KOSPI | . 효성티앤씨(298020) | KOSPI | . 효성화학(298000) | KOSPI | . 후성(093370) | KOSPI | . 휠라코리아(081660) | KOSPI | . 휴니드테크놀러지스(005870) | KOSPI | . 휴비스(079980) | KOSPI | . 휴스틸(005010) | KOSPI | . 휴켐스(069260) | KOSPI | . 흥국화재(000540) | KOSPI | . 흥아해운(003280) | KOSPI | . .",
            "url": "https://safenumz.github.io/blog/r/2019/12/12/R_%ED%8C%A8%ED%82%A4%EC%A7%80_tidyr_-_gather_spread_seperate_unite.html",
            "relUrl": "/r/2019/12/12/R_%ED%8C%A8%ED%82%A4%EC%A7%80_tidyr_-_gather_spread_seperate_unite.html",
            "date": " • Dec 12, 2019"
        }
        
    
  
    
        ,"post95": {
            "title": "[R tidyr] tidyr package 소개",
            "content": "&lt;!DOCTYPE html&gt; . 2019-12-12-R_패키지_tidyr . In&nbsp;[1]: library(tidyr) . tidyr &#54056;&#53412;&#51648; &#49548;&#44060;&#182; . tidyr은 데이터를 tidy하게 만드는 4개 함수를 제공하고 추가적인 helper 함수를 함께 제공 . gather(): wide form 데이터를 long form으로 변환 | spread(): long form 데이터를 wide form으로 변환 | separate(): 하나의 컬럼을 두 개로 나눔 | unite(): 두 개의 컬럼을 하나로 합침 | In&nbsp;[2]: # wide form 예시 table1 . countryyearcasespopulation . Afghanistan | 1999 | 745 | 19987071 | . Afghanistan | 2000 | 2666 | 20595360 | . Brazil | 1999 | 37737 | 172006362 | . Brazil | 2000 | 80488 | 174504898 | . China | 1999 | 212258 | 1272915272 | . China | 2000 | 213766 | 1280428583 | . In&nbsp;[3]: # long form 예시 table2 . countryyeartypecount . Afghanistan | 1999 | cases | 745 | . Afghanistan | 1999 | population | 19987071 | . Afghanistan | 2000 | cases | 2666 | . Afghanistan | 2000 | population | 20595360 | . Brazil | 1999 | cases | 37737 | . Brazil | 1999 | population | 172006362 | . Brazil | 2000 | cases | 80488 | . Brazil | 2000 | population | 174504898 | . China | 1999 | cases | 212258 | . China | 1999 | population | 1272915272 | . China | 2000 | cases | 213766 | . China | 2000 | population | 1280428583 | . In&nbsp;[4]: # 한 컬럼에 두 개의 의미를 지닌 데이터가 들어 있는 경우 table3 . countryyearrate . Afghanistan | 1999 | 745/19987071 | . Afghanistan | 2000 | 2666/20595360 | . Brazil | 1999 | 37737/172006362 | . Brazil | 2000 | 80488/174504898 | . China | 1999 | 212258/1272915272 | . China | 2000 | 213766/1280428583 | . In&nbsp;[5]: # wide form 예시 1 table4a . country19992000 . Afghanistan | 745 | 2666 | . Brazil | 37737 | 80488 | . China | 212258 | 213766 | . In&nbsp;[6]: # wide form 예시 2 table4b . country19992000 . Afghanistan | 19987071 | 20595360 | . Brazil | 172006362 | 174504898 | . China | 1272915272 | 1280428583 | . wide to long - gather()&#182; . gather()는 wide form의 데이터를 long form으로 바꾸는 역할을 수행. gather(data, key=&quot;컬럼 이름이 데이터로 들어갈 컬럼의 이름&quot;, value=&quot;매트릭스로 펼쳐져 있는 데이터가 모이는 컬럼의 이름&quot;, &quot;데이터로 들어갈 컬럼들을 지정&quot;)의 형태로 작성. &quot;데이터로 들어갈 컬럼들을 지정&quot;은 위치에 자유로움. 값에 해당하는 데이터의 이동이 중요함. 메트릭스 모양이 한줄의 컬럼으로 변경되는 것을 확인 . In&nbsp;[7]: table4a . country19992000 . Afghanistan | 745 | 2666 | . Brazil | 37737 | 80488 | . China | 212258 | 213766 | . In&nbsp;[8]: table4a %&gt;% gather(&#39;1999&#39;, &#39;2000&#39; , key = &quot;year&quot; , value = &quot;cases&quot;) . countryyearcases . Afghanistan | 1999 | 745 | . Brazil | 1999 | 37737 | . China | 1999 | 212258 | . Afghanistan | 2000 | 2666 | . Brazil | 2000 | 80488 | . China | 2000 | 213766 | . long to wide - spread()&#182; . spread()는 하나의 컬럼으로 되어 있는 데이터를 메트릭스의 형태로 흩뿌리는 동작을 수행. spread(data, key=&quot;컬럼에 위치한 데이터가 있는 컬럼&quot;, value=&quot;메트릭스 모양으로 펼쳐질 데이터가 있는 컬럼&quot;)으로 작성 . In&nbsp;[9]: table2 %&gt;% head(6) . countryyeartypecount . Afghanistan | 1999 | cases | 745 | . Afghanistan | 1999 | population | 19987071 | . Afghanistan | 2000 | cases | 2666 | . Afghanistan | 2000 | population | 20595360 | . Brazil | 1999 | cases | 37737 | . Brazil | 1999 | population | 172006362 | . In&nbsp;[10]: table2 %&gt;% spread(key = type, value = count) . countryyearcasespopulation . Afghanistan | 1999 | 745 | 19987071 | . Afghanistan | 2000 | 2666 | 20595360 | . Brazil | 1999 | 37737 | 172006362 | . Brazil | 2000 | 80488 | 174504898 | . China | 1999 | 212258 | 1272915272 | . China | 2000 | 213766 | 1280428583 | . &#54616;&#45208;&#51032; &#52972;&#47100;&#51012; &#45208;&#45572;&#44592; - separate()&#182; . 아래와 같이 여러 부호로 그 의미가 나누어져 있지만 한 컬럼에 데이터가 있는 경우 컬럼을 의미 단위로 분리하는 역할을 수행. into = c(&quot;나눠질 때 첫번째 컬럼 이름&quot;, &quot;나눠질 때 두번째 컬럼 이름&quot;)으로 새로 생성되는 컬럼의 이름을 지정할 수 있음 . In&nbsp;[11]: table3 . countryyearrate . Afghanistan | 1999 | 745/19987071 | . Afghanistan | 2000 | 2666/20595360 | . Brazil | 1999 | 37737/172006362 | . Brazil | 2000 | 80488/174504898 | . China | 1999 | 212258/1272915272 | . China | 2000 | 213766/1280428583 | . In&nbsp;[43]: table3 %&gt;% separate(rate, into = c(&quot;cases&quot;, &quot;population&quot;)) . countryyearcasespopulation . Afghanistan | 1999 | 745 | 19987071 | . Afghanistan | 2000 | 2666 | 20595360 | . Brazil | 1999 | 37737 | 172006362 | . Brazil | 2000 | 80488 | 174504898 | . China | 1999 | 212258 | 1272915272 | . China | 2000 | 213766 | 1280428583 | . In&nbsp;[44]: # convert = TRUE 숫자로 형변환 # 간단한 형변환은 옵션으로 제공 table3 %&gt;% separate(rate, into = c(&quot;cases&quot;, &quot;population&quot;), convert = TRUE) . countryyearcasespopulation . Afghanistan | 1999 | 745 | 19987071 | . Afghanistan | 2000 | 2666 | 20595360 | . Brazil | 1999 | 37737 | 172006362 | . Brazil | 2000 | 80488 | 174504898 | . China | 1999 | 212258 | 1272915272 | . China | 2000 | 213766 | 1280428583 | . &#46160; &#52972;&#47100;&#51012; &#54633;&#52824;&#44592; - unite()&#182; . unite() 두 컬럼을 paste0()과 비슷하게 합쳐주는 역할을 수행 . In&nbsp;[45]: table5 . countrycenturyyearrate . Afghanistan | 19 | 99 | 745/19987071 | . Afghanistan | 20 | 00 | 2666/20595360 | . Brazil | 19 | 99 | 37737/172006362 | . Brazil | 20 | 00 | 80488/174504898 | . China | 19 | 99 | 212258/1272915272 | . China | 20 | 00 | 213766/1280428583 | . In&nbsp;[46]: table5 %&gt;% unite(new, century, year) . countrynewrate . Afghanistan | 19_99 | 745/19987071 | . Afghanistan | 20_00 | 2666/20595360 | . Brazil | 19_99 | 37737/172006362 | . Brazil | 20_00 | 80488/174504898 | . China | 19_99 | 212258/1272915272 | . China | 20_00 | 213766/1280428583 | . sep 인자를 이용해 구분자로 사용할 문자열을 지정할 수 있음 . In&nbsp;[47]: table5 %&gt;% unite(new, century, year) . countrynewrate . Afghanistan | 19_99 | 745/19987071 | . Afghanistan | 20_00 | 2666/20595360 | . Brazil | 19_99 | 37737/172006362 | . Brazil | 20_00 | 80488/174504898 | . China | 19_99 | 212258/1272915272 | . China | 20_00 | 213766/1280428583 | . In&nbsp;[50]: table5 %&gt;% unite(new, century, year, sep = &quot;&quot;) . countrynewrate . Afghanistan | 1999 | 745/19987071 | . Afghanistan | 2000 | 2666/20595360 | . Brazil | 1999 | 37737/172006362 | . Brazil | 2000 | 80488/174504898 | . China | 1999 | 212258/1272915272 | . China | 2000 | 213766/1280428583 | . .",
            "url": "https://safenumz.github.io/blog/r/2019/12/12/R_%ED%8C%A8%ED%82%A4%EC%A7%80_tidyr.html",
            "relUrl": "/r/2019/12/12/R_%ED%8C%A8%ED%82%A4%EC%A7%80_tidyr.html",
            "date": " • Dec 12, 2019"
        }
        
    
  
    
        ,"post96": {
            "title": "[R dplyr] 단일 테이블",
            "content": "&lt;!DOCTYPE html&gt; . R dplyr 패키지 - 단일 테이블 경우 . In&nbsp;[1]: library(dplyr) library(tqk) library(purrr) code_get() %&gt;% slice(11:20) -&gt; code_info code_info %&gt;% pull(code) %&gt;% map_dfr( ~ tqk_get(.x, from = &quot;2017-01-01&quot;, to = &quot;2018-12-31&quot;) %&gt;% mutate(code = .x) ) %&gt;% left_join(code_info, by = &quot;code&quot;) -&gt; stks . Attaching package: ‘dplyr’ The following objects are masked from ‘package:stats’: filter, lag The following objects are masked from ‘package:base’: intersect, setdiff, setequal, union . In&nbsp;[4]: # 날짜 데이터를 다루는 libridate 패키지 설치 install.packages(&quot;lubridate&quot;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[5]: # 날짜 데이터를 다루는 libridate 패키지 library(lubridate) . Attaching package: ‘lubridate’ The following object is masked from ‘package:base’: date . In&nbsp;[6]: stks %&gt;% transmute( date = date, year = year(date), month = month(date), day = day(date) ) . dateyearmonthday . 2017-01-02 | 2017 | 1 | 2 | . 2017-01-03 | 2017 | 1 | 3 | . 2017-01-04 | 2017 | 1 | 4 | . 2017-01-05 | 2017 | 1 | 5 | . 2017-01-06 | 2017 | 1 | 6 | . 2017-01-09 | 2017 | 1 | 9 | . 2017-01-10 | 2017 | 1 | 10 | . 2017-01-11 | 2017 | 1 | 11 | . 2017-01-12 | 2017 | 1 | 12 | . 2017-01-13 | 2017 | 1 | 13 | . 2017-01-16 | 2017 | 1 | 16 | . 2017-01-17 | 2017 | 1 | 17 | . 2017-01-18 | 2017 | 1 | 18 | . 2017-01-19 | 2017 | 1 | 19 | . 2017-01-20 | 2017 | 1 | 20 | . 2017-01-23 | 2017 | 1 | 23 | . 2017-01-24 | 2017 | 1 | 24 | . 2017-01-25 | 2017 | 1 | 25 | . 2017-01-26 | 2017 | 1 | 26 | . 2017-01-31 | 2017 | 1 | 31 | . 2017-02-01 | 2017 | 2 | 1 | . 2017-02-02 | 2017 | 2 | 2 | . 2017-02-03 | 2017 | 2 | 3 | . 2017-02-06 | 2017 | 2 | 6 | . 2017-02-07 | 2017 | 2 | 7 | . 2017-02-08 | 2017 | 2 | 8 | . 2017-02-09 | 2017 | 2 | 9 | . 2017-02-10 | 2017 | 2 | 10 | . 2017-02-13 | 2017 | 2 | 13 | . 2017-02-14 | 2017 | 2 | 14 | . ... | ... | ... | ... | . 2018-11-16 | 2018 | 11 | 16 | . 2018-11-19 | 2018 | 11 | 19 | . 2018-11-20 | 2018 | 11 | 20 | . 2018-11-21 | 2018 | 11 | 21 | . 2018-11-22 | 2018 | 11 | 22 | . 2018-11-23 | 2018 | 11 | 23 | . 2018-11-26 | 2018 | 11 | 26 | . 2018-11-27 | 2018 | 11 | 27 | . 2018-11-28 | 2018 | 11 | 28 | . 2018-11-29 | 2018 | 11 | 29 | . 2018-11-30 | 2018 | 11 | 30 | . 2018-12-03 | 2018 | 12 | 3 | . 2018-12-04 | 2018 | 12 | 4 | . 2018-12-05 | 2018 | 12 | 5 | . 2018-12-06 | 2018 | 12 | 6 | . 2018-12-07 | 2018 | 12 | 7 | . 2018-12-10 | 2018 | 12 | 10 | . 2018-12-11 | 2018 | 12 | 11 | . 2018-12-12 | 2018 | 12 | 12 | . 2018-12-13 | 2018 | 12 | 13 | . 2018-12-14 | 2018 | 12 | 14 | . 2018-12-17 | 2018 | 12 | 17 | . 2018-12-18 | 2018 | 12 | 18 | . 2018-12-19 | 2018 | 12 | 19 | . 2018-12-20 | 2018 | 12 | 20 | . 2018-12-21 | 2018 | 12 | 21 | . 2018-12-24 | 2018 | 12 | 24 | . 2018-12-26 | 2018 | 12 | 26 | . 2018-12-27 | 2018 | 12 | 27 | . 2018-12-28 | 2018 | 12 | 28 | . In&nbsp;[19]: stks %&gt;% mutate( date = date, year = year(date), month = month(date), day = day(date) ) -&gt; stks_d . In&nbsp;[20]: # 년도별, 기업별 거래액 합계는 각각 얼마일까? stks_d %&gt;% group_by(year, name) %&gt;% summarise(total_vol = sum(volume)) . yearnametotal_vol . 2017 | CJ씨푸드 | 34742143 | . 2017 | CJ제일제당 | 9464265 | . 2017 | CJ헬로 | 32356678 | . 2017 | CS홀딩스 | 190824 | . 2017 | DB | 176798208 | . 2017 | DB금융투자 | 22631475 | . 2017 | DB손해보험 | 40749576 | . 2017 | DB하이텍 | 148231175 | . 2017 | DGB금융지주 | 122450278 | . 2017 | DRB동일 | 5185312 | . 2018 | CJ씨푸드 | 66920617 | . 2018 | CJ제일제당 | 10808792 | . 2018 | CJ헬로 | 99185204 | . 2018 | CS홀딩스 | 485555 | . 2018 | DB | 356410596 | . 2018 | DB금융투자 | 21137848 | . 2018 | DB손해보험 | 36337349 | . 2018 | DB하이텍 | 119891410 | . 2018 | DGB금융지주 | 139106536 | . 2018 | DRB동일 | 5849853 | . In&nbsp;[21]: # 18년의 월별 기업별 종가 최소값은 얼마일까? stk_d %&gt;% filter(year == 2018) %&gt;% group_by(month, name) %&gt;% summarise(min_close = min(close)) . monthnamemin_close . 1 | CJ씨푸드 | 2790 | . 1 | CJ제일제당 | 358000 | . 1 | CJ헬로 | 6870 | . 1 | CS홀딩스 | 78000 | . 1 | DB | 648 | . 1 | DB금융투자 | 4030 | . 1 | DB손해보험 | 67200 | . 1 | DB하이텍 | 11700 | . 1 | DGB금융지주 | 10500 | . 1 | DRB동일 | 7430 | . 2 | CJ씨푸드 | 2770 | . 2 | CJ제일제당 | 319500 | . 2 | CJ헬로 | 8060 | . 2 | CS홀딩스 | 76300 | . 2 | DB | 682 | . 2 | DB금융투자 | 4215 | . 2 | DB손해보험 | 67300 | . 2 | DB하이텍 | 15100 | . 2 | DGB금융지주 | 11500 | . 2 | DRB동일 | 7530 | . 3 | CJ씨푸드 | 2685 | . 3 | CJ제일제당 | 320000 | . 3 | CJ헬로 | 8120 | . 3 | CS홀딩스 | 73300 | . 3 | DB | 657 | . 3 | DB금융투자 | 3845 | . 3 | DB손해보험 | 64700 | . 3 | DB하이텍 | 14500 | . 3 | DGB금융지주 | 11500 | . 3 | DRB동일 | 7110 | . ... | ... | ... | . 10 | CJ씨푸드 | 2040 | . 10 | CJ제일제당 | 312000 | . 10 | CJ헬로 | 8770 | . 10 | CS홀딩스 | 58900 | . 10 | DB | 805 | . 10 | DB금융투자 | 3585 | . 10 | DB손해보험 | 68100 | . 10 | DB하이텍 | 10350 | . 10 | DGB금융지주 | 9360 | . 10 | DRB동일 | 6400 | . 11 | CJ씨푸드 | 2215 | . 11 | CJ제일제당 | 318000 | . 11 | CJ헬로 | 9300 | . 11 | CS홀딩스 | 59600 | . 11 | DB | 800 | . 11 | DB금융투자 | 3760 | . 11 | DB손해보험 | 67400 | . 11 | DB하이텍 | 11400 | . 11 | DGB금융지주 | 8680 | . 11 | DRB동일 | 6280 | . 12 | CJ씨푸드 | 2265 | . 12 | CJ제일제당 | 325500 | . 12 | CJ헬로 | 9050 | . 12 | CS홀딩스 | 63700 | . 12 | DB | 802 | . 12 | DB금융투자 | 4400 | . 12 | DB손해보험 | 67000 | . 12 | DB하이텍 | 10300 | . 12 | DGB금융지주 | 8310 | . 12 | DRB동일 | 6250 | . In&nbsp;[22]: # 17년의 월별 기업별 고가가 3등(min_rank 기준)인 날은 언제일까? stks_d %&gt;% filter(year == 2017) %&gt;% group_by(month, name) %&gt;% mutate(rank = min_rank(high)) %&gt;% filter(rank == 3) %&gt;% ungroup() . dateopenhighlowclosevolumeadjustedcodenamemarketyearmonthdayrank . 2017-01-31 | 3410 | 3440 | 3355 | 3435 | 104370 | 3435 | 011150 | CJ씨푸드 | KOSPI | 2017 | 1 | 31 | 3 | . 2017-02-24 | 3415 | 3445 | 3390 | 3415 | 140365 | 3415 | 011150 | CJ씨푸드 | KOSPI | 2017 | 2 | 24 | 3 | . 2017-02-28 | 3440 | 3445 | 3390 | 3390 | 98622 | 3390 | 011150 | CJ씨푸드 | KOSPI | 2017 | 2 | 28 | 3 | . 2017-03-23 | 3315 | 3315 | 3290 | 3290 | 72524 | 3290 | 011150 | CJ씨푸드 | KOSPI | 2017 | 3 | 23 | 3 | . 2017-05-15 | 3320 | 3325 | 3290 | 3320 | 71323 | 3320 | 011150 | CJ씨푸드 | KOSPI | 2017 | 5 | 15 | 3 | . 2017-05-18 | 3300 | 3325 | 3285 | 3310 | 69070 | 3310 | 011150 | CJ씨푸드 | KOSPI | 2017 | 5 | 18 | 3 | . 2017-08-31 | 3160 | 3180 | 3130 | 3150 | 54539 | 3150 | 011150 | CJ씨푸드 | KOSPI | 2017 | 8 | 31 | 3 | . 2017-09-28 | 2910 | 2955 | 2900 | 2935 | 20449 | 2935 | 011150 | CJ씨푸드 | KOSPI | 2017 | 9 | 28 | 3 | . 2017-11-06 | 2955 | 2955 | 2895 | 2905 | 53657 | 2905 | 011150 | CJ씨푸드 | KOSPI | 2017 | 11 | 6 | 3 | . 2017-11-07 | 2910 | 2955 | 2905 | 2955 | 46353 | 2955 | 011150 | CJ씨푸드 | KOSPI | 2017 | 11 | 7 | 3 | . 2017-12-20 | 2750 | 2815 | 2750 | 2795 | 50967 | 2795 | 011150 | CJ씨푸드 | KOSPI | 2017 | 12 | 20 | 3 | . 2017-01-11 | 352000 | 355000 | 350000 | 351500 | 46222 | 351500 | 097950 | CJ제일제당 | KOSPI | 2017 | 1 | 11 | 3 | . 2017-02-17 | 356000 | 359500 | 354500 | 357000 | 21885 | 357000 | 097950 | CJ제일제당 | KOSPI | 2017 | 2 | 17 | 3 | . 2017-04-18 | 342000 | 342500 | 338500 | 342000 | 32819 | 342000 | 097950 | CJ제일제당 | KOSPI | 2017 | 4 | 18 | 3 | . 2017-05-08 | 346500 | 354500 | 346000 | 354500 | 76283 | 354500 | 097950 | CJ제일제당 | KOSPI | 2017 | 5 | 8 | 3 | . 2017-08-24 | 349500 | 354000 | 349500 | 352500 | 18112 | 352500 | 097950 | CJ제일제당 | KOSPI | 2017 | 8 | 24 | 3 | . 2017-10-31 | 362000 | 366000 | 360000 | 366000 | 19573 | 366000 | 097950 | CJ제일제당 | KOSPI | 2017 | 10 | 31 | 3 | . 2017-11-03 | 359000 | 373500 | 359000 | 373500 | 57673 | 373500 | 097950 | CJ제일제당 | KOSPI | 2017 | 11 | 3 | 3 | . 2017-01-25 | 8850 | 9000 | 8800 | 8950 | 63245 | 8950 | 037560 | CJ헬로 | KOSPI | 2017 | 1 | 25 | 3 | . 2017-03-09 | 8590 | 8660 | 8520 | 8600 | 28488 | 8600 | 037560 | CJ헬로 | KOSPI | 2017 | 3 | 9 | 3 | . 2017-05-18 | 9240 | 9360 | 9220 | 9360 | 83048 | 9360 | 037560 | CJ헬로 | KOSPI | 2017 | 5 | 18 | 3 | . 2017-06-26 | 9040 | 9100 | 8910 | 9010 | 145221 | 9010 | 037560 | CJ헬로 | KOSPI | 2017 | 6 | 26 | 3 | . 2017-07-24 | 8620 | 8670 | 8570 | 8580 | 60899 | 8580 | 037560 | CJ헬로 | KOSPI | 2017 | 7 | 24 | 3 | . 2017-07-27 | 8640 | 8670 | 8550 | 8610 | 49593 | 8610 | 037560 | CJ헬로 | KOSPI | 2017 | 7 | 27 | 3 | . 2017-08-16 | 8280 | 8310 | 8120 | 8130 | 164171 | 8130 | 037560 | CJ헬로 | KOSPI | 2017 | 8 | 16 | 3 | . 2017-09-29 | 7080 | 7180 | 7080 | 7180 | 85859 | 7180 | 037560 | CJ헬로 | KOSPI | 2017 | 9 | 29 | 3 | . 2017-10-26 | 7070 | 7070 | 6970 | 6980 | 347873 | 6980 | 037560 | CJ헬로 | KOSPI | 2017 | 10 | 26 | 3 | . 2017-12-08 | 6750 | 6850 | 6680 | 6840 | 206208 | 6840 | 037560 | CJ헬로 | KOSPI | 2017 | 12 | 8 | 3 | . 2017-02-03 | 81200 | 81600 | 81100 | 81400 | 132 | 81400 | 000590 | CS홀딩스 | KOSPI | 2017 | 2 | 3 | 3 | . 2017-04-13 | 84300 | 84900 | 83900 | 84900 | 575 | 84900 | 000590 | CS홀딩스 | KOSPI | 2017 | 4 | 13 | 3 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2017-09-08 | 14500 | 14700 | 14050 | 14250 | 1029534 | 14250.000 | 000990 | DB하이텍 | KOSPI | 2017 | 9 | 8 | 3 | . 2017-10-12 | 14600 | 14800 | 14450 | 14800 | 463944 | 14800.000 | 000990 | DB하이텍 | KOSPI | 2017 | 10 | 12 | 3 | . 2017-10-19 | 14750 | 14800 | 14350 | 14450 | 479498 | 14450.000 | 000990 | DB하이텍 | KOSPI | 2017 | 10 | 19 | 3 | . 2017-10-30 | 14650 | 14800 | 14400 | 14450 | 288480 | 14450.000 | 000990 | DB하이텍 | KOSPI | 2017 | 10 | 30 | 3 | . 2017-11-30 | 13950 | 13950 | 13350 | 13400 | 518115 | 13400.000 | 000990 | DB하이텍 | KOSPI | 2017 | 11 | 30 | 3 | . 2017-12-21 | 11850 | 12000 | 11300 | 11300 | 563731 | 11300.000 | 000990 | DB하이텍 | KOSPI | 2017 | 12 | 21 | 3 | . 2017-01-12 | 9630 | 9630 | 9420 | 9430 | 441582 | 9430.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 1 | 12 | 3 | . 2017-03-02 | 10600 | 10850 | 10500 | 10650 | 690871 | 10650.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 3 | 2 | 3 | . 2017-05-26 | 11450 | 11600 | 11400 | 11550 | 583302 | 11550.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 5 | 26 | 3 | . 2017-06-01 | 11500 | 11500 | 11250 | 11300 | 575341 | 11300.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 6 | 1 | 3 | . 2017-06-02 | 11400 | 11500 | 11350 | 11450 | 591805 | 11450.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 6 | 2 | 3 | . 2017-06-05 | 11500 | 11500 | 11350 | 11450 | 347102 | 11450.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 6 | 5 | 3 | . 2017-06-07 | 11450 | 11500 | 11350 | 11500 | 506759 | 11500.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 6 | 7 | 3 | . 2017-06-08 | 11400 | 11500 | 11350 | 11500 | 1250077 | 11500.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 6 | 8 | 3 | . 2017-06-28 | 11300 | 11500 | 11250 | 11500 | 487358 | 11500.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 6 | 28 | 3 | . 2017-07-06 | 11450 | 11550 | 11350 | 11350 | 646835 | 11350.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 7 | 6 | 3 | . 2017-11-13 | 9430 | 9460 | 9200 | 9220 | 774224 | 9220.000 | 139130 | DGB금융지주 | KOSPI | 2017 | 11 | 13 | 3 | . 2017-01-25 | 11300 | 11350 | 10900 | 10950 | 37409 | 10437.540 | 004840 | DRB동일 | KOSPI | 2017 | 1 | 25 | 3 | . 2017-02-08 | 10950 | 11050 | 10900 | 11000 | 10638 | 10485.200 | 004840 | DRB동일 | KOSPI | 2017 | 2 | 8 | 3 | . 2017-02-23 | 11050 | 11050 | 10850 | 11000 | 16469 | 10485.200 | 004840 | DRB동일 | KOSPI | 2017 | 2 | 23 | 3 | . 2017-02-28 | 10850 | 11050 | 10800 | 11050 | 20390 | 10532.860 | 004840 | DRB동일 | KOSPI | 2017 | 2 | 28 | 3 | . 2017-06-23 | 10200 | 10250 | 10100 | 10250 | 18004 | 9770.300 | 004840 | DRB동일 | KOSPI | 2017 | 6 | 23 | 3 | . 2017-06-26 | 10150 | 10250 | 10000 | 10050 | 28864 | 9579.660 | 004840 | DRB동일 | KOSPI | 2017 | 6 | 26 | 3 | . 2017-06-29 | 10150 | 10250 | 10100 | 10200 | 10915 | 9722.640 | 004840 | DRB동일 | KOSPI | 2017 | 6 | 29 | 3 | . 2017-07-25 | 9750 | 9750 | 9620 | 9640 | 32868 | 9188.848 | 004840 | DRB동일 | KOSPI | 2017 | 7 | 25 | 3 | . 2017-08-31 | 8410 | 8540 | 8410 | 8520 | 11612 | 8121.264 | 004840 | DRB동일 | KOSPI | 2017 | 8 | 31 | 3 | . 2017-09-28 | 7590 | 7700 | 7540 | 7680 | 7998 | 7320.576 | 004840 | DRB동일 | KOSPI | 2017 | 9 | 28 | 3 | . 2017-10-20 | 7840 | 7840 | 7710 | 7810 | 6345 | 7444.492 | 004840 | DRB동일 | KOSPI | 2017 | 10 | 20 | 3 | . 2017-11-28 | 8020 | 8030 | 7870 | 7960 | 27531 | 7587.472 | 004840 | DRB동일 | KOSPI | 2017 | 11 | 28 | 3 | . 2017-12-01 | 7960 | 7960 | 7760 | 7880 | 18259 | 7511.216 | 004840 | DRB동일 | KOSPI | 2017 | 12 | 1 | 3 | . .",
            "url": "https://safenumz.github.io/blog/r/2019/12/01/R_dplyr_%ED%8C%A8%ED%82%A4%EC%A7%80_-_%EB%8B%A8%EC%9D%BC_%ED%85%8C%EC%9D%B4%EB%B8%94_%EA%B2%BD%EC%9A%B0.html",
            "relUrl": "/r/2019/12/01/R_dplyr_%ED%8C%A8%ED%82%A4%EC%A7%80_-_%EB%8B%A8%EC%9D%BC_%ED%85%8C%EC%9D%B4%EB%B8%94_%EA%B2%BD%EC%9A%B0.html",
            "date": " • Dec 1, 2019"
        }
        
    
  
    
        ,"post97": {
            "title": "[R sqldf] sqldf package 소개",
            "content": "&lt;!DOCTYPE html&gt; . R_sqldf_패키지 . sqldf&#47484; &#51060;&#50857;&#54620; &#45936;&#51060;&#53552; &#48516;&#49437;&#182; . In&nbsp;[1]: install.packages(&quot;sqldf&quot;) . also installing the dependencies ‘ellipsis’, ‘rlang’, ‘zeallot’, ‘vctrs’, ‘blob’, ‘gsubfn’, ‘proto’, ‘RSQLite’ Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[4]: library(sqldf) . In&nbsp;[5]: data(iris) . In&nbsp;[7]: head(sqldf(&quot;select * from iris&quot;), 10) . Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 5.0 | 3.6 | 1.4 | 0.2 | setosa | . 5.4 | 3.9 | 1.7 | 0.4 | setosa | . 4.6 | 3.4 | 1.4 | 0.3 | setosa | . 5.0 | 3.4 | 1.5 | 0.2 | setosa | . 4.4 | 2.9 | 1.4 | 0.2 | setosa | . 4.9 | 3.1 | 1.5 | 0.1 | setosa | . 데이터 특정 행(row) 수만 조회하고자 하는 경우 Oracle의 numrows 처럼 limit를 정의하고 행의 개수를 써주면 된다. head와 같은 기능이다. . In&nbsp;[8]: sqldf(&quot;select * from iris limit 10&quot;) . Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 5.0 | 3.6 | 1.4 | 0.2 | setosa | . 5.4 | 3.9 | 1.7 | 0.4 | setosa | . 4.6 | 3.4 | 1.4 | 0.3 | setosa | . 5.0 | 3.4 | 1.5 | 0.2 | setosa | . 4.4 | 2.9 | 1.4 | 0.2 | setosa | . 4.9 | 3.1 | 1.5 | 0.1 | setosa | . like 문장을 사용할 때는 &#39; &#39;를 이용하면 된다. . In&nbsp;[9]: sqldf(&quot;select count(*) from iris where Species like &#39;se%&#39;&quot;) . count(*) . 50 | . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/24/R_sqldf_%ED%8C%A8%ED%82%A4%EC%A7%80.html",
            "relUrl": "/r/2019/11/24/R_sqldf_%ED%8C%A8%ED%82%A4%EC%A7%80.html",
            "date": " • Nov 24, 2019"
        }
        
    
  
    
        ,"post98": {
            "title": "[R reshape] reshape package 소개",
            "content": "&lt;!DOCTYPE html&gt; . R_reshape_패키지 . reshape &#54056;&#53412;&#51648;&#182; . reshape 패키지는 단지 melt와 cast만을 사용하여 데이터를 재구성하거나 밀집화된 데이터를 유연하게 생성해 줌 | reshape 기존 데이터 구조를 column-wise하게 전환하는데, 크게 melt와 cast 단계로 구분됨 | . In&nbsp;[1]: # reshape 설치 install.packages(&quot;reshape&quot;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[1]: library(reshape) . In&nbsp;[2]: # airquality 데이터를 불러옴 data(airquality) . In&nbsp;[3]: head(airquality) . OzoneSolar.RWindTempMonthDay . 41 | 190 | 7.4 | 67 | 5 | 1 | . 36 | 118 | 8.0 | 72 | 5 | 2 | . 12 | 149 | 12.6 | 74 | 5 | 3 | . 18 | 313 | 11.5 | 62 | 5 | 4 | . NA | NA | 14.3 | 56 | 5 | 5 | . 28 | NA | 14.9 | 66 | 5 | 6 | . In&nbsp;[5]: # airquality 변수명 확인 names(airquality) . &lt;ol class=list-inline&gt; &#39;Ozone&#39; | &#39;Solar.R&#39; | &#39;Wind&#39; | &#39;Temp&#39; | &#39;Month&#39; | &#39;Day&#39; | &lt;/ol&gt; In&nbsp;[6]: # 변수명에 대문자와 소문자를 섞어쓰면 실수할 수 있으므로 모두 소문자로 바꿔 변수명에 속성에 다시 저장함 names(airquality) = tolower(names(airquality)) names(airquality) . &lt;ol class=list-inline&gt; &#39;ozone&#39; | &#39;solar.r&#39; | &#39;wind&#39; | &#39;temp&#39; | &#39;month&#39; | &#39;day&#39; | &lt;/ol&gt; melt를 이용해 id에 있는 변수를 기준으로 하여, 나머지 각 변수를 variable이란 이름의 데이터로 만든다. . In&nbsp;[46]: aqm = melt(airquality, id=c(&#39;month&#39;, &#39;day&#39;), na.rm=TRUE) aqm . monthdayvariablevalue . 5 | 1 | ozone | 41 | . 5 | 2 | ozone | 36 | . 5 | 3 | ozone | 12 | . 5 | 4 | ozone | 18 | . 5 | 6 | ozone | 28 | . 5 | 7 | ozone | 23 | . 5 | 8 | ozone | 19 | . 5 | 9 | ozone | 8 | . 5 | 11 | ozone | 7 | . 5 | 12 | ozone | 16 | . 5 | 13 | ozone | 11 | . 5 | 14 | ozone | 14 | . 5 | 15 | ozone | 18 | . 5 | 16 | ozone | 14 | . 5 | 17 | ozone | 34 | . 5 | 18 | ozone | 6 | . 5 | 19 | ozone | 30 | . 5 | 20 | ozone | 11 | . 5 | 21 | ozone | 1 | . 5 | 22 | ozone | 11 | . 5 | 23 | ozone | 4 | . 5 | 24 | ozone | 32 | . 5 | 28 | ozone | 23 | . 5 | 29 | ozone | 45 | . 5 | 30 | ozone | 115 | . 5 | 31 | ozone | 37 | . 6 | 7 | ozone | 29 | . 6 | 9 | ozone | 71 | . 6 | 10 | ozone | 39 | . 6 | 13 | ozone | 23 | . ... | ... | ... | ... | . 9 | 1 | temp | 91 | . 9 | 2 | temp | 92 | . 9 | 3 | temp | 93 | . 9 | 4 | temp | 93 | . 9 | 5 | temp | 87 | . 9 | 6 | temp | 84 | . 9 | 7 | temp | 80 | . 9 | 8 | temp | 78 | . 9 | 9 | temp | 75 | . 9 | 10 | temp | 73 | . 9 | 11 | temp | 81 | . 9 | 12 | temp | 76 | . 9 | 13 | temp | 77 | . 9 | 14 | temp | 71 | . 9 | 15 | temp | 71 | . 9 | 16 | temp | 78 | . 9 | 17 | temp | 67 | . 9 | 18 | temp | 76 | . 9 | 19 | temp | 68 | . 9 | 20 | temp | 82 | . 9 | 21 | temp | 64 | . 9 | 22 | temp | 71 | . 9 | 23 | temp | 81 | . 9 | 24 | temp | 69 | . 9 | 25 | temp | 63 | . 9 | 26 | temp | 70 | . 9 | 27 | temp | 77 | . 9 | 28 | temp | 75 | . 9 | 29 | temp | 76 | . 9 | 30 | temp | 68 | . cast를 이용해 엑셀의 피벗팅을 하듯이 자료를 변환함, melt된 aqm을 이용해 &quot;~&quot;를 y, x축의 dimension과 measure에 대항하는 변수(variable) 값을 표시한다. 여기서 특별히 변수 종류를 선정하지 않았으므로 모든 변수에 대해 분리해 ozone, solar.r과 같이 표현, 참고로 엑셀의 피벗은 count할 때 distinct count가 안 된다. . In&nbsp;[57]: a &lt;- cast(aqm, month ~ variable) a . Aggregation requires fun.aggregate: length used as default . monthozonesolar.rwindtemp . 5 | 26 | 27 | 31 | 31 | . 6 | 9 | 30 | 30 | 30 | . 7 | 26 | 31 | 31 | 31 | . 8 | 26 | 28 | 31 | 31 | . 9 | 29 | 30 | 30 | 30 | . y 축은 month, x 축은 variable, &quot;,&quot;로 구분한 다음, mean 함수를 적용한다. . In&nbsp;[64]: b &lt;- cast(aqm, month ~ variable, mean) b . monthozonesolar.rwindtemp . 5 | 23.61538 | 181.2963 | 11.622581 | 65.54839 | . 6 | 29.44444 | 190.1667 | 10.266667 | 79.10000 | . 7 | 59.11538 | 216.4839 | 8.941935 | 83.90323 | . 8 | 59.96154 | 171.8571 | 8.793548 | 83.96774 | . 9 | 31.44828 | 167.4333 | 10.180000 | 76.90000 | . y축은 month이지만 모든 변수에 대해 평균을 구하고 &quot;|&quot;를 이용해서 산출물을 분리해 표시, 조회용으로는 적합하나 데이터 마트를 만들기에는 좀 불편한 결과를 보여준다. . In&nbsp;[59]: c &lt;- cast(aqm, month ~ . | variable, mean) c . $ozone month(all) . 5 | 23.61538 | . 6 | 29.44444 | . 7 | 59.11538 | . 8 | 59.96154 | . 9 | 31.44828 | . $solar.r month(all) . 5 | 181.2963 | . 6 | 190.1667 | . 7 | 216.4839 | . 8 | 171.8571 | . 9 | 167.4333 | . $wind month(all) . 5 | 11.622581 | . 6 | 10.266667 | . 7 | 8.941935 | . 8 | 8.793548 | . 9 | 10.180000 | . $temp month(all) . 5 | 65.54839 | . 6 | 79.10000 | . 7 | 83.90323 | . 8 | 83.96774 | . 9 | 76.90000 | . In&nbsp;[66]: d &lt;- cast(aqm, month ~ variable, mean, margins=c(&quot;grand_row&quot;, &quot;grand_col&quot;)) d . monthozonesolar.rwindtemp(all) . 5 | 23.61538 | 181.2963 | 11.622581 | 65.54839 | 68.70696 | . 6 | 29.44444 | 190.1667 | 10.266667 | 79.10000 | 87.38384 | . 7 | 59.11538 | 216.4839 | 8.941935 | 83.90323 | 93.49748 | . 8 | 59.96154 | 171.8571 | 8.793548 | 83.96774 | 79.71207 | . 9 | 31.44828 | 167.4333 | 10.180000 | 76.90000 | 71.82689 | . (all) | 42.12931 | 185.9315 | 9.957516 | 77.88235 | 80.05722 | . 모든 변수를 처리하지 않고 특정 변수만 처리하고자 하는 경우 서브세트 기능을 이용해 아래 예제처럼 ozone에 대한 변수만을 처리하도록 한다. . In&nbsp;[65]: e &lt;- cast(aqm, day ~ month, mean, subset=variable==&quot;ozone&quot;) e . day56789 . 1 | 41 | NaN | 135 | 39 | 96 | . 2 | 36 | NaN | 49 | 9 | 78 | . 3 | 12 | NaN | 32 | 16 | 73 | . 4 | 18 | NaN | NaN | 78 | 91 | . 5 | NaN | NaN | 64 | 35 | 47 | . 6 | 28 | NaN | 40 | 66 | 32 | . 7 | 23 | 29 | 77 | 122 | 20 | . 8 | 19 | NaN | 97 | 89 | 23 | . 9 | 8 | 71 | 97 | 110 | 21 | . 10 | NaN | 39 | 85 | NaN | 24 | . 11 | 7 | NaN | NaN | NaN | 44 | . 12 | 16 | NaN | 10 | 44 | 21 | . 13 | 11 | 23 | 27 | 28 | 28 | . 14 | 14 | NaN | NaN | 65 | 9 | . 15 | 18 | NaN | 7 | NaN | 13 | . 16 | 14 | 21 | 48 | 22 | 46 | . 17 | 34 | 37 | 35 | 59 | 18 | . 18 | 6 | 20 | 61 | 23 | 13 | . 19 | 30 | 12 | 79 | 31 | 24 | . 20 | 11 | 13 | 63 | 44 | 16 | . 21 | 1 | NaN | 16 | 21 | 13 | . 22 | 11 | NaN | NaN | 9 | 23 | . 23 | 4 | NaN | NaN | NaN | 36 | . 24 | 32 | NaN | 80 | 45 | 7 | . 25 | NaN | NaN | 108 | 168 | 14 | . 26 | NaN | NaN | 20 | 73 | 30 | . 27 | NaN | NaN | 52 | NaN | NaN | . 28 | 23 | NaN | 82 | 76 | 14 | . 29 | 45 | NaN | 50 | 118 | 18 | . 30 | 115 | NaN | 64 | 84 | 20 | . 31 | 37 | NaN | 59 | 85 | NaN | . min, max를 동시에 표현해주는 range는 min은 &quot;_X1&quot;이라는 변수명으로, max는 &quot;_X2&quot;라는 suffix를 붙여준다. . In&nbsp;[67]: f &lt;- cast(aqm, month ~ variable, range) f . monthozone_X1ozone_X2solar.r_X1solar.r_X2wind_X1wind_X2temp_X1temp_X2 . 5 | 1 | 115 | 8 | 334 | 5.7 | 20.1 | 56 | 81 | . 6 | 12 | 71 | 31 | 332 | 1.7 | 20.7 | 65 | 93 | . 7 | 7 | 135 | 7 | 314 | 4.1 | 14.9 | 73 | 92 | . 8 | 9 | 168 | 24 | 273 | 2.3 | 15.5 | 72 | 97 | . 9 | 7 | 96 | 14 | 259 | 2.8 | 16.6 | 63 | 93 | . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/24/R_reshape_%ED%8C%A8%ED%82%A4%EC%A7%80.html",
            "relUrl": "/r/2019/11/24/R_reshape_%ED%8C%A8%ED%82%A4%EC%A7%80.html",
            "date": " • Nov 24, 2019"
        }
        
    
  
    
        ,"post99": {
            "title": "[R plyr] plyr package 소개",
            "content": "&lt;!DOCTYPE html&gt; . R_plyr_패키지 . In&nbsp;[60]: library(plyr) . In&nbsp;[9]: set.seed(1) d = data.frame(year = rep(2012:2014, each = 6), count = round(runif(9, 0, 20))) print(d) . year count 1 2012 5 2 2012 7 3 2012 11 4 2012 18 5 2012 4 6 2012 18 7 2013 19 8 2013 13 9 2013 13 10 2013 5 11 2013 7 12 2013 11 13 2014 18 14 2014 4 15 2014 18 16 2014 19 17 2014 13 18 2014 13 . plyr 패키지의 arrange 함수, desc 옵션으로 내림차순 정렬이 가능하다. (sort에서 decreasing=TRUE와 동일) . In&nbsp;[59]: # 2012년만 sorting하고 count를 내림차순으로 정렬 arrange(d[d$year==2012,], year, desc(count)) . yearcount . 2012 | 15 | . 2012 | 14 | . 2012 | 8 | . 2012 | 4 | . 2012 | 4 | . 2012 | 1 | . 데이터 프레임으로 입출력하는 함수인 ddply를 이용해 sd와 mean의 비율인 cv(coefficient of variation, 변동계수)를 구하는 기능이다. 데이터 프레임 d를 인수로 입력받고 count의 mean과 sd를 구해 각각 저장한다음 cv를 구한다. 결과를 year별로 리턴한면서 데이터 프레임으로 생성한다. . In&nbsp;[13]: ddply(d, &quot;year&quot;, function(x) { mean.count = mean(x$count) sd.count = sd(x$count) cv = sd.count/mean.count data.frame(cv.count = cv) }) . yearcv.count . 2012 | 0.7500473 | . 2013 | 0.8176584 | . 2014 | 0.3098741 | . 좀 더 복잡한 예제로는 transform과 summarise를 동시에 사용하는 경우다. 나머지 함수들은 데이터 유형에 따라 함수명만 다르므로 생략한다. summarise 옵션을 이용하는 경우 count 변수에 명령된 평균이나 합 등을 계산해주고, 새로 생긴 변수만 보여준다. transform 옵션은 summarise 옵션과는 달리 계산에 사용된 변수도 출력해준다. . In&nbsp;[14]: ddply(d, &quot;year&quot;, summarise, mean.count = mean(count)) . yearmean.count . 2012 | 7.666667 | . 2013 | 8.833333 | . 2014 | 13.500000 | . In&nbsp;[18]: ddply(d, &quot;year&quot;, transform, mean.count = mean(count)) . yearcountmean.count . 2012 | 1 | 7.666667 | . 2012 | 4 | 7.666667 | . 2012 | 4 | 7.666667 | . 2012 | 14 | 7.666667 | . 2012 | 8 | 7.666667 | . 2012 | 15 | 7.666667 | . 2013 | 10 | 8.833333 | . 2013 | 14 | 8.833333 | . 2013 | 20 | 8.833333 | . 2013 | 1 | 8.833333 | . 2013 | 4 | 8.833333 | . 2013 | 4 | 8.833333 | . 2014 | 14 | 13.500000 | . 2014 | 8 | 13.500000 | . 2014 | 15 | 13.500000 | . 2014 | 10 | 13.500000 | . 2014 | 14 | 13.500000 | . 2014 | 20 | 13.500000 | . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/24/R_plyr_%ED%8C%A8%ED%82%A4%EC%A7%80.html",
            "relUrl": "/r/2019/11/24/R_plyr_%ED%8C%A8%ED%82%A4%EC%A7%80.html",
            "date": " • Nov 24, 2019"
        }
        
    
  
    
        ,"post100": {
            "title": "[R] 날짜 문자열 간 변환",
            "content": "&lt;!DOCTYPE html&gt; . R_날짜_문자열_간_변환 . &#47928;&#51088;&#50676;&#51012; &#45216;&#51676;&#47196; &#48320;&#54872;&#182; . Sys.Date(): 현재 날짜를 반환 | as.Date(): 날짜 객체로 반환 | &#39;format=&#39; 옵션을 통해 입력되는 날짜의 형식을 지정해 주어야 함 | . In&nbsp;[35]: as.Date(&quot;2015-01-13&quot;) . 2015-01-13 In&nbsp;[36]: as.Date(&quot;01/13/2015&quot;, format=&quot;%m/%d/%Y&quot;) . 2015-01-13 &#45216;&#51676;&#47484; &#47928;&#51088;&#50676;&#47196; &#48320;&#54872;&#182; . Date 객체 또한 문자열로 변환하여 사용할 수 있음 | format(데이터, 포맷) | as.character | . In&nbsp;[37]: as.Date(&quot;08/13/2013&quot;, format=&quot;%m/%d/%Y&quot;) . 2013-08-13 In&nbsp;[38]: format(Sys.Date()) . &#39;2019-11-23&#39; In&nbsp;[39]: as.character(Sys.Date()) . &#39;2019-11-23&#39; In&nbsp;[40]: format(Sys.Date(), format=&quot;%m/%d/%Y&quot;) . &#39;11/23/2019&#39; In&nbsp;[41]: # &#39;%a&#39;는 요일을 출력 format(Sys.Date(), &#39;%a&#39;) . &#39;토&#39; In&nbsp;[42]: # &#39;%b&#39;는 월을 출력 format(Sys.Date(), &#39;%b&#39;) . &#39;11&#39; In&nbsp;[43]: # &#39;%m&#39;은 두자리 숫자로 월을 출력 format(Sys.Date(), &#39;%m&#39;) . &#39;11&#39; In&nbsp;[44]: # &#39;%d&#39;는 두자리 숫자로 일을 출력 format(Sys.Date(), &#39;%d&#39;) . &#39;23&#39; In&nbsp;[45]: # &#39;%y&#39;는 두자리 숫자로 연도를 출력 format(Sys.Date(), &#39;%y&#39;) . &#39;19&#39; In&nbsp;[46]: # &#39;%Y&#39;는 네자리 숫자로 연도를 출력 format(Sys.Date(), &#39;%Y&#39;) . &#39;2019&#39; .",
            "url": "https://safenumz.github.io/blog/r/2019/11/23/R_%EB%82%A0%EC%A7%9C_%EB%AC%B8%EC%9E%90%EC%97%B4_%EA%B0%84_%EB%B3%80%ED%99%98.html",
            "relUrl": "/r/2019/11/23/R_%EB%82%A0%EC%A7%9C_%EB%AC%B8%EC%9E%90%EC%97%B4_%EA%B0%84_%EB%B3%80%ED%99%98.html",
            "date": " • Nov 23, 2019"
        }
        
    
  
    
        ,"post101": {
            "title": "[R ggplot2] 좌표계 설정하기",
            "content": "&lt;!DOCTYPE html&gt; . R_패키지_ggplot2_좌표계_설정하기 . 1. &#51340;&#54364;&#44228;&#46976;?&#182; . 좌표계는 하나 이상의 숫자 또는 좌표를 사용하여 유클리드 공간과 같은 다양체에서 점 또는 기타 기하학적 요소의 위치를 고유하게 결정하는 시스템 | 가장 단순한 좌표계는 직교 좌표(카테시안 좌표계)로 알려진 서로 수직으로 향한 좌표축 | . 2. coord_cartesian &#54632;&#49688;&#182; . ggplot2에서는 coord_catesian 함수를 통해 데카르트 좌표계의 X, Y 축을 변경할 수 있으며 xlim, ylim, expand 세가지 인자를 가지고 있음 | . 1) xlim, ylim&#182; . x축과 y축의 범위를 제한할 때 사용 | x축과 y축에 들어가는 데이터를 제한하는 것이 아니라 돋보기를 쓰고 축을 확대하는 개념 | . In&nbsp;[2]: library(ggplot2) ggplot(faithful, aes(waiting, eruptions)) + geom_point() + coord_cartesian(xlim = c(60, 80), ylim = c(2:4)) . 절대값(직접 숫자 지정)을 지정하여 범위를 제한할 수도 있지만 아래와 같이 상대값(min, max)을 활용하여 지정해 줄 수 도 있음 | . In&nbsp;[13]: ggplot(faithful, aes(waiting, eruptions)) + geom_point() + coord_cartesian(xlim = c(min(faithful$waiting) - 5, max(faithful$waiting) + 5)) . 2) expand&#182; . 축과 데이터의 겹침을 방지하여 데이터를 플롯에 온전히 표기하기 위해 약간의 여백을 주는 인자 | 디폴트값은 TRUE로 설정되어 있으며 FALSE로 설정 시 그래프의 여백이 사라지게 됨 | . In&nbsp;[17]: ggplot(faithful, aes(waiting, eruptions)) + geom_point() + coord_cartesian(expand = FALSE) ggplot(faithful, aes(waiting, eruptions)) + geom_point() + coord_cartesian(expand = TRUE) . 3. scale_x_continuous&#50752; &#52264;&#51060;&#51216;&#182; . ggplot2에서 축을 설정하는 함수는 scale_x_continuous, xlim 등 여러가지가 있음 | coord_cartesian은 데카르트 좌표계를 설정 | 그래서 coord_cartesian 함수를 사용하여 x와 y값을 지정하면 단순히 출력되는 좌표계의 범위를 지정하는 것을 의미 | 그러나 scale_x_continuous에서 limit으로 수정하거나 xlim을 사용하면 지정 범위 밖에 있는 데이터를 관측에서 제외함 | . coord_cartesian 함수를 사용하여 x축의 범위를 지정함 | 단순히 좌표축을 확대한 것에 불가하기에 히스토그램의 모양이 잡아 당긴 것처럼 변형 | 그리고 faithful 전체 데이터를 대상으로 하기 때문에 최대값이 6으로 지정 | . In&nbsp;[22]: ggplot(faithful, aes(waiting, eruptions)) + geom_bin2d() + coord_cartesian(xlim = c(60, 80)) + geom_smooth(method = lm) . scale_x_continuous를 사용한 두 번째 그래프를 보면 확연한 차이를 보임 | 지정한 x축 범위를 초과하는 값은 계산에서 배제되어 히스토그램의 모양이 온전해짐 | 또한 범위에 속해있는 데이터만 분석하기 때문에 count의 최대값이 3에 머물러 있음 | 단순히 그래프의 축을 확대하려면 coord_cartesian 함수를 사용하면 되지만, 그래프의 출력되는 데이터 자체를 수정하려면 scale_x_continous 함수를 사용하면 됨 | . In&nbsp;[24]: ggplot(faithful, aes(waiting, eruptions)) + geom_bin2d() + scale_x_continuous(limits = c(60, 80)) + geom_smooth(method = lm) . Warning message: “Removed 161 rows containing non-finite values (stat_bin2d).”Warning message: “Removed 161 rows containing non-finite values (stat_smooth).” . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_%EC%A2%8C%ED%91%9C%EA%B3%84_%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html",
            "relUrl": "/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_%EC%A2%8C%ED%91%9C%EA%B3%84_%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html",
            "date": " • Nov 17, 2019"
        }
        
    
  
    
        ,"post102": {
            "title": "[R ggplot2] ggplot2 package 소개",
            "content": "&lt;!DOCTYPE html&gt; . R_패키지_ggplot2_소개 . 1. ggplot2&#46976;?&#182; . R의 데이터 시각화 패이지 | 엑셀, 파워포인트와는 다르게 함수를 입력하여 그래프를 그릴 수 있음 | . 2. ggplot2&#51032; &#54645;&#49900; - &#47112;&#51060;&#50612; &#52628;&#44032;&#182; . ggplot2의 장점은 일관된 기초 문법을 가지고 있으며, 함수가 직관적이고, 그래픽 시스템의 완성도가 높음 | 그중 주목할 만한 장점은 레이어 추가 방식 | ggplot2 함수는 기본적으로 레이어를 추가하는 방식으로 그래프를 그려나감 | 레이어를 추가해 가면서 그래프를 꾸미고 정보를 더해 나갈 수 있음 | 그래프를 제거하거나 변형시키는 것도 레이어추가를 통해 할 수 있음 | . 3. &#47112;&#51060;&#50612; &#52628;&#44032;&#47484; &#53685;&#54644; &#44536;&#47000;&#54532; &#44536;&#47140;&#48372;&#44592;&#182; . In&nbsp;[2]: install.packages(&#39;ggplot2&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[&nbsp;]: library(ggplot2) . R 내장 데이터인 pressure을 통해 좌표계를 그려줌 | . In&nbsp;[4]: ggplot(data=pressure, aes(x=temperature, y=pressure)) . +geom_point() + geom_line()을 통해 어떤 타입의 그래프를 그릴지를 설정할 수 있음 | 좌표계에 포인트와 라인 그래프가 추가된 것을 확인 할 수 있음 | . In&nbsp;[17]: ggplot(data=pressure, aes(x=temperature, y=pressure)) + geom_point() + geom_line() . geom_point () 안에서 자유롭게 색과 사이즈 설정이 가능 | . In&nbsp;[18]: ggplot(data=pressure, aes(x=temperature, y=pressure)) + geom_point(color=&#39;orangered2&#39;, size=3) + geom_line(color=&#39;deepskyblue&#39;, size=2) . point를 가리지 않기 위해 함수에서 geom_point와 geom_line의 순서를 바꿔줌 | . In&nbsp;[24]: ggplot(data=pressure, aes(x=temperature, y=pressure)) + geom_line(color=&#39;deepskyblue2&#39;, size=2) + geom_point(color=&#39;orangered2&#39;, size=3) . ggtitle, xlab, ylab을 통해 그래프의 타이틀을 바꿔줌 | 테마 또한 theme_bw() 함수를 통해 바꿔 줌 | 그 외에도 theme_void(), theme_grey(), theme_classic() 등 여러가지 테마가 있으며 원하는 테마를 자유롭게 선택할 수 있음 | . In&nbsp;[21]: ggplot(data=pressure, aes(x=temperature, y=pressure)) + geom_line(color=&#39;deepskyblue2&#39;, size=2) + geom_point(color=&#39;orangered2&#39;, size=3) + ggtitle(&#39;pressure data: Vapor Pressure of Mercury&#39;) + xlab(&#39;Temp&#39;) + ylab(&#39;Pres&#39;) + theme_bw() . theme 함수를 이용해 그래프의 세부 사항인 텍스트의 앵글, 사이즈, 위치를 변경 | . In&nbsp;[36]: ggplot(data=pressure, aes(x=temperature, y=pressure)) + geom_line(color=&#39;deepskyblue2&#39;, size=2) + geom_point(color=&#39;orangered2&#39;, size=3) + ggtitle(&#39;pressure data: Vapor Pressure of Mercury&#39;) + xlab(&#39;Temp&#39;) + ylab(&#39;Pres&#39;) + theme_bw() + theme(plot.title=element_text(size=17, color=&#39;violetred&#39;), axis.title=element_text(size=13), axis.title.y=element_text(angle=0), axis.text.x=element_text(angle=90, size=13)) . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_%EC%86%8C%EA%B0%9C.html",
            "relUrl": "/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_%EC%86%8C%EA%B0%9C.html",
            "date": " • Nov 17, 2019"
        }
        
    
  
    
        ,"post103": {
            "title": "[R ggplot2] color, fill",
            "content": "&lt;!DOCTYPE html&gt; . R_패키지_ggplot2_color_fill . In&nbsp;[4]: library(dplyr) library(ggplot2) . In&nbsp;[5]: Orange%&gt;% group_by(Tree)%&gt;% summarize(Sum.circumference=sum(circumference))%&gt;% ggplot(aes(Tree, Sum.circumference))+geom_bar(stat=&#39;identity&#39;) . 1. &#44536;&#47000;&#54532;&#47484; &#44592;&#48152;&#51004;&#47196; geom &#54632;&#49688;&#50640; &#51201;&#50857;&#54616;&#44592;&#182; . 완성된 그래프에 색상을 입혀 명시성을 높여주는 방식 | bar, line, point 그래프 등 그래프 종류에 상관없이 geom_함수에 color=&#39;x 혹은 fill=&#39;x&#39;함수를 추가하고, x에는 원하는 색상을 넣어주면 됨 | . 1) fill&#182; . fill 함수는 도형에 색을 채워줄 때 사용 | bar 그래프와 오차 그래프 등 채울 공간이 있는 도형애 색상을 채워 줌 | . In&nbsp;[27]: # geom_bar() 함수에 fill=&#39;red&#39; 코드를 추가해 bar 그래프에 빨간색을 입혀줌 Orange%&gt;% group_by(Tree)%&gt;% summarize(Sum.circumference=sum(circumference))%&gt;% ggplot(aes(Tree, Sum.circumference)) + geom_bar(stat=&#39;identity&#39;, fill=&#39;red&#39;) . 2) color&#182; . R에서 color 함수는 선의 색깔을 채워줄 때 사용하는 함수 | Bar 그래프의 테두리, Line 그래프의 색상, 경우에 따라 Point 그래프의 Point 테두리 등에 색상을 채워 줌 | 선의 색상을 입히기 위한 코드는 color=&#39;x&#39;에 원하는 색상을 입력하면 됨 | . (1) bar &#44536;&#47000;&#54532;&#182; . In&nbsp;[29]: # geom_bar() 함수에 color=&#39;red&#39; 코드를 추가하여 bar 그래프 테두리 색을 변경해 줌 Orange%&gt;% group_by(Tree)%&gt;% summarize(Sum.circumference=sum(circumference))%&gt;% ggplot(aes(Tree, Sum.circumference)) + geom_bar(stat=&#39;identity&#39;, color=&#39;red&#39;, fill=&#39;white&#39;) + theme_bw() . (2) line &#44536;&#47000;&#54532;&#182; . In&nbsp;[32]: # geom_line() 함수에 color=&#39;red&#39; 코드를 추가해 그래프 색상을 빨간색으로 변경 Orange%&gt;% group_by(Tree)%&gt;% summarize(Sum.circumference=sum(circumference))%&gt;% ggplot(aes(Tree, Sum.circumference)) + geom_line(group=1, color=&#39;red&#39;) + theme_bw() . (3) point &#44536;&#47000;&#54532;&#182; . point 그래프는 shape 함수를 통해 어떤 모양으로 설정해 주느냐에 따라 color와 fill을 다르게 설정할 수 있음 | point의 shape은 -8부터 29까지 있으며, -8부터 19까지는 color 함수로 적용이 가능하고, 20부터 29까지는 color와 fill 함수 모두를 활용해 테두리와 도형색을 독립적으로 설정해줄 수 있음 | . In&nbsp;[34]: # circle Orange%&gt;% group_by(Tree)%&gt;% summarize(Sum.circumference=sum(circumference))%&gt;% ggplot(aes(Tree, Sum.circumference)) + geom_point(size=6, color=&#39;red&#39;) + theme_bw() # triangle Orange%&gt;% group_by(Tree)%&gt;% summarize(Sum.circumference=sum(circumference))%&gt;% ggplot(aes(Tree, Sum.circumference)) + geom_point(shape=2, size=6, color=&#39;red&#39;) + theme_bw() . 2. &#45936;&#51060;&#53552;&#47484; &#44592;&#48152;&#51004;&#47196; aes&#54632;&#49688;&#50640; &#51201;&#50857;&#54616;&#44592;&#182; . color과 fill 함수는 그래프의 도형 외에도 데이터에 색상을 입혀줄 수 있음 | aes함수는 그래프의 틀을 만들어주는 함수, 따라서 aes함수에는 그래프를 형성하는데 필요한 정보인 x축과 y축 등을 설정해 줌 | geom()에 color와 fill을 입력했던 것과 달리, color 혹은 fill 함수를 데이터를 바탕으로 하는 aes() 함수에 입력한다면 데이터에 색상이 입혀짐 | . 1) line &#44536;&#47000;&#54532;&#182; . In&nbsp;[39]: ggplot(Orange, aes(x=age, y=circumference, color=Tree)) + geom_line(size=1) . 2) bar &#44536;&#47000;&#54532;&#182; . In&nbsp;[40]: ggplot(Orange, aes(x=age, y=circumference, fill=Tree)) + geom_bar(stat=&#39;identity&#39;) . 3) point &#44536;&#47000;&#54532;&#182; . In&nbsp;[41]: ggplot(Orange, aes(x=age, y=circumference, color=Tree)) + geom_point() . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_color_fill.html",
            "relUrl": "/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_color_fill.html",
            "date": " • Nov 17, 2019"
        }
        
    
  
    
        ,"post104": {
            "title": "[R ggplot2] Bar 그래프 그리기",
            "content": "&lt;!DOCTYPE html&gt; . R_패키지_ggplot2_Bar_그래프_그리기 . ggplot2 Bar &#44536;&#47000;&#54532; &#44536;&#47532;&#45716; &#48169;&#49885;&#182; . 첫째, x축의 값만 지정하여 빈도를 나타내는 그래프 | 둘째, x축과 y축의 값을 각각 지정하여 그리는 그래프 | . 1. x&#52629; &#44050;&#47564; &#51648;&#51221;&#54620; &#44536;&#47000;&#54532;&#182; . x축 값을 지정하지 않으면 ggplot은 자동적으로 x축 데이터의 &#39;빈도&#39;를 y값으로 나타냄 | 즉, cut이란 칼럼 안에 존재하는 데이터들(Fair, Good, ...)의 빈도를 계산하여 y축에 &#39;count&#39;로 나타내 줌 | aes() 안에는 x축 값만 입력하고, geom_bar()에 stat을 설정해 주지 않음 | 사실 빈도수가 계산되도록 하기 위해선 geom_bar()에 stat=&#39;count&#39;를 입력해주어야 함 | stat=&#39;count&#39;는 y축의 높이를 데이터의 빈도(count)로 표시하는 bar 그래프 형식으로 나타내라는 뜻 | . In&nbsp;[2]: library(ggplot2) ggplot(diamonds, aes(cut)) + geom_bar() . 2. x&#52629;, y&#52629; &#44050;&#51012; &#51648;&#51221;&#54620; &#44536;&#47000;&#54532;&#182; . 1) &#44592;&#48376; bar &#44536;&#47000;&#54532;&#182; . stat=&#39;identity&#39;는 y축의 높이를 데이터의 값으로 하는 bar 그래프의 형태로 지정한다는 것 | . In&nbsp;[3]: ggplot(sleep, aes(ID, extra)) + geom_bar(stat=&#39;identity&#39;) . 2) &#45936;&#51060;&#53552;&#51032; &#51333;&#47448;&#47484; &#54620; &#44536;&#47000;&#54532; &#50504;&#50640; &#45208;&#45600;&#49436; &#54364;&#49884;&#54644;&#51452;&#45716; bar &#44536;&#47000;&#54532;&#182; . In&nbsp;[4]: ggplot(sleep, aes(ID, extra, fill=group)) + geom_bar(stat=&#39;identity&#39;) . 3) &#45936;&#51060;&#53552;&#51032; &#51333;&#47448;&#47484; &#45208;&#45600; &#46384;&#47196; &#54364;&#49884;&#54644;&#51452;&#45716; &#44536;&#47000;&#54532;&#182; . position=&#39;dodge&#39;는 막대의 위치를 개별적인 막대로 나란히 표현하라는 명령어 | 단, 나란히 표시할 데이터를 fill 혹은 color 함수를 이용해 반드시 구분지어주어야 함 | . In&nbsp;[5]: ggplot(sleep, aes(ID, extra, fill=group)) + geom_bar(stat=&#39;identity&#39;, position=&#39;dodge&#39;) . 4) &#45936;&#51060;&#53552;&#51032; &#51333;&#47448;&#47484; &#48708;&#50984;&#47196; &#54364;&#49884;&#54644;&#51452;&#45716; bar &#44536;&#47000;&#54532;&#182; . position=&#39;fill&#39;은 말 그대로 막대 그래프를 화면에 꽉 채워, x값 내의 데이터의 상대적인 비율을 나타내 줄 때 슴 | . In&nbsp;[6]: ggplot(diamonds, aes(color, fill=cut)) + geom_bar(position=&#39;fill&#39;) . 5) &#44032;&#47196; &#44536;&#47000;&#54532;&#182; . coord는 &#39;coordinate&#39;의 약자로 조정하고 꾸미는 것을 의미하며, flip은 &#39;뒤집다&#39;의 뜻을 가지고 있음 | 즉, coord_flip()은 x축과 y축의 구성을 뒤집어 표현하라는 명령어이며, x축과 y축의 위치가 바뀜과 동시에 가로의 막대로 값을 표현하는 bar 그래프가 그려지도록 해 줌 | . In&nbsp;[7]: ggplot(sleep, aes(ID, extra, fill=group)) + geom_bar(stat=&#39;identity&#39;) + coord_flip() . 6) &#48373;&#49688;&#51032; &#45936;&#51060;&#53552;&#47484; &#45208;&#46976;&#55176; &#54364;&#54788;&#54644;&#51452;&#45716; &#44032;&#47196; &#44536;&#47000;&#54532;&#182; . In&nbsp;[8]: ggplot(sleep, aes(ID, extra, fill=group)) + geom_bar(stat=&#39;identity&#39;, position=&#39;dodge&#39;) + coord_flip() . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_Bar_%EA%B7%B8%EB%9E%98%ED%94%84_%EA%B7%B8%EB%A6%AC%EA%B8%B0.html",
            "relUrl": "/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_Bar_%EA%B7%B8%EB%9E%98%ED%94%84_%EA%B7%B8%EB%A6%AC%EA%B8%B0.html",
            "date": " • Nov 17, 2019"
        }
        
    
  
    
        ,"post105": {
            "title": "[R] 올림, 내림, 반올림, 절대값",
            "content": "&lt;!DOCTYPE html&gt; . R_올림_내림_반올림_절댓값 . 1. &#50732;&#47548;&#182; . In&nbsp;[2]: ceiling(3.2) . 4 In&nbsp;[3]: ceiling(3.8) . 4 In&nbsp;[4]: ceiling(-3.8) . -3 2. &#45236;&#47548;&#182; . floor(x)는 x보다 작은 수 중에 가장 큰 정수를 나타내주는 함수 | 즉, &#39;내림&#39;을 뜻하며 괄호 안 x에는 마찬가지로 계산하고자 하는 &#39;숫자&#39;를 넣어주면 됨 | . In&nbsp;[5]: floor(3.6) . 3 3. &#48152;&#50732;&#47548;&#182; . 반올림은 5이하는 내림, 5이상은 올림을 해주는 계산 방법이기 때문에 기준점이 필요 | 반올림의 구준점은 괄호 안에 digit 함수를 더해 정해줌 | 반올림 함수는 digit 함수를 통해 기준점을 어디로 정해주냐에 따라 크게 두 가지로 나뉨첫째, 소수점 자리를 반올림할 때 둘째, 소수점 아래를 반올림할 때 . | . 1) &#49548;&#49688;&#51216; &#51088;&#47532;&#47484; &#48152;&#50732;&#47548;&#54624; &#46412;&#182; . round()는 반올림을 위한 함수 이며, x에는 계산하고자 하는 숫자를 넣어줌 | 소수점 자리를 반올림하여 결과를 정수만 나타내고 싶을 때는 아무런 추가 명령없이 round(x)만 입력해주면 됨 | round(x)의 함수값의 디폴트값(기본 값)이 digit=0이기 때문 | x에 소수점을 포함한 정수를 넣어준다면 R은 자동적으로 소수점 첫째자리수를 기준으로 소수점 자리(정수)까지 나타내 줌 | . In&nbsp;[6]: round(31) . 31 In&nbsp;[7]: round(31.4) . 31 In&nbsp;[8]: round(31.822) . 32 R에서 반올림할 때는 반올림의 기준점이 되는 5를 주의해야 함 | R의 round 함수에서 숫자 5를 다룰 땐 &#39;go to the even digit&#39;, 즉 짝수값을 취하도록 기준이 설정되어 있음 | 따라서 round(0.5)는 1이 아닌 0이, round(-1.5)는 -2의 값이 나타남 | . In&nbsp;[9]: round(0.5) . 0 In&nbsp;[10]: round(-1.5) . -2 In&nbsp;[11]: round(-2.5) . -2 In&nbsp;[12]: round(0.51) . 1 2. &#49548;&#49688;&#51216; &#50500;&#47000;&#47484; &#48152;&#50732;&#47548; &#54624; &#46412;&#182; . 반올림하여 결과값을 소수점까지 나타내고 싶을 때는 round 함수에 digit라는 명령어를 추가해 주면 됨 . 첫째, digit = 0 (원점) 둘째, digit = x &gt; 0 (소수점 아래) 셋째, digit = x &lt; 0 (소수점 위) . | digit=0는 소수점자리, 즉 원점을 뜻 함 . | 소수점 아랫자리에서 반올림하기 위해선 양수를, 소수점 위자리에서 반올림하고자 한다면 y에 음수를 넣어주면 됨 | digit 명령은 생략할 수 있음 | . In&nbsp;[13]: round(3.34) . 3 In&nbsp;[14]: round(3.34, 1) . 3.3 In&nbsp;[15]: round(123.4567, 3) . 123.457 In&nbsp;[16]: round(1234567, -3) . 1235000 In&nbsp;[17]: round(1234.567, -2) . 1200 R에서 round() 함수를 쓸 수 있는 자릿수가 정해져 있음 | 소수점 아래자리를 포함해 7자리수까지만 나타내며, 8자리수부터는 계산되지 않음 | . In&nbsp;[18]: round(123456.7) . 123457 In&nbsp;[19]: round(12.34567) . 12 In&nbsp;[20]: round(12.34567, 4) . 12.3457 In&nbsp;[22]: # 소수점 아래 6 자리까지 반올림해서 나타내면 12.345679가 맞지만, 소수점 아래 6자리는 # R의 round 함수가 계산할 수 있는 7자리수를 넘어간 8번째 자리수이기 때문에 값이 왜곡됨 round(12.3456789, 6) . 12.345679 4. &#51208;&#45824;&#44050;&#182; . abs() 절대값을 취해주는 함수 | 올림과 내림, 반올림은 x 값에 반드시 &#39;숫자&#39;가 들어가야 했지만, abs() 함수의 x에는 숫자를 포함한 벡터, 데이터프레임도 들어갈 수 있음 | . In&nbsp;[23]: abs(-1234) . 1234 In&nbsp;[24]: x &lt;- c(-2, -3, -4, -5) abs(x) . &lt;ol class=list-inline&gt; 2 | 3 | 4 | 5 | &lt;/ol&gt; In&nbsp;[25]: x &lt;- c(-2, -3, -4, -5) y &lt;- c(-6, -7, -8, -9) df &lt;- data.frame(x, y) abs(df) . xy . 2 | 6 | . 3 | 7 | . 4 | 8 | . 5 | 9 | . In&nbsp;[26]: abs(df[2, ]) . xy . 23 | 7 | . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/14/R_%EC%98%AC%EB%A6%BC_%EB%82%B4%EB%A6%BC_%EB%B0%98%EC%98%AC%EB%A6%BC_%EC%A0%88%EB%8C%93%EA%B0%92.html",
            "relUrl": "/r/2019/11/14/R_%EC%98%AC%EB%A6%BC_%EB%82%B4%EB%A6%BC_%EB%B0%98%EC%98%AC%EB%A6%BC_%EC%A0%88%EB%8C%93%EA%B0%92.html",
            "date": " • Nov 14, 2019"
        }
        
    
  
    
        ,"post106": {
            "title": "[R] 수열 생성 (rep, seq)",
            "content": "&lt;!DOCTYPE html&gt; . R_수열생성_rep_seq . 1. &#49707;&#51088;: &#49707;&#51088;&#182; . 숫자 사이에 :를 사용하면 공차가 1인 등차수열을 만들 수 있음 | 수열의 범위를 음수까지도 지정할 수 있음 | . In&nbsp;[1]: 10:30 . &lt;ol class=list-inline&gt; 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | &lt;/ol&gt; In&nbsp;[2]: 30:10 . &lt;ol class=list-inline&gt; 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | &lt;/ol&gt; In&nbsp;[3]: 5:-5 . &lt;ol class=list-inline&gt; 5 | 4 | 3 | 2 | 1 | 0 | -1 | -2 | -3 | -4 | -5 | &lt;/ol&gt; 2. rep&#182; . rep 함수는 특정 값을 반복해야 할 때 사용함 | . In&nbsp;[4]: rep(1, 5) . &lt;ol class=list-inline&gt; 1 | 1 | 1 | 1 | 1 | &lt;/ol&gt; 1) times&#182; . 앞에 나온 숫자를 몇 번 반복할지 정하는 인자 | . In&nbsp;[5]: rep(c(1, 2), times = 5) . &lt;ol class=list-inline&gt; 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | &lt;/ol&gt; 2) each&#182; . 앞에 나온 숫자를 각각 몇번 반복할지 정하는 인자 | . In&nbsp;[6]: rep(c(1, 2), each = 5) . &lt;ol class=list-inline&gt; 1 | 1 | 1 | 1 | 1 | 2 | 2 | 2 | 2 | 2 | &lt;/ol&gt; 3) &#47928;&#51088;&#50676; &#48152;&#48373;&#182; . rep은 숫자 뿐만 아니라 문자열도 반복이 가능 | . In&nbsp;[7]: rep(c(&quot;coder&quot;, &quot;1252&quot;), times = 3) . &lt;ol class=list-inline&gt; &#39;coder&#39; | &#39;1252&#39; | &#39;coder&#39; | &#39;1252&#39; | &#39;coder&#39; | &#39;1252&#39; | &lt;/ol&gt; In&nbsp;[8]: rep(c(&quot;coder&quot;, &quot;1252&quot;), each = 3) . &lt;ol class=list-inline&gt; &#39;coder&#39; | &#39;coder&#39; | &#39;coder&#39; | &#39;1252&#39; | &#39;1252&#39; | &#39;1252&#39; | &lt;/ol&gt; 3. seq&#182; . seq 함수는 시작 숫자와 끝 숫자를 정해주면 숫자를 생성 | . In&nbsp;[9]: seq(2, 5) . &lt;ol class=list-inline&gt; 2 | 3 | 4 | 5 | &lt;/ol&gt; 1) from, to&#182; . from과 to 인자를 통해 수열의 시작과 끝을 지정함 | . In&nbsp;[10]: seq(from = 3, to = 10) . &lt;ol class=list-inline&gt; 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; 2) by&#182; . by를 통해 수열이 증가하는 범위를 지정함 | . In&nbsp;[11]: seq(from = 2, to = 10, by = 2) . &lt;ol class=list-inline&gt; 2 | 4 | 6 | 8 | 10 | &lt;/ol&gt; 3) length.out&#182; . length.out을 통해 생성되는 수열의 길이를 조절할 수 있음 | 공차는 수열의 길이에 따라 자동으로 설정됨 | . In&nbsp;[12]: seq(from = 2, to = 10, length.out = 3) . &lt;ol class=list-inline&gt; 2 | 6 | 10 | &lt;/ol&gt; .",
            "url": "https://safenumz.github.io/blog/r/2019/11/14/R_%EC%88%98%EC%97%B4%EC%83%9D%EC%84%B1_rep_seq.html",
            "relUrl": "/r/2019/11/14/R_%EC%88%98%EC%97%B4%EC%83%9D%EC%84%B1_rep_seq.html",
            "date": " • Nov 14, 2019"
        }
        
    
  
    
        ,"post107": {
            "title": "[R] 데이터 길이 (length, dim, nrow, ncol)",
            "content": "&lt;!DOCTYPE html&gt; . R_데이터_길이_length_dim_nrow_ncol . In&nbsp;[2]: library(ggplot2) head(txhousing) . cityyearmonthsalesvolumemedianlistingsinventorydate . Abilene | 2000 | 1 | 72 | 5380000 | 71400 | 701 | 6.3 | 2000.000 | . Abilene | 2000 | 2 | 98 | 6505000 | 58700 | 746 | 6.6 | 2000.083 | . Abilene | 2000 | 3 | 130 | 9285000 | 58100 | 784 | 6.8 | 2000.167 | . Abilene | 2000 | 4 | 98 | 9730000 | 68600 | 785 | 6.9 | 2000.250 | . Abilene | 2000 | 5 | 141 | 10590000 | 67300 | 794 | 6.8 | 2000.333 | . Abilene | 2000 | 6 | 156 | 13910000 | 66900 | 780 | 6.6 | 2000.417 | . 1. length(x)&#182; . length 함수는 벡터의 길이, dataframe의 열의 개수를 셀 때 사용하는 함수 | . In&nbsp;[3]: vector &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9) # 벡터의 길이 변환 length(vector) . 9 In&nbsp;[4]: # txhousing 데이터 프레임의 열의 개수 반환 length(txhousing) . 9 In&nbsp;[5]: # txhousing 데이터의 city 열의 행의 수 반환 length(txhousing$city) . 8602 2. dim(x)&#182; . dim은 dataframe의 길이를 관측할 때 사용하며, 행과 열의 개수를 모두 출력 | . In&nbsp;[6]: dim(txhousing) . &lt;ol class=list-inline&gt; 8602 | 9 | &lt;/ol&gt; 3. nrow&#182; . nrow는 dataframe의 행의 수를 출력하는 함수 | nrow 함수는 데이터의 특정 열에 적용할 수 없고, 벡터에도 적용할 수 없음 | . In&nbsp;[7]: nrow(txhousing) . 8602 In&nbsp;[8]: vector &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9) # 벡터에 사용할 수 없음 nrow(vector) . NULL . In&nbsp;[9]: # 특정 열에 사용할 수 없음 nrow(txhousing$city) . NULL . 4. ncol&#182; . ncol은 column(열)의 개수, 즉 변수의 개수를 세주는 함수 | nrow와 마찬가지로 dataframe만 취급 | . In&nbsp;[10]: ncol(txhousing) . 9 In&nbsp;[11]: vector &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9) ncol(vector) . NULL . In&nbsp;[12]: ncol(txhousing$city) . NULL . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/14/R_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EA%B8%B8%EC%9D%B4_length_dim_nrow_ncol.html",
            "relUrl": "/r/2019/11/14/R_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EA%B8%B8%EC%9D%B4_length_dim_nrow_ncol.html",
            "date": " • Nov 14, 2019"
        }
        
    
  
    
        ,"post108": {
            "title": "[R] 비복원 추출, 복원 추출 (sample)",
            "content": "&lt;!DOCTYPE html&gt; . R_sample_비복원추출_복원추출 . 1. sample&#182; . sample 함수는 데이터에서 무작위로 샘플을 추출해주는 함수 | 샘플을 추출하는 모집단은 위의 예시처럼 벡터가 될 수도 있고 데이터프레임이 될 수도 있음 | sample 추출 방법에는 비복원추출과 복원추출이 있음 | . In&nbsp;[6]: sample(x=1:10, 5) . &lt;ol class=list-inline&gt; 3 | 8 | 1 | 2 | 10 | &lt;/ol&gt; In&nbsp;[8]: dataframe &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) sample(x=dataframe, 5) . &lt;ol class=list-inline&gt; 10 | 3 | 7 | 9 | 5 | &lt;/ol&gt; 1) &#48708;&#48373;&#50896; &#52628;&#52636; (replace=F)&#182; . 비복원추출은 샘플로 추출한 데이터를 모집단에서 제외한 후 추출하는 방법 | 따라서 같은 값이 중복되지 않으며, sample 함수의 디폴트 값(기본 값)임 | sample 함수는 replace=F 값을 디폴트 값으로 취하기 때문에 생략해도 sample 함수는 자동으로 비복원 추출 방식을 취함 | F는 False를 의미하며, &#39;sample=&#39;는 생략할 수 있음 | 비복원 추출은 추출한 데이터를 모집단으로 복원시키지 않기 때문에 당연히 추출하려는 샘플의 개수가 모집단 데이터의 수보다 같거나 작아야 함 | . In&nbsp;[10]: sample(x=1:10, 5, replace=F) . &lt;ol class=list-inline&gt; 8 | 6 | 5 | 2 | 4 | &lt;/ol&gt; In&nbsp;[11]: dataframe &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) sample(x=dataframe, 5, replace=F) . &lt;ol class=list-inline&gt; 7 | 6 | 9 | 3 | 10 | &lt;/ol&gt; 2) &#48373;&#50896;&#52628;&#52636; (replace=T)&#182; . 복원추출은 추출한 데이터를 다시 모집단에 복원해 추출하는 것을 의미 | replace=T는 복원추출을 뜻하며, T는 True를 뜻 함 | 복원추출은 데이터를 복원시키기 때문에 추출하려는 샘플의 개수는 모집단의 데이터 수와 관계가 없음 | . In&nbsp;[12]: dataframe &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) sample(dataframe, 5, replace=T) . &lt;ol class=list-inline&gt; 5 | 8 | 3 | 10 | 9 | &lt;/ol&gt; .",
            "url": "https://safenumz.github.io/blog/r/2019/11/14/R_sample_%EB%B9%84%EB%B3%B5%EC%9B%90%EC%B6%94%EC%B6%9C_%EB%B3%B5%EC%9B%90%EC%B6%94%EC%B6%9C.html",
            "relUrl": "/r/2019/11/14/R_sample_%EB%B9%84%EB%B3%B5%EC%9B%90%EC%B6%94%EC%B6%9C_%EB%B3%B5%EC%9B%90%EC%B6%94%EC%B6%9C.html",
            "date": " • Nov 14, 2019"
        }
        
    
  
    
        ,"post109": {
            "title": "[R] rbind, cbind, merge",
            "content": "&lt;!DOCTYPE html&gt; . R_rbind_cbind_merge . 1. rbind&#182; . 데이터프레임 df1과 df2를 rbind로 결합 | rbind는 row bind의 약자로 행(row)를 결합시켜 줌 | rbind의 경우 열(column)의 속성이나 이름 또는 개수가 다를 경우 오류가 나게 됨 | rbind는 위 + 아래 결합이라고 생각하면 됨 | . In&nbsp;[1]: df1 &lt;- data.frame(name = c(&quot;Park&quot;, &quot;Lee&quot;, &quot;Kim&quot;, &quot;Kang&quot;), gender = c(&quot;f&quot;, &quot;m&quot;, &quot;f&quot;, &quot;m&quot;)) df2 &lt;- data.frame(name = c(&quot;Min&quot;, &quot;Ahn&quot;, &quot;choi&quot;, &quot;Kyeon&quot;), gender = c(&quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;)) . In&nbsp;[2]: df1 . namegender . Park | f | . Lee | m | . Kim | f | . Kang | m | . In&nbsp;[3]: df2 . namegender . Min | m | . Ahn | m | . choi | f | . Kyeon | f | . In&nbsp;[4]: rbind(df1, df2) . namegender . Park | f | . Lee | m | . Kim | f | . Kang | m | . Min | m | . Ahn | m | . choi | f | . Kyeon | f | . 3. merge&#182; . merge는 Inner join, Left Outer join, Right Outer join, Full Outer join으로 나뉨 | . 1) merge() - inner join&#182; . In&nbsp;[5]: df4 &lt;- data.frame(name = c(&#39;Yoon&#39;, &#39;Seo&#39;, &#39;Park&#39;, &#39;Lee&#39;, &#39;Kim&#39;, &#39;Kang&#39;), age = c(30, 31, 22, 24, 28, 25)) df5 &lt;- data.frame(name = c(&#39;Park&#39;, &#39;Lee&#39;, &#39;Kim&#39;, &#39;Kang&#39;, &#39;Ahn&#39;, &#39;Go&#39;), gender = c(&#39;f&#39;, &#39;f&#39;, &#39;m&#39;, &#39;m&#39;, &#39;f&#39;, &#39;m&#39;), city = c(&#39;Seoul&#39;, &#39;Incheon&#39;, &#39;Seoul&#39;, &#39;Busan&#39;, &#39;Gwangju&#39;, &#39;Deagu&#39;)) . In&nbsp;[6]: df4 . nameage . Yoon | 30 | . Seo | 31 | . Park | 22 | . Lee | 24 | . Kim | 28 | . Kang | 25 | . In&nbsp;[7]: df5 . namegendercity . Park | f | Seoul | . Lee | f | Incheon | . Kim | m | Seoul | . Kang | m | Busan | . Ahn | f | Gwangju | . Go | m | Deagu | . In&nbsp;[9]: # inner join merge(df4, df5, by=&#39;name&#39;, all=FALSE) . nameagegendercity . Kang | 25 | m | Busan | . Kim | 28 | m | Seoul | . Lee | 24 | f | Incheon | . Park | 22 | f | Seoul | . 2. merge() - left outer join&#182; . left outer join은 왼쪽, 즉 df4의 값을 기준으로 데이터를 결합 | . In&nbsp;[10]: df4 &lt;- data.frame(name = c(&#39;Yoon&#39;, &#39;Seo&#39;, &#39;Park&#39;, &#39;Lee&#39;, &#39;Kim&#39;, &#39;Kang&#39;), age = c(30, 31, 22, 24, 28, 25)) df5 &lt;- data.frame(name = c(&#39;Park&#39;, &#39;Lee&#39;, &#39;Kim&#39;, &#39;Kang&#39;, &#39;Ahn&#39;, &quot;Go&quot;), gender = c(&#39;f&#39;, &#39;f&#39;, &#39;m&#39;, &#39;m&#39;, &#39;f&#39;, &#39;m&#39;), city = c(&#39;Seoul&#39;, &#39;Incheon&#39;, &#39;Seoul&#39;, &#39;Busan&#39;, &#39;Gwangju&#39;, &#39;Deagu&#39;)) . In&nbsp;[11]: merge(df4, df5, by=&#39;name&#39;, all.x = TRUE) . nameagegendercity . Kang | 25 | m | Busan | . Kim | 28 | m | Seoul | . Lee | 24 | f | Incheon | . Park | 22 | f | Seoul | . Seo | 31 | NA | NA | . Yoon | 30 | NA | NA | . 3) merge() - right outer join&#182; . right outer join은 오른쪽 데이터 프레임, df5의 값은 모두 나타내 주고 name을 기준으로 데이터를 결합해 줌 | . In&nbsp;[12]: merge(df4, df5, by = &#39;name&#39;, all.y = TRUE) . nameagegendercity . Kang | 25 | m | Busan | . Kim | 28 | m | Seoul | . Lee | 24 | f | Incheon | . Park | 22 | f | Seoul | . Ahn | NA | f | Gwangju | . Go | NA | m | Deagu | . 4) merge() - full outer join&#182; . full outer join은 name을 기준으로 결합하면서 df4와 df5의 모든 값을 나타내 줌 | . In&nbsp;[13]: merge(df4, df5, by = &#39;name&#39;, all=TRUE) . nameagegendercity . Kang | 25 | m | Busan | . Kim | 28 | m | Seoul | . Lee | 24 | f | Incheon | . Park | 22 | f | Seoul | . Seo | 31 | NA | NA | . Yoon | 30 | NA | NA | . Ahn | NA | f | Gwangju | . Go | NA | m | Deagu | . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/14/R_rbind_cbind_merge.html",
            "relUrl": "/r/2019/11/14/R_rbind_cbind_merge.html",
            "date": " • Nov 14, 2019"
        }
        
    
  
    
        ,"post110": {
            "title": "[R] paste, paste0",
            "content": "&lt;!DOCTYPE html&gt; . R_paste_paste0 . paste vs paste0&#182; . paste 함수에는 두가지 형태가 있음 | paste는 나열된 원소 사이에 공백을 두고 결과값을 출력 | paste0은 나열된 원소 사이에 공백 없이 출력 | . 1. paste&#182; . paste는 나열된 원소를 이여붙여서 결과값으로 제공 | 이 경우 결과값은 한 개 | . In&nbsp;[1]: paste(1, 2, 3, 4) . &#39;1 2 3 4&#39; In&nbsp;[2]: paste(&#39;function&#39;, &#39;in&#39;, &#39;r&#39;) . &#39;function in r&#39; In&nbsp;[3]: paste(&#39;문자열을&#39;, &#39;합쳐&#39;, &#39;주세요&#39;) . &#39;문자열을 합쳐 주세요&#39; In&nbsp;[4]: length(paste(&#39;문자열을&#39;, &#39;합쳐&#39;, &#39;주세요&#39;)) . 1 paste는 test와 같이 변수를 받아올 수 있음 | paste는 변수, rep, c로 묶인 원소들을 개별로 인식 | 이 경우 결과값의 개수는 paste에 나열된 원소의 개수 | . In&nbsp;[5]: test &lt;- c(1, 2, 3, 4, 5) paste(test) . &lt;ol class=list-inline&gt; &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;4&#39; | &#39;5&#39; | &lt;/ol&gt; In&nbsp;[6]: paste(rep(&#39;a&#39;, 5)) . &lt;ol class=list-inline&gt; &#39;a&#39; | &#39;a&#39; | &#39;a&#39; | &#39;a&#39; | &#39;a&#39; | &lt;/ol&gt; In&nbsp;[7]: paste(c(1, 2, 3, 4, 5, 6, 7, 9)) . &lt;ol class=list-inline&gt; &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;4&#39; | &#39;5&#39; | &#39;6&#39; | &#39;7&#39; | &#39;9&#39; | &lt;/ol&gt; In&nbsp;[8]: length(paste(c(1, 2, 3, 4, 5, 6, 7, 9))) . 8 원소들이 c나 rep로 붂여 있으면 각각의 원소들을 매칭하여 이어 붙임 | . In&nbsp;[9]: paste(c(&#39;첫&#39;, &#39;두&#39;, &#39;세&#39;, &#39;네&#39;, &#39;다섯&#39;), rep(&#39;번째&#39;, 5)) . &lt;ol class=list-inline&gt; &#39;첫 번째&#39; | &#39;두 번째&#39; | &#39;세 번째&#39; | &#39;네 번째&#39; | &#39;다섯 번째&#39; | &lt;/ol&gt; In&nbsp;[10]: paste(1:10, c(&#39;st&#39;, &#39;nd&#39;, &#39;rd&#39;, rep(&#39;th&#39;, 7))) . &lt;ol class=list-inline&gt; &#39;1 st&#39; | &#39;2 nd&#39; | &#39;3 rd&#39; | &#39;4 th&#39; | &#39;5 th&#39; | &#39;6 th&#39; | &#39;7 th&#39; | &#39;8 th&#39; | &#39;9 th&#39; | &#39;10 th&#39; | &lt;/ol&gt; 묶이지 않은 개별 원소들과 c 혹은 rep를 함께 쓰면 묶인 원소들의 개수만큼 결과값을 출력 | . In&nbsp;[13]: paste(&#39;첫&#39;, &#39;두&#39;, &#39;세&#39;, &#39;네&#39;, &#39;다섯&#39;, rep(&#39;번째&#39;, 5)) . &lt;ol class=list-inline&gt; &#39;첫 두 세 네 다섯 번째&#39; | &#39;첫 두 세 네 다섯 번째&#39; | &#39;첫 두 세 네 다섯 번째&#39; | &#39;첫 두 세 네 다섯 번째&#39; | &#39;첫 두 세 네 다섯 번째&#39; | &lt;/ol&gt; &#44060;&#49688;&#44032; &#45796;&#47480; &#44221;&#50864;&#182; . 묶인 원소들의 개수가 상이하다면 긴 쪽의 원소가 모두 출력될 때까지 시행을 반복 | . In&nbsp;[14]: paste(c(&#39;첫&#39;, &#39;두&#39;, &#39;세&#39;, &#39;네&#39;, &#39;다섯&#39;), rep(&#39;번째&#39;, 7)) . &lt;ol class=list-inline&gt; &#39;첫 번째&#39; | &#39;두 번째&#39; | &#39;세 번째&#39; | &#39;네 번째&#39; | &#39;다섯 번째&#39; | &#39;첫 번째&#39; | &#39;두 번째&#39; | &lt;/ol&gt; In&nbsp;[15]: paste(c(&#39;첫&#39;, &#39;두&#39;, &#39;세&#39;, &#39;네&#39;, &#39;다섯&#39;), rep(&#39;번째&#39;, 3)) . &lt;ol class=list-inline&gt; &#39;첫 번째&#39; | &#39;두 번째&#39; | &#39;세 번째&#39; | &#39;네 번째&#39; | &#39;다섯 번째&#39; | &lt;/ol&gt; 1) sep&#182; . sep는 &#39;구분하다&#39;를 뜻하는 seperate의 약자 | sep를 이용해 paste에 나열된 각각의 원소 사이에 옵션을 적용하여 구분할 수 있음 | 이때, 따옴표 안에 아무 것도 입력하지 않은 채 옵션을 설정해 주면 각각의 원소 사이에 공백을 없애고 이어 붙여주며, 이는 paste0과 결과값이 동일함 | . In&nbsp;[16]: # - 로 구분하기 paste(1, 2, 3, 4, sep=&#39;-&#39;) . &#39;1-2-3-4&#39; In&nbsp;[18]: # 공백(스페이스바)로 구분하기 paste(&#39;function&#39;, &#39;in&#39;, &#39;r&#39;, sep=&#39; &#39;) . &lt;span style=white-space:pre-wrap&gt;&#39;function in r&#39;&lt;/span&gt; In&nbsp;[19]: # 공백 없음 paste(&#39;문자열을&#39;, &#39;합쳐&#39;, &#39;주세요&#39;, sep=&#39;&#39;) . &#39;문자열을합쳐주세요&#39; 2) collapse&#182; . collapse는 결과값이 두 개 이상일 때, 각가그이 결과값에 옵션을 주어 이어붙일 때 사용 | 세 번째 예시는 결과값이 하나이므로 collapse가 적용되지 않음 | . In&nbsp;[20]: paste(c(&#39;첫&#39;, &#39;두&#39;, &#39;세&#39;, &#39;네&#39;, &#39;다섯&#39;), rep(&#39;번째&#39;, 5), sep=&#39;&#39;, collapse=&#39;, &#39;) . &#39;첫번째, 두번째, 세번째, 네번째, 다섯번째&#39; In&nbsp;[21]: paste(1:10, c(&#39;st&#39;, &#39;nd&#39;, &#39;rd&#39;, rep(&#39;th&#39;, 7)), sep=&#39;&#39;, collapse=&#39;_&#39;) . &#39;1st_2nd_3rd_4th_5th_6th_7th_8th_9th_10th&#39; In&nbsp;[22]: paste(1, 2, 3, 4, collapse=&#39;-&#39;) . &#39;1 2 3 4&#39; In&nbsp;[23]: length(paste(1, 2, 3, 4)) . 1 벡터와 개별 변수가 함께 쓰일 때는 벡터의 개별 값들이 모두 출력될 때까지 시행을 반복 | . In&nbsp;[24]: Alphabet &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;) order &lt;- paste(c(&#39;첫&#39;, &#39;두&#39;, &#39;세&#39;), rep(&#39;번쨰&#39;, 3), sep=&#39;&#39;) paste(Alphabet, &#39;는&#39;, order, &#39;알파벳이다&#39;) . &lt;ol class=list-inline&gt; &#39;A 는 첫번쨰 알파벳이다&#39; | &#39;B 는 두번쨰 알파벳이다&#39; | &#39;C 는 세번쨰 알파벳이다&#39; | &lt;/ol&gt; In&nbsp;[26]: paste(Alphabet, &#39;는&#39;, order, &#39;알파벳이다&#39;, collapse = &#39;, and &#39;) . &#39;A 는 첫번쨰 알파벳이다, and B 는 두번쨰 알파벳이다, and C 는 세번쨰 알파벳이다&#39; 2. paste0&#182; . paste0은 paste 함수에서 sep=&#39;를 적용해 준 것과 같이 각각의 원소를 공백없이 이어주는 함수 | . In&nbsp;[27]: paste(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, sep=&#39;&#39;) . &#39;abcde&#39; In&nbsp;[28]: paste0(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) . &#39;abcde&#39; .",
            "url": "https://safenumz.github.io/blog/r/2019/11/14/R_paste_paste0.html",
            "relUrl": "/r/2019/11/14/R_paste_paste0.html",
            "date": " • Nov 14, 2019"
        }
        
    
  
    
        ,"post111": {
            "title": "[R] grep, grepl",
            "content": "&lt;!DOCTYPE html&gt; . R_grep_grepl . 1. &#51068;&#48152; &#53581;&#49828;&#53944; &#44160;&#49353;&#182; . grep과 grepl을 사용하여 특정 텍스트를 검색할 수 있음 | . 1) &#53581;&#49828;&#53944; &#44160;&#49353;&#182; . grep을 사용하여 벡터 안에 있는 apple이라는 텍스트를 검색 | 실행 결과 첫 번째 행과 다섯 번째 행에 apple이 있음을 알 수 있음 | . In&nbsp;[1]: ex &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;Apple&quot;, &quot;pineapple&quot;) grep(&quot;apple&quot;, ex) . &lt;ol class=list-inline&gt; 1 | 5 | &lt;/ol&gt; 2) &#45824;&#49548;&#47928;&#51088; &#44396;&#48324;&#50630;&#51060; &#44160;&#49353;&#54616;&#44592;&#182; . grep은 대소문자를 구분하여 검색하기 때문에 이를 무시하기 위해서는 ignore.case인자를 FALSE로 설정하여야 함 | 실행 결과 대문자로 시작하는 네 번째 행 Apple이 추가로 출력 된 것을 확인 할 수 있음 | grep은 대소문자를 구분하며, pineapple 처럼 텍스트 중간에 찾고자 하는 단어가 있어도 찾아 줌 | 만약 처음 시작 텍스트 혹은 맨 끝의 텍스트처럼 일정 조건이 있는 텍스트를 찾는 경우 정규표현식을 사용하여 찾을 수 있음 | . In&nbsp;[2]: ex &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;Apple&quot;, &quot;pineapple&quot;) grep(&quot;apple&quot;, ex, ignore.case = TRUE) . &lt;ol class=list-inline&gt; 1 | 4 | 5 | &lt;/ol&gt; 2. &#53945;&#51221; &#51312;&#44148;&#51032; &#53581;&#49828;&#53944; &#52286;&#44592;&#182; . 특정한 규칙을 가진 텍스트를 찾기 위해서는 정규표현식(Regular Expression)을 사용해야 함 | 정규표현식은 많은 텍스트 편집기와 프로그래밍 언어에서 텍스트의 검색과 치환을 위해 지원하고 있으며, R에서도 사용 가능 | . 1) &#49884;&#51089;&#44284; &#45149; &#53581;&#49828;&#53944; &#52286;&#44592;&#182; . In&nbsp;[4]: # 시작 텍스트를 찾기 위해서는 &quot;^&quot;를 사용함 ex &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;Apple&quot;, &quot;pineapple&quot;) grep(&quot;^a&quot;, ex) . 1 In&nbsp;[5]: # 끝 텍스트를 찾기 위해서는 &quot;$&quot;를 사용함 ex &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;Apple&quot;, &quot;pineapple&quot;) grep(&quot;a$&quot;, ex) . 3 2) &#51076;&#51032;&#51032; &#53581;&#49828;&#53944; &#49688; &#51648;&#51221;&#54616;&#50668; &#52286;&#44592;&#182; . In&nbsp;[6]: ex &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;Apple&quot;, &quot;pineapple&quot;) grep(&quot;..a&quot;, ex) . &lt;ol class=list-inline&gt; 2 | 4 | &lt;/ol&gt; 3) &#49707;&#51088; &#54841;&#51008; &#47928;&#51088; &#52286;&#44592;&#182; . 숫자를 찾기 위해서는 d를 사용하며 문자를 찾기 위해서는 D를 사용 | R에서는 를 이미 문법으로 사용하고 있으므로 하나 더 추가하여 정규표현식을 사용 | . In&nbsp;[8]: ex &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;Apple&quot;, &quot;pineapple&quot;, 123) grep(&quot; d&quot;, ex) . 6 3. grep&#44284; grepl&#51032; &#52264;&#51060;&#51216;&#182; . grep은 행 번호를 출력하지만, grepl은 논리값(TRUE, FALSE)으로 출력함 | grepl의 경우 조건에 맞는 행은 TRUE로 표시되며 조건에 맞지 않는 행은 FALSE로 표시됨을 알 수 있음 | . In&nbsp;[9]: ex &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;Apple&quot;, &quot;pineapple&quot;) grepl(&quot;apple&quot;, ex) . &lt;ol class=list-inline&gt; TRUE | FALSE | FALSE | FALSE | TRUE | &lt;/ol&gt; .",
            "url": "https://safenumz.github.io/blog/r/2019/11/14/R_grep_grepl.html",
            "relUrl": "/r/2019/11/14/R_grep_grepl.html",
            "date": " • Nov 14, 2019"
        }
        
    
  
    
        ,"post112": {
            "title": "[R quantmod] quantmod package 소개",
            "content": "&lt;!DOCTYPE html&gt; . quantmod_패키지 . &#49884;&#44228;&#50676; &#45936;&#51060;&#53552; &#54532;&#47112;&#51076; (xts: Extensible Time Series)&#44284; quantmod &#54056;&#53412;&#51648;&#182; . xts 자료형: 시간의 흐름에 따라 자료를 데이터 프레임 형식으로 관리함. 날짜, 시간을 키 (Key, or Index)로 자료를 관리함 | quantmod 패키지: 주가 등 금융 시계열 데이터를 관리하기 위한 도구 | . &#49884;&#44228;&#50676; &#45936;&#51060;&#53552; &#49373;&#49457; (&#54028;&#51068; &#51069;&#44592;) &#48143; &#51312;&#54924;&#182; . In&nbsp;[1]: install.packages(&#39;xts&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[3]: library(xts) library(quantmod) . In&nbsp;[7]: # csv 파일을 읽음 (데이터 프레임) stock &lt;- read.csv(&#39;data/pairData/000210.csv&#39;) . In&nbsp;[9]: # stock 데이터 프레임을 xts 형으로 변환함 # 1열은 날짜이며, xts 형의 index (key)로 사용함 ohlc &lt;- xts(stock[, c(-1, -7)], order.by=as.POSIXct(stock[,1])) head(ohlc) . open high low close volume adjusted 2010-01-04 81472.77 83730.45 81472.77 83730.45 152530 83730.45 2010-01-05 83239.65 83730.45 82552.53 82945.17 137910 82945.17 2010-01-06 82552.53 85006.53 82552.53 84613.89 267887 84613.89 2010-01-07 84613.88 85693.64 83239.64 84417.56 266875 84417.56 2010-01-08 86184.45 86282.61 82945.17 85301.01 317395 85301.01 2010-01-11 86184.45 89227.41 85202.85 88245.81 689453 88245.81 . In&nbsp;[19]: # 날짜를 key로 데이터 조회 (2016-02-01~2016-02-04) ohlc[&#39;2010-01-07::2010-01-10&#39;] . open high low close volume adjusted 2010-01-07 84613.88 85693.64 83239.64 84417.56 266875 84417.56 2010-01-08 86184.45 86282.61 82945.17 85301.01 317395 85301.01 . In&nbsp;[21]: # 2016-11-15 부터 현재까지 조회 ohlc[&#39;2017-11-15::&#39;] . open high low close volume adjusted 2017-11-15 85100 85500 80800 81500 448729 81500 2017-11-16 82100 83000 81200 82700 167464 82700 2017-11-17 82700 83600 81700 82600 183433 82600 2017-11-20 83000 84300 82400 82400 153970 82400 2017-11-21 82100 82300 81000 81100 161289 81100 2017-11-22 81200 82100 81200 81700 89114 81700 . In&nbsp;[22]: # 기타 조회 방식은 데이터 프레임과 동일함 ohlc$open[1] . open 2010-01-04 81472.77 . Quantmod &#54056;&#53412;&#51648;&#50640; &#51032;&#54620; &#51452;&#44032; &#45936;&#51060;&#53552; &#48516;&#49437;&#182; . In&nbsp;[24]: install.packages(&#39;quantmod&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[25]: library(quantmod) . Loading required package: TTR Registered S3 method overwritten by &#39;quantmod&#39;: method from as.zoo.data.frame zoo Version 0.4-0 included new data defaults. See ?getSymbols. . In&nbsp;[26]: # Google 사이트에서 삼성전자 주가 데이터 수집 s &lt;- getSymbols(&#39;005930.KS&#39;, auto.assign=FALSE) . ‘getSymbols’ currently uses auto.assign=TRUE by default, but will use auto.assign=FALSE in 0.5-0. You will still be able to use ‘loadSymbols’ to automatically load data. getOption(&#34;getSymbols.env&#34;) and getOption(&#34;getSymbols.auto.assign&#34;) will still be checked for alternate defaults. This message is shown once per session and may be disabled by setting options(&#34;getSymbols.warning4.0&#34;=FALSE). See ?getSymbols for details. Warning message: “005930.KS contains missing values. Some functions will not work if objects contain missing values in the middle of the series. Consider using na.omit(), na.approx(), na.fill(), etc to remove or replace them.” . In&nbsp;[28]: # 앞부분 3개 데이터 조회 head(s, 3) . 005930.KS.Open 005930.KS.High 005930.KS.Low 005930.KS.Close 2007-01-02 12400 12540 12320 12520 2007-01-03 12540 12560 12220 12280 2007-01-04 12220 12240 12060 12120 005930.KS.Volume 005930.KS.Adjusted 2007-01-02 17607300 0.329870 2007-01-03 19676500 0.323546 2007-01-04 18258900 0.319331 . In&nbsp;[30]: # 뒷부분 3개 데이터 조회 tail(s, 3) . 005930.KS.Open 005930.KS.High 005930.KS.Low 005930.KS.Close 2019-11-07 53400 53400 52400 52900 2019-11-08 53200 53300 52000 52100 2019-11-11 52200 52200 51400 51600 005930.KS.Volume 005930.KS.Adjusted 2019-11-07 9257116 52900 2019-11-08 11603290 52100 2019-11-11 8168554 51600 . In&nbsp;[31]: # 2010-01-01 ~ 현재까지 데이터 수집 s &lt;- getSymbols(&#39;005930.KS&#39;, from=&#39;2010-01-01&#39;, auto.assign=FALSE) . Warning message: “005930.KS contains missing values. Some functions will not work if objects contain missing values in the middle of the series. Consider using na.omit(), na.approx(), na.fill(), etc to remove or replace them.” . xts, quantmod &#49324;&#50857; &#50696;&#49884;&#182; . &#49688;&#51061;&#47456;, &#50672;&#54217;&#44512; &#49688;&#51061;&#47456;, &#50672;&#54217;&#44512; &#48320;&#46041;&#49457; &#44228;&#49328;&#182; . In&nbsp;[35]: s &lt;- getSymbols(&#39;005930.KS&#39;, from=&#39;2010-01-01&#39;, auto.assign=FALSE) colnames(s) &lt;- c(&#39;open&#39;, &#39;high&#39;, &#39;low&#39;, &#39;close&#39;, &#39;volume&#39;, &#39;adjusted&#39;) # 거래량 = 0 인 데이터를 제외함 s &lt;- s[Vo(s) &gt; 0] # 종가 기준 수익률 계산 s$rtn &lt;- ROC(Cl(s)) head(s, 3) . Warning message: “005930.KS contains missing values. Some functions will not work if objects contain missing values in the middle of the series. Consider using na.omit(), na.approx(), na.fill(), etc to remove or replace them.” . open high low close volume adjusted rtn 2010-01-04 16060 16180 16000 16180 11950800 5.854249 NA 2010-01-05 16520 16580 16300 16440 27925850 5.948323 0.01594148 2010-01-06 16580 16820 16520 16820 22948850 6.085815 0.02285126 . In&nbsp;[37]: s &lt;- na.omit(s) head(s, 3) . open high low close volume adjusted rtn 2010-01-05 16520 16580 16300 16440 27925850 5.948323 0.01594148 2010-01-06 16580 16820 16520 16820 22948850 6.085815 0.02285126 2010-01-07 16820 16820 16260 16260 22107950 5.883196 -0.03386055 . In&nbsp;[40]: # 연 평균 수익률 drift &lt;- mean(s$rtn) * 252 * 100 drift . 12.0717030869891 In&nbsp;[41]: # 연 평균 변동성 volatility &lt;- sd(s$rtn) * sqrt(252) * 100 volatility . 26.9690815252477 &#51452;&#44032;, &#49688;&#51061;&#47456; &#52264;&#53944; &#51089;&#49457;&#182; . In&nbsp;[42]: plot(as.vector(s$close), type=&#39;l&#39;, col=&#39;blue&#39;) . In&nbsp;[43]: plot(as.vector(s$rtn), type=&#39;l&#39;, col=&#39;red&#39;) abline(h=mean(s$rtn)) . &#51068;&#51068; &#49688;&#51061;&#47456; &#48516;&#54252;&#182; . In&nbsp;[53]: plot(density(as.vector(s$rtn)), col = &#39;red&#39;) abline(v = 0, col = &#39;blue&#39;) . In&nbsp;[55]: # 수익률의 평균 mean(s$rtn) . 0.000479035836785283 In&nbsp;[56]: # 수익률의 표준편차 sd(s$rtn) . 0.0169889244770552 &#44144;&#47000;&#47049; &#52264;&#53944;, &#51060;&#46041;&#54217;&#44512; &#52264;&#53944;&#182; . In&nbsp;[59]: barplot(as.vector(s$volume[&#39;2019-10-01::&#39;]), col=&#39;red&#39;) . In&nbsp;[67]: s$sma5 &lt;- SMA(s$close, 5) s$sma10 &lt;- SMA(s$close, 10) plot(as.vector(s$close[&#39;2019-06-01::&#39;]), type=&#39;l&#39;) lines(as.vector(s$sma5[&#39;2019-06-01::&#39;]), col=&#39;red&#39;) lines(as.vector(s$sma10[&#39;2019-06-01::&#39;]), col=&#39;blue&#39;) . quantmod &#49324;&#50857; &#50696;&#49884; - &#51452;&#44032; &#52264;&#53944; &#51089;&#49457; (&#51452;&#44032;&#51032; &#51068;&#51068; &#52884;&#46308; &#52264;&#53944; &#48143; &#44592;&#49696;&#51201; &#48516;&#49437; &#51648;&#54364;)&#182; . In&nbsp;[69]: chartSeries(s[&#39;2019-01-01::&#39;], up.col=&#39;red&#39;, dn.col=&#39;blue&#39;, theme=&#39;white&#39;, name=&#39;Samsung&#39;) # CCS 기술적 지표 추가 addMACD() # 볼린저 밴드 추가 addBBands() # 10일, 30일 이동평균선 추가 addSMA(10); addSMA(30, col=&#39;blue&#39;) . quantmod &#49324;&#50857; &#50696;&#49884; - &#51452;&#44032; &#52264;&#53944; &#51089;&#49457; (&#51452;&#44032;&#51032; &#51452;&#44036; &#54841;&#51008; &#50900;&#44036; &#52884;&#46308; &#52264;&#53944; &#48143; &#44592;&#49696;&#51201; &#48516;&#49437; &#51648;&#54364;)&#182; . In&nbsp;[71]: chartSeries(to.weekly(s[&#39;2019-01-01::&#39;]), up.col=&#39;red&#39;, dn.col=&#39;blue&#39;, theme=&#39;white&#39;, name=&#39;Samsung&#39;) # CCS 기술적 지표 추가 addMACD() # 볼린저 밴드 추가 addBBands() # 10일, 30일 이동평균선 추가, 월봉은 to.monthly() 사용 addSMA(10); addSMA(30, col=&#39;blue&#39;) . quantmod &#49324;&#50857; &#50696;&#49884; - &#51452;&#44032; &#45936;&#51060;&#53552; &#49688;&#51665; (&#44396;&#44544;, &#50556;&#54980; &#49324;&#51060;&#53944; &#46321;&#50640;&#49436; &#51452;&#44032; &#45936;&#51060;&#53552;&#47484; &#51069;&#50612;&#50740;)&#182; . File name: 1.CollectData.r&#182; . In&nbsp;[16]: library(quantmod) # 한 종목의 데이터를 가져온다 getData &lt;- function(x, from) { if (missing(from)) stock &lt;- getSymbols(paste(x, &quot;.KS&quot;, sep = &quot;&quot;), auto.assign = FALSE) else stock &lt;- getSymbols(paste(x, &quot;.KS&quot;, sep = &quot;&quot;), from=from, auto.assign = FALSE) # 모든 분석은 수정 주가 (adjusted)를 이용한다 stock &lt;- stock[Vo(stock) &gt; 0] # colume 이름을 바꾼다 colnames(stock) &lt;- c(&#39;open&#39;, &#39;high&#39;, &#39;low&#39;, &#39;close&#39;, &#39;volume&#39;, &#39;adjusted&#39;) getData &lt;- stock } # 종합주가지수를 읽어온다 getKospi &lt;- function(from) { if (missing(from)) stock &lt;- getSymbols(&#39;^KS11&#39;, auto.assign=FALSE) else stock &lt;- getSymbols(&#39;^KS11&#39;, from=from, auto.assign=FALSE) # 수정주가로 바꾼 후 리턴 stock &lt;- adjustOHLC(stock, use.Adjusted=TRUE) # colume 이름을 바꾼다 colnames(stock) &lt;- c(&#39;open&#39;, &#39;high&#39;, &#39;low&#39;, &#39;close&#39;, &#39;volume&#39;, &#39;adjusted&#39;) getKospi &lt;- stock } . In&nbsp;[27]: # 1.CollectData.r 파일을 읽어옴 source(&#39;source/1.CollectData.r&#39;) . In&nbsp;[23]: # 삼성전자 데이터 전체를 수집함 samsung &lt;- getData(&#39;005930&#39;) . Warning message: “005930.KS contains missing values. Some functions will not work if objects contain missing values in the middle of the series. Consider using na.omit(), na.approx(), na.fill(), etc to remove or replace them.” . In&nbsp;[22]: # 삼성전자 2019-01-01 이후 데이터를 수집함 samsung &lt;- getData(&#39;005930&#39;, from=&#39;2019-10-01&#39;) . Warning message: “005930.KS contains missing values. Some functions will not work if objects contain missing values in the middle of the series. Consider using na.omit(), na.approx(), na.fill(), etc to remove or replace them.” . In&nbsp;[28]: # 종합주가지수 데이터 전체를 수집함 kospi &lt;- getKospi() . Warning message: “^KS11 contains missing values. Some functions will not work if objects contain missing values in the middle of the series. Consider using na.omit(), na.approx(), na.fill(), etc to remove or replace them.” . In&nbsp;[29]: # 종합주가지수의 2019-01-01 이후 데이터를 수집함 kospi &lt;- getKospi(from=&#39;2019-01-01&#39;) head(kospi) . open high low close volume adjusted 2019-01-02 2050.55 2053.45 2004.27 2010.00 326400 2010.00 2019-01-03 2011.81 2014.72 1991.65 1993.70 428000 1993.70 2019-01-04 1992.40 2011.56 1984.53 2010.25 409000 2010.25 2019-01-07 2034.24 2048.06 2030.90 2037.10 440200 2037.10 2019-01-08 2038.68 2042.70 2023.59 2025.27 397800 2025.27 2019-01-09 2034.19 2068.23 2034.19 2064.71 386200 2064.71 . In&nbsp;[30]: tail(samsung) . open high low close volume adjusted 2019-11-04 51700 52300 51400 52300 13012411 52300 2019-11-05 52400 52700 52100 52700 10581034 52700 2019-11-06 52900 53500 52700 53300 14361133 53300 2019-11-07 53400 53400 52400 52900 9257116 52900 2019-11-08 53200 53300 52000 52100 11603290 52100 2019-11-11 52200 52200 51400 51600 8168554 51600 . quantmod &#54056;&#53412;&#51648; - &#44592;&#49696;&#51201; &#48516;&#49437; &#48177;&#53580;&#49828;&#53944;&#182; . quantmod 패키지를 이용하면 전략 모델링, Back Testing 등의 작업을 쉽게 할 수 있음 | 아래 (예시)는 기술적 분석의 Golden/Dead Cross 지표를 이용하여 간단히 Back test해 본 것임 | 단기, 장기 이동평균을 계산하고, 단기 이평이 장기 이평 위에 있을 때는 매수 포지션을 유지하고, 단기 이평이 장기 이평 아래에 있을 때는 매도 포지션을 유지하여 누적 수익률을 관찰해 봄. 단기-&gt;장기로 바뀔 때 (혹은 반대) 포지션을 변경함 | 단기, 장기 이동평균 기간을 다르게 적용하면 성과가 다르게 측정됨 -&gt; 최적 이동평균 기간이 존재하는가? -&gt; 분석 기간에 따라 달라짐 | 이 테스트는 R의 기본 기능을 익히기 위한 것으로, 실제 전략으로 사용되기는 어려움 | . In&nbsp;[47]: install.packages(&#39;timeSeries&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[50]: install.packages(&#39;tseries&#39;) . also installing the dependency ‘quadprog’ Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[52]: install.packages(&#39;astsa&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[55]: install.packages(&#39;gridExtra&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[57]: install.packages(&#39;pso&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[87]: source(&#39;1.CollectData.R&#39;) source(&#39;1-1.GoldenCross.R&#39;) . In&nbsp;[94]: p &lt;- getData(&#39;005930&#39;) r &lt;- goldenCross(p[&#39;2018::&#39;], 10, 30, chart=T) . Warning message: “005930.KS contains missing values. Some functions will not work if objects contain missing values in the middle of the series. Consider using na.omit(), na.approx(), na.fill(), etc to remove or replace them.” . In&nbsp;[95]: r &lt;- goldenCross(p[&#39;2018::&#39;], 5, 20, chart=T) . 단기, 장기 이동평균 기간 설정에 따라 성과가 다르게 나타나므로 최적 이동평균 기간을 설정해 봄 | GoldenCross.R에 정의된 optimize 함수를 이용하여 설정된 검색 기간 내에서 누적 수익률이 최대가 되거나, 누적 수익률의 표준편차가 최소가 되거나, Sharp Ratio가 최대가 되는 이동평균 기간을 찾아 봄 | 최적 이동평균 기간을 적용하여 성과를 다시 분석함 -&gt; 분석 기간과 적용 기간은 달라야 함 (K-Fold Cross Validation test 참고) | . In&nbsp;[96]: opt &lt;- optimize(p[&#39;2018-01-01::2019-10-30&#39;], 5, 40, 15, 120) . In&nbsp;[97]: opt . ShrtMALongMALastStdevSharpRemark . 1 5 | 20 | -0.01379332 | 0.01600225 | -0.8619614 | Max return | . 116014 | 99 | -0.01379332 | 0.01487616 | -0.9272101 | Min stdev | . 3 5 | 20 | -0.01379332 | 0.01600225 | -0.8619614 | Max sharp ratio | . In&nbsp;[98]: # 2018 이후에 최적 기간을 적용함 r &lt;- goldenCross(p[&#39;2018-01-01::&#39;], 5, 20, chart=T) . In&nbsp;[99]: plot(density(r), main=&quot;Return Density&quot;) abline(v=mean(r), col=&#39;red&#39;) mean(r) . -1.25867677210608e-05 &#49884;&#44228;&#50676;&#51032; &#54217;&#54876;&#54868;: &#45800;&#49692;&#51060;&#46041;&#54217;&#44512;(SMA), Kernel Regression, Spline&#182; . Kernel Regression 방식은 평활점을 계산하는 시점에 정규분포를 적용해서 인근 시계열 데이터의 가중치를 다르게 적용하여 가중 평균을 계산한 방식임. 정규분포의 중심부분에는 높은 가중치를 부여하고, 좌, 우로 갈수록 점차 가중치를 낮게 부여 | Spline은 인접한 두 점을 다항식으로 잇고 두 개의 다항 곡선을 서로 미분 가능하도록(Smooth한 곡선이 되도록) 잇는 원리 | Kernel과 Spline은 후행성이 없음. 그러나 이것은 과거 시점에서 미래의 데이터를 이용하기 때문임. 현재 시점에서 미래 데이터는 이용할 수 없음. -&gt; 과거 데이터만으로 후행성이 없는 평활선을 찾는 것은 불가함 | . In&nbsp;[100]: library(quantmod) source(&#39;1.CollectData.R&#39;) . In&nbsp;[109]: p &lt;- getKospi(from=&#39;2018-01-01&#39;) # 평활화 (Smoothing), 단순 이동평균 (SMA) p$sma &lt;- SMA(p$close, n=30) # Kernel Regression 평활화 # ksmooth는 list를 반환함 --&gt; 데이터 프레임으로 변환 k &lt;- as.data.frame(ksmooth(time(p), p$close, &#39;normal&#39;, bandwidth=0.5)) p$kernel &lt;- as.xts(k$y, order.by=index(p)) # Spline 평활화 # Spline은 직접 데이터 프레임으로 변환 안됨, $y로 y요소만 변환 k &lt;- as.data.frame(smooth.spline(time(p), p$close, spar=1)$y) p$spline &lt;- as.xts(k, order.by=index(p)) par(mar=c(3, 3, 3, 3), mgp=c(1.5, 0.3, 0)) plot(as.vector(p$close), type=&#39;l&#39;, main=&#39;Smoothing&#39;) lines(as.vector(p$sma), col=&#39;blue&#39;) lines(as.vector(p$kernel), col=&#39;red&#39;) lines(as.vector(p$spline), col=&#39;green&#39;) . .",
            "url": "https://safenumz.github.io/blog/r/2019/11/11/R_%ED%8C%A8%ED%82%A4%EC%A7%80_quantmod.html",
            "relUrl": "/r/2019/11/11/R_%ED%8C%A8%ED%82%A4%EC%A7%80_quantmod.html",
            "date": " • Nov 11, 2019"
        }
        
    
  
    
        ,"post113": {
            "title": "[Trouble git] LF will be replaced by CRLF 에러",
            "content": "Enviroment . Windows 10 | . Trouble . Git에서 ‘git add .’ 명령어 실행 시 warning: LF will be replaced by CRLF 에러가 발생하는 경우 | . Shooting . 문서의 끝을 처리하는데 있어서 OS마다 약간의 차이가 있기 때문에 발생 | core.autocrlf 기능 꺼주기 | . $ git config --global core.autocrlf false .",
            "url": "https://safenumz.github.io/blog/trouble/2019/10/11/Git%EC%9D%98_LF_will_be_replaced_by_CRLF_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/10/11/Git%EC%9D%98_LF_will_be_replaced_by_CRLF_%EC%97%90%EB%9F%AC.html",
            "date": " • Oct 11, 2019"
        }
        
    
  
    
        ,"post114": {
            "title": "[git] .gitignore 적용하기",
            "content": "Environment . Windows 10 | PowerShell | . .gitignore 파일 . Project에서 원하지 않는 파일들을 Git에서 제외시키는 설정 파일 | 항상 최상위 Directory에 존재해야 함 | . 문법 . # : comments # no .a files *.a # but do track lib.a, even though you&#39;re ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in the build/ directory build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory doc/**/*.pdf . 적용하기 . git cash를 삭제하고 .gitignore 파일을 포함하여 commit하면 된다 | . $ git rm -r --cached . $ git add . $ git commit -m &quot;Apply .gitignore&quot; .",
            "url": "https://safenumz.github.io/blog/devops/2019/10/11/git-gitignore_%EC%A0%81%EC%9A%A9.html",
            "relUrl": "/devops/2019/10/11/git-gitignore_%EC%A0%81%EC%9A%A9.html",
            "date": " • Oct 11, 2019"
        }
        
    
  
    
        ,"post115": {
            "title": "[Cuda] CentOS에 tensorflow-gpu 1.9.0 버전 설치",
            "content": "Environment . CentOS 7 | Anaconda3-5.2.0-Linux-x86_64.sh | Python 3.6 | NVIDIA GTX 1060 | NVIDIA-SMI 390.59 | Cuda 9.0 | . GPU Env Dependency . NVIDIA GPU NVIDIA-SMI version Cuda version tensorflow-gpu version . NVIDIA GTX 1060 | NVIDIA-SMI 390.59 | Cuda 9 | tensorflow-gpu 1.9.0 | . | NVIDIA-SMI 415 | Cuda 10 | tensorflow-gpu 2.0.0 | . tensorflow-gpu 설치 . NVIDIA-SMI 390.59 기준 | . $ conda install -y cudnn cupti cudatoolkit==9.0 $ pip install tensorflow-gpu==1.9.0 . tensorflow-gpu 구동하는지 확인 . &gt;&gt;&gt; import tensorflow as tf &gt;&gt;&gt; tf.__version 1.9.0 &gt;&gt;&gt; tf.test.is_gpu_available() TRUE .",
            "url": "https://safenumz.github.io/blog/architecture/2019/10/11/CentOS%EC%97%90_Tensorflow-GPU_%EC%84%A4%EC%B9%98.html",
            "relUrl": "/architecture/2019/10/11/CentOS%EC%97%90_Tensorflow-GPU_%EC%84%A4%EC%B9%98.html",
            "date": " • Oct 11, 2019"
        }
        
    
  
    
        ,"post116": {
            "title": "[Trouble elasticsearch] vm.max_map_count 에러",
            "content": "Enviroment . CentOS 7 | Elasticsearch 6.5.4 | . Trouble . Elasticsearch 실행시 vm.max_map_count is too low 및 max file descriptors for elasticsearch process is too low 에러나는 경우 | . [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536] [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] . Shooting . file descriptor, memory 부족으로 인한 에러이다. max file descriptors와 vc.max_map_count 설정을 변경 해준다. | . max file descriptors 변경 . $ sudo vi /etc/security/limits.conf . # limits.conf # &lt;domain&gt; &lt;type&gt; &lt;item&gt; &lt;value&gt; a hard nofile 65536 a soft nofile 65536 a hard nproc 65536 a soft nproc 65536 . vc.max_map_count 설정 변경 . $ sudo vi /etc/sysctl.conf . # sysctl.conf vm.max_map_count=262144 . 로그아웃 후 재접속하여 Elasticsearch를 실행하면 정상적으로 작동한다. .",
            "url": "https://safenumz.github.io/blog/trouble/2019/10/10/Elasticsearch_vm.max_count_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/10/10/Elasticsearch_vm.max_count_%EC%97%90%EB%9F%AC.html",
            "date": " • Oct 10, 2019"
        }
        
    
  
    
        ,"post117": {
            "title": "[Trouble zeppelin] io.grpc.StatusRuntimeException 에러",
            "content": "Environment . CentOS 7 | Zeppelin 0.8.1 | . Trouble . Zepplein에서 io.grpc.StatusRuntimeException 에러가 발생하는 경우 | . Shooting . zeppelin에서 제한한 메모리를 초과해서 나오는 에러이다. | zeppelin-site.xml 파일에서 zeppelin.websocket.max.text.message.size property를 늘려준다. | . $ vi $ZEPPELIN_HOME/conf/interpreter.json . # inter &quot;zeppelin.ipython.grpc.message_size&quot;: { &quot;propertyName&quot;: &quot;zeppelin.ipython.grpc.message_size&quot;, &quot;defaultValue&quot;: &quot;533554432&quot;, &quot;description&quot;: &quot;grpc message size, default is 32M&quot;, &quot;type&quot;: &quot;number&quot; } .",
            "url": "https://safenumz.github.io/blog/trouble/2019/08/19/Zepplein%EC%9D%98_io.grpc.StatusRuntimeException.html",
            "relUrl": "/trouble/2019/08/19/Zepplein%EC%9D%98_io.grpc.StatusRuntimeException.html",
            "date": " • Aug 19, 2019"
        }
        
    
  
    
        ,"post118": {
            "title": "CentOS에서 Zeppelin Python 한글폰트 설정",
            "content": "Environment . CentOS 7 | Zeppelin 0.8.1 | . 나눔고딕 폰트 다운로드 . # 나눔고딕 폰트 다운로드 $ cd /usr/share/fonts/ $ wget http://cdn.naver.com/naver/NanumFont/fontfiles/NanumFont_TTF_ALL.zip $ unzip NanumFont_TTF_ALL.zip -d NanumFont $ rm -f NanumFont_TTF_ALL.zip . # matplotlib font 폴더로 나눔 폰트 이동 $ cp /usr/share/fonts/NanumFont/* /home/a/anaconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/ # 캐시 삭제 $ rm -rf /home/a/.cache/matplotlib/* .",
            "url": "https://safenumz.github.io/blog/etc/2019/08/19/CentOS%EC%97%90%EC%84%9C_Zeppelin_Python_%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/etc/2019/08/19/CentOS%EC%97%90%EC%84%9C_Zeppelin_Python_%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8_%EC%84%A4%EC%A0%95.html",
            "date": " • Aug 19, 2019"
        }
        
    
  
    
        ,"post119": {
            "title": "[Hive Sqoop] Hive Sqoop 설치 및 기본 예제 테스트",
            "content": "install maria db . $ yum install mariadb-server mariadb $ rpm -qa | grep maria $ systemctl enable mariadb.service $ systemctl start mariadb.service $ mysql_secure_installation . $ vi /etc/my.cnf . # /etc/my.cnf bind-address=192.168.56.102 . # maria db restart $ systemctl restart mariadb.service # mysql 접속 $ mysql -u root -p . # databases 확인 MariaDB&gt; show databases # 모든 사용자에게 모든 권한 부여 MariaDB&gt; grant all privileges on *.* to hive@&#39;%&#39; identified by &quot;hive&quot; with grant option; # 자기 자신에게 모든 권한 부여 MariaDB&gt; grant all privileges on *.* to hive@&#39;dn01&#39; identified by &quot;hive&quot; with grant option; MariaDB&gt; flush privileges; # mysql database 접속 MariaDB&gt; use mysql; # user 권한 확인 MariaDB [mysql]&gt; select user, host from user; # exit MariaDB [mysql]&gt; exit; . hive . $ cd /tmp $ wget http://apache.mirror.cdnetworks.com/hive/hive-2.3.5/apache-hive-2.3.5-bin.tar.gz $ mkdir -p /opt/hive/2.3.5 $ sudo mv apache-hive-2.3.5-bin/* /opt/hive/2.3.5/ $ sudo ln -s /opt/hive/2.3.5 /opt/hive/current $ cd /opt/hive/current/ $ sudo chmod -R 775 /opt/hive/2.3.5/ $ sudo chown -R hadoop:hadoop /opt/hive/ . $ vi ~/.bash_profile . # ~/.bash_profile #### HIVE 2.3.5 ####################### export HIVE_HOME=/opt/hive/current export PATH=$PATH:$HIVE_HOME/bin export CLASSPATH=.:${JAVA_HOME}/lib:${JREHOME}/lib:/opt/hive/current/lib #### HIVE 2.3.5 ####################### . $ cp /opt/hive/current/conf/hive-env.sh.template /opt/hive/current/conf/hive-env.sh $ cp /opt/hive/current/conf/hive-default.xml.template /opt/hive/current/conf/hive-site.xml . $ vi /opt/hive/current/conf/hive-env.sh . HADOOP_HOME=/opt/hadoop/current . $ vi /opt/hive/current/conf/hive-site.xml . &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt; &lt;value&gt;jdbc:mysql://192.168.56.102:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt; &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt; &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt; &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt; &lt;value&gt;hive&lt;/value&gt; &lt;description&gt;username to use against metastore database&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt; &lt;value&gt;hive&lt;/value&gt; &lt;description&gt;password to use against metastore database&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt; &lt;value&gt;/home/hadoop/iotmp&lt;/value&gt; &lt;description&gt;Local scratch space for Hive jobs&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.downloaded.resources.dir&lt;/name&gt; &lt;value&gt;/home/hadoop/iotmp&lt;/value&gt; &lt;description&gt;Temporary local directory for added resources in the remote file system.&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.cli.print.current.db&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;description&gt;Whether to include the current database in the Hive prompt.&lt;/description&gt; &lt;/property&gt; . $ mkdir -p /home/hadoop/iotmp $ chmod -R 775 /home/hadoop/iotmp/ . MySQL connector . $ cd /tmp $ wget http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz $ cd mysql-connector-java-5.1.38 $ mv mysql-connector-java-5.1.38-bin.jar /opt/hive/current/lib/ . $ hdfs dfs -mkdir /tmp $ hdfs dfs -mkdir -p /user/hive/warehouse $ hdfs dfs -chmod -R 777 /tmp $ hdfs dfs -chmod -R 777 /user/hive/warehouse . 만약 권한 설정 부분에서 에러가 뜬다면 아래 부분 hdfs-site.xml 추가 . # hdfs-site.xml &lt;property&gt; &lt;name&gt;dfs.namenode.rpc-bind-host&lt;/name&gt; &lt;value&gt;0.0.0.0&lt;/value&gt; &lt;/property&gt; . $ schematool -initSchema -dbType mysql # ( 에러가 발생한다면 기존에 같은 이름의 데이타베이스가 있으니깐 # show databases에서 drop database hive; 제거 ) . ( hive 실행전에 메타스토어를 초기화 해야 한다. 즉 15번 하고 hive 명령어 실행 ) 브라우저에서 http://192.168.56.101:50070 메뉴 &gt; Utitlies &gt; Browser Directory &gt; / user hive warehouse 에서 앞으로 확인 . $ hive . beeline 접속하기 위한 추가 작업 beeline은 그룹과 유저가 other이기 때문에 . 모든 노드의 core-site.xml 에 수정 : 모든 그룹과 호스트에게 접속하기 위한 관문역할의 proxy를 모두가 가능하도록 변경 . $ cd $HADOOP_HOME/etc/hadoop . vi core-site.xml &lt;property&gt; &lt;name&gt;hadoop.proxyuser.hadoop.groups&lt;/name&gt; &lt;value&gt;*&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.proxyuser.hadoop.hosts&lt;/name&gt; &lt;value&gt;*&lt;/value&gt; &lt;/property&gt; . $ hdfs dfs -chmod -R 777 /tmp $ hdfs dfs -chmod -R 777 /user/hive/warehouse . $ scp core-site.xml hadoop@dn01:/opt/hadoop/current/etc/hadoop $ scp core-site.xml hadoop@dn02:/opt/hadoop/current/etc/hadoop . hive 실행 . mariadb.service 상태 . 메타스토어 실행 (백그라운드 실행) . $ hive --service metastore &amp; . hive 서버 구동 (백그라운드 실행) . $ hive --service hiveserver2 &amp; . $ show databases; $ create database sample1; $ use sample1; $ create table employees (name string); $ insert into employees (name) values(&#39;KIM&#39;); . $ beeline -u jdbc:hive2://hd4.cluster.kr:10000 . hive table 생성 . CREATE TABLE movies ( movie_id INT, movie_title STRING, release_date STRING, video_release_date STRING, imdb_url STRING, unknown INT, action INT, adventure INT, animation INT, children INT, comedy INT, crime INT, documentary INT, drama INT, fantasy INT, film_noir INT, horror INT, musical INT, mystery INT, romance INT, sci_fi INT, thriller INT, war INT, Western INT ) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;|&#39; STORED AS TEXTFILE; . CREATE EXTERNAL TABLE users ( user_id INT, age INT, gender STRING, occupation STRING, zip_code STRING ) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;|&#39; STORED AS TEXTFILE; . CREATE EXTERNAL TABLE users ( user_id INT, age INT, gender STRING, occupation STRING, zip_code STRING ) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;|&#39; STORED AS TEXTFILE LOCATION &#39;/user/hadoop/hive_data/userinfo2&#39;; . $ show databases; $ use kdatademo create table customers ( id bigint, name string, address string ) $ show tables; $ desc customers insert into customers values (1111, &#39;kim&#39;, &#39;WA&#39;), (2222, &#39;park&#39;, &#39;WA&#39;), (3333, &#39;lee&#39;, &#39;WA&#39;), (4444, &#39;meng&#39;, &#39;CA&#39;), (5555, &#39;bae&#39;, &#39;NJ&#39;), (6666, &#39;jeon&#39;, &#39;NY&#39;); create table if not exists orders ( id bigint, product_id string, customer_id bigint, quantity int, amount double ); desc orders; insert into orders values (111111, &quot;phone&quot;, 1111, 3, 1200), (222222, &quot;camera&quot;, 1111, 1, 5200), (100003, &quot;notebook&quot;, 1111, 1, 10), (100004, &quot;bag&quot;, 2222, 2, 50), (100005, &quot;t-shirt&quot;, 4444, 5, 20) select * from orders; select * from customers; [연습] 1. 주소가 &#39;WA&#39;인 고객 검색 2. 주소가 &#39;WA&#39;이면서 id가 2222보다 큰 고객명단 출력 3. 주소로 정렬하여 고객명과 주소 출력 4. 고객 명단수 검색 5. 첫번째 고객명단 출력 (mysql 명령어 이용) 6. 주소별 인원수 검색 7. 고객아이디, 고객명과 고객이 주문한 상품명 출력 . hiverserver2기동시 connection refused가 발생하는 경우 조치방법 . 1. hiveserver2를 기동한다. . hadoop@bigdata-host:~/hive/bin$ hive –service hiveserver2 . 2. 외부 프로그램에서 hive server에 접근한다. . org.apache.thrift.transport.TTransportException: java.net.ConnectException: Connection refused: connect . hive-conf.xml에서 아래 항목의 value를 localhost에서 서비스가 되는 서버의 ip로 바꿔줘야.. 외부에서 접속이 가능함 . &lt;property&gt; &lt;name&gt;hive.server2.authentication&lt;/name&gt; &lt;value&gt;NOSASL&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt; &lt;value&gt;192.168.0.39&lt;/value&gt; &lt;description&gt;Bind host on which to run the HiveServer2 Thrift interface. Can be overridden by setting $HIVE_SERVER2_THRIFT_BIND_HOST&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.server2.thrift.port&lt;/name&gt; &lt;value&gt;10000&lt;/value&gt; &lt;description&gt;Port number of HiveServer2 Thrift interface. Can be overridden by setting $HIVE_SERVER2_THRIFT_PORT&lt;/description&gt; &lt;/property&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;beeline.hs2.connection.user&lt;/name&gt; &lt;value&gt;hiveuser&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;beeline.hs2.connection.password&lt;/name&gt; &lt;value&gt;hivepw&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;beeline.hs2.jdbc.url.tcpUrl&lt;/name&gt; &lt;value&gt;jdbc:hive2://localhost:10000/default&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;beeline.hs2.jdbc.url.httpUrl&lt;/name&gt; &lt;value&gt;jdbc:hive2://localhost:10000/default;transportMode=http;httpPath=cliservice&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;beeline.hs2.jdbc.url.default&lt;/name&gt; &lt;value&gt;tcpUrl&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; . create table mobilephones (id string, title string, cost double, colors array&lt;string&gt;, scree_size array&lt;float&gt;, features map&lt;string, Boolean&gt; ) ROW FORMAT delimited field terminated by &#39;,&#39; collection items terminated by &#39;#&#39; map keys terminated by &#39;:&#39;; . $ load data inpath &#39;/home/hadoop/hive_data/mobilephones.csv&#39; into table mobilephones; . create table mobilephone2 (id string, title string, cost double, colors array&lt;string&gt;, screen_size array&lt;float&gt;, features map&lt;string, Boolean&gt;, information struct&lt;battery:string,camera:string&gt; ) row format delimited field terminated by &#39;,&#39; collection items terminated by &#39;#&#39; map keys terminated by &#39;:&#39;; load data local inpath &#39;/home/hadoop/hive_data/mobilephones2.csv&#39; into table mobilephones2; . 제품명과 카메라 특성 출력 | . # 제품 아이디, 첫번째 색상, 카메라 특성, 배터리 정보 출력 select id, colors[0], features[&#39;camera&#39;], information.battery from mobilephones2; . $ wget httP://www.grouplens.org/system/files/ml-100k.zip $ unzip ml-100k.zip # u.item 파일은 hdfs에 /user/hadoop/movies 폴더 복사 # u.user 파일은 hdfs에 /user/hadoop/userinfo 폴더 복사 . HIVE HDFS . 테이블 | 디렉토리 | . 파티션 | 서브디렉토리 | . 데이터 | 파일 | . 1.테이블 생성 . 내부테이블 | 외부테이블: drop을 해도 파일 삭제 안함 (메타데이타를 지워짐) 파티션 테이블 | | insert | load | 외부테이블파티션 | 다중컬럼파티션 연습 SQOOP 설치 | | . hdfs dfs -ls -R /user/hive/warehouse . CREATE TABLE movies ( movie_id INT, movie_title STRING, release_date STRING, video_release_date STRING, imdb_url STRING, unknown INT, action INT, adventure INT, animation INT, children INT, comedy INT, crime INT, documentary INT, drama INT, fantasy INT, film_noir INT, horror INT, musical INT, mystery INT, romance INT, sci_fi INT, thriller INT, war INT, Western INT ) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;|&#39; STORED AS TEXTFILE; . desc formatted movies; load data inpath &#39;hdfs://user/hadoop/movies/u.item&#39; into table movies; delete from 테이블명 : 데이터만 삭제 (메모리 자리 남김, commit안했으면 살아있음) drop 테이블명 : 데이터 + 구조 삭제 truncate 테이블명 : 데이터 삭제 (삭제후에 메모리 반환) truncate hdfs dfs -ls /user/hive/warehouse/hivedemo.db/movies -&gt; 사라짐 hdfs dfs -ls -R /user/hadoop/movies - 사라짐 . load data local inpath &#39;/home/hadoop/hive_data/ml-100k/u.item&#39; into table movies; select * from movies limit 2; CREATE EXTERNAL TABLE users ( user_id INT, age INT, gender STRING ) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;|&#39; STORE AS TEXTFILE; -- 파일을 로드하는 경우 DROP TABLE를 하면 메타스토어와 실질적인 파일 지워짐 DROP TABLE USERS; -- 외부 테이블로 설정하면 테이블을 지워도 파일은 안지워짐 CREATE EXTERNAL TABLE users ( user_id INT, age INT, gender STRING, occupation STRING, zip_code STRING ) . 파티션 . create table orders ( id string, customer_id string, product_id string, quantity int, amount double, zipcode char(5) ) partitioned by (state char(2)) row format delimited fields terminated by &#39;,&#39;; load data local inpath &#39;/home/hadoop/hive_data/orders_CA.csv&#39; into table orders partition(state=&#39;CA&#39;) create table all_orders ( id string, customer_id string, product_id string, quantity int, amount double, postalcode string ) partitioned by (country string, state string) row format delimited fields terminated by &#39;,&#39;; load data local inpath &#39;/home/hadoop/hive_data/orders_CA.csv&#39; into table all_orders partition(country=&#39;US&#39; state=&#39;CA&#39;); load data local inpath &#39;/home/hadoop/hive_data/orders_CT.csv&#39; into table all_orders partition(country=&#39;KR&#39; state=&#39;CT&#39;) . SQOOP 설치 . $ wget http://mirror.apache-kr.org/sqoop/1.4.7/sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz $ tar xvzf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz $ mkdir -p /opt/sqoop/1.4.7 $ cp -r sqoop-1.4.7.bin__hadoop-2.6.0/* /opt/sqoop/1.4.7 $ ln -s /opt/sqoop/1.4.7 /opt/sqoop/current . Mysql connector 다운받아서 sqoop 폴더 /lib에 복사 (mysql-connector-java-5.1.38-bin.jar) . $ wget http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz $ tar xvzf mysql-connector-java-5.1.38.tar.gz $ cd mysql-connector-java-5.1.38/ $ cp mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar /opt/sqoop/current/lib/ . /opt/sqoop 경로를 hadoop 소유자 변경 . $ sudo chmod -R 775 /opt/sqoop/1.4.7/ $ sudo chown -R hadoop:hadoop /opt/sqoop/ . hadoop 계정에서 환경변수 설정 . $ vi ~/.bash_profile . # SQOOP_HOME bin 폴더를 PATH에 설정 export SQOOP_HOME=/opt/sqoop/current export PATH=$PATH:$SQOOP_HOME/bin . $ source ~/.bash_profile $ cd $SQOOP_HOME/conf $ cp sqoop-env-template.sh sqoop-env.sh $ vi sqoop-env.sh . export HADOOP_COMMON_HOME=/opt/hadoop/current export HADOOP_MAPRED_HOME=/opt/hadoop/current export HIVE_HOME=/opt/hive/current . $ cp $SQOOP_HOME/sqoop-1.4.7.jar $HADOOP_HOME/share/hadoop/tools/lib $ sqoop -version . -- Maria DB 접속 show databases; create database sqoopdemo; use sqoopdemo; CREATE TABLE departments ( department_id int(11) unsigned NOT NULL, department_name varchar(30) NOT NULL, PRIMARY KEY (department_id) ); INSERT INTO departments (department_id, department_name) VALUES (1, &#39;fitness&#39;), (2, &#39;sportware&#39;), (3, &#39;apparel&#39;), (4, &#39;gold&#39;), (5, &#39;outdoor&#39;), (6, &#39;fat shop&#39;); SELECT * FROM departments; . sqoop list-databases --connect jdbc:mysql://dn01 --username hive --password hive sqoop list-tables --connect jdbc:mysql://dn01/sqoopdemo --username hive --password hive # sqoop을 통해 mysql -&gt; hdfs (import) 확인 # target-dir 지정하지 않으면 /user/hadoop/departments에 저장된다 # --target-dir sqoopdemo 지정하면 /user/hadoop/sqoopdemo/departments에 저장된다 sqoop import --connect jdbc:mysql://dn01/sqoopdemo --table departments --username hive --password hive --target-dir sqoopdemo/departments hdfs dfs -ls /user/hadoop/sqoopdemo/departments hdfs dfs -cat /user/hadoop/sqoopdemo/departments/part-m-* . sqoop을 통해 hdfs -&gt; mysql (export) 확인 . DDL(테이블 구조)는 미리 있어야 함 | . $ mysql -u hive -p hive . USE sqoopdemo; CREATE TABLE dept LIKE departments; . # Hadoop /user/hadoop/sqoopdemo/departments에 있는 데이터를 Maria DB dept 테이블로 export $ sqoop export --connect jdbc:mysql://dn01:3306/sqoopdemo --table dept --table dept --username hive --password hive --export-dir sqoopdemo/departments . INSERT INTO departments value (7, &#39;it items&#39;); . # deparments 테이블에 데이터를 추가하고 다시 import 하면 이미 테이블이 존재하기 때문에 에러 # overwrite 되는 개념이 아님에 주의 sqoop import --connect jdbc:mysql://dn01/sqoopdemo --table departments --username hive --password hive --target-dir sqoopdemo/departments . # 기존 데이터 삭제 후 import 시도 $ hdfs dfs -rm -R /user/hadoop/sqoopdemo/departments $ sqoop import --connect jdbc:mysql://dn01/sqoopdemo --table departments --username hive --password hive --target-dir sqoopdemo/departments $ hdfs dfs -cat /user/hadoop/sqoopdemo/departments/* . . INSERT INTO departments values(8, &#39;food&#39;); SELECT * FROM departments; . $ sqoop import --connect jdbc:mysql://dn01/sqoopdemo --table departments --username hive --password hive --target-dir sqoopdemo/departments --check-column department_id --incremental append --last-value 7 $ hdfs dfs -cat /user/hadoop/sqoopdemo/departments/* . . INSERT INTO departments values(9, &#39;computer&#39;); SELECT * FROM departments; . $ sqoop import --connect jdbc:mysql://dn01/sqoopdemo --table departments --username hive --password hive --target-dir sqoopdemo/departments --check-column department_id --incremental append --last-value 7 $ hdfs dfs -cat /user/hadoop/sqoopdemo/departments/* 1,fitnes 2,sportw 3,appare 4,gold 5,outdoo 6,fat sh 7,it ite 8,food 8,food 9,compuster . . $ sqoop export --connect jdbc:mysql://dn01:3306/sqoopdemo --table dept --username hive --password hive --export-dir sqoopdemo/departments # Maria DB의 primary key가 중복된 상황이라 error 8,food 8,food . $ sqoop export --connect jdbc:mysql://dn01:3306/sqoopdemo --table dept --username hive --password hive --export-dir sqoopdemo/departments --update-key department_id --update-mode allowinsert . $ hive --service metastore &amp; $ hive --service hiveserver2 &amp; $ hive . hive&gt; show databases; hive&gt; create database kdatademo; hive&gt; use kdatademo; hive (kdatademo)&gt; show tables; . # map은 하나만 씀 # 에러 발생: departments already exists $ sqoop import --connect jdbc:mysql://dn01:3306/sqoopdemo --username hive --password hive --table departments --hive-import --hive-table kdatademo.departments -m 1 # departments 경로 삭제 $ hdfs dfs -rm -R /user/hadoop/departments # 재시도 # 에러발생: # $SQOOP_HOME/lib 경로에 hive-common-0.10.0.jar 가 필요함 $ sqoop import --connect jdbc:mysql://dn01:3306/sqoopdemo --username hive --password hive --table departments --hive-import --hive-table kdatademo.departments -m 1 # $SQOOP_HOME/lib 경로에 hive-common-0.10.0.jar 넣고 다시 시도 $ hdfs dfs -rm -r /user/hadoop/departments $ sqoop import --connect jdbc:mysql://dn01:3306/sqoopdemo --username hive --password hive --table departments --hive-import --hive-table kdatademo.departments -m 1 . hive (kdatademo)&gt; show tables; departments hive (kdatademo)&gt; select * from departments; .",
            "url": "https://safenumz.github.io/blog/hadoop/2019/08/12/Hive_Sqoop_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EA%B8%B0%EB%B3%B8_%EC%97%90%EC%A0%9C_%ED%85%8C%EC%8A%A4%ED%8A%B8.html",
            "relUrl": "/hadoop/2019/08/12/Hive_Sqoop_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EA%B8%B0%EB%B3%B8_%EC%97%90%EC%A0%9C_%ED%85%8C%EC%8A%A4%ED%8A%B8.html",
            "date": " • Aug 12, 2019"
        }
        
    
  
    
        ,"post120": {
            "title": "[Zeppelin] CentOS에 Zeppelin 설치 및 기본설정",
            "content": "Environment . Centos 7 | Zeppelin 0.8.1 | Spark 2.4.0 | Python 3.6 | . zeppelin 다운로드 . # zepplein 다운로드 $ wget http://mirror.navercorp.com/apache/zeppelin/zeppelin-0.8.1/zeppelin-0.8.1-bin-all.tgz # zeppelin 압축풀기 $ tar xvzf zeppelin-0.8.1-bin-all.tgz # 심볼릭 링크 $ ln -s zeppelin-0.8.1-bin-all zeppelin . zeppelin 설정 . 설정 파일 생성 . $ cp zeppelin-site.xml.template zeppelin-site.xml $ cp zeppelin-env.sh.template zeppelin-env.sh $ cp shiro.ini.template shiro.ini . zeppelin-site.xml . ip 주소, port 번호, output 제한, cron 기능 설정 | . &lt;!-- zeppelin-site.xml --&gt; &lt;!-- ip 주소 설정 --&gt; &lt;property&gt; &lt;name&gt;zeppelin.server.addr&lt;/name&gt; &lt;value&gt;192.168.0.10&lt;/value&gt; &lt;description&gt;Server address&lt;/description&gt; &lt;/property&gt; &lt;!-- port 설정 --&gt; &lt;property&gt; &lt;name&gt;zeppelin.server.port&lt;/name&gt; &lt;value&gt;38080&lt;/value&gt; &lt;description&gt;Server port.&lt;/description&gt; &lt;/property&gt; &lt;!-- output 제한 --&gt; &lt;property&gt; &lt;name&gt;zeppelin.interpreter.output.limit&lt;/name&gt; &lt;value&gt;10000000&lt;/value&gt; &lt;description&gt;Output message from interpreter exceeding the limit will be truncated&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;zeppelin.websocket.max.text.message.size&lt;/name&gt; &lt;value&gt;1000000000&lt;/value&gt; &lt;description&gt;Size in characters of the maximum text message to be received by websocket. Defaults to 1024000&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;zeppelin.ipython.grpc.message_size&lt;/name&gt; &lt;value&gt;500000000&lt;/value&gt; &lt;/property&gt; &lt;!-- cron 기능 설정 --&gt; &lt;property&gt; &lt;name&gt;zeppelin.notebook.cron.enable&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;description&gt;Notebook enable cron scheduler feature&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;zeppelin.notebook.cron.folders&lt;/name&gt; &lt;value&gt;/home/a/zeppelin&lt;/value&gt; &lt;description&gt;Notebook cron folders&lt;/description&gt; &lt;/property&gt; . zeppelin-env.sh . spark 설정, 메모리 설정 | . export BASE_HOME=/home/a/ export ZAVA_HOME=/usr/local/java export MASTER=yarn-client export ZEPPELIN_MEM=&quot;-Xms3024m -Xmx6024m -XX:MaxPermSize=512m&quot; export ZEPPELIN_INTP_MEM=&quot;-Xms3024m -Xmx6024m -XX:MaxPermSize=512m&quot; export ZEPPELIN_INTERPRETER_OUTPUT_LIMIT=10000000 export SPARK_HOME=$BASE_HOME/spark export HADOOP_CONF_DIR=$BASE_HOME/hadoop/etc/hadoop export PYSPARK_PYTHON=$BASE_HOME/anaconda3/bin/python3 export PYTHONPATH=$BASE_HOME/anaconda3/bin/python3 export ZEPPELIN_PORT=38080 . shiro.ini . 아이디, 비밀번호 설정 | . [users] # List of users with their password allowed to access Zeppelin. # To use a different strategy (LDAP / Database / ...) check the shiro doc at http://shiro.apache.org/configuration.html#Configuration-INISections # To enable admin user, uncomment the following line and set an appropriate password. admin = admin, admin user1 = role1, role2 user2 = password3, role3 user3 = password4, role2 . Zeppelin Intepreter 설치 . # 접근 권한 설정 install-interpreter.log $ sudo chmod 777 /home/a/zeppelin/logs/install-interpreter.log # zepplein interpreter 설치 $ sudo ./bin/install-interpreter.sh --name md,shell,jdbc,python,pig,angular,elasticsearch .",
            "url": "https://safenumz.github.io/blog/architecture/2019/08/10/CentOS%EC%97%90_Zeppelin_%EC%84%A4%EC%B9%98.html",
            "relUrl": "/architecture/2019/08/10/CentOS%EC%97%90_Zeppelin_%EC%84%A4%EC%B9%98.html",
            "date": " • Aug 10, 2019"
        }
        
    
  
    
        ,"post121": {
            "title": "[Kafka] CentOS에 Kafka 설치",
            "content": "Environment . Centos 7 서버 2대 | Kafka 2.3.0 | . Kafka 구조 . Kafka는 Producer가 Consumer에게 다이렉트로 전송할 시에 발생하는 데이터 유실 장애를 방지하기 위해 중간에서 버퍼 역할을 한다. | 편의상 Kafka Producer와 Kafka Server를 1번 서버에, Kafka Consumer를 2번 서버에 설치 | . Kafka Producer &gt; Kafka Server &gt; Kafka Consumer . [1번 서버] Kafka 다운로드 . # scala 2.12 - kafka 2.3.0 $ wget http://apache.tt.co.kr/kafka/2.3.0/kafka_2.12-2.3.0.tgz # 압축 해제 $ tar xvzf kafka_2.12-2.3.0.tgz # 심볼링 링크 $ ln -s kafka_2.12-2.3.0 kafka . [1번 서버] Zookeeper 서버 실행 . $ cd kafka # start Zookeeper $ ./bin/zookeeper-server-start.sh config/zookeeper.properties &amp; . [1번 서버] Kafka Server 실행 . # start kafka $ ./bin/kafka-server-start.sh config/server.properties &amp; # zookeeper, kafka 서버가 잘 실행되었는지 확인 $ sudo netstat -anp | egrep &quot;9092|2181&quot; . [1번 서버] kafka topic 생성 . # twitter topic 생성 $ bin/kafka-topics.sh --create --zookeeper &lt;zookeeper 서버 ip&gt;:2181 --replication-factor 1 --partitions 1 --topic twitter &amp; # twitter list 확인 $ bin/kafka-topics.sh --list --zookeeper hd2:2181 &amp; . [1번 서버] Kafka Producer를 통해 메세지 보내기 . # kafka producer $ bin/kafka-console-producer.sh --broker-list hd2:9092 --topic twitter &gt;&gt;&gt; Hello Kafka . [2번 서버] 카프카 다운로드 . # scala 2.12 - kafka 2.3.0 $ wget http://apache.tt.co.kr/kafka/2.3.0/kafka_2.12-2.3.0.tgz # 압축 해제 $ tar xvzf kafka_2.12-2.3.0.tgz # 심볼링 링크 $ ln -s kafka_2.12-2.3.0 kafka . [2번 서버] Kafka Producer(1번 서버)가 보낸 메시지를 Kafka Consumer(2번 서버)에 전송되는지 확인 . Kafka Producer(1번 서버)에서 보낸 ‘Hello Kafka’ 메시지가 Kafka Consumer(2번 서버)에 들어 오면 성공 | . $ cd kafka $ ./bin/kafka-console-consumer.sh --bootstrap-server hd2:9092 --topic twitter --from-beginning Hello Kafka .",
            "url": "https://safenumz.github.io/blog/architecture/2019/08/10/CentOS%EC%97%90_Kafka_%EC%84%A4%EC%B9%98.html",
            "relUrl": "/architecture/2019/08/10/CentOS%EC%97%90_Kafka_%EC%84%A4%EC%B9%98.html",
            "date": " • Aug 10, 2019"
        }
        
    
  
    
        ,"post122": {
            "title": "[ELK Stack] CentOS에 ELK Stack 설치",
            "content": "Environment . CentOS 7 | Java 8 | Logstash 6.5.4 | Elasticsearch 6.5.4 | Kibana 6.5.4 | . Logstash . Logstash 다운로드 . # logstash 6.5.4 $ wget https://artifacts.elastic.co/downloads/logstash/logstash-6.5.4.tar.gz # 압축 해제 $ tar xvzf logstash-6.5.4.tar.gz # 심볼릭 링크 $ ln -s logstash-6.5.4 logstash . Elasticsearch . Elasticsearch 다운로드 . # Elasticsearch 다운로드 $ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.5.4.tar.gz # 압축 해제 $ tar xvzf elasticsearch-6.5.4.tar.gz # 심볼릭 링크 $ ln -s elasticsearch-6.5.4 elasticsearch . Elasticsearch 설정 . $ vi elasticsearch/config/elasticsearch.yml . # elasticsearch.yml # Set the bind address to a specific IP (IPv4 or IPv6): network.host: &lt;내부 Ip 주소&gt; # Set a custom port for HTTP: # Default: 9200 http.port: &lt;Port 번호&gt; . Elasticsearch 실행 . $ elasticsearch/bin/elasticsearch . Elasticsearch 실행시 vm.max_map_count 에러나는 경우 . file descriptor, memory 부족으로 인한 에러이다. | . max file descriptors 변경 . $ sudo vi /etc/security/limits.conf . # limits.conf # &lt;domain&gt; &lt;type&gt; &lt;item&gt; &lt;value&gt; a hard nofile 65536 a soft nofile 65536 a hard nproc 65536 a soft nproc 65536 . vc.max_map_count 설정 변경 . $ sudo vi /etc/sysctl.conf . # sysctl.conf vm.max_map_count=262144 . Kibana . Kibana 다운로드 . # Kibana 다운로드 $ wget https://artifacts.elastic.co/downloads/kibana/kibana-6.5.4-linux-x86_64.tar.gz # 압축 해제 $ tar xvzf kibana-6.5.4-linux-x86_64.tar.gz # 심볼릭 링크 $ ln -s kibana-6.5.4-linux-x86_64 kibana . Kibana 설정 . $ vi kibana/config/kibana.yml . # kibana.yml # Kibana is served by a back end server. This setting specifies the port to use. # server.port: 45601 server.port: &lt;Kibana Port&gt; # To allow connections from remote users, set this parameter to a non-loopback address. # server.host: hd2.cluster.kr server.host: &lt;Kibana Ip Address&gt; # The URL of the Elasticsearch instance to use for all your queries. # elasticsearch.url: &quot;http://hd2.cluster.kr:9200&quot; elasticsearch.url: &lt;Elasticsearch url&gt; . Kibana 실행 . $ kibana/bin/kibana .",
            "url": "https://safenumz.github.io/blog/architecture/2019/08/10/CentOS%EC%97%90_ELK_Stack_%EC%84%A4%EC%B9%98.html",
            "relUrl": "/architecture/2019/08/10/CentOS%EC%97%90_ELK_Stack_%EC%84%A4%EC%B9%98.html",
            "date": " • Aug 10, 2019"
        }
        
    
  
    
        ,"post123": {
            "title": "[ShellScript] 기초 문법",
            "content": "공통 셀 출력 명령: echo . 형식: echo [옵션] [문자열] . 옵션: -n : 문자열의 마지막에서 줄 바꿈을 하지 않음 . echo centos echo &quot;I Love Linux&quot; . 출력형식 지정 명령: printf . 기능: 출력형식을 지정하여 문자열을 출력 형식: printf [옵션] [문자열] 옵션: %d, n 등 c 언어의 printf() 함수를 지정 . printf CentOS printf &quot;Hava a n good time&quot; printf &quot;%d + %d = %d n&quot; 10 20 30 . 숫자 계산 . #!/bin/sh echo &quot;================================================&quot; echo &quot;[예제 11-5] 입력받은 두 정수의 곱셈/나눗셈/평균값 산출 프로그램 &quot; echo &quot;&quot; echo &quot;1. 첫 번째 정수 입력 &quot; read num1 echo &quot;2. 두 번째 정수 입력 &quot; read num2 echo &quot;&quot; echo &quot;&gt; 입력한 두 정수의 값 &quot; echo &quot; num1 = $num1 &quot; echo &quot; num2 = $num2 &quot; echo &quot;================================================&quot; echo &quot;&gt; 곱셈연산 결과 &quot; gob=`expr $num1 * $num2` echo &quot; $num1 * $num2 = $gob &quot; echo &quot;&gt; 나눗셈연산 결과 &quot; na=`expr $num1 / $ num2` echo &quot; $num1 / $num2 = $na&quot; echo &quot;&gt; 두 수의 평균값 &quot; avg=`expr ($num1 + $num2 ) / 2` echo &quot;$num1 + $num2 = $avg&quot; echo &quot;================================================&quot; exit 0 . 파라미터 변수 . mapping.sh . #!/bin/sh echo &quot;================================================&quot; echo &quot;[예제 11-6] 수행할 명령에 대한 파라미터 맵핑 프로그램&quot; echo &quot;&quot; echo &quot;1. 실행 파일이름 : &lt;$0&gt;: &quot; echo &quot;2. 첫번째 파라미터는 &lt;$1&gt; 이고&quot; echo &quot; 두번째 파라미터는 &lt;$2&gt; 입니다.&quot; echo &quot;3. 전체 파라미터는 &lt;$*&gt; 입니다.&quot; echo &quot;&quot; echo &quot;&gt; 프로그램을 종료합니다.&quot; echo &quot;================================================&quot; exit 0 . 분기문과 관계 연산자 . 기본 if문 . 기본 if문 문법구조 . if [조건식] then 조건식이 참일 경우 실행할 문장 fi . 조건연산자 . -eq -neq -gt -ge -lt -le ! . 논리연산자 . if [A] &amp;&amp; [B] 동일 if [A] -a [B] if [A] || [B] 동일 if [A] -o [B] . 기본 if문 사용예시 . #!/bin/sh if [ &quot;space&quot; = &quot;space&quot; ] then echo &quot;두 문자열은 같은 문자열입니다.&quot; fi . #!/bin/sh echo &quot;===============================================&quot; echo &quot;[예제 11-7] 기본 if문 문법형태 사용 프로그램&quot; echo &quot;--&quot; if [ &quot;space&quot; = &quot;space&quot; ] then echo &quot; &gt; 문자열 비교 : space = space &quot; echo &quot; &gt; 두 문자열을 비교 연산자로 판단한 결과 &quot; echo &quot; &gt; 주어진 조건은 &lt;참&gt; 입니다. &quot; fi echo &quot;&quot; echo &quot;&gt;&gt; 프로그램을 종료합니다.&quot; echo &quot;================================================&quot; exit 0 . if~else문 . #!/bin/sh f_name=/lib/systemd/system/httpd.service if [ -f $f_name ] then echo &quot;exists!&quot; else echo &quot;not exists!&quot; fi . case ~ esac문 . 문법구조 . case 파라미터 또는 키보드 입력값 in 조건1) 조건1에 해당할 경우 실행할 명령 조건2) 조건2에 해당할 경우 실행할 명령 조건n) 조건n에 해당할 경우 실행할 명령 *) 앞에서 주어진 조건이외의 모든 경우 실행할 명령 esac . 예제 . case_01.sh . #!/bin/sh echo &quot;=====================================================&quot; echo &quot;[예제 11-11] case-esac문을 사용하여 계절판별 프로그램&quot; echo &quot;--&quot; echo &quot; &gt; 명령 수행 파라미터 (Spring/Summer/Fall/Winter)&quot; echo &quot;&quot; case &quot;$1&quot; in Spring) echo &quot; &gt;&gt; 봄을 선택하셨습니다.&quot;;; Summer) echo &quot; &gt;&gt; 여름을 선택하셨습니다.&quot;;; Fall) echo &quot; &gt;&gt; 가을을 선택하셨습니다.&quot;;; Winter) echo &quot; &gt;&gt; 겨울을 선택하셨습니다.&quot;;; *) echo &quot; &gt;&gt; 계절을 의미하는 단어가 아닙니다.&quot; echo &quot; &gt;&gt; 프로그램을 다시 시작하세요.&quot;;; esac echo &quot;--&quot; echo &quot; &gt;&gt;&gt; 프로그램을 종료합니다.&quot; echo &quot;=====================================================&quot; exit 0 . case_02.sh . #!/bin/sh echo &quot;=====================================================&quot; echo &quot;[예제 11-12] case-esac문을 사용하여 심리분석 프로그램&quot; echo &quot;--&quot; echo &quot;&gt; 심리 상태 입력 : (Yes/No/Y/N)&quot; read mind case $mind in Yes | YES | yes | Y | y) echo &quot;&gt; Yes을 선택하셨습니다.&quot;;; [nN]*) echo &quot;&gt; No 를 선택하셨습니다.&quot;;; *) echo &quot;&gt; 알파벳은 대/소문자 구별 없이 Y또는 N을 입력하세요.&quot;;; esac echo &quot;--&quot; echo &quot; &gt;&gt;&gt; case-esac문 심리분석 프로그램을 종료합니다.&quot; echo &quot;=====================================================&quot; exit 0 . #!/bin/sh birth_date=$1 case $birth_date in ??03??|??04??|??05??) echo &quot;봄에 태어나셨네요&quot;;; ??06??|??07??|??08??) echo &quot;여름에 태어나셨네요&quot;;; ??09??|??10??|??11??) echo &quot;가을에 태어나셨네요&quot;;; ??01??|??02??|??12??) echo &quot;겨울에 태어나셨네요&quot;;; esac . #!/bin/sh read val echo $val case $val in [0-9]*) echo &quot;number&quot;;; [^0-9]*) echo &quot;not number&quot;;; esac . #!/bin/sh case &quot;$(date +%a)&quot; in Sat|Sun) echo &quot;주말엔 일 안합니다&quot;; exit; esac . 관계 연산자 . ifandor.sh . #!/bin/sh echo &quot;===============================================================&quot; echo &quot;[예제 11-13] if~else문과 관계 연산자를 사용하여 파일 찾기 프로그램&quot; echo &quot;&quot; echo &quot;&gt; 찾고자 하는 파일 이름을 입력하세요.&quot; read file_name echo &quot;&quot; if [ -f $file_name ] &amp;&amp; [ -s $file_name ] ; then echo &quot;&gt; 찾은 파일이름: $file_name&quot; echo &quot;&gt; 찾은 파일의 내용 중 처음부터 8행의 내용은 다음과 같습니다.&quot; echo &quot;&quot; head -8 $file_name else echo &quot;&gt; 찾았던 파일이름: $file_name&quot; echo &quot;&gt; 이 파일은 존재하지 않거나 파일 크기가 0인 파일입니다.&quot; echo &quot;&quot; echo &quot; &gt;&gt;&gt; 프로그램을 종료합니다.&quot; echo &quot;===============================================================&quot; exit 0 . 반복문 . 반복문 문법구조 . for 변수 in 값1, 값2, 값2 do 반복실행할 문장들 done for 변수 in `seq 1 100` do 반복실행할 문장들 done for (( i=1; i&lt;=5; i++ )) do 반복실행할 문장들 done . for_01.sh . #!/bin/sh echo &quot;========================================================&quot; echo &quot;[예제 11-14] for문으로 1~10까지 누적합 산출 프로그램&quot; echo &quot;--&quot; sum=0 for (( cnt=1; cnt&lt;=10; cnt++ )) do sum=`expr $sum + $cnt` echo &quot;&gt; 1부터 $cnt까지 누적합 ... $sum&quot; done echo &quot;&quot; echo &quot;&gt; 1 + 2 + .... + 9 + 10 ..............[$sum]&quot; echo &quot;&gt;&gt;&gt; 프로그램을 종료합니다&quot; echo &quot;=========================================================&quot; exit 0 . for_02.sh . #!/bin/sh echo &quot;==========================================================&quot; echo &quot;[예제 11-15] 현재 디렉터리에 있는 파일 내용 출력 프로그램&quot; echo &quot;-&quot; for file_name in $(ls *.sh) do echo &quot;--&lt;$file_name&gt;-&quot; echo &quot;&gt; 파일 [$file_name]의 내용 중에서 처음부터 2행 출력&quot; head -2 $file_name done echo &quot;--&quot; echo &quot;&gt;&gt;&gt; 프로그램을 종료합니다&quot; echo &quot;===========================================================&quot; exit 0 . while 문 . 조건연산자 . -eq -neq -gt -ge -lt -le ! . while_01.sh . #!/bin/sh echo &quot;===========================================================&quot; echo &quot;[예제 11-16] while문으로 1~10까지 누적합 산출 프로그램&quot; echo &quot;--&quot; sum = 0 cnt = 1 while [ $cnt -le 10 ] do sum=`expr $sum + $cnt` echo &quot;&gt; 1부터 $cnt까지 누적합 ... $sum&quot; cnt=`expr $cnt + 1` done echo &quot;--&quot; echo &quot;&gt; 1 + 2 + 3 + ... + 9 + 10 .................[$sum]&quot; echo &quot;&gt;&gt;&gt; 프로그램을 종료합니다!&quot; echo &quot;===========================================================&quot; exit 0 . while_02.sh . #!/bin/sh echo &quot;===========================================================&quot; echo &quot;[예제 11-17] while문으로 비밀번호 일치여부 판정 프로그램&quot; echo &quot;--&quot; echo &quot;&gt; 비밀번호를 입력하세요&quot; read psword echo &quot;--&quot; while [ $psword != &quot;123456&quot; ] do echo &quot;&gt; 입력한 비밀번호 [$psword]는(은) 일치하지 않습니다...&quot; echo &quot;&gt; 다시 입력하세요. &quot; read psword done echo &quot;&quot; echo &quot;&gt; 비밀번호 [$psword]이(가) 확인되었습니다.&quot; echo &quot;&gt;&gt;&gt; 프로그램을 종료합니다.&quot; echo &quot;============================================================&quot; exit 0 . until문 . until문 문법구조 . #!/bin/sh until [조건식] do 조건식이 거짓을 경우 실행할 문장 done . while문으로 작성한 while_01.sh 파일 . while [ $cnt -le 10 ] do sum=`expr $sum + $cnt` echo &quot;&gt; 1부터 $cnt까지 누적합 ... $sum &quot; cnt = `expr $cnt + 1` done . until문으로 작성한 while_01.sh 파일 . until [ $cnt -gt 10 ] do sum=`expr $sum + $cnt` echo &quot;&gt; 1부터 $cnt까지 누적합... $sum&quot; cnt=`expr $cnt + 1` done . break, continue, exit, return문 . #!/bin/sh echo &quot;=======================================================&quot; echo &quot;[예제 11-18] break, continue, exit문 활용 프로그램&quot; echo &quot;-&quot; echo &quot;&gt;대/소문자 구별없이 제시된 알파벳을 선택하여 입력하세요.&quot; echo &quot;&gt;선택할 알파벳 [b:break/c:contitnue/e:exit] &quot; echo &quot;-&quot; while [ 1 ] do echo &quot;&gt; 알파벳을 입력 : &quot; read choice case $choice in b : B) echo &quot;&gt; 반복문을 빠져나가면서 종료됩니다. &quot; ; break;; c : C) echo &quot;&gt; continue문은 조건식으로 돌아갑니다. &quot; ; continue;; e : E) echo &quot;&gt; exit문은 프로그램을 완전히 종료합니다. &quot; ; exit 0;; *) echo &quot;&gt; 알파벳은 대/소문자 구별 없이 b, c, e만 허용합니다. &quot; continue;; esac; done echo &quot;========================================================&quot; exit 0 . 함수 . 사용자 정의 함수 정의 . 함수 이름 () { 수행하고자 하는 명령 return } . 사용자 정의 함수 호출 . #!/bin/sh ... 함수 이름 -&gt; 함수를 호출하려는 위치에서 함수 이름을 코딩하면 호출됨 ... exit 0 . userfun_01.sh . #!/bin/sh echo &quot;==============================================================&quot; echo &quot;[예제 11-19] 사용자 정의 함수에 대한 정의 및 호출 프로그램&quot; echo &quot;--&quot; echo &quot;&gt; 함수를 호출하려면 먼저 함수를 정의해야 합니다.&quot; myfun () { echo &quot;&lt; myfun 함수 &gt;&quot; echo &quot; o.사용자 정의 함수 myfun()에 대한 정의 &quot; echo &quot; o.여기는 myfun 함수의 영역입니다. &quot; echo &quot; o.myfun 함수가 호출 되었습니다. &quot; echo &quot;--&quot; } echo &quot;&gt; 사용자 정의 함수를 호출 : myfun 함수 이름 코딩 &quot; echo &quot;&quot; myfun echo &quot;&quot; echo &quot;&gt; 프로그램을 종료합니다&quot; echo &quot;==============================================================&quot; exit 0 . 파라미터와 함께 함수의 호출방식 . 함수 이름 () { 수행하고자하는 명령 return } . 사용자 정의 함수 호출과 파라미터 선언 . #!/bin/sh ... 함수 이름 $1 $2 ... -&gt; 함수를 호출할 때 파라미터도 같이 선언 ... exit 0 . userfun_02.sh . #!/bin/sh echo &quot;=======================================================&quot; echo &quot;[예제 11-20] 파라미터를 사용하여 함수를 호출하는 프로그램&quot; echo &quot;=======================================================&quot; add() { echo &quot;&lt;add 함수&gt;&quot; echo &quot;o. 두 수에 대한 덧셈 연산식을 수행하는 함수입니다.&quot; total=`expr $1 + $2` echo &quot;o.연산결과: $num1 + $num2 = $total&quot; echo &quot;o.여기까지가 add함수 영역입니다.&quot; echo &quot;-&quot; } echo &quot;&gt; 키보드로 두 수를 차례대로 입력하세요.&quot; echo &quot;&gt; 첫 번째 수 입력&quot; read num1 echo &quot;&gt; 두 번째 수 입력&quot; read num2 add $num1 $num2 echo &quot;&gt; 프로그램을 종료합니다.&quot; echo &quot;========================================================&quot; exit 0 . 문자열을 명령문으로 인식: eval . eval은 프로그램에서 문자열로 처리한 부분을 명령문으로 인식하여 명령을 수행한다. | . #!/bin/sh echo &quot;=========================================================&quot; echo &quot;[예제 11-21] 문자열을 명령문으로 인식하는 프로그램&quot; echo &quot;&quot; filename=&quot;ls /tmp&quot; echo &quot;&gt;echo : ls /tmp를 문자열로 인식&quot; echo &quot;&quot; eval $filename echo &quot;&gt; 프로그램을 종료합니다.&quot; echo &quot;=========================================================&quot; exit 0 . 출력형식 지정: printf . 출력형식을 지정하여 문자열이나 실수의 소수점 자리 수 지정, 강제 줄 바꿈 명령 등을 수행할 수 있다 | . #!/bin/sh echo &quot;=========================================================&quot; echo &quot;[예제 11-22] printf를 사용하여 출력형식 지정 프로그램&quot; echo &quot;&quot; echo &quot;&gt; 키보드로 실수를 입력하세요.&quot; read float_num echo &quot;&gt; 키보드로 문자열을 입력하세요.&quot; read input_string echo &quot;&quot; echo &quot;&gt; 실수를 5.2f 출력 형식을 지정하여 출력&quot; printf &quot;%5.2f n &quot;$float_num echo &quot;&quot; echo &quot;&gt; 문자열 출력 형식을 지정하여 출력&quot; echo &quot;1.변수에 겹따모표를 안 붙였을 때&quot; printf &quot;%s n &quot;$input_string echo &quot;=========================================================&quot; exit 0 . #!/bin/sh echo &quot;=========================================================&quot; echo &quot;[예제 11-23] set과 $로 명령어 형식 지정 프로그램&quot; echo &quot;&gt; 오늘의 날짜 출력: $(date)&quot; set $(date) echo &quot;&gt; 오늘의 년도 cnffur: $1&quot; echo &quot;&gt; 오늘의 월/일 출력 $2 $3&quot; echo &quot;&gt; 오늘의 요일 출력: $4&quot; echo &quot;&gt; 현재 시간 출력: $5&quot; echo &quot;&quot; echo &quot;&gt;&gt; 프로그램을 종료합니다.&quot; echo &quot;=========================================================&quot; exit 0 .",
            "url": "https://safenumz.github.io/blog/linux/2019/08/01/ShellScript-%EA%B8%B0%EC%B4%88_%EB%AC%B8%EB%B2%95.html",
            "relUrl": "/linux/2019/08/01/ShellScript-%EA%B8%B0%EC%B4%88_%EB%AC%B8%EB%B2%95.html",
            "date": " • Aug 1, 2019"
        }
        
    
  
    
        ,"post124": {
            "title": "[Linux] 접근권한 설정",
            "content": "그룹 권한 설정 . guest 그룹에 guest3 계정을 추가 . $ groupadd guest $ useradd -g guest guest3 . guest3 계정에 비밀번호 지정 ( 생성된 계정 확인 ) . $ passwd guest3 . guest1 계정과 guest2 계정을 홈디렉토리까지 삭제하면서 계정 삭제 ( 삭제된 계정을 확인 ) . $ userdel -r guest1 $ userdel -r guest2 . guest3 홈디렉토리에 korea 디렉토리 생성하고 접근권한 확인 . $ mkdir /home/guest3/korea $ ls -l /home/guest . guest3 계정으로 사용자 변경하고 korea 디렉토리에 temp.txt 파일 생성 ( 만일 가능하지 않다면 권한을 변경해서 파일 생성 ) . $ su - guest3 $ sudo chmod 777 /home/guest3/korea $ cd /home/guest3/korea $ cat &gt; korea/temp.txt . korea디렉토리의 소유자를 centos로 변경 . $ chown centos:centos /home/guest3/korea # user1이라는 사용자가 만들어 졌는지 확인 $ useradd user1 $ tail /etc/passwd . 그룹 관리 . $ tail /etc/group $ groupadd centosGroup # centosGroup 그룹에 guess1 사용자 생성 $ useradd -g centosGroup guess1 # centosGroup 그룹에 guess2 사용자 생성 $ useradd -g centosGroup guess2 $ passwd guest1 $ passwd guest2 $ yum install -y system-config-users # centos 그룹의 cetnos 사용자로 /home/centos/abc 소유주를 변경 $ chown centos:centos /home/centos/abc .",
            "url": "https://safenumz.github.io/blog/linux/2019/08/01/Linux-%EC%A0%91%EA%B7%BC%EA%B6%8C%ED%95%9C_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/linux/2019/08/01/Linux-%EC%A0%91%EA%B7%BC%EA%B6%8C%ED%95%9C_%EC%84%A4%EC%A0%95.html",
            "date": " • Aug 1, 2019"
        }
        
    
  
    
        ,"post125": {
            "title": "[Project] ELK Stack 활용 신문 기사 분류 웹 서비스 구축",
            "content": "",
            "url": "https://safenumz.github.io/blog/project/2019/08/01/paper.html",
            "relUrl": "/project/2019/08/01/paper.html",
            "date": " • Aug 1, 2019"
        }
        
    
  
    
        ,"post126": {
            "title": "[Spring] Spring 프레임워크",
            "content": "프레임워크 . 프레임워크는 애플리케이션들의 최소한의 공통점을 찾아 하부 구조를 제공함으로써 개발자들로 하여금 시스템의 하부 구조를 구현하는데 들어가는 노력을 절감하게 하는 것 | . 프레임워크 장점 . 비기능적인 요소들을 초기 개발 단계마다 구현해야 하는 불합리함을 극복해준다. | 기능적인(Functional) 요구사항에 집중할 수 있도록 해준다. | 디자인 패턴과 마찬가자로 반복적으로 발견되는 문제를 해결하기 위한 특화된 Solution을 제공한다. | . 프레임워크 vs 디자인 패턴 . 디자인패턴: 애플리케이션을 설계할 때 필요한 구조적인 가이드라인이 되어 줄 수는 있지만 구체적으로 구현된 기반코드를 제공하지는 않는다. | 프레임워크: 디자인 패턴과 함께 패턴이 적용된 기반 클래스 라이브러리를 제공해서 프레임워크를 사용하는 구조적인 틀과 구현코드를 함께 제공한다. | . 프레임워크 vs 클래스라이브러리 . 클래스 라이브러리: 개발자가 만든 클래스에서 직접 호출하여 사용하므로 실행의 흐름에 대한 제어를 개발자의 코드가 관장하고 있다. | 프레임워크: 프레임워크에서 개발자가 만든 클래스를 호출하여 실행의 흐름에 대한 제어를 담당한다. | . Spring 프레임워크 . 스프링이란 . 자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크 | 애플리케이션 프레임워크: 애플리케이션 전 영역을 관통하는 일관된 프로그래밍 모델과 핵심 기술을 바타응로 각 분야의 특정에 맞는 기능을 제공 | 경량급: 스프링은 단순한 개발 툴과 기본적인 개발환경으로, 필요하게 등장하던 프레임워크나 서버환경에 의존적인 부분을 제거 | 개발을 편하게 해주는: 스프링의 기본설정과 적용기술만 잘 선택하고 준비해두면, 개발할 때 스프링과 관련된 코드나 API에 대해 거의 신경 쓸 일이 없다. | . 스프링 프레임워크의 발전 . 1.x . EJB의 대안으로 소개 | IoC(DI), AOP, XML 기반의 빈 정의 | . 2.x . 스프링 시큐리티 | DI와 MVC를 Annotation 방식 설정 | . 3.x . RESTful 프레임워크 사용 | . 4.x . 웹소켓 | . 5.x . 리액티브 프로그래밍 | . 스프링 주요 프로젝트 및 라이브러리 . 모듈 설명 . spring-beans | 스프링 컨테이너를 이용해서 객체를 생성하는 기본 기능 제공 | . spring-context | 객체 생성, 라이프 사이클 처리, 스키마 확장 등의 기능을 제공 | . spring-aop | AOP 기능을 제공 | . spring-web | REST Client, 데이터 변환 처리, 서블릿 필터, 파일 업로드 지원 등 웹 개발에 필요한 기반 기능 제공 | . spring-webmvc | 스프링 기반의 MVC 프레임워크, 웹 어플리케이션을 개발하는데 필요한 Controller, View 구현을 제공 | . spring-oxm | XML과 자바 객체 간의 매핑을 처리하기 위해 API 제공 | . spring-tx | 트랜젝션 처리를 위한 추상 레이어를 제공 | . spring-jdbc | JDBC 프로그래밍을 보다 쉽게 할 수 있는 템플릿을 제공 | . spring-orm | 하이버네이터, JPA, MyBatis 등과의 연동을 지원 | . spring-jms | JMS 서버와 메시지를 쉽게 주고 받을 수 있도록 하기 위한 템플릿, 애노테이션 등을 제공 | . spring-context-support | 스케쥴링, 메일 발송, 캐시 연동, 벨로시티 등 부가 가능을 제공 | . 스프링 프레임워크 . .",
            "url": "https://safenumz.github.io/blog/spring/2019/07/01/Spring-Spring_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC.html",
            "relUrl": "/spring/2019/07/01/Spring-Spring_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC.html",
            "date": " • Jul 1, 2019"
        }
        
    
  
    
        ,"post127": {
            "title": "[Spring] DI(Dependency Injection)",
            "content": "Spring DI(Dependency Injection) . 기존 개념과 코드 . // 한국어 메시지를 출력하려면? MessageBean bean = new MessageBeanKoImpl(); bean.sayHello(&quot;홍길동&quot;); . // 한국어 메시지를 영어 메시지로 변경하려면? MessageBean bean = new MessageBeanEnImpl(); bean.sayHello(&quot;Jone&quot;); . IoC (Inversion of Control: 역행제어) . IoC(제어권의 역전)이란, 객체의 생성, 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미한다. . 컴포넌트 의존관계 결정 (component dependency resolution), 설정(configuration) 및 생명주기(lifecycle)를 해결하기 위한 디자인 패턴(Design Pattern) | . IoC 컨테이너 . 스프링 프레임워크도 객체에 대한 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있음. 즉 IoC 컨테이너 기능을 제공한다. IoC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리한다. | POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다. | 개발자들이 직접 POJO를 생성할 수 있지만 컨테이너에게 맡긴다. | . | . IoC 분류 . IoC : Inversion of Control | DI : Dependency Injection | DL : Dependency Lookup | . IoC -- DL | -- DI -- Setter Injection | -- Constructor Injection | -- Method Injection . DL과 DI . DL (Dependency Lookup) 의존성 검색 : 저장소에 저장되어 있는 Bean에 접근하기 위해 컨테이너가 제공하는 API를 이용하여 Bean을 Lookup 하는 것 | DI (Dependency Injection) 의존성 주입 : 각 클래스간의 의존관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동을 연결해주는 것 | DL 사용시 컨테이너 종속성이 증가하여, 주로 DI를 사용함 | . DI 개요 . 각 클래스간의 의존관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것을 말함 . 개발자들은 단지 빈 설정파일에서 의존관계가 필요하다는 정보를 추가하면 된다. | 객체 레퍼런스를 컨테이너로부터 주입 받아서, 실행 시에 동적으로 의존관계가 생성된다 | . DI (Dependency Injection) 장점 . 코드가 단순해진다. | 컴포넌트 간의 결합도가 제거된다. | . 관련용어 . 빈(Bean) . 스프링이 IoC 방식으로 관리하는 객체라는 뜻 | 스프링이 직접 생성과 제어를 담당하는 객체를 Bean이라고 부름 | . 빈 팩토리(BeanFactory) . 스프링의 IoC를 담당하는 핵심 컴테이너를 가리킴 | Bean을 등록, 생성, 조회, 반환하는 기능을 담당함 | 이 BeanFactory를 바로 사용하지 않고 이를 확장한 ApplicationContext를 주로 이용함 | . 애플리케이션 컨텍스트(Application Context) . BeanFactory를 확장한 IoC 컨테이너 | Bean을 등록하고 관리하는 기능은 BeanFactory와 동일하지만 스프링이 제공하는 각종 부가 서비스를 추가로 제공함 | 스프링에서는 ApplicationContext를 BeanFactory 보다 더 많이 사용함 | . 빈 설정방법 . XML 기반 설정 방식 . 스프링 1.0 | xml 파일에 요소로 빈을 정의한다. | 나 요소로 의존성을 주입한다. . | . Annotation 기반 설정 방식 . 스프링 2.5 | @Component 같은 어노테이션이 부여된 클래스를 탐색하여 DI 컨테이너에 빈을 등록한다. | . Java 기반 설정 방식 . 스피링 3.0 | 자바 클래스에 @Configuration을 메소드에 @Bean 어노테이션을 사용해 빈을 정의한다. | . 빈 설정 . 1. XML 기반 . (1) Spring Bean Configuration File 생성 . src 폴더에서 오른쪽 마우스 &gt; other &gt; Spring 선택 | 파일명: applicationContext | . (2) Spring Bean Configuration File(applicationContext.xml)에 빈 정의 . &lt;!-- applicationContext.xml --&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;!-- DI : 빈 정의 --&gt; &lt;bean id=&quot;ko&quot; class=&quot;ex1_xml1_scope.MessageBeanKoImpl&quot;&gt;&lt;/bean&gt; &lt;bean id=&quot;en&quot; class=&quot;ex1_xml1_scope.MessageBeanEnImpl&quot;&gt;&lt;/bean&gt; &lt;/beans&gt; . MainApp 클래스에서 . // 1. 스프링의 설정파일을 연결 ApplicationContext context = new ClassPathXmlApplicationContext(&quot;ex1_xml1_scope/applicationContext.xml&quot;); // 2. DI 컨테이너에서 빈 가져오기 MessageBean bean = context.getBean(&quot;ko&quot;, MessageBean.class); // 자바소스에서 new 코딩을 없애고 두 클래스간의 결합도를 낮춰서 // 한쪽 클래스 변경에 의한 새로 컴파일/복사/실행을 안 해도 될 수 있음 . [참고] 스프링 설정 파일 연결 . ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;exercise/beans.xml&quot;); ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class); ApplicationContext ctx = new FileSystemXmlApplicationContext(&quot;src/exercise/beans.xml) . [참고] BeanFactory와 ApplicationContext . . (3) 생성자 주입 - 멤버 변수가 객체일 때 . public class MemberDao { private MemberBean member; // 생성자 public MemberDAO() { } public MemberDAO(MemberBean member) { this.member = member; } } . &lt;bean id=&quot;member&quot; class=&quot;ex1_xml2_ref.MemberBean&quot;&gt;&lt;/bean&gt; &lt;bean id=&quot;doo1&quot; class=&quot;ex1_xml2_ref.MemberDAO&quot;&gt; &lt;constructor-arg ref=&quot;member&quot;&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; . 2. Annotation 기반 . (1) Component Scan . Annotation이 붙은 클래스를 탐색하여 DI 컨테이너에 자동으로 등록 | . @Component public class MemberBean { private String name; private int age; private String message; } . @Component public class MemberDAO { private MemberBean member; } . (2) Auto Wiring . DB 컨테이너가 자동으로 필요로 하는 의존 컴포넌트를 주입 | . @Component public class MemberDAO { // 필드 기반 의존성 주입 법칙 @Autowired private MemberBean member; } . (2) xml 기반 양식으로 컴포넌트 스캔 범위 설정 . applicationContext.xml | . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/context &quot; &lt;context:component-scan bese-package=&quot;ex2_annotation&quot;/&gt; &lt;/beans&gt; . 3. Java 기반 . (1) 자바 코드로빈을 설정 (Java Configuration Class) . AppConfig.java | . @Configuration @ComponentScan(&quot;ex3_javabased&quot;) public class AppConfig { @Bean MemberBean memberBean() { return new MemberBean(&quot;홍자&quot;, 33, &quot;오늘도 행복&quot;); } @Bean MemberDAO memberDAO() { return new MemberDAO(memberBean()); } } . (2) 스프링 설정 파일 연결 . MainApp.java | . public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); MemberDAO dao = context.getBean(&quot;memberDAO&quot;, MemberDAO.class); dao.insert(); } . 의존성 주입 어노테이션 . 어노테이이션 설명 . @Autowired | 스프링 제공 | . / | 생성자, 메소드, 변수 위에 모두 사용 가능하지만 주로 변수 위에 설정하여 해당 타입의 객체를 자동으로 할당 | . @Qualifier | 스프링 제공 | . / | 특정 객체의 이름으로 의존성 주입할 때 사용 | . @Resource | javax.annotation.Resource | . / | @Autowired와 @Qualifier 기능을 결합함 역할 | . @Inject | javax.inject.Inject | . / | @Autowired와 동일한 기능 | . 스프링 프레임워크에는 클래스를 분류하기 위해 @Component를 상속한 어노테이션을 제공 | . 어노테이이션 클래스 설명 . @Service | XXXServiceImpl | 비즈니스 로직을 처리하는 Service 클래스 | . @Repository | XXXDAO | 데이터베이스 연동을 처리하는 DAO 클래스 | . @Controller | XXXController | 사용자 요청을 제어하는 Controller 클래스 | . 연습 1 . . 연습 2 . .",
            "url": "https://safenumz.github.io/blog/spring/2019/07/01/Spring-DI(Dependency_Injection).html",
            "relUrl": "/spring/2019/07/01/Spring-DI(Dependency_Injection).html",
            "date": " • Jul 1, 2019"
        }
        
    
  
    
        ,"post128": {
            "title": "[MacOS] Linux ISO 파일을 USB로 굽기",
            "content": "Environment . MacOS | . Mac에서 Linux ISO 파일을 USB로 굽기 . CentOS로 테스트했지만 Ubuntu도 동일한 방법으로 가능하다. . centos7.iso 파일 다운 . 먼저 https://www.centos.org/ CentOS 홈페이지에서 centos7.iso 파일을 다운받는다. . 터미널을 열고 이미지 파일이 있는 경로 로 이동하여 iso 파일을 img 파일로 변환 . # /Home/&lt;userName&gt;/Desktop/ 경로에서 $ hdiutil convert -format UDRW -o centos7.img ~/Desktop/centos7.iso . centos7.img가 아닌 centos7.img.dmg이 생성됨, dmg 확장자 제거 . $ mv centos7.img.dmg centos.img . usb 메모리를 삽입하고 포맷 . LaunchPad &gt; 기타 &gt; 디스크 유틸리티에서 USB 메모리 선택 후 지우기 | . USB 메모리가 어떤 위치에 마운트 되어 있는지 확인 . $ diskutil list . 이미지를 USB에 덮어쓸 때 USB가 시스템에 마운트 되어 있으면 작업할 수 없음으로, unmount 명령어를 이용하여 USB를 추출 . # 여기서는 /dev/disk2에 마운트되어 있음 $ diskutil unmountDisk /dev/disk2 . USB 메모리에 이미지를 덮어씀 . sudo dd if=centos7.mg of=/dev/disk2 bs=1m .",
            "url": "https://safenumz.github.io/blog/etc/2019/07/01/MacOS-Linux_ISO_%ED%8C%8C%EC%9D%BC%EC%9D%84_USB%EB%A1%9C_%EA%B5%BD%EA%B8%B0.html",
            "relUrl": "/etc/2019/07/01/MacOS-Linux_ISO_%ED%8C%8C%EC%9D%BC%EC%9D%84_USB%EB%A1%9C_%EA%B5%BD%EA%B8%B0.html",
            "date": " • Jul 1, 2019"
        }
        
    
  
    
        ,"post129": {
            "title": "데이터 파이프라인 구축 - 데이터 수집",
            "content": "1. 데이터 파이프라인의 이해 . 컴퓨터 과학에서 파이프라인(영어: pipeline)은 한 데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 가리킴 | . 데이터 파이프라인 구성목적 . 각 팀의 데이터적 요구사항(Use Case) 에 대한 빠른 대응 지속적이고 에러가 없어야 한다. | 시스템적으로 발생하는 문제에 대해서 유연한 Scability 해야 한다. | Scale up과 Scale Down이 자유로워야 한다. | 이벤트성 데이터 부하에도 처리가 가능해야 한다. ✓ 마케팅팀 이벤트 ✓ 푸시 발송 ✓ 서비스 오픈 | 데이터 쌓이는 공간에 문제가 없어야 한다. | 수집데이터에 대한 Format에 대해서 유연성 있게 처리 해주어야 한다. | . Data Pipeline Architecture . . Data Lambda Architecture . . 2. AWS 서비스 이해 . ec2(Amazon Elastic Compute Cloud) . 인스턴스: 가상 컴퓨팅 환경 | Amazon 머신 이미지(AMI): 서버에 필요한 운영체제와 여러 소프트웨어들이 적절히 구성된 상태로 제공되는 템플릿으로 인스턴스를 쉽게 만들 수 있습니다. | 인스턴스 유형: 인스턴스를 위한 CPU, 메모리, 스토리지, 네트워킹 용량의 여러 가지 구성 제공 | 키 쌍을 사용해 인스턴스 로그인 정보 보호(AWS는 공용키를 저장하고 사용자는 개인 키를 안전한 장소에 보관하는 방식) | 인스턴스 스토어 볼륨: 임시 데이터를 저장하는 스토리지 볼륨으로 인스턴스 종료 시 삭제됨 | Amazon Elastic Block Store(Amazon EBS), 즉 Amazon EBS 볼륨을 사용해 영구 스토리지 볼륨에 데이터 저장 | 인스턴스와 Amazon EBS 볼륨 등의 리소스를 다른 물리적 장소에서 액세스할 수 있는 리전 및 가용 영역 | 보안 그룹을 사용해 인스턴스에 연결할 수 있는 프로토콜, 포트, 소스 IP 범위를 지정하는 방화벽 기능 | 탄력적 IP 주소(EIP): 동적 클라우드 컴퓨팅을 위한 고정 IPv4 주소 | 태그: 사용자가 생성하여 Amazon EC2 리소스에 할당할 수 있는 메타데이터 | AWS 클라우드에스는 논리적으로 격리되어 있지만, 원하실때 마다 고객님의 네트워크와 간편히 연결할 수 있는 가상 네트워크, Virtual Private Clouds(VPC) | . S3 . 버킷 : Amazon S3에 저장된 객체에 대한 컨테이너입니다. 모든 객체는 어떤 버킷에 포함됩니다. 쉽게 이해해서 윈도우의 폴더라고 이해를 하면된다. | 객체 : Amazon S3에 저장되는 기본 개체입니다. 객체는 객체 데이터와 메타데이터로 구성됩니다 | 키: 버킷내 객체의고유한식별자입니다.버킷내 모든 객체는 정확히 하나의 키를 갖습니다. 버킷, 키 및 버전 ID의 조합이 각 객체를 고유하게 식별하기 때문에 Amazon S3는 “버킷 + 키 + 버전”과 객체 자체 사이의 기본 데이터 맵으로 간주할 수 있습니다. | . RDS(Amazon Relational Database Service) . 클라우드에서 관계형 데이터베이스를 더욱 간편하게 설정, 운영 및 확장할 수 있음. | 하드웨어 프로비저닝, 데이터베이스 설정, 패치 및 백업과 같은 시간 소모적인 관리 작업을 자동화하면서 비용 효율적이고 크기 조정 가능한 용량을 제공합니다 | 지원 데이터베이스 엔진 Oracle | Mysql | Microsoft SQL Server | PostgreSQL | MariaDB | Aurora | . | . API Gateway . 어떤 규모에서든 개발자가 API를 생성, 게시, 유지 관리, 모니터링 및 보호할 수 있게 해주는 AWS 서비 스 | 모바일 및 웹 애플리케이션에서 AWS 서비스에 액세스할 수 있는 일관된 RESTFul 애플리케이션 프로그 래밍 인터페이스(API)를 제공합니다. | 사용자는 RESTful API를 생성, 구성, 호스팅하여 애플리케이션의 AWS 클라우드 액세스를 지원합니다. | . CloudWatch . Amazon Web Services(AWS) 리소스와 AWS에서 실시간으로 실행 중인 애플리케이션을 모니터링 | 리소스 및 애플리케이션에 대해 측정할 수 있는 변수인 지표를 수집하고 추적할 수 있습니다 | 경보는 알림을 보내거나 정의한 규칙을 기준으로 모니터링하는 리소스를 자동으로 변경합니다 | . 3. Kafka install on EC2 . Kafka Server 설치 . JDK 설치 . $ java –version $ sudo yum install -y java-1.8.0-openjdk-devel.x86_64 $ sudo /usr/sbin/alternatives --config java $ sudo /usr/sbin/alternatives --config javac $ sudo yum remove java-1.7.0-openjdk -y . kafka 다운 . # kafka 다운 $ wget http://mirror.apache-kr.org/kafka/2.3.0/kafka_2.12-2.3.0.tgz $ tar xvf kafka_2.12-2.3.0.tgz $ ln kafka_2.12-2.3.0 kafka . start zookeeper . $ cd kafka $ vi conf/server.properties $ listeners=PLAINTEXT://192.1.1.1:9092 $ ./bin/zookeeper-server-start.sh config/zookeeper.properties &amp; . start kafka broker . $ ./bin/kafka-server-start.sh config/server.properties &amp; # kafka 서버 가동 확인 $ sudo netstat -anp | egrep &quot;9092|2181&quot; . create topic . $ bin/kafka-topics.sh --create --bootstrap-server [server-ip]:9092 --replication-factor 1 --partitions 1 --topic twitter &amp; . check topic : Topic 생성확인 . $ bin/kafka-topics.sh --list --zookeeper localhost:2181 &amp; . Send some message . $ bin/kafka-console-producer.sh --broker-list [server-ip]:9092 --topic twitter . 터미널 하나 더 생성 후 접속 . start consumer . $ ./kafka/bin/kafka-console-consumer.sh --bootstrap-server [server-ip]:9092 --topic twitter --from-beginning . [참조] change topic retention bytes . $ ./bin/kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name movie --alter --add- config retention.bytes=100000000 . kafka Producer 설치 . JDK 설치 . $java –version $ sudo yum install -y java-1.8.0-openjdk-devel.x86_64 $ sudo /usr/sbin/alternatives --config java $ sudo /usr/sbin/alternatives --config javac $ sudo yum remove java-1.7.0-openjdk -y . Logstash 설치 . $ rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch $ cd /etc/yum.repos.d/ $ sudo vi logstash.repo . # logstash.repo [logstash-7.x] name=Elastic repository for 7.x packages baseurl=https://artifacts.elastic.co/packages/7.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md . $ sudo yum install logstash $ logstash --version $ vi producer_test.conf . # producer_test.conf input { twitter { consumer_key =&gt; &quot;KoxofBvIwdM9xxxxx&quot; consumer_secret =&gt; &quot;kKBOnftLZ6htxvxxxx&quot; oauth_token =&gt; &quot;81761998-2Vu19ZxxFwExxxxx&quot; oauth_token_secret =&gt; &quot;0E6eh4X0eum4NU81LXIKn6xxxx&quot; keywords =&gt; [&quot;news&quot;,&quot;game&quot;,&quot;data&quot;,&quot;아이돌&quot;,&quot;부동산&quot;] full_tweet =&gt; true } } output { stdout { codec =&gt; rubydebug } } . $ logstash -f producer_test.conf . # producer_test.conf input { { cotwitternsumer_key =&gt; &quot;KoxofBvIwdMxxxx&quot; consumer_secret =&gt; &quot;kKBOnftLZ6htxvxxxx&quot; oauth_token =&gt; &quot;81761998-2Vu19Zxxxxx&quot; oauth_token_secret =&gt; &quot;0E6eh4X0eum4NU81Lxxxxx&quot; keywords =&gt; [&quot;news&quot;,&quot;game&quot;,&quot;data&quot;,&quot;아이돌&quot;,&quot;부동산&quot;] full_tweet =&gt; true } } output { kafka { topic_id =&gt; &quot;twitter&quot; bootstrap_servers =&gt; &quot;[ec2의공인ip]:9092&quot; acks =&gt; &quot;1&quot; codec =&gt; json_lines } } . $ logstash -f producer.conf # Kafka 서버의 Start a consumer : [개인계정]-server ec2 $ kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic twitter --from-beginning . kafka consumer 설치 . # Logstash 설치 $ rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch $ cd /etc/yum.repos.d/ $ sudo vi logstash.repo . # logstash.repo [logstash-7.x] name=Elastic repository for 7.x packages baseurl=https://artifacts.elastic.co/packages/7.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md . sudo yum install logstash . $ vi consumer.conf . # consumer.conf input { kafka { bootstrap_servers =&gt; &quot;[kafka-server]:9092&quot; codec =&gt; json_lines consumer_threads =&gt; 1 group_id =&gt; &quot;twitter_log_to_es&quot; topics =&gt; &quot;twitter&quot; } } output { stdout { codec =&gt; json } } . $ logstash –f consumer.conf .",
            "url": "https://safenumz.github.io/blog/architecture/2019/07/01/%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8_%EA%B5%AC%EC%B6%95-%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%88%98%EC%A7%91.html",
            "relUrl": "/architecture/2019/07/01/%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8_%EA%B5%AC%EC%B6%95-%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%88%98%EC%A7%91.html",
            "date": " • Jul 1, 2019"
        }
        
    
  
    
        ,"post130": {
            "title": "[WEB] Bootstrap",
            "content": "Bootstrap . 웹 디자인을 편리하게 만들 목적에서 나온 프레임워크 프레임워크란? 정해진 틀에 맞춰서 완성품을 만드는 것 즉, 부트스트랩은 적은 노력으로 큰 효과의 웹 디자인을 만들 수 있는 틀이다 . 참고할 만한 사이트 . http://bootstrapk.com/ (한글판) | http://getbootstrap.com/ (영문판) | http://maczniak.github.io/bootstrap/index.html (2.2.2 버전 ) | . 추가사항 . http://bootstrapk.com &gt; 다운로드 &gt; 오른쪽 메뉴 중 &gt; 브라우저와 기기 호환 확인 | http://bootstrapk.com &gt; 다운로드 &gt; 오른쪽 메뉴 중 &gt; Third party ( 다른 라이브러리와 충돌 나는 경우 - 대표적으로 구글맵 ) | . 실습 코드 . Ex00_sample.html . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;ko&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- 위 3개의 메타 태그는 *반드시* head 태그의 처음에 와야합니다; 어떤 다른 콘텐츠들은 반드시 이 태그들 *다음에* 와야 합니다 --&gt; &lt;title&gt;부트스트랩 101 템플릿&lt;/title&gt; &lt;!-- 부트스트랩 --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- &amp;lt;!&amp;ndash; IE8 에서 HTML5 요소와 미디어 쿼리를 위한 HTML5 shim 와 Respond.js &amp;ndash;&amp;gt;--&gt; &lt;!-- &amp;lt;!&amp;ndash; WARNING: Respond.js 는 당신이 file:// 을 통해 페이지를 볼 때는 동작하지 않습니다. &amp;ndash;&amp;gt;--&gt; &lt;!-- &amp;lt;!&amp;ndash;[if lt IE 9]&gt;--&gt; &lt;!-- &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;--&gt; &lt;!-- &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;--&gt; &lt;!-- &lt;![endif]&amp;ndash;&amp;gt;--&gt; &lt;/head&gt; &lt;body&gt; &lt;nav class=&quot;navbar navbar-inverse navbar-fixed-top&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;navbar&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Project name&lt;/a&gt; &lt;/div&gt; &lt;div id=&quot;navbar&quot; class=&quot;navbar-collapse collapse&quot;&gt; &lt;form class=&quot;navbar-form navbar-right&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;Email&quot; class=&quot;form-control&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; class=&quot;form-control&quot;&gt; &lt;/div&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Sign in&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;&lt;!--/.navbar-collapse --&gt; &lt;/div&gt; &lt;/nav&gt; &lt;!-- Main jumbotron for a primary marketing message or call to action --&gt; &lt;div class=&quot;jumbotron&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;p&gt;This is a template for a simple marketing or informational website. It includes a large callout called a jumbotron and three supporting pieces of content. Use it as a starting point to create something more unique.&lt;/p&gt; &lt;p&gt;&lt;a class=&quot;btn btn-primary btn-lg&quot; href=&quot;#&quot; role=&quot;button&quot;&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;bs-docs-section&quot;&gt; &lt;h1 id=&quot;examples&quot; class=&quot;page-header&quot;&gt;예제들&lt;/h1&gt; &lt;p class=&quot;lead&quot;&gt;부트스트랩의 많은 콤포넌트를 사용한 기본 템플릿을 기반으로 하세요. 우리는 당신이 당신의 개인적인 프로젝트의 필요성에 따라 부트스트랩을 맞춤화하고 적용하기를 권장합니다.&lt;/p&gt; &lt;h3 id=&quot;examples-framework&quot;&gt;프레임워크 사용하기&lt;/h3&gt; &lt;div class=&quot;row bs-examples&quot;&gt; &lt;div class=&quot;col-xs-6 col-md-4&quot;&gt; &lt;a class=&quot;thumbnail&quot; href=&quot;../examples/starter-template/&quot;&gt; &lt;img src=&quot;../examples/screenshots/starter-template.jpg&quot; alt=&quot;Starter template example&quot;&gt; &lt;/a&gt; &lt;h4&gt;초보자 템플릿&lt;/h4&gt; &lt;p&gt;별거 아니지만 기본입니다 : 콘테이너와 함께 합쳐진 CSS 와 자바스크립트.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-6 col-md-4&quot;&gt; &lt;a class=&quot;thumbnail&quot; href=&quot;../examples/theme/&quot;&gt; &lt;img src=&quot;../examples/screenshots/theme.jpg&quot; alt=&quot;Bootstrap theme example&quot;&gt; &lt;/a&gt; &lt;h4&gt;부트스트랩 테마e&lt;/h4&gt; &lt;p&gt;Load the optional Bootstrap theme for a visually enhanced experience.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;clearfix visible-xs&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-xs-6 col-md-4&quot;&gt; &lt;a class=&quot;thumbnail&quot; href=&quot;../examples/grid/&quot;&gt; &lt;img src=&quot;../examples/screenshots/grid.jpg&quot; alt=&quot;Multiple grids example&quot;&gt; &lt;/a&gt; &lt;h4&gt;그리드&lt;/h4&gt; &lt;p&gt;4단계, 중첩 등의 그리드 레이아웃들의 몇가지 예제.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-xs-6 col-md-4&quot;&gt; &lt;a class=&quot;thumbnail&quot; href=&quot;../examples/jumbotron/&quot;&gt; &lt;img src=&quot;../examples/screenshots/jumbotron.jpg&quot; alt=&quot;Jumbotron example&quot;&gt; &lt;/a&gt; &lt;h4&gt;점보트론&lt;/h4&gt; &lt;p&gt;네비게이션 바와 약간의 기본 그리드 컬럼들과 함께 점보트론을 중심으로 만드세요.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;clearfix visible-xs&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-xs-6 col-md-4&quot;&gt; &lt;a class=&quot;thumbnail&quot; href=&quot;../examples/jumbotron-narrow/&quot;&gt; &lt;img src=&quot;../examples/screenshots/jumbotron-narrow.jpg&quot; alt=&quot;Narrow jumbotron example&quot;&gt; &lt;/a&gt; &lt;h4&gt;좁은 점보트론&lt;/h4&gt; &lt;p&gt;좁은 콘테이너와 점보트론으로 맞춤화한 페이지를 만드세요.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- jQuery (부트스트랩의 자바스크립트 플러그인을 위해 필요합니다) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 모든 컴파일된 플러그인을 포함합니다 (아래), 원하지 않는다면 필요한 각각의 파일을 포함하세요 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex01_starter_template.html . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;ko&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- 위 3개의 메타 태그는 *반드시* head 태그의 처음에 와야합니다; 어떤 다른 콘텐츠들은 반드시 이 태그들 *다음에* 와야 합니다 --&gt; &lt;title&gt;Ex01_starter-template&lt;/title&gt; &lt;!-- 부트스트랩 --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- &amp;lt;!&amp;ndash; IE8 에서 HTML5 요소와 미디어 쿼리를 위한 HTML5 shim 와 Respond.js &amp;ndash;&amp;gt;--&gt; &lt;!-- &amp;lt;!&amp;ndash; WARNING: Respond.js 는 당신이 file:// 을 통해 페이지를 볼 때는 동작하지 않습니다. &amp;ndash;&amp;gt;--&gt; &lt;!-- &amp;lt;!&amp;ndash;[if lt IE 9]&gt;--&gt; &lt;!-- &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;--&gt; &lt;!-- &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;--&gt; &lt;!-- &lt;![endif]&amp;ndash;&amp;gt;--&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- #################### --&gt; &lt;ul class=&quot;nav nav-pills&quot;&gt; &lt;li role=&quot;presentation&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;홈페이지&lt;/a&gt;&lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#&quot;&gt;포트폴리오&lt;/a&gt;&lt;/li&gt; &lt;li role=&quot;presentation&quot;&gt;&lt;a href=&quot;#&quot;&gt;메시지&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- #################### --&gt; &lt;!-- jQuery (부트스트랩의 자바스크립트 플러그인을 위해 필요합니다) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 모든 컴파일된 플러그인을 포함합니다 (아래), 원하지 않는다면 필요한 각각의 파일을 포함하세요 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex02_button.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt; 기본 샘플 확인 &lt;/title&gt; &lt;!-- 부트스트랩 --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- ............................................................................ --&gt; &lt;div class=&quot;container&quot;&gt; &lt;h4 class=&quot;text-primary&quot;&gt; 버튼 &lt;/h4&gt; &lt;button type=&quot;button&quot;&gt;클래스 선택자 적용하지 않는 경우 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn&quot;&gt;class=&quot;btn&quot; 만 적용한 경우 &lt;/button&gt; &lt;hr&gt; &lt;h4 class=&quot;text-primary&quot;&gt; button 태그 사용 &lt;/h4&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;기본 버튼 모양 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;중요한 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;긍정적 의미의 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;정보제공 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot;&gt;주의를 알리는 버튼 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot;&gt;위험을 나타내는 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-link&quot;&gt;단순 링크로 처리하는 버튼&lt;/button&gt; &lt;hr&gt; &lt;h4 class=&quot;text-primary&quot;&gt; input 태그 사용 &lt;/h4&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-default&quot; value=&quot;기본 모양 버튼 &quot;&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-primary&quot; value=&quot;중요한 버튼 &quot;&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-success&quot; value=&quot;긍정적 의미의 버튼&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-info&quot; value=&quot;정보제공 버튼&quot;&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-warning&quot; value=&quot;주의를 알리는 버튼 &quot;&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-danger&quot; value=&quot;위험을 나타내는 버튼 &quot;&gt; &lt;input type=&quot;button&quot; class=&quot;btn btn-link&quot; value=&quot;단순 링크로 처리하는 버튼 &quot;&gt; &lt;hr&gt; &lt;h4 class=&quot;text-primary&quot;&gt; a 태그 사용 &lt;/h4&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-default&quot; role=&quot;button&quot;&gt;기본 모양 버튼 &lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot; role=&quot;button&quot;&gt;중요한 버튼 &lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-success&quot; role=&quot;button&quot;&gt;긍정적 의미의 버튼 &lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-info&quot; role=&quot;button&quot;&gt;정보제공 버튼 &lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-warning&quot; role=&quot;button&quot;&gt;주의를 알리는 버튼&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-danger&quot; role=&quot;button&quot;&gt;위험을 나타내는 버튼 &lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-link&quot; role=&quot;button&quot;&gt;단순 링크로 처리하는 버튼 &lt;/a&gt; &lt;hr&gt; &lt;p&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;기본 버튼 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;기본 버튼 &lt;/button&gt; &lt;/p&gt; &lt;p&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-lg&quot;&gt;큰 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info btn-lg&quot;&gt;큰 버튼&lt;/button&gt; &lt;/p&gt; &lt;p&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-sm&quot;&gt;작은 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-info btn-sm&quot;&gt;작은 버튼&lt;/button&gt; &lt;/p&gt; &lt;p&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-xs&quot;&gt;아주 작은 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn xs&quot;&gt;아주 작은 버튼&lt;/button&gt; &lt;/p&gt; &lt;hr&gt; &lt;div&gt; &lt;button type=&quot;button&quot; class=&quot;btn-block btn-primary btn-lg&quot;&gt;화면 전체 버튼&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn-block btn-info btn-lg&quot;&gt;화면 전체 버튼&lt;/button&gt; &lt;/div&gt; &lt;hr&gt; &lt;div class=&quot;label label-primary&quot;&gt;위 예문은 부트스트랩 사이트과 양용석 저자의 &#39;부트스트랩으로 디자인하라&#39;에 정리된 내용입니다.&lt;/div&gt; &lt;div class=&quot;alert alert-success&quot;&gt;위 예문은 부트스트랩 사이트과 양용석 저자의 &#39;부트스트랩으로 디자인하라&#39;에 정리된 내용입니다.&lt;/div&gt; &lt;/div&gt; &lt;!-- ............................................................................ --&gt; &lt;!-- jQuery (부트스트랩의 자바스크립트 플러그인을 위해 필요합니다) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 모든 컴파일된 플러그인을 포함합니다 (아래), 원하지 않는다면 필요한 각각의 파일을 포함하세요 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex03_table.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt; 기본 샘플 확인 &lt;/title&gt; &lt;!-- 부트스트랩 --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style type=&quot;text/css&quot;&gt; .table tr:nth-child(even):hover {background-color: #d9edf7} /* hover로 색 변경 */ /*.table tr:nth-child(odd):hover {background-color: #ebcccc}*/ .table tr:hover {background-color: whitesmoke} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- ............................................................................ --&gt; &lt;div&gt; &lt;h2 class=&quot;text-danger&quot;&gt; 우리 스타 보기&lt;/h2&gt; &lt;!-- &lt;table class=&quot;table table-bordered table-striped table-hover&quot;&gt;--&gt; &lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;이름&lt;/th&gt; &lt;th&gt;직업&lt;/th&gt; &lt;th&gt;특징&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;203A&lt;/td&gt; &lt;td&gt;샤이니&lt;/td&gt; &lt;td&gt;가수&lt;/td&gt; &lt;td&gt; [소속]SM엔터테인먼트 [멤버]온유, 종현, 키, 최민호, 태민 [데뷔]2008년 싱글 앨범 &#39;누난 너무 예뻐 (Replay)&#39; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;141B&lt;/td&gt; &lt;td&gt;소녀시대&lt;/td&gt; &lt;td&gt;가수&lt;/td&gt; &lt;td&gt; [멤버] 태연, 윤아, 수영, 효연, 유리, 티파니 영, 써니, 서현 [소속사] SM엔터테인먼트 [데뷔]2007년 싱글 앨범 &#39;다시 만난 세계&#39; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2031&lt;/td&gt; &lt;td&gt;김수현&lt;/td&gt; &lt;td&gt;배우&lt;/td&gt; &lt;td&gt; 탤런트, 영화배우 출생 1988년 2월 16일 (만 30세) 신체 180cm, 65kg | AB형 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;007F&lt;/td&gt; &lt;td&gt;국카스텐&lt;/td&gt; &lt;td&gt;가수&lt;/td&gt; &lt;td&gt; [멤버] 하현우(보컬, 기타), 전규호(기타), 김기범(베이스), 이정길(드럼) [소속사] 인터파크 엔터테인먼트 [데뷔]2008년 싱글 앨범 &#39;Guckkasten&#39; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;!-- ............................................................................ --&gt; &lt;!-- jQuery (부트스트랩의 자바스크립트 플러그인을 위해 필요합니다) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 모든 컴파일된 플러그인을 포함합니다 (아래), 원하지 않는다면 필요한 각각의 파일을 포함하세요 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex04_grid_1.html . &lt;!-- (3) 화면을 작게 하여 반응형을 웹을 확인 --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt; 기본 샘플 확인 &lt;/title&gt; &lt;!-- 부트스트랩 --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- (2) 선을 그려 확인 --&gt; &lt;style&gt; .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 { border: 1px solid red; padding: 10px; } .row{ margin-bottom: 4px; margin-top: 4px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- ............................................................................ --&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;!-- (1) 8칸 을 가정하고 --&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;div class=&quot;col-md-1&quot;&gt; 1칸 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt;4칸&lt;/div&gt; &lt;div class=&quot;col-md-2&quot;&gt;2칸&lt;/div&gt; &lt;div class=&quot;col-md-2&quot;&gt;2칸&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-2&quot;&gt;2칸&lt;/div&gt; &lt;div class=&quot;col-md-2&quot;&gt;2칸&lt;/div&gt; &lt;div class=&quot;col-md-2&quot;&gt;2칸&lt;/div&gt; &lt;div class=&quot;col-md-2&quot;&gt;2칸&lt;/div&gt; &lt;div class=&quot;col-md-2&quot;&gt;2칸&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- ............................................................................ --&gt; &lt;!-- jQuery (부트스트랩의 자바스크립트 플러그인을 위해 필요합니다) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 모든 컴파일된 플러그인을 포함합니다 (아래), 원하지 않는다면 필요한 각각의 파일을 포함하세요 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex04_grid2.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt; 기본 샘플 확인 &lt;/title&gt; &lt;!-- 부트스트랩 --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; @import url(http://fonts.googleapis.com/earlyaccess/nanumgothic.css); header{ height: 100px; background-color: rgba(125, 211, 242,0.5); border-radius: 15px; padding: 10px; margin:10px;font-family: &#39;Nanum Gothic&#39;, sans-serif; text-align: center;} footer { text-align: center;} ul.nav { background-color:rgba(201, 201, 201,.5); padding: 10px; border-radius: 10px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- ............................................................................ --&gt; &lt;div class=&quot;container&quot;&gt; &lt;header&gt; &lt;h2&gt; 우리들의 사이트 &lt;/h2&gt; &lt;/header&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-2 col-md-push-10&quot;&gt; &lt;ul class=&quot;nav&quot;&gt; &lt;li&gt;주제 1&lt;/li&gt; &lt;li&gt;주제 2&lt;/li&gt; &lt;li&gt;주제 3&lt;/li&gt; &lt;li&gt;주제 4&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;col-md-10 col-md-pull-2&quot;&gt; &lt;h3&gt;1696년의 죽도(울릉도／다케시마) 도해금지령 &lt;/h3&gt; &lt;p&gt; 　1696년에 일본 막부는 어민들에게 울릉도에 건너가지 못하도록 명을 내렸습니다. 이를 죽도(울릉도／다케시마) 도해금지령이라고 하는데, 여기에는 독도도 포함됩니다. 　안용복이 1693년 일본에 끌려가 울릉도와 독도를 우리나라 땅이라고 주장하고부터 일본은 울릉도를 빼앗아 가기 위해 여러 가지 방법을 썼습니다. 당시 막부는 최종 결정을 내리기에 앞서 돗토리번의 영주에게 두 섬이 어느 나라에 속하는지를 물었습니다(1695년 12월). 　돗토리번의 영주는 조사해 본 결과, 조선에서 마쓰시마(독도)까지는 80~90해리, 마쓰시마(독도)에서 죽도(울릉도／다케시마)까지는 40해리, 그리고 일본 오키섬에서 마쓰시마(독도)까지는 80해리라는 사실을 알아냈습니다. 그래서 돗토리번 영주는 울릉도와 독도, 두 섬이 일본에 속한 섬이 아니라고 막부에 보고하였는데, 이러한 사실이 일본의 여러 기록에 남아 있습니다. &lt;/p&gt; &lt;h3&gt;1870년 일본 외무성의 보고서「조선국 교제시말 내탐서」&lt;/h3&gt; &lt;p&gt;1869년 12월 일본은 외무성 관리 3인을 조선에 보냈습니다. 이는 새로 들어선 일본 메이지 정부가 조선과 새로운 관계를 맺기 위해 조선에 관한 조사를 새로 할 필요를 느꼈기 때문입니다. 이때 관리들은 보고서에서 ‘죽도(울릉도／다케시마)와 마쓰시마(독도)가 조선 부속이 된 경위’를 적었습니다. 이 보고서로도 일본이 두 섬을 조선 영토로 인정하고 있었다는 것이 드러납니다. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;footer&gt; 여기는 우리 사이트 기본 정보 &lt;/footer&gt; &lt;/div&gt; &lt;!-- ............................................................................ --&gt; &lt;!-- jQuery (부트스트랩의 자바스크립트 플러그인을 위해 필요합니다) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 모든 컴파일된 플러그인을 포함합니다 (아래), 원하지 않는다면 필요한 각각의 파일을 포함하세요 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex05_form.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt; 기본 샘플 확인 &lt;/title&gt; &lt;!-- 부트스트랩 --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- ............................................................................ --&gt; &lt;div class=&quot;container&quot;&gt; &lt;h4 class=&quot;text-primary&quot;&gt; 기본적인 폼&lt;/h4&gt; &lt;form role=&quot;form&quot;&gt; &lt;label for=&quot;name&quot;&gt;이름&lt;/label&gt; &lt;input type=&quot;text&quot; id=&#39;name1&#39; placeholder=&quot;이름&quot;&gt; &lt;label for=&quot;email&quot;&gt;이메일&lt;/label&gt; &lt;input type=&quot;email&quot; id=&#39;email1&#39; placeholder=&quot;이메일&quot;&gt; &lt;button type=&quot;submit&quot; &gt; 확인&lt;/button&gt; &lt;/form&gt; &lt;hr&gt; &lt;h4 class=&quot;text-primary&quot;&gt; 부트스트랩의 폼&lt;/h4&gt; &lt;form role=&quot;form&quot; class=&quot;form-inline&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;name&quot;&gt;이름&lt;/label&gt; &lt;input class=&quot;form-control&quot; type=&quot;text&quot; id=&#39;name&#39; placeholder=&quot;이름&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;email&quot;&gt;이메일&lt;/label&gt; &lt;input class=&quot;form-control&quot; type=&quot;email&quot; id=&#39;email&#39; placeholder=&quot;이메일&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;button type=&quot;submit&quot; &gt; 확인&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;hr&gt; &lt;/div&gt; &lt;!-- ............................................................................ --&gt; &lt;!-- jQuery (부트스트랩의 자바스크립트 플러그인을 위해 필요합니다) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 모든 컴파일된 플러그인을 포함합니다 (아래), 원하지 않는다면 필요한 각각의 파일을 포함하세요 --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex04_formSample.html . &lt;!doctype html&gt; &lt;html lang=&quot;ko-kr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;부트스트랩 &lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h4 class=&quot;text-primary&quot;&gt; 부트스트랩의 폼 &lt;/h4&gt; &lt;h5&gt; input type=&quot;text&quot;&lt;/h5&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt; &lt;h5&gt; input type=&quot;password&quot;&lt;/h5&gt; &lt;input type=&quot;password&quot; class=&quot;form-control&quot;&gt; &lt;h5&gt; input type=&quot;date&quot; &lt;/h5&gt; &lt;input type=&quot;date&quot; class=&quot;form-control&quot;&gt; &lt;h5&gt;input type=&quot;month&quot;&lt;/h5&gt; &lt;input type=&quot;month&quot; class=&quot;form-control&quot;&gt; &lt;h5&gt; type=&quot;week&quot;&lt;/h5&gt; &lt;input type=&quot;week&quot; class=&quot;form-control&quot;&gt; &lt;h5&gt; textarea&lt;/h5&gt; &lt;textarea rows=&quot;5&quot; class=&quot;form-control&quot;&gt;&lt;/textarea&gt; &lt;h5&gt; input type=&quot;checkbox&quot;&lt;/h5&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; value=&quot;&quot;&gt; 여기는 체크박스가 적용되는 곳입니다. &lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;checkbox&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; value=&quot;&quot;&gt; 체크박스는 다중 선택이 가능합니다. &lt;/label&gt; &lt;/div&gt; &lt;h5&gt; input type=&quot;radio&quot;&lt;/h5&gt; &lt;div class=&quot;radio&quot;&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;optionsRadios&quot; id=&quot;optionsRadios1&quot; value=&quot;option1&quot; checked&gt; 여기는 라디오 속성이 적용되는 곳입니다. &lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;radio&quot;&gt; &lt;label&gt; &lt;input type=&quot;radio&quot; name=&quot;optionsRadios&quot; id=&quot;optionsRadios2&quot; value=&quot;option2&quot;&gt; 라디오 속성은 여러 개 중 하나를 선택할 경우 사용합니다. &lt;/label&gt; &lt;/div&gt; &lt;h5&gt; 인라인 체크 박스 label class=&quot;checkbox-inline&quot;&lt;/h5&gt; &lt;label class=&quot;checkbox-inline&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox1&quot; value=&quot;option1&quot;&gt; 1 &lt;/label&gt; &lt;label class=&quot;checkbox-inline&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox2&quot; value=&quot;option2&quot;&gt; 2 &lt;/label&gt; &lt;label class=&quot;checkbox-inline&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;inlineCheckbox3&quot; value=&quot;option3&quot;&gt; 3 &lt;/label&gt; &lt;h5&gt; 인라인 라디오 label class=&quot;radio-inline&quot;&lt;/h5&gt; &lt;label class=&quot;radio-inline&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;optionsRadios&quot; id=&quot;optionsRadios1&quot; value=&quot;option1&quot; checked&gt; r1 &lt;/label&gt; &lt;label class=&quot;radio-inline&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;optionsRadios&quot; id=&quot;optionsRadios1&quot; value=&quot;option1&quot; checked&gt; r2 &lt;/label&gt; &lt;label class=&quot;radio-inline&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;optionsRadios&quot; id=&quot;optionsRadios1&quot; value=&quot;option1&quot; checked&gt; r3 &lt;/label&gt; &lt;h5&gt; select는 기본값과 multiple 적용이 가능합니다.&lt;/h5&gt; &lt;select class=&quot;form-control&quot;&gt; &lt;option&gt;1&lt;/option&gt; &lt;option&gt;2&lt;/option&gt; &lt;option&gt;3&lt;/option&gt; &lt;option&gt;4&lt;/option&gt; &lt;option&gt;5&lt;/option&gt; &lt;/select&gt; &lt;br&gt; &lt;select multiple class=&quot;form-control&quot;&gt; &lt;option&gt;1&lt;/option&gt; &lt;option&gt;2&lt;/option&gt; &lt;option&gt;3&lt;/option&gt; &lt;option&gt;4&lt;/option&gt; &lt;option&gt;5&lt;/option&gt; &lt;/select&gt; &lt;h5&gt;폼에 텍스트를 삽입 하기 위해선 p class=&quot;form-control-static&quot; 속성을 적용한다. &lt;/h5&gt; &lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-2 col-lg-2 control-label&quot;&gt;이메일&lt;/label&gt; &lt;div class=&quot;col-sm-10 col-lg-10&quot;&gt; &lt;p class=&quot;form-control-static&quot;&gt;email@example.com&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;Password&quot; class=&quot;col-sm-2 col-lg-2 control-label&quot;&gt;비밀번호&lt;/label&gt; &lt;div class=&quot;col-sm-10 col-lg-10&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword&quot; placeholder=&quot;Password&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;h5&gt;form-control-static을 적용하지 않을 경우 텍스트가 label 부분과의 정렬이 틀어진다. &lt;/h5&gt; &lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label class=&quot;col-sm-2 col-lg-2 control-label&quot;&gt;이메일&lt;/label&gt; &lt;div class=&quot;col-sm-10 col-lg-10&quot;&gt; &lt;p&gt;email@example.com&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;h5&gt; input 부분이 disabled 상태일 때&lt;/h5&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; disabled placeholder=&quot;이 부분은 disabled 상태입니다.&quot;&gt; &lt;hr&gt; &lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot;&gt; &lt;fieldset&gt; &lt;legend&gt;기본정보 &lt;/legend&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;Name&quot; class=&quot;col-xs-2 col-lg-2 control-label&quot;&gt;이름&lt;/label&gt; &lt;div class=&quot;col-xs-10 col-lg-10&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;이름&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;email&quot; class=&quot;col-xs-2 col-lg-2 control-label&quot;&gt;이메일&lt;/label&gt; &lt;div class=&quot;col-xs-10 col-lg-10&quot;&gt; &lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;이메일&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;fieldset disabled&gt; &lt;legend&gt;부가정보 &lt;/legend&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;address&quot; class=&quot;col-xs-2 col-lg-2 control-label&quot;&gt;주소&lt;/label&gt; &lt;div class=&quot;col-xs-10 col-lg-10&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;주소&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;hr&gt; &lt;h5&gt; input 값에 다양한 메시지를 담을 수 있다. &lt;/h5&gt; &lt;div class=&quot;form-group has-success&quot;&gt; &lt;label class=&quot;control-label&quot; for=&quot;inputSuccess&quot;&gt;Input값이 성공적일(문제없을) 경우&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;inputSuccess&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group has-warning&quot;&gt; &lt;label class=&quot;control-label&quot; for=&quot;inputWarning&quot;&gt;Input 값에 문제가 있어 경고를 내보낼 경우 &lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;inputWarning&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group has-error&quot;&gt; &lt;label class=&quot;control-label&quot; for=&quot;inputError&quot;&gt;Input값에 에러가 있을 때 &lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;inputError&quot;&gt; &lt;/div&gt; &lt;hr&gt; &lt;h5&gt; input-lg, 기본값, input-sm 일 경우 크기 비교 &lt;/h5&gt; &lt;input type=&quot;text&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;input-lg&quot;&gt; &lt;br&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;기본값&quot;&gt; &lt;br&gt; &lt;input type=&quot;text&quot; class=&quot;form-control input-sm&quot; placeholder=&quot;input-sm&quot;&gt; &lt;hr&gt; &lt;h5&gt; 그리드 시스템을 이용해서 컬럼 크기 조절 &lt;/h5&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm-2 col-lg-2&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;col-sm-2 col-lg-2&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-3 col-lg-3&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;col-sm-3 col-lg-3&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4 col-lg-4&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;col-sm-4 col-lg-4&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;h5&gt; input 부분에 대한 도움말 &lt;/h5&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;핸드폰 번호&quot;&gt; &lt;span class=&quot;help-block&quot;&gt; 이 예문은 양용석 저자의 &#39;부트스트랩으로 디자인하라&#39;에서 참고하였습니다.&lt;/span&gt; &lt;div style=&quot;height:100px&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Ex06_glyphicons.html . &lt;!doctype html&gt; &lt;html lang=&quot;ko-kr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;부트스트랩 CSS&lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; .red { color: #FF0000} .blue { color: #0080FF} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;!-- glyphicons_sample 파일에서 확인하며 클래스명을 복사하는 것을 권장 --&gt; &lt;hr&gt; &lt;span class=&quot; glyphicon glyphicon-globe&quot;&gt; &lt;/span&gt; 123-4567-8912 &lt;hr&gt; &lt;div class=&quot;btn-toolbar&quot;&gt; &lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-time&quot;&gt; &lt;/span&gt; &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-tree-deciduous&quot;&gt; &lt;/span&gt; &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-volume-off&quot;&gt; &lt;/span&gt; &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-tasks&quot;&gt; &lt;/span&gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-lg&quot;&gt; &lt;span class=&quot;&quot;&gt; &lt;/span&gt; 설정 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt; &lt;span class=&quot;&quot;&gt; &lt;/span&gt; 설정 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-sm&quot;&gt; &lt;span class=&quot;&quot;&gt; &lt;/span&gt; 설정 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-xs&quot;&gt; &lt;span class=&quot;&quot;&gt; &lt;/span&gt; 설정 &lt;/button&gt; &lt;hr&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-thumbs-up&quot;&gt; &lt;/span&gt; 좋아요 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default red&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-thumbs-up&quot;&gt; &lt;/span&gt; 좋아요 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default blue&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-thumbs-up&quot;&gt; &lt;/span&gt; 좋아요 &lt;/button&gt; &lt;hr&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-lg btn-primary&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-euro&quot;&gt; &lt;/span&gt; 3,000 &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-lg btn-warning&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-question-sign&quot;&gt; &lt;/span&gt; Info &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-lg btn-danger&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-facetime-video&quot;&gt; &lt;/span&gt; video &lt;/button&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Ex06_glyphiconsSample.html . &lt;!-- 이 페이지는 http://bootstrapk.com/components/ 에 있는 내용이므로 사이트에서 확인 하는 것을 권장 합니다. --&gt; &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;부트스트랩 CSS&lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1&gt;Glyphicons : 특수문자 글꼴 &lt;/h1&gt; &lt;ul class=&quot;bs-glyphicons&quot;&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-adjust&quot;&gt;&lt;/span&gt; glyphicon glyphicon-adjust&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-align-center&quot;&gt;&lt;/span&gt; glyphicon glyphicon-align-center&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-align-justify&quot;&gt;&lt;/span&gt; glyphicon glyphicon-align-justify&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-align-left&quot;&gt;&lt;/span&gt; glyphicon glyphicon-align-left&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-align-right&quot;&gt;&lt;/span&gt; glyphicon glyphicon-align-right&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-arrow-down&quot;&gt;&lt;/span&gt; glyphicon glyphicon-arrow-down&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-arrow-left&quot;&gt;&lt;/span&gt; glyphicon glyphicon-arrow-left&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-arrow-right&quot;&gt;&lt;/span&gt; glyphicon glyphicon-arrow-right&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-arrow-up&quot;&gt;&lt;/span&gt; glyphicon glyphicon-arrow-up&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-asterisk&quot;&gt;&lt;/span&gt; glyphicon glyphicon-asterisk&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-backward&quot;&gt;&lt;/span&gt; glyphicon glyphicon-backward&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/span&gt; glyphicon glyphicon-ban-circle&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-barcode&quot;&gt;&lt;/span&gt; glyphicon glyphicon-barcode&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-bell&quot;&gt;&lt;/span&gt; glyphicon glyphicon-bell&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-bold&quot;&gt;&lt;/span&gt; glyphicon glyphicon-bold&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/span&gt; glyphicon glyphicon-book&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-bookmark&quot;&gt;&lt;/span&gt; glyphicon glyphicon-bookmark&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-briefcase&quot;&gt;&lt;/span&gt; glyphicon glyphicon-briefcase&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-bullhorn&quot;&gt;&lt;/span&gt; glyphicon glyphicon-bullhorn&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/span&gt; glyphicon glyphicon-calendar&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-camera&quot;&gt;&lt;/span&gt; glyphicon glyphicon-camera&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-certificate&quot;&gt;&lt;/span&gt; glyphicon glyphicon-certificate&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-check&quot;&gt;&lt;/span&gt; glyphicon glyphicon-check&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-chevron-down&quot;&gt;&lt;/span&gt; glyphicon glyphicon-chevron-down&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-chevron-left&quot;&gt;&lt;/span&gt; glyphicon glyphicon-chevron-left&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-chevron-right&quot;&gt;&lt;/span&gt; glyphicon glyphicon-chevron-right&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-chevron-up&quot;&gt;&lt;/span&gt; glyphicon glyphicon-chevron-up&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-circle-arrow-down&quot;&gt;&lt;/span&gt; glyphicon glyphicon-circle-arrow-down&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-circle-arrow-left&quot;&gt;&lt;/span&gt; glyphicon glyphicon-circle-arrow-left&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-circle-arrow-right&quot;&gt;&lt;/span&gt; glyphicon glyphicon-circle-arrow-right&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-circle-arrow-up&quot;&gt;&lt;/span&gt; glyphicon glyphicon-circle-arrow-up&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-cloud&quot;&gt;&lt;/span&gt; glyphicon glyphicon-cloud&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download&quot;&gt;&lt;/span&gt; glyphicon glyphicon-cloud-download&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-upload&quot;&gt;&lt;/span&gt; glyphicon glyphicon-cloud-upload&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-cog&quot;&gt;&lt;/span&gt; glyphicon glyphicon-cog&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-collapse-down&quot;&gt;&lt;/span&gt; glyphicon glyphicon-collapse-down&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-collapse-up&quot;&gt;&lt;/span&gt; glyphicon glyphicon-collapse-up&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/span&gt; glyphicon glyphicon-comment&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-compressed&quot;&gt;&lt;/span&gt; glyphicon glyphicon-compressed&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-copyright-mark&quot;&gt;&lt;/span&gt; glyphicon glyphicon-copyright-mark&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-credit-card&quot;&gt;&lt;/span&gt; glyphicon glyphicon-credit-card&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-cutlery&quot;&gt;&lt;/span&gt; glyphicon glyphicon-cutlery&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-dashboard&quot;&gt;&lt;/span&gt; glyphicon glyphicon-dashboard&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/span&gt; glyphicon glyphicon-download&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-download-alt&quot;&gt;&lt;/span&gt; glyphicon glyphicon-download-alt&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-earphone&quot;&gt;&lt;/span&gt; glyphicon glyphicon-earphone&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt; glyphicon glyphicon-edit&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-eject&quot;&gt;&lt;/span&gt; glyphicon glyphicon-eject&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-envelope&quot;&gt;&lt;/span&gt; glyphicon glyphicon-envelope&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-euro&quot;&gt;&lt;/span&gt; glyphicon glyphicon-euro&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-exclamation-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-exclamation-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-expand&quot;&gt;&lt;/span&gt; glyphicon glyphicon-expand&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-export&quot;&gt;&lt;/span&gt; glyphicon glyphicon-export&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-eye-close&quot;&gt;&lt;/span&gt; glyphicon glyphicon-eye-close&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-eye-open&quot;&gt;&lt;/span&gt; glyphicon glyphicon-eye-open&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-facetime-video&quot;&gt;&lt;/span&gt; glyphicon glyphicon-facetime-video&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-fast-backward&quot;&gt;&lt;/span&gt; glyphicon glyphicon-fast-backward&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-fast-forward&quot;&gt;&lt;/span&gt; glyphicon glyphicon-fast-forward&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-file&quot;&gt;&lt;/span&gt; glyphicon glyphicon-file&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-film&quot;&gt;&lt;/span&gt; glyphicon glyphicon-film&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-filter&quot;&gt;&lt;/span&gt; glyphicon glyphicon-filter&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-fire&quot;&gt;&lt;/span&gt; glyphicon glyphicon-fire&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-flag&quot;&gt;&lt;/span&gt; glyphicon glyphicon-flag&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-flash&quot;&gt;&lt;/span&gt; glyphicon glyphicon-flash&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-floppy-disk&quot;&gt;&lt;/span&gt; glyphicon glyphicon-floppy-disk&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-floppy-open&quot;&gt;&lt;/span&gt; glyphicon glyphicon-floppy-open&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-floppy-remove&quot;&gt;&lt;/span&gt; glyphicon glyphicon-floppy-remove&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-floppy-save&quot;&gt;&lt;/span&gt; glyphicon glyphicon-floppy-save&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-floppy-saved&quot;&gt;&lt;/span&gt; glyphicon glyphicon-floppy-saved&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-folder-close&quot;&gt;&lt;/span&gt; glyphicon glyphicon-folder-close&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-folder-open&quot;&gt;&lt;/span&gt; glyphicon glyphicon-folder-open&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-font&quot;&gt;&lt;/span&gt; glyphicon glyphicon-font&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-forward&quot;&gt;&lt;/span&gt; glyphicon glyphicon-forward&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-fullscreen&quot;&gt;&lt;/span&gt; glyphicon glyphicon-fullscreen&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-gbp&quot;&gt;&lt;/span&gt; glyphicon glyphicon-gbp&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-gift&quot;&gt;&lt;/span&gt; glyphicon glyphicon-gift&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-glass&quot;&gt;&lt;/span&gt; glyphicon glyphicon-glass&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-globe&quot;&gt;&lt;/span&gt; glyphicon glyphicon-globe&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-hand-down&quot;&gt;&lt;/span&gt; glyphicon glyphicon-hand-down&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-hand-left&quot;&gt;&lt;/span&gt; glyphicon glyphicon-hand-left&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-hand-right&quot;&gt;&lt;/span&gt; glyphicon glyphicon-hand-right&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-hand-up&quot;&gt;&lt;/span&gt; glyphicon glyphicon-hand-up&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-hd-video&quot;&gt;&lt;/span&gt; glyphicon glyphicon-hd-video&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-hdd&quot;&gt;&lt;/span&gt; glyphicon glyphicon-hdd&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-header&quot;&gt;&lt;/span&gt; glyphicon glyphicon-header&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-headphones&quot;&gt;&lt;/span&gt; glyphicon glyphicon-headphones&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt; glyphicon glyphicon-heart&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-heart-empty&quot;&gt;&lt;/span&gt; glyphicon glyphicon-heart-empty&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-home&quot;&gt;&lt;/span&gt; glyphicon glyphicon-home&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-import&quot;&gt;&lt;/span&gt; glyphicon glyphicon-import&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-inbox&quot;&gt;&lt;/span&gt; glyphicon glyphicon-inbox&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-indent-left&quot;&gt;&lt;/span&gt; glyphicon glyphicon-indent-left&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-indent-right&quot;&gt;&lt;/span&gt; glyphicon glyphicon-indent-right&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-info-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-italic&quot;&gt;&lt;/span&gt; glyphicon glyphicon-italic&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-leaf&quot;&gt;&lt;/span&gt; glyphicon glyphicon-leaf&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-link&quot;&gt;&lt;/span&gt; glyphicon glyphicon-link&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-list&quot;&gt;&lt;/span&gt; glyphicon glyphicon-list&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-list-alt&quot;&gt;&lt;/span&gt; glyphicon glyphicon-list-alt&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt; glyphicon glyphicon-lock&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-log-in&quot;&gt;&lt;/span&gt; glyphicon glyphicon-log-in&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-log-out&quot;&gt;&lt;/span&gt; glyphicon glyphicon-log-out&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-magnet&quot;&gt;&lt;/span&gt; glyphicon glyphicon-magnet&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-map-marker&quot;&gt;&lt;/span&gt; glyphicon glyphicon-map-marker&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-minus&quot;&gt;&lt;/span&gt; glyphicon glyphicon-minus&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-minus-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-minus-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-move&quot;&gt;&lt;/span&gt; glyphicon glyphicon-move&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-music&quot;&gt;&lt;/span&gt; glyphicon glyphicon-music&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-new-window&quot;&gt;&lt;/span&gt; glyphicon glyphicon-new-window&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-off&quot;&gt;&lt;/span&gt; glyphicon glyphicon-off&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-ok&quot;&gt;&lt;/span&gt; glyphicon glyphicon-ok&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-ok-circle&quot;&gt;&lt;/span&gt; glyphicon glyphicon-ok-circle&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-ok-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-ok-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-open&quot;&gt;&lt;/span&gt; glyphicon glyphicon-open&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-paperclip&quot;&gt;&lt;/span&gt; glyphicon glyphicon-paperclip&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-pause&quot;&gt;&lt;/span&gt; glyphicon glyphicon-pause&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-pencil&quot;&gt;&lt;/span&gt; glyphicon glyphicon-pencil&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-phone&quot;&gt;&lt;/span&gt; glyphicon glyphicon-phone&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-phone-alt&quot;&gt;&lt;/span&gt; glyphicon glyphicon-phone-alt&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-picture&quot;&gt;&lt;/span&gt; glyphicon glyphicon-picture&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-plane&quot;&gt;&lt;/span&gt; glyphicon glyphicon-plane&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-play&quot;&gt;&lt;/span&gt; glyphicon glyphicon-play&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-play-circle&quot;&gt;&lt;/span&gt; glyphicon glyphicon-play-circle&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/span&gt; glyphicon glyphicon-plus&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-plus-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-plus-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-print&quot;&gt;&lt;/span&gt; glyphicon glyphicon-print&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-pushpin&quot;&gt;&lt;/span&gt; glyphicon glyphicon-pushpin&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-qrcode&quot;&gt;&lt;/span&gt; glyphicon glyphicon-qrcode&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-question-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-question-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-random&quot;&gt;&lt;/span&gt; glyphicon glyphicon-random&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-record&quot;&gt;&lt;/span&gt; glyphicon glyphicon-record&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-refresh&quot;&gt;&lt;/span&gt; glyphicon glyphicon-refresh&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-registration-mark&quot;&gt;&lt;/span&gt; glyphicon glyphicon-registration-mark&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-remove&quot;&gt;&lt;/span&gt; glyphicon glyphicon-remove&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-remove-circle&quot;&gt;&lt;/span&gt; glyphicon glyphicon-remove-circle&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-remove-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-remove-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-repeat&quot;&gt;&lt;/span&gt; glyphicon glyphicon-repeat&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-resize-full&quot;&gt;&lt;/span&gt; glyphicon glyphicon-resize-full&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-resize-horizontal&quot;&gt;&lt;/span&gt; glyphicon glyphicon-resize-horizontal&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-resize-small&quot;&gt;&lt;/span&gt; glyphicon glyphicon-resize-small&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-resize-vertical&quot;&gt;&lt;/span&gt; glyphicon glyphicon-resize-vertical&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-retweet&quot;&gt;&lt;/span&gt; glyphicon glyphicon-retweet&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-road&quot;&gt;&lt;/span&gt; glyphicon glyphicon-road&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-save&quot;&gt;&lt;/span&gt; glyphicon glyphicon-save&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-saved&quot;&gt;&lt;/span&gt; glyphicon glyphicon-saved&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-screenshot&quot;&gt;&lt;/span&gt; glyphicon glyphicon-screenshot&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sd-video&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sd-video&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt; glyphicon glyphicon-search&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-send&quot;&gt;&lt;/span&gt; glyphicon glyphicon-send&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-share&quot;&gt;&lt;/span&gt; glyphicon glyphicon-share&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-share-alt&quot;&gt;&lt;/span&gt; glyphicon glyphicon-share-alt&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-shopping-cart&quot;&gt;&lt;/span&gt; glyphicon glyphicon-shopping-cart&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-signal&quot;&gt;&lt;/span&gt; glyphicon glyphicon-signal&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sort&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sort&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sort-by-alphabet&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sort-by-alphabet&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sort-by-alphabet-alt&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sort-by-alphabet-alt&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sort-by-attributes&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sort-by-attributes&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sort-by-attributes-alt&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sort-by-attributes-alt&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sort-by-order&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sort-by-order&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sort-by-order-alt&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sort-by-order-alt&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sound-5-1&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sound-5-1&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sound-6-1&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sound-6-1&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sound-7-1&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sound-7-1&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sound-dolby&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sound-dolby&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-sound-stereo&quot;&gt;&lt;/span&gt; glyphicon glyphicon-sound-stereo&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-star&quot;&gt;&lt;/span&gt; glyphicon glyphicon-star&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-star-empty&quot;&gt;&lt;/span&gt; glyphicon glyphicon-star-empty&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-stats&quot;&gt;&lt;/span&gt; glyphicon glyphicon-stats&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-step-backward&quot;&gt;&lt;/span&gt; glyphicon glyphicon-step-backward&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-step-forward&quot;&gt;&lt;/span&gt; glyphicon glyphicon-step-forward&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-stop&quot;&gt;&lt;/span&gt; glyphicon glyphicon-stop&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-subtitles&quot;&gt;&lt;/span&gt; glyphicon glyphicon-subtitles&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-tag&quot;&gt;&lt;/span&gt; glyphicon glyphicon-tag&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-tags&quot;&gt;&lt;/span&gt; glyphicon glyphicon-tags&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-tasks&quot;&gt;&lt;/span&gt; glyphicon glyphicon-tasks&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-text-height&quot;&gt;&lt;/span&gt; glyphicon glyphicon-text-height&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-text-width&quot;&gt;&lt;/span&gt; glyphicon glyphicon-text-width&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-th&quot;&gt;&lt;/span&gt; glyphicon glyphicon-th&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-th-large&quot;&gt;&lt;/span&gt; glyphicon glyphicon-th-large&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-th-list&quot;&gt;&lt;/span&gt; glyphicon glyphicon-th-list&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-thumbs-down&quot;&gt;&lt;/span&gt; glyphicon glyphicon-thumbs-down&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-thumbs-up&quot;&gt;&lt;/span&gt; glyphicon glyphicon-thumbs-up&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-time&quot;&gt;&lt;/span&gt; glyphicon glyphicon-time&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-tint&quot;&gt;&lt;/span&gt; glyphicon glyphicon-tint&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-tower&quot;&gt;&lt;/span&gt; glyphicon glyphicon-tower&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-transfer&quot;&gt;&lt;/span&gt; glyphicon glyphicon-transfer&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt; glyphicon glyphicon-trash&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-tree-conifer&quot;&gt;&lt;/span&gt; glyphicon glyphicon-tree-conifer&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-tree-deciduous&quot;&gt;&lt;/span&gt; glyphicon glyphicon-tree-deciduous&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-unchecked&quot;&gt;&lt;/span&gt; glyphicon glyphicon-unchecked&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-upload&quot;&gt;&lt;/span&gt; glyphicon glyphicon-upload&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-usd&quot;&gt;&lt;/span&gt; glyphicon glyphicon-usd&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt; glyphicon glyphicon-user&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-volume-down&quot;&gt;&lt;/span&gt; glyphicon glyphicon-volume-down&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-volume-off&quot;&gt;&lt;/span&gt; glyphicon glyphicon-volume-off&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-volume-up&quot;&gt;&lt;/span&gt; glyphicon glyphicon-volume-up&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-warning-sign&quot;&gt;&lt;/span&gt; glyphicon glyphicon-warning-sign&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-wrench&quot;&gt;&lt;/span&gt; glyphicon glyphicon-wrench&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-zoom-in&quot;&gt;&lt;/span&gt; glyphicon glyphicon-zoom-in&lt;/li&gt; &lt;li&gt;&lt;span class=&quot;glyphicon glyphicon-zoom-out&quot;&gt;&lt;/span&gt; glyphicon glyphicon-zoom-out&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Ex07_panelSample.html . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;부트스트랩&lt;/title&gt; &lt;!-- Bootstrap --&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; body { padding-bottom: 50px;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1&gt;패널 &lt;/h1&gt; &lt;h4&gt;기본 패널 &lt;/h4&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-body&quot;&gt; Basic panel example &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;h4&gt;기본 패널 상단 &lt;/h4&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;Panel heading without title&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;h4&gt;기본 패널 상단 h태그 이용 &lt;/h4&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;Panel title&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;h4&gt;기본 패널 하단 &lt;/h4&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;div class=&quot;panel-footer&quot;&gt;Panel footer&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;h4&gt;패널에 색상 적용 &lt;/h4&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;Panel title&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;div class=&quot;panel panel-success&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;Panel title&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;div class=&quot;panel panel-info&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;Panel title&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;div class=&quot;panel panel-warning&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;Panel title&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;div class=&quot;panel panel-danger&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;Panel title&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt; &lt;h4&gt;패널 내부에 테이블 적용 패널 내부에 panel-body 있는 경우 &lt;/h4&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;패널 제목 &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;번 호 &lt;/th&gt; &lt;th&gt;제 목&lt;/th&gt; &lt;th&gt;글쓴이&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;테이블 테스트 테이블 테스트 테이블 테스트 &lt;/td&gt; &lt;td&gt;홍길동&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;테이블 테스트 테이블 테스트 테이블 테스트&lt;/td&gt; &lt;td&gt;임꺽정 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;테이블 테스트 테이블 테스트 테이블 테스트&lt;/td&gt; &lt;td&gt;성춘향 &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;h4&gt;패널 내부에 테이블 적용 패널 내부에 panel-body 없는 경우 &lt;/h4&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;패널 제목 &lt;/div&gt; &lt;table class=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;번 호 &lt;/th&gt; &lt;th&gt;제 목&lt;/th&gt; &lt;th&gt;글쓴이&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;테이블 테스트 테이블 테스트 테이블 테스트 &lt;/td&gt; &lt;td&gt;홍길동&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;테이블 테스트 테이블 테스트 테이블 테스트&lt;/td&gt; &lt;td&gt;임꺽정 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;테이블 테스트 테이블 테스트 테이블 테스트&lt;/td&gt; &lt;td&gt;성춘향 &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;h4&gt;패널 내부에 리스트 그룹 적용 &lt;/h4&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;패널 제목 &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; Panel content &lt;/div&gt; &lt;ul class=&quot;list-group&quot;&gt; &lt;li class=&quot;list-group-item&quot;&gt;기본 목록 &lt;/li&gt; &lt;li class=&quot;list-group-item&quot;&gt;기본 목록 2&lt;/li&gt; &lt;li class=&quot;list-group-item&quot;&gt;기본 목록 3&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- container 끝 --&gt; &lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;../js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;!-- 이 예문은 양용석 저자의 &#39;부트스트랩으로 디자인하라&#39;에서 참조하였습니다. --&gt; &lt;/body&gt; &lt;/html&gt; . Ex07_toggletab.html . &lt;!doctype html&gt; &lt;html lang=&quot;ko-kr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;부트스트랩&lt;/title&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; h2 { margin: 20px 0} .tab-content {padding: 10px 0;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h2&gt;토글되는 탭 &lt;/h2&gt; &lt;ul class=&quot;nav nav-tabs&quot;&gt; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#home&quot; data-toggle=&quot;tab&quot;&gt;독도&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#tab1&quot; data-toggle=&quot;tab&quot;&gt;독도이름&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#tab2&quot; data-toggle=&quot;tab&quot;&gt;독도의 지형&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#tab3&quot; data-toggle=&quot;tab&quot;&gt;독도의 우편&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- 중요: 위의 a href에서 연결되는 이름과 보여줄 id값이 동일해야 한다. --&gt; &lt;div class=&quot;tab-content&quot;&gt; &lt;div class=&quot;tab-pane active&quot; id=&quot;home&quot;&gt; &lt;h3&gt;독도 이야기 1&lt;/h3&gt; 울릉도 동남쪽 87.4㎞[4] 바다 위에 있는 대한민국 영토를 총칭한다. 날씨가 좋을 때 울릉도의 고지대에서 맨눈으로 볼 수 있다. 대한민국 정부의 실효지배 지역 중 한반도 본토에서 가장 멀리 떨어져 있다.[5] 일본에서는 이 섬이 한국 영토가 아니라 시마네 현 오키 군 오키노시마 정(오키 제도)에 딸린 섬 &#39;다케시마(竹島)&#39;며 대한민국이 강제 점령하고 있으니 돌려받아야 한다고 억지스러운 주장을 한다. 이로 말미암아 벌어지는 외교 분쟁이 유명하다.[6] 반면 대한민국은 독도에 대해서 애초에 영토 분쟁은 없으며, 따라서 분쟁조차 되지 않는다는 입장을 명백히 하고 있으며 실효지배 또한 줄곧 대한민국이 하고 있다. 북한 역시 한국이 불법 점거하고 있다고 하는데 일본과는 성격이 아주 다르다. 단지 휴전선 남쪽에 있어서 불법 점거 지역에 쏙 들어가버린 것. 즉, 조국이 남북으로 갈라져서 불법 점거 영토가 된 것이지, 근본적으로는 한민족 고유 영토라는 입장은 한국과 같다. 이 때문에 일본 주장에는 남북 모두 고유 영토인데 일본은 먹으려 들지 말라며 한 목소리를 내고 있다. &lt;/div&gt; &lt;div class=&quot;tab-pane&quot; id=&quot;tab1&quot;&gt; &lt;h3&gt;독도 이야기 2&lt;/h3&gt; 한자로는 홀로 독(獨)자를 쓴다. 하지만 독도의 한자표기는 이런 한자 뜻과는 상관없이 그저 한자의 소리를 빌려 쓴 음차로, 진짜 뜻은 돌(石)의 서남 방언인 &#39;독&#39;이다[7]. &#39;돌로 된 섬&#39;이란 소리.[8] 독도는 동도(東島)와 서도(西島)라는 큰 두 암초와 크고 작은 89개 부속도서로 나뉜다. 실제로는 암초 하나로 이루어진 것이 아니라는 소리. 따지고 보면 노래 독도는 우리땅의 첫 소절인 &#39;외로운 섬 하나&#39;는 잘못된 셈이다. 물론 절해고도(絶海孤島)란 점에서 보면 &#39;외로운 섬&#39;이라는 이름도 어울리기는 하다. &lt;/div&gt; &lt;div class=&quot;tab-pane&quot; id=&quot;tab2&quot;&gt; &lt;h3&gt;독도 이야기 3&lt;/h3&gt; 많은 사람들이 잘 모르는 사실이지만 화산 분화로 형성되었고 지질학적 높이가 2,000m에 이른다. 수백만 년 전 신생대에 동해에서 분출한 화산이 오랜 세월이 지나면서 풍화되어 화산의 모습이 거의 다 사라지고, 나머지 부분은 평균 수심이 깊은 동해에 가려 잘 보이지 않는 것. 마찬가지로 화산섬인 울릉도는 여전히 화산의 모습이 희미하게나마 있다.[11] 독도의 해저 지형 &lt;/div&gt; &lt;div class=&quot;tab-pane&quot; id=&quot;tab3&quot;&gt; &lt;h3&gt;독도 이야기 4&lt;/h3&gt; 독도경비대 및 1가구가 거주하며, 일대에 천연가스, 메탄 하이드레이트 등 자원이 풍부한 것으로 알려져 있다. 행정구역상 주소는 대한민국 경상북도 울릉군 울릉읍 독도리. 시설물로는 RKDD라는 ICAO 코드를 받은 헬리콥터 포트와 # 노무현 정부 시기 만들어진 접안시설, 어민숙소 등이 있다. 접안시설은 확장될 예정이다. RK**는 대한민국의 공항을 뜻하는 국가 코드이다. 일본은 RJ**. 독도에도 우체통이 있다. 이 우체통에 투함된 우편물은 2개월에 한 번 독도경비대함이 들어올 때 집배원이 수거한다. 서울 영등포구 기준으로 독도에서 투함한 우편물이 오는 경로는 독도⇨울릉우체국⇨포항우편집중국⇨대전교환센터⇨서서울우편집중국⇨영등포우체국⇨배달이다. 우편번호는 개정 전 6자리 번호가 799-805, 2015년 개정 후 5자리 번호는 40240이다. &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex08_carousel.html . &lt;!doctype html&gt; &lt;html lang=&quot;ko-kr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;부트스트랩&lt;/title&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; h2 { margin: 20px 0} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h2&gt;캐러셀 슬라이드 효과 &lt;/h2&gt; &lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot;&gt; &lt;!-- Indicators --&gt; &lt;ol class=&quot;carousel-indicators&quot;&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- Carousel items --&gt; &lt;div class=&quot;carousel-inner&quot;&gt; &lt;div class=&quot;item active&quot;&gt; &lt;img src=&quot;images/slide1.jpg&quot; alt=&quot;First slide&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/slide2.jpg&quot; alt=&quot;Second slide&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/slide3.jpg&quot; alt=&quot;Third slide&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Controls --&gt; &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; data-slide=&quot;prev&quot;&gt; &lt;span class=&quot;icon-prev&quot;&gt;&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; data-slide=&quot;next&quot;&gt; &lt;span class=&quot;icon-next&quot;&gt;&lt;/span&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 케러셀 시작--&gt; &lt;!-- 케러셀 끝--&gt; &lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(&#39;.carousel&#39;).carousel({ interval:1000 }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex08_dropdown.html . &lt;!doctype html&gt; &lt;html lang=&quot;ko-kr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;부트스트랩&lt;/title&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;h1&gt; 드롭다운 &lt;/h1&gt; &lt;hr&gt; &lt;h4&gt; 네비게이션 바 드롭다운 &lt;/h4&gt; &lt;nav role=&quot;navigation&quot; class=&quot;navbar navbar-default&quot;&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;button class=&quot;navbar-toggle&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-ex1-collapse&quot;&gt; &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt; &lt;!-- sr-xxx : 라벨숨기는 것인데 시각장애인을 위한 screen reader에서 사용하도록 --&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;로고 &lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class=&quot;collapse navbar-collapse navbar-ex1-collapse&quot;&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li class=&quot;dropdown&quot;&gt; &lt;a class=&quot;dropdown-toggle&quot; href=&quot;#&quot; data-toggle=&quot;dropdown&quot;&gt;메뉴 1 &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt; &lt;ul class=&quot;dropdown-menu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;dropdown&quot;&gt; &lt;a class=&quot;dropdown-toggle&quot; href=&quot;#&quot; data-toggle=&quot;dropdown&quot;&gt;메뉴 2 &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt; &lt;ul class=&quot;dropdown-menu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;dropdown&quot;&gt; &lt;a class=&quot;dropdown-toggle&quot; href=&quot;#&quot; data-toggle=&quot;dropdown&quot;&gt;메뉴 3 &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt; &lt;ul class=&quot;dropdown-menu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;서브메뉴 3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/nav&gt; &lt;/div&gt; &lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex08_nav_sample.html . &lt;!doctype html&gt; &lt;html lang=&quot;ko-kr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt; 우리 가게 &lt;/title&gt; &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- 부트스트랩을 이용하여 만들고 나서도 화면을 수정하고자 css를 추가해야 한다 --&gt; &lt;style&gt; @import url(http://fonts.googleapis.com/earlyaccess/nanumgothic.css); .navbar{ background-color: #fff; border: none; padding-bottom: 10px; font-family: &#39;Nanum Gothic&#39;, sans-serif; font-weight: 300; font-size: 18px;height: 90px; text-transform: capitalize; border-bottom: 1px solid #AAAAAA} .navbar-toggle {position: relative;margin-top: 40px;top: 2px;} .navbar-nav { padding-right: 10px;margin-top: 20px; background-color: #fff} .navbar-nav li { margin:0 20px; } #carousel-example-generic { margin-top: 50px; width: 100%; hegiht: 450px; } #carousel-example-generic img { margin-left: 300px; width: 600px; height: 400px; } &lt;/style&gt; &lt;/head&gt; &lt;div&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;!-- nav bar 부분 --&gt; &lt;div class=&quot;container&quot;&gt; &lt;nav class=&quot;navbar navbar-default navbar-fixed-top&quot; role=&quot;navigation&quot; id=&quot;navbar-scroll&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-1-collapse&quot;&gt; &lt;/button&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;&lt;img src=&quot;images/logo.png&quot; alt=&quot;9PixelStudio&quot;&gt; &lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class=&quot;collapse navbar-collapse navbar-right navbar-1-collapse&quot;&gt; &lt;ul class=&quot;nav navbar-nav&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 우리가게 소개 &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 주력상품 &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 소소한 이야기 &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 찾아오시는 길 &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/nav&gt; &lt;/div&gt; &lt;!-- // nav bar 부분 끝 --&gt; &lt;!-- // 케러셀 부분 시작 --&gt; &lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot;&gt; &lt;!-- Indicators --&gt; &lt;ol class=&quot;carousel-indicators&quot;&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt; &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- Carousel items --&gt; &lt;div class=&quot;carousel-inner&quot;&gt; &lt;div class=&quot;item active&quot;&gt; &lt;img src=&quot;images/slide1.jpg&quot; alt=&quot;First slide&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/slide2.jpg&quot; alt=&quot;Second slide&quot;&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;images/slide3.jpg&quot; alt=&quot;Third slide&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Controls --&gt; &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; data-slide=&quot;prev&quot;&gt; &lt;span class=&quot;icon-prev&quot;&gt;&lt;/span&gt; &lt;/a&gt; &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; data-slide=&quot;next&quot;&gt; &lt;span class=&quot;icon-next&quot;&gt;&lt;/span&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- // 케러셀 부분 끝 --&gt; &lt;!-- // 썸네일 이미지 추가 --&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-3 col-xs-6&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;images/slide1.jpg&quot; alt=&quot;&quot; class=&quot;img-circle&quot; /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;col-md-3 col-xs-6&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;images/slide2.jpg&quot; alt=&quot;&quot; class=&quot;img-circle&quot; /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;col-md-3 col-xs-6&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;images/slide3.jpg&quot; alt=&quot;&quot; class=&quot;img-circle&quot; /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;col-md-3 col-xs-6&quot;&gt; &lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&gt; &lt;img src=&quot;images/logo.png&quot; alt=&quot;&quot; class=&quot;img-circle&quot; /&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Ex99_googlemap.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot;&gt; &lt;meta charset=&quot;euc-kr&quot;&gt; &lt;title&gt;구글맵 API 활용하기&lt;/title&gt; &lt;script src=&quot;https://maps.googleapis.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt; &lt;script&gt; function initialize() { /* 구글 지도에서 목적지를 찾고 오른쪽 마우스에서 &#39;이곳이 궁금한가요?&#39;에서 좌표값을 구한다 */ var Y_point = 37.486678; // Y 좌표 var X_point = 127.020709; // X 좌표 var zoomLevel = 17; // 첫 로딩시 보일 지도의 확대 레벨 var markerTitle = &quot;목적지&quot;; // 현재 위치 마커에 마우스를 올렸을때 나타나는 이름 var markerMaxWidth = 300; // 마커를 클릭했을때 나타나는 말풍선의 최대 크기 var myLatlng = new google.maps.LatLng(Y_point, X_point); var mapOptions = { zoom: zoomLevel, center: myLatlng, mapTypeId: google.maps.MapTypeId.ROADMAP } var map = new google.maps.Map(document.getElementById(&#39;map_view&#39;), mapOptions); var marker = new google.maps.Marker({ position: myLatlng, map: map, title: markerTitle }); var infowindow = new google.maps.InfoWindow( { content: &#39;여기&#39;, maxWidth: markerMaxWidth } ); google.maps.event.addListener(marker, &#39;click&#39;, function() { infowindow.open(map, marker); }); } &lt;/script&gt; &lt;/head&gt; &lt;body onload=&quot;initialize()&quot;&gt; &lt;div id=&quot;map_view&quot; style=&quot;width:500px; height:300px;&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2019/06/30/bootstrap.html",
            "relUrl": "/web/2019/06/30/bootstrap.html",
            "date": " • Jun 30, 2019"
        }
        
    
  
    
        ,"post131": {
            "title": "[Mesos] Mesos build",
            "content": "Environment . CentOS 7 | . Mesos build . 바이너리 파일 다운 후 압축 풀기 . $ wget $ tar xvzf mesos $ ln -s mesos mesos . essential development tools과 other Mesos dependencies 설치 . $ sudo yum groupinstall -y &quot;Development Tools&quot; $ sudo yum install -y maven python-devel zlib-devel libcurl-devel openssl-devel cyrus-sasl-devel cyrus-sasl-md5 apr-devel subversion-devel apr-util-devel . Buiding Mesos . $ cd mesos $ mkdir build $ ./bootstrap $ cd build $ ../configure $ make . # Run test suite. $ make check # Install (Optional). $ make install . # Change into build directory. $ cd build # Start mesos master (Ensure work directory exists and has proper permissions). $ sudo mesos/build/bin/mesos-master.sh --ip=secondnode.hadoop.kr --work_dir=/var/lib/mesos # Start mesos slave. $ sudo mesos/build/bin/mesos-slave.sh --master=secondnode.hadoop.kr:5050 --work_dir=/var/lib/mesos # Visit the mesos web page. $ http://127.0.0.1:5050 # Run C++ framework (Exits after successfully running some tasks.). $ ./src/test-framework --master=127.0.0.1:5050 # Run Java framework (Exits after successfully running some tasks.). $ ./src/examples/java/test-framework 127.0.0.1:5050 # Run Python framework (Exits after successfully running some tasks.). $ ./src/examples/python/test-framework 127.0.0.1:5050 .",
            "url": "https://safenumz.github.io/blog/architecture/2019/06/24/Mesos_build.html",
            "relUrl": "/architecture/2019/06/24/Mesos_build.html",
            "date": " • Jun 24, 2019"
        }
        
    
  
    
        ,"post132": {
            "title": "[Spark] Spark 튜닝",
            "content": "Environment . r4.xlarge (4 CPU / 30GB 메모리) * 1 - Cloudera Manager용 서버 | r4.4xlarge (16 CPU / 120GB 메모리) * 3 - data node용 호스트 서버 | . 1. YARN configuration 설정 . yarn.nodemanager.resource.memory-mb : 서버에서 컨테이너에 할당할 수 있는 물리적 메모리 총량을 의미합니다. 서버(120GB)에서 시스템 프로세스를 위한 여유분(1GB)을 남겨두고 119GB의 용량으로 설정합니다. | yarn.nodemanager.resource.cpu-vcores : 컨테이너에 할당할 수 있는 가상 코어 수입니다. 이는 Spark executor에서의 task, 즉 이용하는 core의 수와 의미하는 바가 같습니다. 한 서버에서 사용할 수 있는 코어는 16개의 CPU중 시스템을 위한 한 개의 CPU를 제외하고 15로 설정합니다. | yarn.scheduler.maximum-allocation-mb : 한 컨테이너에 최대로 요청할 수 있는 메모리 값을 의미합니다. 119GB의 용량을 앞에서 할당해 주었으므로 119GB로 설정합니다. | yarn.scheduler.minimum-allocation-mb : 한 컨테이너에서 요청할 수 있는 메모리의 최솟값, 최소 단위입니다. default값인 1GB로 설정하여 둡니다. | . 2. Hive configuration 설정 . spark.executor.cores = number of CPUs on a worker node | spark.executor.instances = number of worker nodes on a cluster | spark.executor.memory = max memory available on a worker node - overheads | spark.default.parallelism = 2 * number of CPUs in total on worker nodes | . . spark.executor.cores : 한 Spark 실행기에서 사용하는 코어의 수입니다. 많은 수의 코어를 사용하면 여러 개의 task에서 하나의 JVM에 데이터를 공유할 수 있도록 만들어줍니다. 하지만 너무 많은 수의 코어가 있을 경우 HDFS I/O의 성능이 떨어져 속도가 저하되는 문제가 발생합니다. 통상적으로 하나의 executor당 5개의 코어를 사용할 때 효율이 가장 좋다고 합니다. 값은 5로 설정하여 줍니다. | spark.executor.instances : 애플리케이션 당 실행할 수 있는 실행기의 수를 의미합니다. 우리는 16 CPU를 가진 3대의 서버를 이용하므로 48개의 코어가 존재하고, 각각이 시스템(3개의 r4.4xlarge worker server)을 위한 한 개의 코어를 사용한다고 가정할 때 사용할 수 있는 코어는 45개입니다. 하나의 executor당 5개의 코어(spark.executor.cores)를 사용하므로 애플리케이션 당 실행할 수 있는 실행기는 45/5=9로 설정하여 줍니다. | spark.executor.memory, spark.yarn.executor.memoryOverhead : Spark 실행기의 JAVA 최대 메모리 힙 크기를 의미합니다. 앞에서 우리는 총 9개의 실행기, 한 서버에서 평균적으로 3개의 실행기를 실행합니다. 앞에서 우리가 사용하는 메모리의 크기는 119GB, 3개의 실행기를 사용하기 위해서는 하나의 실행기 당 119/3으로 대략 39GB의 메모리를 할당하여 줍니다. 이 때, 할당된 메모리의 0.07%가 메모리 오버헤드를 위한 메모리 영역으로 할당된다고 하여, 39*0.07=2.8GB가 memoryOverhead로 잡히게 되고, 남은 약 36GB가 executor.memory로 할당되도록 합니다. | .",
            "url": "https://safenumz.github.io/blog/architecture/2019/06/22/Spark_%ED%8A%9C%EB%8B%9D.html",
            "relUrl": "/architecture/2019/06/22/Spark_%ED%8A%9C%EB%8B%9D.html",
            "date": " • Jun 22, 2019"
        }
        
    
  
    
        ,"post133": {
            "title": "[Spark] Spark Dynamic Allocation",
            "content": "Environment . CentOS 7 | Hadoop 2.7.3 | Spark 2.4.0 | . Spark Dynamic Allocation . yarn-site.xml . &lt;!-- yarn-site.xml --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms&lt;/name&gt; &lt;value&gt;30000&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle,timeline_collector,spark_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.timeline_collector.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.yarn.server.timelineservice.collector.PerNodeTimelineCollectorsAuxService&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.spark_shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.spark.network.yarn.YarnShuffleService&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt; &lt;value&gt;4&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; . spark-default.conf . # spark-default.conf spark.shuffle.service.enabled true spark.dynamicAllocation.enabled true spark.dynamicAllocation.schedulerBacklogTimeout 3s spark.dynamicAllocation.sustainedSchedulerBacklogTimeout 3s .",
            "url": "https://safenumz.github.io/blog/architecture/2019/06/20/Spark_Dynamic_Allocation.html",
            "relUrl": "/architecture/2019/06/20/Spark_Dynamic_Allocation.html",
            "date": " • Jun 20, 2019"
        }
        
    
  
    
        ,"post134": {
            "title": "[WEB] Servlet",
            "content": "JSP 설치 및 개념 . 1. 기본적인 웹 . 웹브라우저에서 URL 주소(ex. www.daum.net)를 입력하면 웹 서버에 해당 페이지를 요청한다. | 웹 서버에서는 해당 파일을 웹 브라우저에 전송한다. | 웹 브라우저는 응답받은 파일들을 화면에 실행한다. | . 2. 웹 서버 프로그램 . 웹 - 웹서버 - 어플리케이션 서버 - DB . 웹 서버 . 웹 브라우저의 요청을 받아 결과를 다시 웹 브라우저에 전송하는 역할 (정적 페이지 HTML, 이미지 파일, CSS, JavaScript 파일) | ex) Apache | . 어플리케이션 서버 . 로그인과 게시글 보기와 같이 DB의 데이터를 처리하고 그 결과를 전달 | ex) tomcat, jboss, resin 등 | . 3. 이클립스와 톰캣 연동 . Tomcat 다운 받기 . http://tomcat.apache.org | 현재(2019.06) Tomcat 9 버전 | Core &gt; zip 파일을 다운로드 | 다운받은 파일 압축 풀기 | . 환경변수 지정 . 내컴퓨터 &gt; 오른쪽 마우스 &gt; 설정 | 환경변수 추가 변수명: TOMCAT_HOME | 변수값: 실제로 설치된 톰캣 경로 | . | . 이클립스에서 연동 . 이클립스 아래 영역의 세번째 탭 선택 후 &quot;New Server&quot; 선택 | Apache 아래에서 다운받은 톰캣의 버전을 선택 후 | 새로 열린 다이알로그에서 “Browser”를 눌러 톰캣 설치된 디렉토리를 찾는다. | 이클립스 왼쪽 영역 &quot;Servers&quot;라고 생긴다. | . 4. 서블릿 (Servlet) . 자바 언어로 웹 개발을 위해 만든 표준 | 자바 코드를 작성하고 컴파일해서 클래스 파일을 실행 | 화면을 조금만 변경하고자 해도 코드를 수정하고 컴파일 반복 | 서블릿을 보완하기 위해 스크립트 방식의 표준 JSP 등장 | JSP 표준이 서블릿 표준에 의존하기에 JSP를 이해하기 위해 서블릿에 대한 이해 필요 | . servlet 파일 생성 . 새 프로젝트 Dynamic Web Project에서 | src 폴더에서 오른쪽 마우스 버튼 New -&gt; Servlet 파일 | . 클래스명을 FirstServlet, 패키지명을 temp라 한다면 . package temp; import java.io.IOException; public class FirstServlet extends HttpServlet ( protected void doGet(HttpServletRequest request, HTTpServletResponse response) { } protected void doPost(HttpServletRequest request, HttpServletResponse response) { } ) . 컴파일을 위해 servlet-api.jar 파일 필요 . 탐색기에서 톰캣이 설치된 폴더를 중심으로 lib에 servlet-api.jar 파일을 복사 | 실제 자바 경로 Java jre7 lib ext 에 추가 (또는 이클립스에서 프로젝트의 Web Content/WEB-INF/lib에 추가) | . [참고] . 서블릿 클래스를 선언하는 부분 위에 @WebServlet이 생성된 경우, web.xml에 설정하지 않음 | . web.xml에서 설정 확인 . 프로젝트의 Web Content/WEB-INF/web.xml | . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app xmlns:&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt; &lt;display-name&gt;First&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;description&gt;&lt;/description&gt; &lt;display-name&gt;FirstServlet&lt;/display-name&gt; &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;temp.FirstServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/FirstServlet&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; . 코드 추가하기 . FirstServlet 클래스 안에 doGet() 메소드 안에 코드 추가 | . public class FirstServlet extends HttpServlet { protected void doGet (HttpServletRequest request, HttpServletResponse response) { response.setContentType(&quot;text/html;charset=euc-kr&quot;); PrintWriter out = response.getWriter(); out.println(&quot;&lt;HTML&gt;&quot;); out.println(&quot;&lt;HEAD&gt;&lt;TITLE&gt;서블릿&lt;/TITLE&gt;&lt;/HEAD&gt;&quot;); out.println(&quot;&lt;BODY&gt;&quot;); out.println(&quot;&lt;H1&gt;서블릿의 기본입니다.&lt;/H1&gt;&quot;); out.println(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;); out.close(); } } . 실행 . 이클립스에서 실행: ctrl + F11 . 내장브라우저보다는 IE나 크롬 실행을 권장 | [IE 선택] 이클립스 메뉴 &gt; Window &gt; Web browser &gt; Internet Explorer 선택 | . 웹서버를 구동후 웹브라우저의 URL 경로 입력 . http://localhost:8888/First/FirstServlet | http://서버IP:서버port/프로젝트명/서블릿클래스별칭 | .",
            "url": "https://safenumz.github.io/blog/web/2019/06/19/Servlet.html",
            "relUrl": "/web/2019/06/19/Servlet.html",
            "date": " • Jun 19, 2019"
        }
        
    
  
    
        ,"post135": {
            "title": "[WEB] JSP 폼",
            "content": "JSP 폼 .",
            "url": "https://safenumz.github.io/blog/web/2019/06/17/JSP_%ED%8F%BC.html",
            "relUrl": "/web/2019/06/17/JSP_%ED%8F%BC.html",
            "date": " • Jun 17, 2019"
        }
        
    
  
    
        ,"post136": {
            "title": "[WEB] JSP 쿠기와 세션",
            "content": "JSP 쿠기와 세션 . 쿠키란 . 웹 브라우저가 보관하는 데이터 | 웹 브라우저는 웹 서버에 요청(request)할 때 쿠키도 같이 전송 | 쿠기는 웹브라우저와 웹서버에서 모두 생성가능 웹서버에서 : JSP의 Cookie 클래스 | 웹브라우저에서 JavaScript의 Cookie 객체 | . | . (1) 쿠키 (Cookie) : 동작 . 쿠키의 구성 . 이름(name) : 각각의 쿠키를 구별하는 이름 | 값(value) : 해당 이름에 저장할 데이터 | 유효기간 : 쿠기가 얼마나 지속할지 | 도메인(domain) : 쿠키를 전송할 도메인 | 경로 (path) : 쿠키를 전송할 요청 경로 | . 쿠키의 생성 . Cookie cookie = new Cookie(“이름”, “값”); | . 쿠키의 저장 . 쿠키는 응답(response)을 통해 전달 | response.addCookie(쿠키객체); | . 쿠키값 읽기 . Cookie[] cookies = request.getCookies() | . 쿠키 제공 메소드 . 쿠키 클래스가 제공하는 메소드 . 메서드 설명 . String getName() | 쿠키의 이름을 얻음 | . String getValue() | 쿠키의 값을 얻음 | . String getValue(String name) | 쿠키의 값을 지정 | . void setDomain(String pattern) | 이 쿠키가 전송될 서버의 도메인을 지정 | . String getDomain() | 쿠키의 도메인을 얻음 | . void setPath(String path) | 쿠키를 전송할 경로(디렉토리)를 지정 | . String getPath() | 쿠키의 전송 경로를 얻음 | . void setMaxAge(Int expire) | 쿠키의 유효기간을 초 단위로 지정 (0을 지정하면 쿠키 제거됨) | . int getMaxAge() | 쿠키의 유효 시간을 얻음 | . 쿠키 보안 . 도메인 . 쿠키를 생성한 사이트 외에 다른 사이트로 연결할 때는 쿠키를 전송하지 않는다. | . SetCookie.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;html&gt; &lt;head&gt;&lt;title&gt;쿠키&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;b&gt;Simple Cookie Example&lt;/b&gt;&lt;hr&gt; &lt;% // 1. Cookie 객체 생성 Cookie c = new Cookie(&quot;yourId&quot;, &quot;xxxxx&quot;); // 2. 속성 부여(선택) // 1시간 유효 c.setMaxAge(1*60*60); // 3. 클라이언트에 쿠키 전송 response.addCookie(c); %&gt; &lt;br&gt;&lt;a href=&quot;01_GetCookie.jsp&quot;&gt; 쿠키검색 &lt;/a&gt; &lt;/body&gt;&lt;/html&gt; . GetCookie.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;html&gt; &lt;head&gt;&lt;title&gt;쿠키&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;Cookie 정보 알아내기&lt;/h1&gt; &lt;h4&gt;다음은 클라이언트 브라우저의 쿠키에서 얻어온 값 : &lt;/h4&gt;&lt;br&gt;&lt;br&gt; &lt;% // 1. 클라이언트로부터 Cookie를 얻어옴 Cookie[] c = request.getCookies(); // 2. 쿠키 이름 중에 &quot;yourid&quot;가 있다면 그 쿠키의 값을 출력 for (int i = 0; c != null &amp;&amp; i &lt; c.length; i++) { if ((c[i].getName()).equals(&quot;yourId&quot;)) { out.write(c[i].getValue() + &quot;님 접속중&quot;); } } %&gt; &lt;br&gt;&lt;a href=&quot;01_ChangeCookie.jsp&quot;&gt; 쿠키값 변경 &lt;/a&gt;&lt;br/&gt; &lt;br&gt;&lt;a href=&quot;01_RemoveCookie.jsp&quot;&gt; 쿠키제거 &lt;/a&gt; &lt;/body&gt;&lt;/html&gt; . RemovieCokie.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;html&gt; &lt;head&gt;&lt;title&gt;쿠키&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;b&gt;Simple Cookie Example&lt;/b&gt;&lt;hr&gt; &lt;% // 1. 해당하는 쿠키가 있다면 그 이름으로 새 쿠키를 만들고 유효시간을 0으로 지정하고 전송 // 새 쿠키를 만들고 유효시간을 0으로 지정하고 전송 Cookie c = new Cookie(&quot;yourId&quot;, &quot;&quot;); c.setMaxAge(0); response.addCookie(c); %&gt; &lt;br&gt;&lt;a href=&quot;01_GetCookie.jsp&quot;&gt; 쿠키검색 &lt;/a&gt; &lt;/body&gt;&lt;/html&gt; . SetCookie.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;html&gt; &lt;head&gt;&lt;title&gt;쿠키&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;b&gt;Simple Cookie Example&lt;/b&gt;&lt;hr&gt; &lt;% // 1. Cookie 객체 생성 Cookie c = new Cookie(&quot;yourId&quot;, &quot;cluster&quot;); // 2. 속성 부여(선택) // 1시간 유효 c.setMaxAge(1*60*60); // 3. 클라이언트에 쿠키 전송 response.addCookie(c); %&gt; &lt;br&gt;&lt;a href=&quot;01_GetCookie.jsp&quot;&gt; 쿠키검색 &lt;/a&gt; &lt;/body&gt;&lt;/html&gt; . LoginForm . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; 로그인창 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h3&gt;로그인 확인하기 &lt;/h3&gt; &lt;%--비밀번호가 있으면 method가 무조건 post 방식으로 바꿔야 함--%&gt; &lt;form action=&quot;02_LoginService.jsp&quot; method=&quot;get&quot;&gt; 사용자: &lt;input name=&#39;User&#39; type=&#39;text&#39;&gt;&lt;br/&gt; 비밀번호: &lt;input name=&#39;Pass&#39; type=&#39;password&#39;&gt;&lt;br/&gt; &lt;input type=&#39;submit&#39; value=&#39;login&#39;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; 로그인확인 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;% // 이전화면 폼에서 넘겨받는 값 String user = request.getParameter(&quot;User&quot;); String pass = request.getParameter(&quot;Pass&quot;); // 실제로는 DB에서 가져와야하는 값 String saveUser = &quot;silvina&quot;; String savePass = &quot;1234&quot;; // user, password가 같을 때 로그인 성공, 그렇지 않으면 로그인 실패 if( ( user.equals(saveUser) ) &amp;&amp; ( pass.equals(savePass) ) ){ //############# // 1. 쿠키생성 // 2. 쿠키속성 지정 ( 선택 ) // 3. 응답으로 쿠키전송 %&gt; &lt;h2&gt; &lt;%= user %&gt;님, 성공적으로 로그인하셨슴다...&lt;/h2&gt; &lt;p&gt; &lt;a href=&quot;02_MainPage.jsp&quot;&gt; 들어가기 &lt;/a&gt; &lt;% } else { %&gt; &lt;h2&gt; 로그인에 실패했슴다...&lt;/h2&gt; &lt;p&gt; &lt;a href=&quot;02_LoginForm.jsp&quot;&gt; 되돌아가기 &lt;/a&gt; &lt;% } %&gt; &lt;/body&gt; &lt;/html&gt; . MainPage.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; 우리 페이지 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;% String user = null; //########## // 1. 요청을 통해 전송된 쿠키들을 얻어오기 // 2. 내가 지정한 이름의 쿠키를 찾기 // 3. 해당하는 그 쿠키의 값을 얻어와 user 변수에 저장 if (user == null) { response.sendRedirect(&quot;02_LoginForm.jsp&quot;); user = request.getParameter(&quot;user&quot;); } %&gt; &lt;h2&gt; 이 페이지는 로그인을 하셔야만 볼 수 있는 페이지 입니다 &lt;/h2&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;%= user %&gt;님, 로그인 중입니다. &lt;/body&gt; &lt;/html&gt; . 세션 . 세션의 유효기간 . 일정 시간이 지나면 세션은 자동 종료 (WEB-INF / web.xml에서 지정가능) | . GetCookie.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;html&gt; &lt;head&gt;&lt;title&gt;쿠키&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h1&gt;Cookie 정보 알아내기&lt;/h1&gt; &lt;% // 1. 클라이언트로부터 Cookie를 얻어옴 Cookie all[]=request.getCookies(); // 2. 얻어온 쿠키의 이름과 값을 출력 for(int i=0; all !=null &amp;&amp; i&lt;all.length;i++){ out.println((i+1)+&quot;--&gt;&quot;+all[i].getName()+ &quot;:&quot; +all[i].getValue()+&quot;&lt;br&gt;&quot;); } %&gt; &lt;/body&gt;&lt;/html&gt; . LoginForm.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; 로그인창 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h3&gt;로그인 확인하기 &lt;/h3&gt; &lt;form action=&quot;LoginService.jsp&quot; method=&quot;get&quot;&gt; 사용자: &lt;input name=&#39;User&#39; type=&#39;text&#39;&gt;&lt;br/&gt; 비밀번호: &lt;input name=&#39;Pass&#39; type=&#39;password&#39;&gt;&lt;br/&gt; &lt;input type=&#39;submit&#39; value=&#39;login&#39;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . LoginService.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; 로그인확인 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;% // 실제로는 DB에서 가져와야하는 값 String saveUser = &quot;silvina&quot;; String savePass = &quot;1234&quot;; // 이전화면 폼에서 넘겨받는 값 String user = request.getParameter(&quot;User&quot;); String pass = request.getParameter(&quot;Pass&quot;); // user, password가 같을 때 로그인 성공, 그렇지 않으면 로그인 실패 if( ( user.equals(saveUser) ) &amp;&amp; ( pass.equals(savePass) ) ){ // #2. 세션에 &quot;id&quot;라는 이름에 변수 user 값을 저장 session.setAttribute(&quot;id&quot;, user); // #1. 로그인 성공하면 바로 MainPage.jsp를 요청 response.sendRedirect(&quot;MainPage.jsp&quot;); } else { // #1. 로그인에 실패하면 바로 LoginForm.jsp을 요청 response.sendRedirect(&quot;LoginForm.jsp&quot;); } %&gt; &lt;/body&gt; &lt;/html&gt; . MainPage.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;% //# 1.&quot;id&quot;로 저장된 세션값을 얻어온다. //# 2. 값이 null이라면 LoginForm.jsp로 페이지 이동 //# 3. null이 아니라면 String 형변환하여 변수에 지정 Object obj = session.getAttribute(&quot;id&quot;); if (obj == null) { response.sendRedirect(&quot;LoginForm.jsp&quot;); return; } String user = (String) obj; %&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt; 우리 페이지 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; 이 페이지는 로그인을 하셔야만 볼 수 있는 페이지 입니다 &lt;/h2&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;%= user %&gt;님, 로그인 중입니다. &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2019/06/17/JSP_%EC%BF%A0%ED%82%A4%EC%99%80_%EC%84%B8%EC%85%98.html",
            "relUrl": "/web/2019/06/17/JSP_%EC%BF%A0%ED%82%A4%EC%99%80_%EC%84%B8%EC%85%98.html",
            "date": " • Jun 17, 2019"
        }
        
    
  
    
        ,"post137": {
            "title": "[WEB] JSP 자바빈즈",
            "content": "자바빈즈 (JavaBean) . 데이터를 표현하는 것을 목적으로 하는 자바 클래스 | . &lt;%@ page lang=&quot;java contentType=&quot;text/html&quot;; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2019/06/17/JSP_%EC%9E%90%EB%B0%94%EB%B9%88%EC%A6%88.html",
            "relUrl": "/web/2019/06/17/JSP_%EC%9E%90%EB%B0%94%EB%B9%88%EC%A6%88.html",
            "date": " • Jun 17, 2019"
        }
        
    
  
    
        ,"post138": {
            "title": "[WEB] JSP Object",
            "content": "JSP가 제공하는 기본객체 . request : 클라이언트의 요청 정보를 저장한다. | response : 응답 정보를 저장한다. | pageContext : JSP 페이지에 대한 정보를 저장한다. | session : HTTP 세션 정보를 저장한다. | . request . 서버로 보낼 때 | . requestinfo.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt; 서버 정보 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;%-- request 객체의 역할 (1) 서버의 정보를 얻어오기 --%&gt; 요청정보 프로토콜 = &lt;%= request.getProtocol() %&gt; &lt;br&gt; 요청정보 전송방식 = &lt;%= request.getMethod() %&gt; &lt;br&gt; 요청 URI = &lt;%= request.getRequestURI() %&gt; &lt;br&gt; 컨텍스트 경로 = &lt;%= request.getContextPath() %&gt; &lt;br&gt; 서버이름 = &lt;%= request.getServerName() %&gt; &lt;br&gt; 서버포트 = &lt;%= request.getServerPort() %&gt; &lt;br&gt; &lt;/body&gt; &lt;/html&gt; . requestForm.jsp . &lt;%@ page contentType = &quot;text/html; charset=utf-8&quot; %&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;&lt;title&gt;폼 생성&lt;/title&gt;&lt;/head&gt; &lt;body&gt; 폼에 데이터를 입력한 후 &#39;전송&#39; 버튼을 클릭하세요. &lt;%--submit 버튼을 누르면 jsp 파일을 연다 사용자가 볼 수 없도록 post 형식으로 연다--%&gt; &lt;form action=&quot;02_requestParameter.jsp&quot; method=&quot;post&quot;&gt; &lt;%-- 서버측에서 읽어들일 수 있는 것은 name--%&gt; 이름: &lt;input type=&quot;text&quot; name=&quot;name&quot; size=&quot;10&quot;&gt; &lt;br&gt; 주소: &lt;input type=&quot;text&quot; name=&quot;address&quot; size=&quot;30&quot;&gt; &lt;br&gt; 좋아하는 동물: &lt;input type=&quot;checkbox&quot; name=&quot;pet&quot; value=&quot;dog&quot;&gt;강아지 &lt;input type=&quot;checkbox&quot; name=&quot;pet&quot; value=&quot;cat&quot;&gt;고양이 &lt;input type=&quot;checkbox&quot; name=&quot;pet&quot; value=&quot;pig&quot;&gt;돼지 &lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;전송&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . requestParameter.jsp . &lt;%@ page contentType=&quot;text/html; charset=utf-8&quot; %&gt; &lt;%@ page import=&quot;java.util.Enumeration&quot; %&gt; &lt;%@ page import=&quot;java.util.Map&quot; %&gt; &lt;% // 0. 한글 처리 request.setCharacterEncoding(&quot;utf-8&quot;); // 1. 폼의 입력값을 얻어오기 %&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;&lt;title&gt;요청 파라미터 출력&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;h5&gt;이전 화면에서 사용자의 입력값을 출력&lt;/h5&gt; &lt;%--3. 얻어온 입력값을 출력--%&gt; &lt;h5&gt; 방법 1 &lt;/h5&gt; &lt;h5&gt; 방법 2 &lt;/h5&gt; &lt;h5&gt; 방법 3 &lt;/h5&gt; &lt;/body&gt; &lt;/html&gt; . response . 클라이언트에게 보낼 때 | . responseFirst.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt; 첫번째 페이지 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;hr&gt;&lt;hr&gt; &lt;!-- 메인 내용 시작 --&gt; &lt;div id=&quot;content&quot;&gt; &lt;div class=&quot;location&quot;&gt; &lt;h3&gt;&lt;img src=&quot;imgs/tit_0103.gif&quot; alt=&quot;한 &amp; #183 일간 울릉도쟁계와 우리의 독도 영유권 확인&quot; /&gt;&lt;/h3&gt; &lt;p&gt; &lt;strong&gt; 일본의 독도 인식&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;content_view&quot;&gt; &lt;div class=&quot;cont_box&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;h4&gt;&lt;img src=&quot;imgs/txt_0301.gif&quot; alt=&quot;가. 17세기 한 &amp; #183 일 양국 정부간 교섭(울릉도쟁계) 과정을 통해 울릉도와 그 부속섬 독도가 우리나라 영토임이 확인되었습니다.&quot; /&gt;&lt;/h4&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li&gt;17세기 일본 돗토리번(鳥取藩)의 오야(大谷) 및 무라카와(村川) 양가는 조선 영토인 울릉도에서 불법 어로행위를 하다가 1693년 울릉도에서 &lt;a href=&quot;#&quot; onclick=&quot;goto_page(&#39;0020105&#39;)&quot;&gt;&lt;strong&gt;안용복&lt;/strong&gt;&lt;/a&gt;을 비롯한 조선인들과 만나게 되었습니다. &lt;/li&gt; &lt;li&gt;양가는 일본 정부(에도 막부)에 조선인들의 울릉도 도해(渡海)를 금지해달라고 청원하였고, 막부가 &lt;span class=&quot;let02&quot;&gt;쓰시마번(對馬藩)에&lt;/span&gt; 조선 정부와의 교섭을 지시함에 따라 양국간 교섭이 개시되는데, 이를 ‘울릉도쟁계’라 합니다.&lt;/li&gt; &lt;li&gt;에도 막부는 1695년 12월 25일 돗토리번에 대한 조회를 통해 “울릉도(죽도)와 독도(송도) 모두 돗토리번에 속하지 않는다”는 사실을 확인한 후(&lt;a href=&quot;#&quot; onclick=&quot;goto_page(&#39;0020104&#39;)&quot;&gt;&lt;strong&gt;「돗토리번 답변서」&lt;/strong&gt;&lt;/a&gt;), 1696년 1월 28일 일본인들의 울릉도 방면 도해를 금지하도록 지시하였습니다. &lt;/li&gt; &lt;li&gt;이로써 한&amp;#183;일 양국간 분쟁은 마무리되었고, 울릉도쟁계 과정에서 &lt;span class=&quot;let02&quot;&gt;울릉도와 독도가 우리나라 영토임이 확인되었습니다.&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;&lt;img src=&quot;imgs/txt_0302.gif&quot; alt=&quot;나. 1905년 시마네현 고시에 의한 독도 편입 시도 이전까지 일본 정부는 독도가 자국 영토가 아니라는 인식을 유지하고 있었으며, 이는 1877년『태정관지령』을 비롯한 일본 정부의 공식 문서를 통해 확인됩니다.&quot; /&gt;&lt;/h4&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li&gt;한 &amp;#183; 일간 ‘울릉도쟁계’를 통해 독도가 한국 영토임이 확인된 이래, 근대 메이지 정부에 이르기까지 일본 정부는 독도가 자국 영토가 아니라는 인식을 유지하고 있었습니다. &lt;/li&gt; &lt;li&gt;이는 1905년 시마네현 고시에 의한 일본의 독도 편입 시도 이전까지 독도가 일본 영토라고 기록한 일본 정부의 문헌이 없고, 오히려 일본 정부의 공식 문서들이 독도가 일본의 영토가 아니라고 명백히 기록하고 있는 사실을 통해 잘 알 수 있습니다.&lt;/li&gt; &lt;li&gt;대표적으로, 1877년 메이지 시대 일본의 최고행정기관이었던 태정관(太政官)은 에도 막부와 조선 정부간 교섭(울릉도쟁계) 결과 울릉도와 독도가 일본 소속이 아님이 확인되었다고 판단하고, &lt;span class=&quot;let02&quot;&gt;“죽도(울릉도) 외 일도(一嶋: 독도)는 일&lt;/span&gt;본과 관계가 없다는 것을 명심할 것을 내무성에 지시하였습니다. &lt;a href=&quot;#&quot; onclick=&quot;goto_page(&#39;0020107&#39;)&quot;&gt;&lt;strong&gt;(『태정관지령』)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;내무성이 태정관에 질의할 때 첨부하였던 지도인「기죽도약도(磯竹島略圖, 기죽도는 울릉도의 옛 일본 명칭)」에 죽도(울릉도)와 함께 송도(독도)가 그려져 있는 점 등에서 위에서 언급된 ‘죽도 외 일도(一嶋)’의 일도(一嶋)가 독도임은 명백합니다.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;center&quot;&gt; &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;imgs/img_06.gif&quot; alt=&quot;태정관지령&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;imgs/img_07.gif&quot; alt=&quot;기죽도약도&quot; /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 메인 내용 끝 --&gt; &lt;hr&gt;&lt;hr&gt; &lt;!-- 링크걸기 --&gt; &lt;!-- &lt;a href=&quot;04_responseSecond.jsp&quot;&gt;다음페이지&lt;/a&gt; --&gt; &lt;!-- ####### 리다이렉트 페이지 이동 --&gt; &lt;/body&gt; &lt;/html&gt; . responseSecond.jsp . &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=EUC-KR&quot;&gt; &lt;title&gt; 두번째 페이지 &lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;content_view&quot;&gt; &lt;div class=&quot;cont_box&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;h4&gt;&lt;img src=&quot;imgs/txt_0101.gif&quot; alt=&quot;독도에 대한 정부의 기본입장&quot; /&gt;&lt;/h4&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li&gt;독도는 역사적, 지리적, 국제법적으로 명백한 우리 고유의 영토입니다. 독도에 대한 영유권 분쟁은 존재하지 않으며, 독도는 외교 교섭이나 사법적 해결의 대상이 될 수 없습니다.&lt;/li&gt; &lt;li&gt;우리 정부는 독도에 대한 확고한 영토주권을 행사하고 있습니다. 우리 정부는 독도에 대한 어떠한 도발에도 단호하고 엄중하게 대응하고 있으며, 앞으로도 지속적으로 독도에 대한 우리의 주권을 수호해 나가겠습니다.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;center&quot;&gt; &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;imgs/img_01.gif&quot; alt=&quot;동해에서 바라보는 독도 전경&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;imgs/img_02.gif&quot; alt=&quot;독도의 불 전경&quot; /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2019/06/17/JSP_Objects.html",
            "relUrl": "/web/2019/06/17/JSP_Objects.html",
            "date": " • Jun 17, 2019"
        }
        
    
  
    
        ,"post139": {
            "title": "[Hadoop] Hadoop 기본 설정",
            "content": "Environment . CentOS 7 | Hadoop 2.7.3 | . core-site.xml . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://hd4.cluster.kr:8020/&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;io.file.buffer.size&lt;/name&gt; &lt;value&gt;131072&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.proxyuser.hadoop.groups&lt;/name&gt; &lt;value&gt;*&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.proxyuser.hadoop.hosts&lt;/name&gt; &lt;value&gt;*&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.proxyuser.hive2.hosts&lt;/name&gt; &lt;value&gt;*&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.proxyuser.hive2.groups&lt;/name&gt; &lt;value&gt;*&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; . hdfs-site.xml . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.http-address&lt;/name&gt; &lt;value&gt;hd4.cluster.kr:50070&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt; &lt;value&gt;hd5.cluster.kr:50090&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.http-address&lt;/name&gt; &lt;value&gt;0.0.0.0:50010&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:///data/name1,file:///data/name2&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:///data/data&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.checkpoint.dir&lt;/name&gt; &lt;value&gt;file:///data/namesecondary&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.safemode.threshold.pct&lt;/name&gt; &lt;value&gt;0&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.permissions&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; . yar-site.xml . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;hd5.cluster.kr&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt; &lt;value&gt;/data/nm&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle,spark_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services.spark_shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.spark.network.yarn.YarnShuffleService&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.scheduler.fair.preemption&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.application.classpath&lt;/name&gt; &lt;value&gt;/home/a/spark/yarn/spark-2.4.0-yarn-shuffle.jar&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt; &lt;value&gt;6&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; . mappred-site.xml . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; &lt;value&gt;hd4.cluster.kr:10020&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;hd4.cluster.kr:19888&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; .",
            "url": "https://safenumz.github.io/blog/architecture/2019/06/16/Hadoop_%EA%B8%B0%EB%B3%B8_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/architecture/2019/06/16/Hadoop_%EA%B8%B0%EB%B3%B8_%EC%84%A4%EC%A0%95.html",
            "date": " • Jun 16, 2019"
        }
        
    
  
    
        ,"post140": {
            "title": "[nvidia-smi] CentOS에서 nvidia-smi 설치",
            "content": "Environment . CentOS 7 | Nvidia-smi 390.59 | . 관련 라이브러리 설치 . $ yum update $ yum install kernel-devel kernel-headers gcc make . $ yum -y install kernel-devel-$(uname -r) kernel-header-$(uname -r) gcc make . nouveau 을 활성화시키면 충돌가능성이 있기에 blacklist해준다. . $ vi /etc/modprobe.d/blacklist-nouveau.conf # add to the end (create new if it does not exist) blacklist nouveau options nouveau modeset=0 $ dracut --force . $ echo &#39;blacklist nouveau&#39; &gt;&gt; /etc/modprobe.d/blacklist.conf $ dracut /boot/initramfs-$(uname -r).img $(uname -r) --force $ reboot . CentOS Nvidia-smi 설치 . NVIDIA-Linux-x86_64-390.59.run 다운로드 . $ wget http://kr.download.nvidia.com/XFree86/Linux-x86_64/390.59/NVIDIA-Linux-x86_64-390.59.run . 설치 . $ bash NVIDIA-Linux-x86_64-390.59.run $ nvidia-smi .",
            "url": "https://safenumz.github.io/blog/architecture/2019/06/16/CentOS_Nvidia_smi_%EC%84%A4%EC%B9%98.html",
            "relUrl": "/architecture/2019/06/16/CentOS_Nvidia_smi_%EC%84%A4%EC%B9%98.html",
            "date": " • Jun 16, 2019"
        }
        
    
  
    
        ,"post141": {
            "title": "[Trouble tomcat] JSP를 통해 Oracle에 접속시 Tomcat 에러",
            "content": "Environment . MacOS Mojave 10.14.5 | Intelli | Tomcat 9.0.20 | . Trouble . Intellij에서 JSP를 통해 Oracle에 접속시 Tomcat 관련한 에러가 뜰 때 | . Shooting . Tomcat이 설치된 경로 lib에 오라클 jdbc 관련 jar파일 ojdbc6.jar를 넣어준다. | MacOS 기준 Tomcat 설치경로 예시&gt; /usr/local/apache-tomcat-9.0.20/lib | . $ sudo cp ojdbc6.jar /usr/local/apache-tomcat-9.0.20/lib/ojdbc6.jar .",
            "url": "https://safenumz.github.io/blog/trouble/2019/06/14/JSP%EB%A5%BC_%ED%86%B5%ED%95%B4_Oracle_%EC%A0%91%EC%86%8D%EC%8B%9C_Tomcat_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/06/14/JSP%EB%A5%BC_%ED%86%B5%ED%95%B4_Oracle_%EC%A0%91%EC%86%8D%EC%8B%9C_Tomcat_%EC%97%90%EB%9F%AC.html",
            "date": " • Jun 14, 2019"
        }
        
    
  
    
        ,"post142": {
            "title": "[Hadoop] Hadoop eco system 종류",
            "content": "출처: https://blrunner.tistory.com/99 . 코디네이터 . Zookeeper(http://zookeeper.apache.org) . 분산 환경에서 서버 간의 상호 조정이 필요한 다양한 서비스를 제공하는 시스템으로, 크게 다음과 같은 네 가지 역할을 수행합니다. 첫째, 하나의 서버에만 서비스가 집중되지 않게 서비스를 알맞게 분산해 동시에 처리하게 해줍니다. 둘째, 하나의 서버에서 처리한 결과를 다른 서버와도 동기화해서 데이터의 안정성을 보장합니다. 셋째, 운영(active) 서버에 문제가 발생해서 서비스를 제공할 수 없을 경우, 다른 대기 중인 서버를 운영 서버로 바꿔서 서비스가 중지 없이 제공되게 합니다. 넷째, 분산 환경을 구성하는 서버의 환경설정을 통합적으로 관리합니다. . 리소스 관리 . YARN(http://hadoop.apache.org) . 얀(YARN)은 데이터 처리 작업을 실행하기 위한 클러스터 자원(CPU, 메모리, 디스크등)과 스케쥴링을 위한 프레임워크입니다. 기존 하둡의 데이터 처리 프레임워크인 맵리듀스의 단점을 극복하기 위해서 시작된 프로젝트이며, 하둡2.0부터 이용이 가능합니다. 맵리듀스, 하이브, 임팔라, 타조, 스파크 등 다양한 애플리케이션들은 얀에서 리소스를 할당받아서, 작업을 실행하게 됩니다. 얀에 대한 자세한 설명은 http://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/index.html을 참고하시기 바랍니다. . Mesos(http://mesos.apache.org) . 메소스(Mesos)는 클라우드 인프라스트럭처 및 컴퓨팅 엔진의 다양한 자원(CPU, 메모리, 디스크)을 통합적으로 관리할 수 있도록 만든 자원 관리 프로젝트입니다. 메소스는 2009년 버클리 대학에서 Nexus 라는 이름으로 시작된 프로젝트이며, 2011년 메소스라는 이름으로 변경됐으며, 현재는 아파치 탑레벨 프로젝트로 진행중이며, 페이스북, 에어비엔비, 트위터, 이베이 등 다양한 글로벌 기업들이 메소스로 클러스터 자원을 관리하고 있습니다. 메소스는 클러스터링 환경에서 동적으로 자원을 할당하고 격리해주는 매커니즘을 제공하며, 이를 통해 분산 환경에서 작업 실행을 최적화시킬 수 있습니다. 1만대 이상의 노드에도 대응이 가능하며, 웹 기반의 UI, 자바, C++, 파이썬 API를 제공합니다. 하둡, 스파크(Spark), 스톰(Storm), 엘라스틱 서치(Elastic Search), 카산드라(Cassandra), 젠킨스(Jenkins) 등 다양한 애플리케이션을 메소스에서 실행할 수 있습니다. . 데이터 저장 . HBase(http://hbase.apache.org) . H베이스(HBase)는 HDFS 기반의 칼럼 기반 데이터베이스입니다. 구글의 빅테이블(BigTable) 논문을 기반으로 개발됐습니다. 실시간 랜덤 조회 및 업데이트가 가능하며, 각 프로세스는 개인의 데이터를 비동기적으로 업데이트할 수 있습니다. 단, 맵리듀스는 일괄 처리 방식으로 수행됩니다. 트위터, 야후!, 어도비 같은 해외 업체에서 사용하고 있으며, 국내에서는 2012년 네이버가 모바일 메신저인 라인에 HBase를 적용한 시스템 아키텍처를 발표했습니다. . Kudu(http://getkudu.io) . 쿠두(Kudu)는 컬럼 기반의 스토리지로서, 특정 컬럼에 대한 데이터 읽기를 고속화할 수 있습니다. 물론 기존에도 HDFS에서도 파케이(Parquet), RC, ORC와 같은 파일 포맷을 사용하면 컬럼 기반으로 데이터를 저장할 수 있지만, HDFS 자체가 온라인 데이터 처리에 적합하지 않다는 약점이 있었습니다. 그리고 HDFS 기반으로 온라인 처리가 가능한 H베이스의 경우, 데이터 분석 처리가 느리다는 단점이 있었습니다. 쿠두는 이러한 문제점들을 보완하여 개발한 컬럼 기반 스토리지이며, 데이터의 발생부터 분석까지의 시간을 단축시킬 수 있습니다. 클라우데라에서 시작된 프로젝트이며, 2015년말 아파치 재단의 인큐베이션 프로젝트로 선정됐습니다. . 데이터 수집 . Chukwa(http://chukwa.apache.org) . 척와(Chuckwa)는 분산 환경에서 생성되는 데이터를 HDFS에 안정적으로 저장하는 플랫폼입니다. 분산된 각 서버에서 에이전트(agent)를 실행하고, 콜렉터(collector)가 에이전트로부터 데이터를 받아 HDFS에 저장합니다. 콜렉터는 100개의 에이전트당 하나씩 구동되며, 데이터 중복 제거 등의 작업은 맵리듀스로 처리합니다. 야후!에서 개발했으며, 아파치 오픈소스 프로젝트로 공개돼 있습니다. . Flume(http://flume.apache.org) . 플럼(Flume)은 척와처럼 분산된 서버에 에이전트가 설치되고, 에이전트로부터 데이터를 전달받는 콜랙터로 구성됩니다. 차이점은 전체 데이터의 흐름을 관리하는 마스터 서버가 있어서 데이터를 어디서 수집하고, 어떤 방식으로 전송하고, 어디에 저장할지를 동적으로 변경할 수 있습니다. 클라우데라에서 개발했으며, 아파치 오픈소스 프로젝트로 공개돼 있습니다. . Scribe(https://github.com/facebook/scribe) . 페이스북에서 개발한 데이터 수집 플랫폼이며, Chukwa와는 다르게 데이터를 중앙 집중 서버로 전송하는 방식입니다. 최종 데이터는 HDFS 외에 다양한 저장소를 활용할 수 있으며, 설치와 구성이 쉽게 다양한 프로그램 언어를 지원합니다. HDFS에 저장하려면 JNI(Java Native Interface)를 이용해야 합니다. . Sqoop(http://sqoop.apache.org) . 스쿱(Sqoop)은 대용량 데이터 전송 솔루션이며, 2012년 4월에 아파치의 최상위 프로젝트로 승격됐습니다. Sqoop은 HDFS, RDBMS, DW, NoSQL 등 다양한 저장소에 대용량 데이터를 신속하게 전송하는 방법을 제공합니다. 오라클, MS-SQL, DB2 등과 같은 상용 RDBMS와 MySQL, 포스트그레스큐엘(PostgreSQL)과 같은 오픈소스 RDBMS 등을 지원합니다. . Hiho(https://github.com/sonalgoyal/hiho) . 스쿱과 같은 대용량 데이터 전송 솔루션이며, 현재 깃헙(GitHub)에 공개돼 있습니다. 하둡에서 데이터를 가져오기 위한 SQL을 지정할 수 있으며, JDBC 인터페이스를 지원합니다. 현재는 오라클과 MySQL의 데이터 전송만 지원합니다. . Kafka(http://kafka.apache.org) . 카프카(Kafka)는 데이터 스트림을 실시간으로 관리하기 위한 분산 메세징 시스템입니다. 2011년 링크드인에서 자사의 대용량 이벤트처리를 위해 개발됐으며, 2012년 아파치 탑레벨 프로젝트가 됐습니다. 발행(publish)-구독(subscribe) 모델로 구성되어 있으며, 데이터 손실을 막기 위하여 디스크에 데이터를 저장합니다. 파티셔닝을 지원하기 때문에 다수의 카프카 서버에서 메세지를 분산 처리할 수 있으며, 시스템 안정성을 위하여 로드밸런싱과 내고장성(Fault Tolerant)를 보장합니다. 다수의 글로벌 기업들이 카프카를 사용하고 있으며, 그중 링크드인은 하루에 1조1천억건 이상의 메세지를 카프카에서 처리하고 있습니다. . 데이터 처리 . Pig(http://pig.apache.org) . 피그(Pig)는 야후에서 개발됐으나 현재는 아파치 프로젝트에 속한 프로젝트로서, 복잡한 맵리듀스 프로그래밍을 대체할 피그 라틴(Pig Latin)이라는 자체 언어를 제공합니다. 맵리듀스 API를 매우 단순화한 형태이고 SQL과 유사한 형태로 설계됐습니다. SQL과 유사하기만 할 뿐, 기존 SQL 지식을 활용하기가 어려운 편입니다. . Mahout(http://mahout.apache.org) . 머하웃(Mahout)은 하둡 기반으로 데이터 마이닝 알고리즘을 구현한 오픈소스 프로젝트입니다. 현재 분류(classification), 클러스터링(clustering), 추천 및 협업 필터링(Recommenders/collaborative filtering), 패턴 마이닝(Pattern Mining), 회귀 분석(Regression), 차원 리덕션(Dimension reduction), 진화 알고리즘(Evolutionary Algorithms) 등 중요 알고리즘을 지원합니다. Mahout을 그대로 사용할 수도 있지만 각 비즈니스 환경에 맞게 최적화해서 사용하는 경우가 많습니다. . Spark(http://spark.apache.org) . 스파크(Spark)는 인메모리 기반의 범용 데이터 처리 플랫폼입니다. 배치 처리, 머신러닝, SQL 질의 처리, 스트리밍 데이터 처리, 그래프 라이브러리 처리와 같은 다양한 작업을 수용할 수 있도록 설계되어 있습니다. 2009년 버클리 대학의 AMPLab에서 시작됐으며, 2013년 아파치 재단의 인큐베이션 프로젝트로 채택된 후, 2014년에 탑레벨 프로젝트로 승격됐습니다. 현재 가장 빠르게 성장하고 있는 오픈소스 프로젝트 중의 하나이며, 사용자와 공헌자가 급격하게 증가하고 있습니다. . Impala(http://impala.io) . 임팔라(Impala)는 클라우데라에서 개발한 하둡 기반의 분산 쿼리 엔진입니다. 맵리듀스를 사용하지 않고, C++로 개발한 인메모리 엔진을 사용해 빠른 성능을 보여줍니다. 임팔라는 데이터 조회를 위한 인터페이스로 HiveQL을 사용하며, 수초 내에 SQL 질의 결과를 확인할 수 있습니다. 2015년말 아파치 재단의 인큐베이션 프로젝트로 채택됐습니다. . Presto(https://prestodb.io) . 프레스토(Presto)는 페이스북이 개발한 대화형 질의를 처리하기 위한 분산 쿼리 엔진입니다. 메모리 기반으로 데이터를 처리하며, 다양한 데이터 저장소에 저장된 데이터를 SQL로 처리할 수 있습니다. 특정 질의 경우 하이브 대비 10배 정도 빠른 성능을 보여주며, 현재 오픈소스로 개발이 진행되고 있습니다. . Hive(http://hive.apache.org) . 하이브(Hive)는 하둡 기반의 데이터웨어하우징용 솔루션입니다. 페이스북에서 개발했으며, 오픈소스로 공개되며 주목받은 기술입니다. SQL과 매우 유사한 HiveQL이라는 쿼리 언어를 제공합니다. 그래서 자바를 모르는 데이터 분석가들도 쉽게 하둡 데이터를 분석할 수 있게 도와줍니다. HiveQL은 내부적으로 맵리듀스 잡으로 변환되어 실행됩니다. . Tajo(http://tajo.apache.org) . 타조(Tajo)는 고려대학교 박사 과정 학생들이 주도해서 개발한 하둡 기반의 데이터 웨어하우스 시스템입니다. 2013년 아파치 재단의 인큐베이션 프로젝트로 선정됐으며, 2014년 4월 최상위 프로젝트로 승격됐습니다. 맵리듀스 엔진이 아닌 자체 분산 처리 엔진을 사용하며, HiveQL을 사용하는 다른 시스템들과는 다르게 표준 SQL을 지원하는 것이 특징입니다. HDFS, AWS S3, H베이스, DBMS 등에 저장된 데이터 표준 SQL로 조회할 수 있고, 이기종 저장소간의 데이터 조인 처리도 가능합니다. 질의 유형에 따라서 하이브나 스파크보다 1.5 ~ 10배 빠른 성능을 보여줍니다. . 워크플로우 관리 . Oozie(http://oozie.apache.org) . 우지(Oozie)는 하둡 작업을 관리하는 워크플로우 및 코디네이터 시스템입니다. 자바 서블릿 컨테이너에서 실행되는 자바 웹 애플리케이션 서버이며, 맵리듀스 작업이나 피그 작업 같은 특화된 액션으로 구성된 워크플로우를 제어합니다. . Airflow(http://nerds.airbnb.com/airflow) . 에어플로우(Airflow)는 에어비앤비가 개발한 워크플로우 플랫폼입니다. 데이터 흐름의 시각화, 스케쥴링, 모니터링이 가능하며, 하이브, 프레스토, DBMS 엔진과 결합하여 사용할 수 있습니다. . Azkaban(https://azkaban.github.io) . 아즈카반(Azkaban)은 링크드인에서 개발한 워크플로우 관리도구입니다. 링크드인은 자사의 복잡한 데이터 파이프라인을 관리하기 위해서 아즈카반을 개발했으며, 이를 오픈소스로 공개했습니다. 아즈카반은 워크플로우 스케쥴러, 시각화된 절차, 인증 및 권한 관리, 작업 모니터링 및 알람 등 다양한 기능은 웹UI로 제공합니다. . Nifi(https://nifi.apache.org) . 나이파이(Niagarafiles, Nifi)는 데이터 흐름을 모니터링하기 위한 프레임워크입니다. 여러 네트워크를 통과하는 데이터 흐름을 웹UI에서 그래프로 표현하며, 프로토콜과 데이터 형식이 다르더라도 분석이 가능합니다. 또한 데이터를 흘러 보낼때 우선 순위를 제어할 수 있습니다. 나이파이는 원래는 미국 국가안보국(NSA)에서 개발된 기술로, NSA의 기술 이전 프로그램인 TTP를 통해서 처음 외부에 공개된 오픈소스 기술입니다. . 데이터 시각화 . Zeppelin (https://zeppelin.incubator.apache.org) . 제플린(Zeppelin)은 빅데이터 분석가를 위한 웹 기반의 분석 도구이며, 분석결과를 즉시 표, 그래프로 제공하는 시각화까지 지원합니다. 아이파이썬(iPython)의 노트북(Notebook)과 유사한 노트북 기능을 제공하며, 분석가는 이를 통해 손쉽게 데이터를 추출, 정제, 분석, 공유를 할 수 있습니다. 또한 스파크, 하이브, 타조, 플링크(Flink), 엘라스틱 서치, 카산드라, DBMS 등 다양한 분석 플랫폼과 연동이 가능합니다. 2013년 엔에프랩의 내부 프로젝트로 시작됐으며, 2014년 아파치 재단의 인큐베이션 프로젝트로 선정됐습니다. . 데이터 직렬화 . Avro(http://avro.apache.org) . RPC(Remote Procedure Call)와 데이터 직렬화를 지원하는 프레임워크입니다. JSON을 이용해 데이터 형식과 프로토콜을 정의하며, 작고 빠른 바이너리 포맷으로 데이터를 직렬화합니다. 경쟁 솔루션으로는 아파치 쓰리프트(Thrift), 구글 프로토콜 버퍼(Protocol Buffer) 등이 있습니다. . Thrift(http://thrift.apache.org) . 쓰리프트(Thrift)는 서로 다른 언어로 개발된 모듈들의 통합을 지원하는 RPC 프레임워크입니다. 예를 들어 서비스 모듈은 자바로 개발하고, 서버 모듈은 C++로 개발되었을때, 쓰리프트로 쉽게 두 모듈의 통신 코드를 생성할 수 있습니다. 쓰리프트는 개발자가 데이터 타입과 서비스 인터페이스를 선언하면, RPC 형태의 클라이언트와 서버 코드를 자동으로 생성합니다. 자바, C++, C#, Perl, PHP, 파이썬, 델파이, Erlang, Go, Node.js 등과 같이 다양한 언어를 지원합니다. .",
            "url": "https://safenumz.github.io/blog/hadoop/2019/06/14/Hadoop_eco_%EC%A2%85%EB%A5%98.html",
            "relUrl": "/hadoop/2019/06/14/Hadoop_eco_%EC%A2%85%EB%A5%98.html",
            "date": " • Jun 14, 2019"
        }
        
    
  
    
        ,"post143": {
            "title": "[Hadoop] Hadoop Eco System 실행 및 중단",
            "content": "Hadoop eco Cluster System 실행 및 중단 . 서버는 총 5대로 구성되어 있음 | 1번 서버: 분석서버1 | 2번 서버: 수집서버 | 3번 서버: 분석서버2 | 4번 서버: namenode, datanode1 | 5번 서버: secondnode, datanode2 | . 실행 명령 흐름 정리 . # [4번 서버] start hadoop $ hadoop/sbin/start-dfs.sh # [5번 서버] start yarn $ hadoop/sbin/start-yarn.sh # [3번 서버] start MR history server $ hadoop/sbin/mr-jobhistory-daemon.sh start historyserver # [3번 서버] start metastore server $ hive --service metastore -p 8011 &amp; ​ # [4번 서버] start presto server $ presto/bin/launcher start # [5번 서버] start presto server $ presto/bin/launcher start # [3번 서버] start presto $ ./presto --server hd4.cluster.kr:8012 --catalog hive --schema default ​ # [2번 서버] move kafka floder $ cd kafka # [2번 서버] start zookeeper $ bin/zookeeper-server-start.sh config/zookeeper.properties &amp; # [2번 서버] start kakfa broker $ bin/kafka-server-start.sh config/server.properties &amp; # [2번 서버] create kafka topics $ bin/kafka-topics.sh --create --zookeeper hd2.cluster.kr:2181 --replication-factor 1 --partitions 1 --topic twitter &amp; $ bin/kafka-topics.sh --list --zookeeper hd2.cluster.kr:2181 &amp; . 서비스 시작 순서 : HDFS -&gt; YARN -&gt; MR-History Server . # namenode: 하둡 실행 $ hadoop/sbin/start-dfs.sh # secondnode: YARN 서비스 실행 $ hadoop/sbin/start-yarn.sh # namenode: MR-History Server 실행 $ hadoop/sbin/mr-jobhistory-daemon.sh start historyserver $ zookeeper/bin/zkServer.sh start # client : 하둡 제대로 실행되었는지 테스트 $ hadoop fs -lsr / $ hdfs dfs -chmod 777 /tmp $ hdfs dfs -mkdir /user $ hdfs dfs -mkdir /user/hadoop $ echo &#39;test&#39; &gt; test.txt $ hdfs dfs -put test.txt /user/hadoop/hadooptest.txt $ hdfs dfs -ls -R /user $ hdfs dfs -ls ## client 테스트용 파일 만들어 HDFS에 올리기 $ echo &#39;aaa,100&#39; &gt; pig.txt $ echo &#39;bbb,200&#39; &gt;&gt; pig.txt $ echo &#39;ccc,300&#39; &gt;&gt; pig.txt $ echo &#39;aaa,400&#39; &gt;&gt; pig.txt $ hdfs dfs -put pig.txt /user/hadoop/pig.txt $ hdfs dfs -ls . $ hdfs dfs -cat pig.txt # client : pig shell $ pig # client : pig test grunt&gt; ls grunt&gt; cat pig.txt grunt&gt; k2 = load &#39;pig.txt&#39; using PigStorage(&#39;,&#39;) as ( str:chararray, price:int ); grunt&gt; k4 = GROUP k2 BY $0; grunt&gt; k8 = foreach k4 generate group, SUM(k2.price); grunt&gt; dump k8; grunt&gt; store k8 into &#39;mr_pig&#39;; grunt&gt; cat mr_pig grunt&gt; illustrate k8; grunt&gt; quit # client : pyspark local mode $ spark/bin/pyspark --master local[2] # client : spark local mode $ spark/bin/spark-shell # client : spark cluster mode $ spark/bin/spark-shell --master yarn # client : spark cluster mode test scala&gt; var scalastr = sc.textFile(&quot;hdfs:///user/hadoop/pig.txt&quot;) scala&gt; scalastr.count() # client : hive MetaStore 서비스 시작하기 $ hive --service metastore -p 8011 &amp; # client : hive shell $ hive # client : hive test hive&gt; show tables; hive&gt; create table hive ( str string, price int ) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39;; hive&gt; show tables; hive&gt; load data local inpath &#39;hive.txt&#39; into table hive; hive&gt; select * from hive; hive&gt; select str,sum(price) from hive group by str; hive&gt; quit; # namenode : presto 코디네이터 demon 실행 $ presto/bin/launcher start # secondnode : presto worker demon 실행 $ presto/bin/launcher start # client : presto $ ./presto --server namenode.hadoop.kr:8012 --catalog hive --schema default # client : presto test presto:default&gt; show tables; presto:default&gt; select * from hive; presto:default&gt; select str,sum(price) from hive group by str; presto:default&gt; quit; . 서비스 중단하기 순서 : YARN -&gt; MR-History Server -&gt; HDFS . # secondnode : YARN 서비스 중단 $ hadoop/sbin/stop-yarn.sh # namenode : MR-History Server 중단 $ hadoop/sbin/mr-jobhistory-daemon.sh stop historyserver # namenode : HDFS 서비스 중단하기 $ hadoop/sbin/stop-dfs.sh zookeeper/bin/zkServer.sh stop . 실행 디폴트 폴더 설정 . $ hadoop fs -lsr /user $ hadoop fs -cp /user/hive/warehouse/movies/movies.csv . . wordcount 예제 실행 . $ bin/yarn jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.4.jar wordcount user/hadoop/conf output .",
            "url": "https://safenumz.github.io/blog/hadoop/2019/06/14/Hadoop_eco_%EC%8B%A4%ED%96%89_%EB%B0%8F_%EC%A4%91%EB%8B%A8.html",
            "relUrl": "/hadoop/2019/06/14/Hadoop_eco_%EC%8B%A4%ED%96%89_%EB%B0%8F_%EC%A4%91%EB%8B%A8.html",
            "date": " • Jun 14, 2019"
        }
        
    
  
    
        ,"post144": {
            "title": "[Trouble centos] CentOS 6에서 yum update가 되지 않을 때",
            "content": "Environment . CentOS 6 | . Trouble . CentOS 6 yum update가 되지 않을 때 | yum install 및 yum update와 같이 패키지 설치나 업데이트시 Could not retrieve mirrorlist문제로 설치가 되지 않는 문제가 발생할 때 | . Shooting . CentOS 6 버전부터는 ~/etc/resolv.conf 파일에 servername을 추가해주는 것으로는 이 문제를 해결할 수 없다. | /etc/sysconfig/network-scripts/ifcfg-ens33 파일을 열어 맨 밑에 있는 ONBOOT=no 를 yes로 바꿔줘야 한다. | . $ vi /etc/sysconfig/network-scripts/ifcfg-ens33 . # ifcfgens33 파일 ONBOOT=yes . $ dhclient $ yum update .",
            "url": "https://safenumz.github.io/blog/trouble/2019/06/12/CentOS_yum_update%EA%B0%80_%EB%90%98%EC%A7%80_%EC%95%8A%EC%9D%84_%EB%95%8C.html",
            "relUrl": "/trouble/2019/06/12/CentOS_yum_update%EA%B0%80_%EB%90%98%EC%A7%80_%EC%95%8A%EC%9D%84_%EB%95%8C.html",
            "date": " • Jun 12, 2019"
        }
        
    
  
    
        ,"post145": {
            "title": "[WEB] jQuery",
            "content": "jQuery . jQeury란? . Write less, Do more | 문법이 간결 | 사용하기 쉬움 | 다양한 플러그인 | 브라우저 호환성 문제 해결 | UI, Mobile 확장 가능 | . jQuery Core . jQuery는 &lt;script&gt; 태그 안에 기술 | . // 외부 css &lt;style rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot;&gt;&lt;/style&gt; // * css 파일 첫 줄에 @charset &quot;euc-kr&quot; // 내부 css &lt;style type=&quot;text/css&quot;&gt; &lt;/style&gt; // 외부 script &lt;script type=&quot;text/javascript&quot; src=&quot;xxx.js&quot;&gt;&lt;/script&gt; // 내부 script &lt;script type=&quot;text/javascript&quot;&gt; &lt;/script&gt; . jQuery(function($) { }) $(document).ready(function() { }) $(function() { }) . Selectors . css 선택자 대부분을 지원 | .     . * | 전부선택 | . # | ID | . . | class | . E | element | . E1, E2 | 여러개 element 선택 | . 1_jqueryBasic.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;title&gt; 첫 연습 &lt;/title&gt; &lt;!-- animate를 사용하기 위해 #here position을 절대값으로 고정한다--&gt; &lt;style type=&quot;text/css&quot;&gt; #here { position: absolute; top: 0px; left: 0px; } &lt;/style&gt; &lt;!-- 개인서버에서 jQuery를 불러온다, 네트워크가 연결되어 있지 않아도 개발 가능--&gt; &lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;../lib/jquery-3.1.1.js&quot;&gt;&lt;/script&gt;--&gt; &lt;!-- 구글에서도 jQuery 라이브러리를 가져올 수 있다. 배포판으로 만들 때 사용--&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(function() { var here = $(&quot;#here&quot;); /* // 사라졌다가 다시 나온다. here.fadeOut(1000); here.fadeIn(&#39;slow&#39;); // 연결해서 쓸 수도 있다. here.fadeOut(1000).fadeIn(&#39;slow&#39;); // 슬라이드업 되었다가 슬라이드다운 된다. here.slideUp(&#39;slow&#39;).slideDown(1000); */ // top과 left 속성을 바꾸려면 style sheet에서 위치를 absolute로 설정해야 한다. here.animate({top:200, left:400}); var std = $(&quot;#student&quot;); var n = std.find(&quot;#name&quot;); // css 동시에 넣기 위해서는 객체 json 구조로 만들어야 한다. n.css({&quot;background&quot;: &quot;#AAFF33&quot;, &quot;color&quot;: &quot;red&quot;, &quot;font-size&quot;: &quot;30px&quot;}); // &quot;backgroud&quot;, &quot;#AAFF33&quot; // color: #777777 // font-size: 12pt // var n2 = $(&quot;#name&quot;); /* // 마우스 클릭하면 텍스트 변경 here.click(function() { here.text(&quot;클릭하면 내용 변경&quot;); }) // 마우스가 들어오면 텍스트 변경 here.mouseenter(function() { here.text(&quot;마우스가 들어옴&quot;); }) // 마우스가 벗어나면 텍스트 변경 here.mouseleave(function() { here.text(&quot;마우스가 나감&quot;); }) // hover는 함수 인자를 두개 적어줘야 함 here.hover(function() { here.css(&quot;border&quot;, &quot;2px solid green&quot;); }, function() { here.css(&quot;border&quot;, &quot;2px dashed red&quot;); }); */ }) &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;here&quot;&gt; 아자아자 제이쿼리~~!!! &lt;/div&gt; &lt;div id=&quot;student&quot;&gt; &lt;div id=&quot;name&quot;&gt;홍길동&lt;/div&gt; &lt;div id=&quot;age&quot;&gt;34&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . 2_jqueryBasic.html . .",
            "url": "https://safenumz.github.io/blog/web/2019/06/11/jQuery.html",
            "relUrl": "/web/2019/06/11/jQuery.html",
            "date": " • Jun 11, 2019"
        }
        
    
  
    
        ,"post146": {
            "title": "[Trouble linux] sudo 명령어로 root 권한 얻지 못할 때",
            "content": "Environment . CentOS 7 | . Trouble . Linux에서 sudo 명령어로 root 권한 얻지 못할 때 | . Shooting . userid is not in the sudoers file. This incident will be reported. 에러가 뜰 때 root계정 sudoers 파일에서 user에 대한 권한을 부여하여 해결할 수 있다. | . # /etc/sudoers를 연다. $ visudo -f /etc/sudoers . # /etc/sudoers 파일에 userid ALL=(ALL) ALL 부분을 추가한다. # User privilege specification root ALL=(ALL) ALL userid ALL=(ALL) ALL . Adding SSH Key to autorized_keys: permission denided(publickey) . $ chmod 700 .ssh $ sudo chmod 640 .ssh/authorized_keys # 만약 안되면 추가로 진행 $ sudo chown $USER .ssh $ sudo chown $USER .ssh/authorized_keys .",
            "url": "https://safenumz.github.io/blog/trouble/2019/06/10/Linux_sudo_%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A1%9C_root_%EA%B6%8C%ED%95%9C_%EC%96%BB%EC%A7%80_%EB%AA%BB%ED%95%98%EB%8A%94_%EA%B2%BD%EC%9A%B0.html",
            "relUrl": "/trouble/2019/06/10/Linux_sudo_%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A1%9C_root_%EA%B6%8C%ED%95%9C_%EC%96%BB%EC%A7%80_%EB%AA%BB%ED%95%98%EB%8A%94_%EA%B2%BD%EC%9A%B0.html",
            "date": " • Jun 10, 2019"
        }
        
    
  
    
        ,"post147": {
            "title": "[Hadoop] Hadoop Eco System 구축",
            "content": "Hadoop . java 1.7.0 | mysql community server 5.6.44 | mysql connector java 5.1.23 | hadoop 2.6.4 | hive 1.2.1 | pig 0.16.0 | spark 1.6.2 | sqoop 1.4.7 | scala 2.10.1 | mesos 0.21.0 | zookeeper 3.4.6 | . 프로토콜 버퍼 설치 . 프로토콜 버퍼는 데이터를 연속된 비트로 만들고, 이렇게 만들어진 비트를 해석해 원래의 데이터를 만들 수도 있다. | Hadoop 2. 버전은 프로토콜 버퍼 2.5.0만 지원한다. 반드시 버전을 맞춰 설치한다. | root 계정에서 실행 | . $ wget https://github.com/google/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz $ tar xvzf protobuf-2.5.0.tar.gz $ yum install gcc-c++ $ ./configure $ make $ make install # 제대로 설치되었는지 확인 $ protoc --version . zookeeper 설치 . $ adduser zookeeper $ passwd zookeeper . zookeeper 다운로드 . # zookeeper 3.4.10 $ wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz $ tar xvzf zookeeper-3.4.10.tar.gz $ ln -s zookeeper-3.4.10 zookeeper $ cp zookeeper/conf/zoo_sample.cfg zookeeper/conf/zoo.cfg $ vi zookeeper/conf/zoo.cfg . zoo.cfg 편집 . # zoo.cfg maxClientCnxns=0 maxSessionTimeout=180000 server.1=namenode.hadoop.kr:2888:3888 server.2=secondnode.hadoop.kr:2888:3888 server.3=client.hadoop.kr:2888:3888 . zookeeper 설치 . https://blog.naver.com/inho1213/220864633256?proxyReferer=https%3A%2F%2Fm.blog.naver.com%2FPostView.nhn%3FblogId%3Dinho1213%26logNo%3D220890490389%26proxyReferer%3Dhttps%253A%252F%252Fwww.google.com%252F . # java 1.7.0 # mysql community server 5.6.44 # mysql-connector-java-5.1.23 $ wget www.db21.co.kr/big/mysql-connector-java-5.1.23-bin.jar # hadoop 2.6.4 $ wget www.db21.co.kr/big/hadoop-2.6.4.tar.gz # hive 1.2.1 $ wget www.db21.co.kr/big/apache-hive-1.2.1-bin.tar.gz # pig 0.16.0 $ wget www.db21.co.kr/big/pig-0.16.0.tar.gz # spark 1.6.2 $ wget www.db21.co.kr/big/spark-1.6.2-bin-hadoop2.6.tgz # sqoop 1.4.7 $ wget http://apache.tt.co.kr/sqoop/1.4.7/sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz $ tar xvzf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz $ ln -s sqoop-1.4.7.bin__hadoop-2.6.0 sqoop # scala 2.10.1 $ wget http://www.scala-lang.org/files/archive/scala-2.10.1.tgz $ tar xvzf scala-2.10.1.tgz # presto 0.65 $ wget www.db21.co.kr/big/presto-server-0.65.tar.gz # mesos 0.21.0 # Spark 1.6.0 is designed for use with Mesos 0.21.0 and does not require any special patches of Mesos. $ wget http://archive.apache.org/dist/mesos/0.21.0/mesos-0.21.0.tar.gz # zookeeper 3.4.10 $ wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz ~~~shell # .bashrc if [ -f /etc/bashrc ]; then . /etc/bashrc fi #-- # HADOOP Config Start pathmunge () { case &quot;:${PATH}:&quot; in *:&quot;$1&quot;:*) ;; *) if [ &quot;$2&quot; = &quot;after&quot; ] ; then PATH=$PATH:$1 else PATH=$1:$PATH fi esac } export JAVA_HOME=/usr/local/java export CLASSPATH=/usr/local/java/jre/lib/* pathmunge /usr/local/java before pathmunge /usr/local/java/bin before export BASEHOME=/home/hadoop export HADOOP_PREFIX=$BASEHOME/hadoop export HADOOP_HOME=$BASEHOME/hadoop export HADOOP_INSTALL=$HADOOP_HOME export HADOOP_MAPRED_HOME=$HADOOP_HOME export HADOOP_COMMON_HOME=$HADOOP_HOME export HADOOP_HDFS_HOME=$HADOOP_HOME export YARN_HOME=$HADOOP_HOME export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib/native&quot; export HADOOP_CLASSPATH=$JAVA_HOME/lib/tools.jar export PIG_HOME=$BASEHOME/pig export PIG_CLASSPATH=$BASEHOME/hadoop/conf export HIVE_HOME=$BASEHOME/hive export HIVE_CONF_DIR=$BASEHOME/hive/conf export HIVE_CLASS_PATH=$HIVE_CONF_DIR export HADOOP_USER_CLASSPATH_FIRST=true export SPARK_HOME=/home/hadoop/spark export SPARK_CONF_DIR=$SPARK_HOME/conf #pathmunge $BASEHOME/sqoop/bin pathmunge $BASEHOME/pig/bin pathmunge $BASEHOME/hive/bin pathmunge $BASEHOME/hadoop/bin # HADOOP Config End #-- . 하둡 클러스터 실행 및 중단 . # 서비스 시작 순서 : HDFS -&gt; YARN -&gt; MR-History Server # namenode: 하둡 실행 $ hadoop/sbin/start-dfs.sh # secondnode: YARN 서비스 실행 $ hadoop/sbin/start-yarn.sh # namenode: MR-History Server 실행 $ hadoop/sbin/mr-jobhistory-daemon.sh start historyserver # client : 하둡 제대로 실행되었는지 테스트 $ hadoop fs -lsr / $ hdfs dfs -chmod 777 /tmp $ hdfs dfs -mkdir /user $ hdfs dfs -mkdir /user/hadoop $ echo &#39;test&#39; &gt; test.txt $ hdfs dfs -put test.txt /user/hadoop/hadooptest.txt $ hdfs dfs -ls -R /user $ hdfs dfs -ls # 서비스 중단하기 순서 : YARN -&gt; MR-History Server -&gt; HDFS # secondnode : YARN 서비스 중단 $ hadoop/sbin/stop-yarn.sh # namenode : MR-History Server 중단 - MR-History Server 중단하기 $ hadoop/sbin/mr-jobhistory-daemon.sh stop historyserver # namenode : HDFS 서비스 중단하기 $ hadoop/sbin/stop-dfs.sh . spark cluster mode test . $ spark/bin/spark-shell --master yarn --num-executors 2 scala&gt; var scalastr = sc.textFile(&quot;hdfs:///user/hadoop/pig.txt&quot;) scala&gt; scalastr.count() scala&gt; scalastr.first() scala&gt; println(scalastr.collect().mkString(&quot; n&quot;)) scala&gt; CTRL+D . spark 모니터링 . 노트북에 hosts 파일 편집 | HDFS 네임노드 웹UI 호스트명/포트 -&gt; 네임노드 호스트명:50070 | http://namenode.hadoop.kr:50070/ . | HDFS 보조네임노드 웹UI 호스트명/포트 -&gt; 보조네임노드 호스트명 :50090 | http://secondnode.hadoop.kr:50090/ . | YARN 리소스매니저 웹UI 호스트명/포트 -&gt; 리소스매니저 호스트명:8088 | http://secondnode.hadoop.kr:8088/ . | YARN 노드매니저 웹UI 호스트명/포트 -&gt; 노드매니저(1~N) 호스트명:8042 | http://datanode1.hadoop.kr:8042/ | http://datanode2.hadoop.kr:8042/ . | Spark 드라이버 포트 -&gt; 클라이언트 호스트명:4040 | http://client.hadoop.kr:4040/ . | Presto Coordinator 웹 UI | http://namenode.hadoop.kr:8012/ | . # 윈도우: C: Windows System32 drivers etc hosts $ sudo vi /private/etc/hosts 192.168.- client.hadoop.kr 192.168.- namenode.hadoop.kr 192.168.- secondnode.hadoop.kr 192.168.- datanode1.hadoop.kr 192.168.- datanode2.hadoop.kr # DNS cache 갱신 $ dscacheutil -flushcache . -&gt; 클라이언트 머신에서 Hive MetaStore 서비스 시작하기 [8]$ hive --service metastore -p 8011 &amp; # Presto Server 파일 내려받기 [1]$ wget www.db21.co.kr/big/presto-server-0.65.tar.gz -&gt; Presto Server 파일을 2번,3번 머신에 보내기 [2]$ scp presto-server-0.65.tar.gz hadoop@namenode:/home/hadoop/ scp presto-server-0.65.tar.gz hadoop@secondnode:/home/hadoop/ # Presto CLI 실행파일 내려받기 [3]$ wget www.db21.co.kr/big/presto-cli-0.65-executable.jar -&gt; Presto로 이름을 변경하고 실행권한 주기 [4]$ mv presto-cli-0.65-executable.jar presto [5]$ chmod 755 presto -&gt; namenode, secondnode Presto Worker 데몬 시작하기 [11]$ presto/bin/launcher start -&gt; Presto Server는 코디네이터 주소를 지정하면 됨 [3]$ ./presto --server namenode.hadoop.kr:8012 --catalog hive --schema default [1]presto:default&gt; show tables; [2]presto:default&gt; select * from hive; [3]presto:default&gt; select str,sum(price) from hive group by str; [4]presto:default&gt; quit; . flume 설치 . $ wget http://mirror.navercorp.com/apache/flume/1.8.0/apache-flume-1.8.0-bin.tar.gz .",
            "url": "https://safenumz.github.io/blog/architecture/2019/06/09/Hadoop_Eco_System_%EA%B5%AC%EC%B6%95.html",
            "relUrl": "/architecture/2019/06/09/Hadoop_Eco_System_%EA%B5%AC%EC%B6%95.html",
            "date": " • Jun 9, 2019"
        }
        
    
  
    
        ,"post148": {
            "title": "[WEB] JavaScript in Web",
            "content": "Java Script . 변천 . | 2010년 이전 | 2010년 이후 :————-:|:————–:|:————-: Presentation | HTML, CSS, JS | HTML, CSS, JS Application | JSP, ASP, PHP | Node.js Database | Oracle, MySQL | mongodb . &lt;script type=&quot;text/javascript&quot;&gt; &lt;!-- 자바스크립트 코드 -&gt; &lt;script&gt; . Data Type . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;1_datatype.html&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 1. 자바스크립트는 자료형에 관대하다. var byensu = &quot;문자열&quot;; document.writeln(&#39;변수의 값: &#39; + byensu + &#39;&lt;br/&gt;&#39;); byensu = 1000; document.writeln(&#39;변수의 값: &#39; + byensu + &#39;&lt;br/&gt;&#39;); // 2. 리터럴 - 자료형(데이터타입)에 들어가는 값 var arr = [&#39;안녕&#39;, &#39;Hello&#39;, &#39;Hola&#39;, &#39;곤니찌와&#39;]; document.writeln(&#39;배열의 요소: &#39; + arr[1] + &#39;&lt;br/&gt;&#39;); var arr = [&#39;안녕&#39;, [&#39;Hello&#39;, &#39;Hola&#39;], &#39;곤니찌와&#39;]; document.writeln(&#39;배열의 요소: &#39; + arr[1][0] + &#39;&lt;br/&gt;&#39;); var obj = {x : &quot;안녕&quot;, y : &quot;Hello&quot;, z : &quot;곤니찌와&quot;}; document.writeln(&quot;객체의 프로퍼티: &quot; + obj.x + &quot;&lt;br/&gt;&quot; ); document.writeln(&quot;객체의 프로퍼티: &quot; + obj[&quot;x&quot;] + &quot;&lt;br/&gt;&quot; ); var x; document.writeln(&quot;x=&quot; + x); document.writeln(&quot;obj.a =&quot; + obj.a); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; . Operator . !DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;2_operator.html&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 1. == 와 === 차이점 var num = 10; var str = &#39;10&#39;; if (num != str) alert(&#39;같다1&#39;); else alert(&#39;다르다1&#39;); if (num !== str) document.write(&#39;같다2 &lt;br/&gt;&#39;); else document.write(&#39;다르다2 &lt;br/&gt;&#39;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; . JavaScript 이벤트 바인드 . HTML에서 이벤트 함수를 호출 (최근에는 사용 자제) 예전방식: | . | 이벤트핸들러(*) : HTML과 JS 분리 javascript 코드에서 요소를 찾고 이벤트를 건다. | 요소.onevent = 함수명; | . | 이벤트리스너 : IE8 이전 동작하지 않음 요소.addEventListener(‘이벤트명’, 함수명); | . | &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;메뉴판&lt;/title&gt; &lt;link type=&quot;text/css&quot;&gt; . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;ko&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt; main.html &lt;/title&gt; &lt;/head&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function(){ var winObj = window.open(&#39;sub.html&#39;, &#39; &#39;, &#39;width =700, height= 480&#39;); winObj.moveTo(screen.availWidth/4, screen.availHeight/4); document.frm.choose.onchange = function(){ var x = document.frm.choose.selectedIndex; winObj.frm1.choose1.value = document.frm.choose.value } } &lt;/script&gt; &lt;body&gt; &lt;form name = &quot;frm&quot;&gt; &lt;select name=&quot;choose&quot;&gt; &lt;option&gt;서울시&lt;/option&gt; &lt;option&gt;경기도&lt;/option&gt; &lt;option&gt;전라도&lt;/option&gt; &lt;option&gt;경상도&lt;/option&gt; &lt;/select&gt; &lt;p&gt; &lt;input type = &quot;text&quot; name =&quot;location&quot; id=&quot;location&quot;&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . &lt;!DOCTYPE html&gt; &lt;html lang=&quot;ko&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt; sub.html &lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function(){ var x = document.frm1.location; for(var i =0; i&lt;x.length; i++){ x[i].onclick = function(){ opener.frm.location.value = this.value; } } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form name=&quot;frm1&quot;&gt; &lt;p&gt; &lt;input type = &quot;text&quot; name=&quot;choose1&quot; id=&quot;choose1&quot;&gt; &lt;/p&gt; &lt;input type=&quot;radio&quot; name=&quot;location&quot; value=&#39;가산&#39; &gt; 가산&lt;br&gt; &lt;input type=&quot;radio&quot; name=&quot;location&quot; value=&#39;판교&#39; &gt; 판교 &lt;br&gt; &lt;input type=&quot;radio&quot; name=&quot;location&quot; value=&#39;부평&#39;&gt; 부평 &lt;br&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2019/06/03/Javascirpt_in_Web.html",
            "relUrl": "/web/2019/06/03/Javascirpt_in_Web.html",
            "date": " • Jun 3, 2019"
        }
        
    
  
    
        ,"post149": {
            "title": "[Project] Hadoop eco를 활용한 카드거래액 예측모델 및 실시간 대시보드 구축",
            "content": "",
            "url": "https://safenumz.github.io/blog/project/2019/06/01/card.html",
            "relUrl": "/project/2019/06/01/card.html",
            "date": " • Jun 1, 2019"
        }
        
    
  
    
        ,"post150": {
            "title": "[WEB] CSS 이론",
            "content": "1. CSS . CSS 개념 및 사용 . CSS 개념 . Cascading Style Sheets | HTML(markup)의 시각적 표현을 정의 | . CSS 장점 . 구조(HTML)과 표현(CSS) 분리 | 효율적이고 정교한 디자인 제어 | 브라우저 호환성에 대처 용이 | . CSS 사용 . &lt;!-- inline style --&gt; &lt;p style=&quot;border:1px solid #000&quot;&gt;문장&lt;/p&gt; &lt;!-- internal style sheet --&gt; &lt;style type=&quot;text/css&quot;&gt; p {border: 1px solid #000} &lt;/style&gt; &lt;!-- External style sheet --&gt; &lt;link ref=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;/&gt; . CSS @ . /* 외부 css 파일 가져오기 */ @import &quot;other-1.css&quot;; @import url(&quot;other-2.css&quot;); @import &quot;print.css&quot; print; /* 문자셋 지정 */ @charset &quot;UTF-8&quot;; /* 대상 장치 지정 */ @media screen { body {font-size: 13px} } @media print { body {font-size: 9px} } . CSS 기본 문법 . 선택자 { 속성 : 값; } p { color:red; font-size:12px; } . [참고] 브라우저별 추가 prefix 필요하기도 함 . 브라우저 prefix 예 . 표준 |   | border-image | . Mozillz FireFox | -moz- | -moz-border-image | . Internet Explorer | -ms- | -ms-border-image | . Google Chrome | -webkit- | -webkit-border-image | . Apple Safari | -webkit- | -webkit-border-image | . Opera | -o- | -o-border-image | . 선택자 (selector) . 선택자는 개수 파악이 안됨 | 가중치가 높으면 우선순위가 높음 | 동일한 가중치면 덮어버림 외부파일을 수정하기 보다는 우선순위를 이용하여 덮음으로 수정하는 것을 권함 . | . SELECT 우선순위 . element &gt; id &gt; class &gt; attribute &gt; combinator | . Element . E | 가중치 1점 | . ID . E#idname | 가중치 100점 | . Class . E.classname | 가중치 10점 | . Attribute . E[attr=value] | . Combinator . E F (자손) | E &gt; F (자식) | E + F (형제) | E ~ F (다음) | . 요소 선택자 . &lt;style&gt; /* h1 태그의 color 속성에 red 키워드를 적용합니다. */ h1 { color:red; } /* p 태그의 color 속성에 blue 키워드를 적용합니다. */ p { color:blue; } &lt;/style&gt; . 아이디 선택자 . /* id 속성값으로 header를 가지는 태그의 스타일을 지정합니다. */ #header { width: 800px; margin: 0 auto; background: red; } . 클래스 선택자 . &lt;style&gt; /* class 속성값으로 select를 가지는 태그의 color 속성에 red 키워드를 적용합니다. */ .select { color: red; } &lt;/style&gt; . 요소 속성 선택자 . &lt;form&gt; &lt;input type=&quot;text&quot; /&gt; &lt;input type=&quot;password&quot; /&gt; &lt;/form&gt; &lt;style&gt; /* input 태그 중에서 type 속성값을 text로 가지는 태그의 background 속성에 red 키워드를 적용합니다. */ input[type=text] { background:red; } /* input 태그 중에서 type 속성값을 password로 가지는 태그의 background 송성에 blue 키워드를 적용합니다. */ input[type=password] { background:blue; } &lt;/style&gt; . &lt;form&gt; &lt;input type=&quot;text&quot; /&gt; &lt;input type=&quot;password&quot; /&gt; &lt;/form&gt; &lt;style&gt; /* input 태그 중에서 type 속성값을 text로 가지는 태그의 background 속성에 red 키워드를 적용합니다. */ input[type=text] { background:red; } /* input 태그 중에서 type 속성값을 password로 가즈는 태그의 background 속성에 blue 키워드를 적용합니다. */ input[type=password] { background:blue; } &lt;/style&gt; . CSS3 새로운 선택자 . 선택자 예 설명 . E1 ~ E2 | p~ul | &lt;p&gt; 요소 뒤에 나오는 모든 &lt;ul&gt; | . [attr^=val] | a[src^=”https”] | src 속성값이 https로 시작하는 &lt;a&gt; 요소 | . [attr$=val] | a[src$=”.pdf”] | src 속성값이 pdf로 끝나는 &lt;a&gt; 요소 | . [attr*=val] | a[src*=”css3”] | src 속성값이 css3 문자열을 포함하는 &lt;a&gt; 요소 | . :first-of-type | p:first-of-type | 부모로부터 첫번째인 &lt;p&gt; 요소 | . :last-of-type | p:last-of-type | 부모로부터 마지막인 &lt;p&gt; 요소 | . :only-of-type | p:only-child | 부모의 유일한 자식인 &lt;p&gt; 요소 | . :nth-child(n) | p:nth-child(2) | 부모로부터 2번째 자식인 &lt;p&gt; 요소 | . :nth-last-child(n) | p:nth-last-child(2) | 부모로부터 뒤에서 2번째 자식인 &lt;p&gt; 요소 | . :nth-of-type(n) | p:nth-of-type(2) | 부모로부터 2번째 &lt;p&gt; 요소 | . :nth-of-last-type(n) | p:nth-of-last-type(2) | 부모로부터 뒤에서 2번째 &lt;p&gt; 요소 | . :last-child | p:last-child | 부모로부터 마지막 요소인 &lt;p&gt; 요소 | . :root | :root | document root 요소 | . :empty | p:empty | 자식요소를 갖지 않는 &lt;p&gt; 요소 | . :target | :#news:target | #news 요소의 URL 대상 | . :enabled | input:enabled | enabled된 상태의 모든 &lt;input&gt; 요소 | . :disabled | input:disabled | disabled된 상태의 모든 &lt;input&gt; 요소 | . :checked | input:checked | checked된 상태의 모든 &lt;input&gt; 요소 | . :not(selector) | :not(p) | &lt;p&gt; 가 아닌 모든 요소 | . ::selection | ::selection | 사용자가 선택한 영역에 있는 모든 요소 | . Font . [참고] @font-face . 폰트파일을 다운로드하여 사용 | 상용폰트는 허가 없이 사용불가 | . @font-face { font-family: myfont-ttf; src: url(NanumGothic.ttf) } div { font-family: NanumGothic, myfont-ttf, serif; } . 단위 . HTML5에서는 단위를 사용하지 않으면 CSS 스타일 오류 발생 | . /* 오류 */ font-size: 3; /* 정상 */ font-size: 3px; . 단위 의미 사용 예 &lt;/a&gt; . em | 배수 | font-size: 3em; | 현재 폰트의 3배 크기 | . % | 퍼센트 | font-size: 500%; | 현재 폰트의 500% 크기 | . px | 픽셀 수 | font-size: 10px; | 10 픽셀 크기 | . cm | 센치미터 | margin-left: 5cm; | 왼쪽 여백 5cm | . mm | 밀리미터 | margin-left 10mm; | 왼쪽 여백 10mm | . in | 인치 1in = 2.54cm = 96px | margin-left: 2in; | 왼쪽 여백 2인치 | . pt | 포인터 1pt = 1in의 1/72 크기 | margin-left: 20pt; | 왼쪽 여백 20포인트 | . pc | 피카소(picas), 1pc = 12pt | font-size: 1pc | 1pc 크기의 폰트 | . deg | 각도 | transform: rotate(20deg) | 시계 방향으로 20도 회전 | . Text-effect . &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; . text-shadow | 그림자 효과 | h-shadowv-shadowblurcolor | . text-overflow | 글자가 틀을 벗어 났을 때 | clipelipsis&lt;string&gt; | . text-wrap | 글자를 자동으로 내릴지 | normal break-word | . Text - 다단 컬럼 . &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; . column-count | 컬럼 갯수 | 숫자, auto | . column-fill | 컬럼채움방법 | auto, balance | . column-gap | 컬럼간 거리 | 숫자(length), normal | . column-rule | &lt;/a&gt; | width style color | . column-span | 병합 | 1, all | . column-width | 폭 | 숫자(length), auto | . columns | shorthand | width count | . column-count: 3; column-fill: auto; /* Chrom and Safari */ -webkit-column-count: 3; -webkit-column-fill: auto; . List - style . 디자인적으로 꾸미고자 할 때 주로 list-style-type=none; 을 지정하고 꾸밈. | . &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; . list-style-type | 글머리기호 | none, inherit, disc, circle, square, decimal, decimal-leading-zero, lower-alpha, lower-roman, lower-greek, lower-latin, upper-alpha, upper-roman, upper-greek, upper-latin, hebrew, armenia | . list-type-image | 글머리 이미지 | url(‘URL’), none, inherit | . list-style-position | 글머리 기호 위치 | inside, outside, inherit | . list-style | shorthand | type position image | . Border - image . &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; . border-image-source | 이미지 경로 | none, URL | . border-image-slice | 안쪽 간격 | 숫자, fill | . border-image-width | 폭 | 숫자, auto | . border-image-outset | 바깥확장 | 숫자 | . border-image-repeat | 이미지반복여부 | stretch, round, repeat | . border-image | shorthand | source slice width outset repeat | . /* 표준 */ border-image: url(border.png) 20 20 round; /* FireFox */ -moz-border-image: url(border.png) 30 30 round; /* Chrome */ -webkit-border-image: url(border.png) 30 30 round; /* Opera */ -o-border-image: url(border.png) 30 30 round; . Border - box shodow(그림자 효과) . &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; . box-shadow | 그림자 효과 | h-shadow (그림자 수직위치) v-shadow (그림자 수평 위치) blur (퍼짐정도) spread (그림자크기) color (그림자색상) inset (안쪽그림자) | . background-color: yellow; box-shadow: 10px 10px 5px #885566; /* Firefox */ -moz-box-shadow: 10px 10px 5px #885566; /* Safari */ -webkit-box-shadow: 10px 10px 5px #885566; . Background . &lt;/a&gt; &lt;/a&gt; &lt;/a&gt; . background-color | 배경색 | 색상값, transparent, inherit | . background-image | 배경 이미지 | url(‘URL’), none, inherit | . background-repeat | 배경 이미지 반복 | repeat, repeat-x, repeat-y, no-repeat, inherit | . background-position | 배경 이미지 시작 위치 | left top, left center, left bottom, right top, right center, right bottom, cneter top, center center, center bottom, x%, y%, x단위, y단위 | . background-attachment | 이미지 고정 | scroll, fixed, inherit | . background | shorthand | color position repeat attachment image | . background-size | 배경이미지 크기 지정 | length percent cover (영역 내 폭과 높이 중 가장 큰 사이즈 기준) contain (영역 내에서 가장 큰 사이즈 기준) auto (원본 이미지 크기) | . background-origin | 배경이미지 영역 위치 지정 | padding-box border-box content-box | . background-clip | 배경이미지 영역 | padding-box border-box content-box | . Box Model . 실제 차지하는 영역 너비 = width + padding(left, right) + border(left, right) | 높이 = height + padding(top, bottom) + border(top, bottom) | . | 배경(background) 영향 padding: 영향 받음 | margin: 적용되지 않음 | . | Internet Explorer의 폭(width)은 W3C 표준과 다름 | . . Positioning . 속성 의미 값 . left / top /right / bottom | 좌표 | 숫자+단위, auto, inherit | . position | &lt;/a&gt; | static, absolute, fixed, relative, inherit | . display | box type | none, block, inline, inline-block, list-item, table, inherit | . visibility | 표시여부 | visible, hidden, collapse, inherit | . overflow | &lt;/a&gt; | visible, hidden, scroll, auto, inherit | . z-index | 중첩순서 | 정수, auto, inherit | . float | 정렬정책 | left, right, none, inherit | . clear | float 해제 | none, left, right, both, inherit | . block 요소는 기본이 한줄 배치인데, 예를 들어 그림과 글자를 수평배치하기 위해 float과 clear를 지정 | float된 상태에서 화면 폭이 좁아지면 밑으로 떨어지는데 이를 해결하려면 전체를 &lt;div&gt;로 감쌈 | . 블록박스 (display:block) 인라인 박스 (display:inline) 인라인 블록 박스 (display:inline-block) . 항상 새 라인에서 시작 | 새 라인에서 시작 못함. 라인 안(inline)에 있음 | 새 라인에서 시작 못함 라인 안(inline)에 있음 | . 블록 박스 내에만 배치 | 모든 박스 내 배치 가능 | 모든 박스 내 배치 가능 | . 옆에 다른 요소 배치 불가능 | 옆에 다른 요소 배치 가능 | 앞에 다른 요소 배치 가능 | . width와 height으로 크기 조절 | width와 height으로 크기 조절 불가능 | width와 height 크기 조절 가능 | . padding, border, margin 조절 가능 | margin-top, margin-bottom 조절 불가능 | padding, border, margin 조절 가능 | . 반응형 웹 디자인 . 사용자 단말에 따라 최적의 디자인을 제공하는 것 | 가변 그리드 레이아웃, 가변 이미지, 가변 미디어 (%로 길이를 표현) | Media Query http://www.w3.org/TR/css3-mediaqueries | 단점 media query의 성능 | media query를 지원하지 않는 브라우저가 아직 많음 | 이미지 resizing은 단말의 cpu를 더 사용 | 불필요한 리소스(css, 이미지, markup 등) 전송 받을 수 있음 | . | .",
            "url": "https://safenumz.github.io/blog/web/2019/05/30/CSS_%EC%9D%B4%EB%A1%A0.html",
            "relUrl": "/web/2019/05/30/CSS_%EC%9D%B4%EB%A1%A0.html",
            "date": " • May 30, 2019"
        }
        
    
  
    
        ,"post151": {
            "title": "[WEB] HTML5 예제",
            "content": "HTML5 예제 . HTML5 섹션 . 01_html5_sectin.html . &lt;!-- 01_html5_sectin.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;산과 벗하는 산악회&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 표준안 구조 --&gt; &lt;header&gt; &lt;!-- 페이지 안에서 제목 h1 ~ h6 --&gt; &lt;h1&gt;우리 산악회&lt;/h1&gt; 주말 산행 뿐만 아니라 주중 산행, 무박 산행도 합니다. &lt;/header&gt; &lt;!-- 메뉴역할 --&gt; &lt;nav&gt; &lt;!-- &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://w3schools.com&quot; target=&quot;_blank&quot;&gt;산행예절&lt;/a&gt;&lt;/li&gt; 새창 &lt;li&gt;&lt;a href=&quot;http://www.daum.net&quot; target=&quot;_self&quot;&gt;산행준비&lt;/a&gt;&lt;/li&gt; 해당창 그대로 &lt;li&gt;&lt;a href=&quot;http://www.naver.com&quot; target=&quot;_parent&quot;&gt;산행종류&lt;/a&gt;&lt;/li&gt; 부모창 &lt;li&gt;&lt;a href=&quot;http://www.mk.co.kr&quot; target=&quot;_top&quot;&gt;보행요령&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.nate.com&quot;&gt;등산식량&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; --&gt; &lt;!-- 북마크 --&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&#39;#greeting&#39;&gt;산행예절&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#39;#etiquette&#39;&gt;산행준비&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#39;#manner&#39;&gt;산행종류&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#39;99_html5구조_css.html&#39;&gt;보행요령&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/nav&gt; &lt;section&gt; &lt;header&gt;&lt;h3&gt;산행 예절&lt;/h3&gt;&lt;/header&gt; &lt;article&gt; &lt;h4 id=&#39;greeting&#39;&gt;인사&lt;/h4&gt; &lt;p&gt; 인사를 할 때에는 너무 큰소리로 하지 말고 상대방이 똑똑히 들을 정도의 소리로 인사한다. 산쟁이 중에는 &quot;수고 하십니다&quot;란 인사를 싫어하는 사람이 많다. 오히려 그것 보단 &quot;힘내세요&quot; &quot;조금만 가면 정상입니다&quot; &quot;좋은 산행 되세요&quot;라고 인사가 적당하지 않은가 생각한다. 그리고 단체로 갈 땐 모든 사람이 인사를 하면 안된다 여러 명이 줄지어서 갈 땐 선두에 선 사람이 인사를 하고 뒷사람은 가볍게 목례정도만 하면 된다. &lt;/p&gt; &lt;p&gt; 인사를 할 때에는 너무 큰소리로 하지 말고 상대방이 똑똑히 들을 정도의 소리로 인사한다. 산쟁이 중에는 &quot;수고 하십니다&quot;란 인사를 싫어하는 사람이 많다. 오히려 그것 보단 &quot;힘내세요&quot; &quot;조금만 가면 정상입니다&quot; &quot;좋은 산행 되세요&quot;라고 인사가 적당하지 않은가 생각한다. 그리고 단체로 갈 땐 모든 사람이 인사를 하면 안된다 여러 명이 줄지어서 갈 땐 선두에 선 사람이 인사를 하고 뒷사람은 가볍게 목례정도만 하면 된다. &lt;/p&gt; &lt;p&gt; 인사를 할 때에는 너무 큰소리로 하지 말고 상대방이 똑똑히 들을 정도의 소리로 인사한다. 산쟁이 중에는 &quot;수고 하십니다&quot;란 인사를 싫어하는 사람이 많다. 오히려 그것 보단 &quot;힘내세요&quot; &quot;조금만 가면 정상입니다&quot; &quot;좋은 산행 되세요&quot;라고 인사가 적당하지 않은가 생각한다. 그리고 단체로 갈 땐 모든 사람이 인사를 하면 안된다 여러 명이 줄지어서 갈 땐 선두에 선 사람이 인사를 하고 뒷사람은 가볍게 목례정도만 하면 된다. &lt;/p&gt; &lt;p&gt; 인사를 할 때에는 너무 큰소리로 하지 말고 상대방이 똑똑히 들을 정도의 소리로 인사한다. 산쟁이 중에는 &quot;수고 하십니다&quot;란 인사를 싫어하는 사람이 많다. 오히려 그것 보단 &quot;힘내세요&quot; &quot;조금만 가면 정상입니다&quot; &quot;좋은 산행 되세요&quot;라고 인사가 적당하지 않은가 생각한다. 그리고 단체로 갈 땐 모든 사람이 인사를 하면 안된다 여러 명이 줄지어서 갈 땐 선두에 선 사람이 인사를 하고 뒷사람은 가볍게 목례정도만 하면 된다. &lt;/p&gt; &lt;h4 id = &#39;etiquette&#39;&gt;추월을 해야 할땐 먼저 양해를 구하자.&lt;/h4&gt; &lt;p&gt; 좁은 등산로에서 예고없이 추월을 한다면 배낭 같은 것이 부딪혀 서로 중심이 흐트러질 경우가 많다. 약한 사람은 튕겨 날 경우도 있다. 추월을 할 땐 미리 &quot;먼저 가겠습니다&quot;라고 하고 비켜주면 그때 &quot;고맙습니다&quot;라고 인사를 하고 추월을 하자. &lt;/p&gt; &lt;p&gt; 좁은 등산로에서 예고없이 추월을 한다면 배낭 같은 것이 부딪혀 서로 중심이 흐트러질 경우가 많다. 약한 사람은 튕겨 날 경우도 있다. 추월을 할 땐 미리 &quot;먼저 가겠습니다&quot;라고 하고 비켜주면 그때 &quot;고맙습니다&quot;라고 인사를 하고 추월을 하자. &lt;/p&gt; &lt;p&gt; 좁은 등산로에서 예고없이 추월을 한다면 배낭 같은 것이 부딪혀 서로 중심이 흐트러질 경우가 많다. 약한 사람은 튕겨 날 경우도 있다. 추월을 할 땐 미리 &quot;먼저 가겠습니다&quot;라고 하고 비켜주면 그때 &quot;고맙습니다&quot;라고 인사를 하고 추월을 하자. &lt;/p&gt; &lt;p&gt; 좁은 등산로에서 예고없이 추월을 한다면 배낭 같은 것이 부딪혀 서로 중심이 흐트러질 경우가 많다. 약한 사람은 튕겨 날 경우도 있다. 추월을 할 땐 미리 &quot;먼저 가겠습니다&quot;라고 하고 비켜주면 그때 &quot;고맙습니다&quot;라고 인사를 하고 추월을 하자. &lt;/p&gt; &lt;h4 id = &#39;manner&#39;&gt;올라오는 사람에게 양보를 하자.&lt;/h4&gt; &lt;p&gt; 산에서 많이 경험을 하였을 것이다. 내려 오는 사람보단 올라가는 사람이 시간이 촉박하다. 또 페이스 유지도 올라오는 사람이 유지하기가 어렵다. 단체일 경우에는 소수인 그룹이 양보한다. &lt;/p&gt; &lt;p&gt; 산에서 많이 경험을 하였을 것이다. 내려 오는 사람보단 올라가는 사람이 시간이 촉박하다. 또 페이스 유지도 올라오는 사람이 유지하기가 어렵다. 단체일 경우에는 소수인 그룹이 양보한다. &lt;/p&gt; &lt;p&gt; 산에서 많이 경험을 하였을 것이다. 내려 오는 사람보단 올라가는 사람이 시간이 촉박하다. 또 페이스 유지도 올라오는 사람이 유지하기가 어렵다. 단체일 경우에는 소수인 그룹이 양보한다. &lt;/p&gt; &lt;p&gt; 산에서 많이 경험을 하였을 것이다. 내려 오는 사람보단 올라가는 사람이 시간이 촉박하다. 또 페이스 유지도 올라오는 사람이 유지하기가 어렵다. 단체일 경우에는 소수인 그룹이 양보한다. &lt;/p&gt; &lt;/article&gt; &lt;/section&gt; &lt;/body&gt; &lt;/html&gt; . HTML5 리스트 만들기 . 02_html5_list.html . &lt;!-- 02_html5_list.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;카레만들기&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=&quot;../images/sample/curry.jpg&quot; alt=&quot;카레이미지&quot; title=&quot;설명&quot;&gt; &lt;h2&gt;커리 (Curry) 재료&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;카레 가루 100g&lt;/li&gt; &lt;li&gt;닭가슴살 200g&lt;/li&gt; &lt;li&gt;감자 1개&lt;/li&gt; &lt;li&gt;양파 1/2개 &lt;/li&gt; &lt;li&gt;당근 1/2개&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;커리(Curry) 만드는 법&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;카레 가루 8큰술에 물 6큰술을 넣어 풀어놓는다.&lt;/li&gt; &lt;li&gt;닭가슴살, 감자, 양파, 당근 등을 따로 중불에 살짝 볶는다.&lt;/li&gt; &lt;li&gt;볶아 놓은 재료를 카레를 풀어놓은 물과 함께 냄비에 넣고 물 2컵을 부은 후 15분 정도 끓인다.&lt;/li&gt; &lt;/ol&gt; &lt;ul&gt; &lt;!--절대경로--&gt; &lt;li&gt;&lt;a href=&quot;/WebUI/media/bibi.mp3&quot;&gt;음악파일&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;비디오 파일&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;!--상대경로--&gt; &lt;li&gt;&lt;a href=&quot;../media/bibi.mp3&quot;&gt;음악파일&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;비디오 파일&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; . HTML5 텍스트 꾸미기 . 03_html5_text.html . &lt;!-- 03_html5_text.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;제주 올레&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;제주 올레&lt;/h1&gt; &lt;b&gt;진하게&lt;/b&gt; &lt;br /&gt; &lt;strong&gt;중요한&lt;/strong&gt; &lt;br /&gt; &lt;em&gt;강조&lt;/em&gt; &lt;br /&gt; &lt;b&gt;&lt;i&gt; 진하게 이탤릭체&lt;/i&gt;&lt;/b&gt; &lt;br /&gt; 보통문자 &lt;small&gt;작은문자&lt;/small&gt; &lt;br /&gt; 보통문자 &lt;sup&gt;윗첨자&lt;/sup&gt; &lt;br /&gt; 보통문자 &lt;sub&gt;아래첨자&lt;/sub&gt; &lt;br /&gt; &lt;del&gt;삭제&lt;/del&gt; &lt;br /&gt; &lt;ins&gt;추가&lt;/ins&gt; &lt;br /&gt; &lt;mark&gt;하이라이팅&lt;/mark&gt; &lt;br /&gt; 제주 올레 제주 올레 7코스 &lt;!-- 2. 수봉로 글씨만 하이라이팅 --&gt; &lt;p&gt; 외돌개를 출발하여 법환포구를 경유해 월평포구까지 어어진 해안올레. 올레인들이 가장 아끼고자연생태길인 &lt;mark&gt;&#39;수봉로&#39;&lt;/mark&gt; 를 만날 수 있다. &lt;mark&gt;수봉로&lt;/mark&gt; 는 세 번째 코스 개척 시기인 2007년 12월, 올레지기인 &#39;김수봉&#39;님이 염소가 다니던 길에 직접 삽과 곡괭이만으로 계단과 길을 만들어서 사람이 걸어다닐 수 있도록 한 길이다. &lt;/p&gt; &lt;!-- 1 --&gt; &lt;p&gt; &lt;b&gt;패스포트 스탬프 확인 장소&lt;/b&gt;&lt;br /&gt; &lt;!-- 진하게 --&gt; &lt;strong&gt;시작 외돌개 제주 올레 안내소&lt;/strong&gt;&lt;br /&gt; &lt;!-- 중요하게 --&gt; &lt;em&gt;중간 강정 올레 쉼터&lt;/em&gt;&lt;br /&gt; &lt;!-- 강조 --&gt; &lt;i&gt;종점 월평 송이 슈퍼&lt;/i&gt;&lt;br /&gt; &lt;!-- 이탤릭체 --&gt; &lt;/p&gt; &lt;!-- 3. 삭제할 글자와 밑줄을 --&gt; &lt;p&gt; 난이도 : 상 길이: 총 16.4km(4~5시간) 수봉로는 언덕길이고 일강정 바당올레에서 서건도 사이 바윗길이 험한 편이다 &lt;!-- &lt;pre&gt; text형식 살려줌 --&gt; &lt;pre&gt;수봉로는 언덕길이고 일강정 바당올레에서 서건도 사이 바윗길이 험한 편이다 외돌개 산책로에서 외돌개가 보인다. 전설을 들어보면 가슴 아리다 &lt;/pre&gt; &lt;!-- &lt;p&gt;에서 공백살리고 싶다면, &amp;nbsp해줘야함. --&gt; &lt;p&gt;수봉로는 언덕길이고 &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; 일강정 바당올레에서 서건도 사이 바윗길이 험한 편이다 외돌개 산책로에서 외돌개가 보인다. 전설을 들어보면 가슴 아리다&lt;/p&gt; &lt;/p&gt; &lt;section&gt; &lt;figure&gt; &lt;!-- 그림과 설명을 묶어줌. --&gt; &lt;img src=&#39;../images/new/road1.jpg&#39; /&gt; &lt;figcaption&gt;수봉로 언덕을 넘자마자 다시 만나게 되는 바다.&lt;/figcaption&gt; &lt;/figure&gt; &lt;figure&gt; &lt;img src=&#39;/WebUI/images/new/road2.jpg&#39; /&gt; &lt;figcaption&gt;외돌개 산책로에서 외돌개가 보인다. 전설을 들어보면 가슴 아리다&lt;/figcaption&gt; &lt;/figure&gt; &lt;/section&gt; &lt;/body&gt; &lt;/html&gt; . html5 span . 04_html5_span.html . &lt;!-- 04_html5_span.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;푸터 영역 | WebCafe&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; address { clear:both; padding:0 0 15px 3px; font-size:15px; line-height:1.5; color:#787878; &lt;!-- rgb color는 16진수 --&gt; } address .addr { padding-right:10px; color : #9922cc; font-size: 18px; } address .tel, address .fax { padding: 0px 3px; color : #aa3302; font-family : Serif; } address .copyright { padding-right:10px; color : #ee1212; font-size: 13px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;footer&quot;&gt; &lt;!-- id 찾을때는 # --&gt; &lt;div class=&quot;footerInner&quot;&gt;&lt;!-- class 찾을때는 . --&gt; &lt;p class=&quot;footerLogo&quot;&gt;&lt;img src=&quot;../images/common/logo_copyright.gif&quot; alt=&quot;WebCafe&quot; /&gt;&lt;/p&gt; &lt;h2&gt;사이트 이용안내&lt;/h2&gt; &lt;ul class=&quot;guideMenu&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;회사소개&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;개인정보보호정책&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;이메일주소무단수집거부&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Contact Us&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Site map&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;address&gt; &lt;span class=&quot;addr&quot;&gt;서울시 마포구 상수동 123-12 한주빌딩 5층&lt;/span&gt; &lt;span class=&quot;tel&quot;&gt;· 전화: 02-1234-1234&lt;/span&gt; &lt;span class=&quot;fax&quot;&gt;· FAX: 02-1234-1234&lt;/span&gt; &lt;span class=&quot;email&quot;&gt;· E-MAIL: webmaster@mail.com&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;copyright&quot;&gt;Copyright ⓒ Web Cafe CORPORATION ALL RIGHTS RESERVED.&lt;/span&gt; &lt;/address&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . HTML5 테이블 만들기 . 05_html5_table.html . &lt;!-- 05_html5_table.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;EUC-KR&quot;&gt; &lt;title&gt;05_html5_table.html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;table border =&#39;2&#39;&gt; &lt;tr&gt;&lt;td&gt;가&lt;/td&gt;&lt;td colspan = &#39;2&#39;&gt;가&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td rowspan = &#39;2&#39;&gt;A&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ㄱ&lt;/td&gt;&lt;td&gt;ㄱ&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;br/&gt; &lt;table border =&#39;2&#39;&gt; &lt;tr&gt;&lt;th colspan=&#39;2&#39;&gt;부서명&lt;/th&gt;&lt;th&gt;전화번호(02+)&lt;/th&gt;&lt;th&gt;팩스번호(02+)&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td colspan=&#39;2&#39;&gt;종합상황실&lt;/td&gt;&lt;td&gt;123-1001~1005&lt;/td&gt;&lt;td&gt;321-1001&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td rowspan=&#39;3&#39;&gt;비서실&lt;/td&gt;&lt;td&gt;비서실장&lt;/td&gt;&lt;td&gt;123-1111&lt;/td&gt;&lt;td rowspan=&#39;3&#39;&gt;321-1002(사장)&lt;br/&gt;321-1003(감사)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;비서실&lt;/td&gt;&lt;td rowspan=&#39;2&#39; &gt;123-1112 &lt;br/&gt;123-1113&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td rowspan=&#39;3&#39;&gt;홍보실&lt;/td&gt;&lt;td&gt;홍보실장&lt;/td&gt;&lt;td&gt;123-1001&lt;/td&gt;&lt;td rowspan=&#39;3&#39;&gt;321-1101&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;홍보부&lt;/td&gt;&lt;td&gt;123-2001~123-2009&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;국제협력부&lt;/td&gt;&lt;td&gt;123-1230~1234&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . HTML5 폼 만들기 . 06_html5_form.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;EUC-KR&quot;&gt; &lt;title&gt;06_html5_form.html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&#39;xxxx.jsp&#39; method=&#39;get&#39;&gt; &lt;fieldset&gt; &lt;legend&gt; 개인정보 &lt;/legend&gt; &lt;ol&gt; &lt;li&gt; &lt;!-- label id는 같이 줘야 두개를 하나로 인식함. --&gt; &lt;label for=&#39;name&#39;&gt;이름&lt;/label&gt; &lt;input type=&#39;text&#39; name=&#39;name&#39; id=&#39;name&#39; placeholder=&#39;홍길동&#39; required&gt; &lt;!-- required 필수입력 지정 --&gt; &lt;/li&gt; &lt;li&gt;&lt;label for=&#39;email&#39;&gt;이메일&lt;/label&gt; &lt;input type=&#39;email&#39; name=&#39;email&#39; id=&#39;email&#39; placeholder=&#39;abc@encore.com&#39; required&gt; &lt;/li&gt; &lt;li&gt;&lt;label for=&#39;tel&#39;&gt;전화번호&lt;/label&gt; &lt;input type=&#39;tel&#39; name=&#39;tel&#39; id=&#39;tel&#39; placeholder=&#39;010-000-0000&#39;&gt;&lt;/li&gt; &lt;li&gt;&lt;label for=&#39;mybirth&#39;&gt;생일&lt;/label&gt; &lt;input type=&#39;date&#39; name=&#39;birth&#39; id=&#39;mybirth&#39; placeholder=&#39;1989-05-06&#39;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/fieldset&gt; &lt;fieldset&gt; &lt;ol&gt; &lt;legend&gt; 코딩 숙련도(상,중,하) &lt;/legend&gt; &lt;li&gt;&lt;label for=&#39;skill&#39;&gt;&lt;/label&gt; &lt;input type=&quot;range&quot; name=&quot;skill&quot; id=&quot; skill&quot; min=&quot;0&quot; max=&quot;3&quot;&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/fieldset&gt; &lt;fieldset&gt; &lt;input type=&#39;submit&#39; value=&#39;전송&#39; /&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . 심플 폼 예제 . 06_simpleform.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;EUC-KR&quot;&gt; &lt;title&gt;06_simpleform.html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- method는 전송방식이며, get과 post가 있고 get이 default. get방식은 body에 넣어서 주소에 보이고, post는 head에 넣어서 주소에 안보임.--&gt; &lt;form action=&quot;xxxxx.jsp&quot; method=&#39;post&#39;&gt; &lt;fieldset&gt; &lt;legend&gt;회원가입&lt;/legend&gt; &lt;ol&gt; &lt;li&gt;이름 : &lt;input name=&#39;irum&#39; type=&#39;text&#39; /&gt;&lt;/li&gt; &lt;li&gt;비밀번호 : &lt;input name=&#39;pw&#39; type=&#39;password&#39; /&gt;&lt;/li&gt; &lt;li&gt;성별 &lt;input name=&#39;gender&#39; type=&#39;radio&#39; value=&quot;men&quot; /&gt;남자 &lt;input name=&#39;gender&#39; type=&#39;radio&#39; value=&quot;women&quot; /&gt;여자 &lt;/li&gt; &lt;li&gt;직업 &lt;select name=&quot;job&quot;&gt; &lt;option value=&quot;program&quot; selected=&quot;selected&quot;&gt;프로그래머&lt;/option&gt; &lt;option value=&quot;nojob&quot;&gt;백수&lt;/option&gt; &lt;option value=&quot;lawyer&quot;&gt;변호사&lt;/option&gt; &lt;/select&gt;&lt;/li&gt; &lt;li&gt;취미 &lt;input name=&#39;hobby&#39; type=&#39;checkbox&#39; value=&quot;sleep&quot; /&gt;잠자기 &lt;input name=&#39;hobby&#39; type=&#39;checkbox&#39; value=&quot;eat&quot; /&gt;먹기 &lt;input name=&#39;hobby&#39; type=&#39;checkbox&#39; value=&quot;breath&quot; /&gt;숨쉬기 &lt;input name=&#39;hobby&#39; type=&#39;checkbox&#39; value=&quot;spaceout&quot; /&gt;멍때리기 &lt;/li&gt; &lt;li&gt;성별 &lt;input name=&#39;gend&#39; type=&#39;radio&#39; value=&quot;men&quot; /&gt;남자 &lt;input name=&#39;gender&#39; type=&#39;radio&#39; value=&quot;women&quot; /&gt;여자 &lt;/li&gt; &lt;li&gt;&lt;input type=&#39;submit&#39; value=&#39;확인&#39; /&gt; &lt;input type=&#39;reset&#39; value=&#39;취소&#39; /&gt;&lt;/li&gt; &lt;li&gt; 여행하고 싶은 장소 : &lt;input type = &#39;text&#39; list=&#39;countries&#39;/&gt; &lt;datalist id=&#39;countries&#39;&gt; &lt;option value = &#39;칠레&#39;/&gt; &lt;option value = &#39;스페인&#39;/&gt; &lt;option value = &#39;스위스&#39;/&gt; &lt;/datalist&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . HTML5 이전 이메일 폼 . 06_email_old_form.html . &lt;!-- 06_email_old_form.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;old form&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;myform&quot; action=&quot;#&quot;&gt; &lt;label for=&quot;email&quot;&gt;email&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;email&quot; name=&quot;email&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;script&gt; document.querySelector(&quot;#myform&quot;).addEventListener(&quot;submit&quot;, function(e){ var email = document.querySelector(&quot;#email&quot;); var isValidate = false; var regexp = /[a-z]+[a-z0-9]* .?[a-z0-9]*@[a-z0-9]+ .?[a-z0-9]*/i; if(!regexp.test(email.value)){ alert(&quot;이메일 형식이 다릅니다.&quot;); e.preventDefault(); } }); &lt;/script&gt; &lt;/html&gt; . HTML5 이메일 폼 . 06_email_html5_form.html . &lt;!-- 06_email_html5_form.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;new form&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;myform&quot; action=&quot;#&quot;&gt; &lt;label for=&quot;email&quot;&gt;email&lt;/label&gt; &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . iframe . 07_iframe.html . &lt;!-- 07_iframe.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;EUC-KR&quot;&gt; &lt;title&gt;07_iframe.html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=&#39;http://www.daum.net&#39; target = &#39;leftFrm&#39;&gt;다음&lt;/a&gt; &lt;a href=&#39;http://www.nate.com&#39; target = &#39;rightFrm&#39;&gt;네이트&lt;/a&gt;&lt;hr/&gt;&lt;hr/&gt; &lt;iframe src=&#39;http://www.etnews.com&#39; width=&#39;500&#39; height=&#39;500&#39; name=&#39;leftFrm&#39;&gt;&lt;/iframe&gt; &lt;iframe src=&#39;http://www.mk.co.kr&#39; width=&#39;500&#39; height=&#39;500&#39; name=&#39;rightFrm&#39;&gt;&lt;/iframe&gt; &lt;/body&gt; &lt;/html&gt; . 08_iframe.html . &lt;!-- 08_iframe.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;EUC-KR&quot;&gt; &lt;title&gt;08_iframe.html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;iframe src = &#39;./08_sub.html&#39; width=&#39;500&#39; height=&#39;500&#39; name=&#39;left&#39;&gt;&lt;/iframe&gt; &lt;iframe src = &#39;&#39; width=&#39;500&#39; height=&#39;500&#39; name=&#39;right&#39;&gt;&lt;/iframe&gt; &lt;/body&gt; &lt;/html&gt; . 08_sub.html . &lt;!-- 08_sub.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;EUC-KR&quot;&gt; &lt;title&gt;08_sub.html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;a href=&#39;http://www.daum.net&#39;&gt;다음&lt;/a&gt; &lt;a href=&#39;http://www.nate.com&#39; target=&#39;right&#39;&gt;네이트&lt;/a&gt; &lt;a href=&#39;http://www.naver.com&#39; target=&#39;_top&#39;&gt;네이버&lt;/a&gt; &lt;a href=&#39;http://www.korea.com&#39; target=&quot;_blank&quot;&gt;코리아&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . HTML5 구조 . 99_html5구조_css.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;html5 structure&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;99_html5구조.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;header&gt; &lt;h1&gt; &lt;mark&gt;HTML5&lt;/mark&gt;문서의 주요 구조 &lt;/h1&gt; &lt;h2&gt;HTML5를 처음 공부하는 당신을 위해&lt;/h2&gt; &lt;/header&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;header&lt;/li&gt; &lt;li&gt;nav&lt;/li&gt; &lt;li&gt;section&lt;/li&gt; &lt;li&gt;article&lt;/li&gt; &lt;li&gt;footer&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;section&gt; &lt;article&gt; &lt;header&gt; &lt;h2&gt;header란?&lt;/h2&gt; &lt;time&gt;posted 2016-01-01&lt;/time&gt; &lt;/header&gt; &lt;p&gt;header란 head와 다르다.&lt;/p&gt; &lt;p&gt;주로 문서의 제목을 나타낼 때 사용된다.&lt;/p&gt; &lt;footer&gt; &lt;p&gt;comments (0)&lt;/p&gt; &lt;/footer&gt; &lt;/article&gt; &lt;article&gt; &lt;header&gt; &lt;h2&gt;nav란?&lt;/h2&gt; &lt;time&gt;posted 2016-01-01&lt;/time&gt; &lt;/header&gt; &lt;p&gt;nav는 화면에서 메뉴를 주로 나타낸다.&lt;/p&gt; &lt;p&gt;일반적으로 ul &gt; li 항목으로 표현한다.&lt;/p&gt; &lt;footer&gt; &lt;p&gt;comments (0)&lt;/p&gt; &lt;/footer&gt; &lt;/article&gt; &lt;/section&gt; &lt;aside&gt; &lt;ul&gt; &lt;li&gt;&lt;header&gt;&amp;lt;head&amp;gt;&lt;/header&gt; &lt;p&gt;단순히 문서의 정보 표시&lt;/p&gt;&lt;/li&gt; &lt;li&gt;javascript&lt;/li&gt; &lt;/ul&gt; &lt;/aside&gt; &lt;footer&gt; &lt;p&gt;copyright &amp;copy; 2014 ~&lt;/p&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . 99_html5구조.css . @CHARSET &quot;UTF-8&quot;; * { margin: 0px; padding: 0px; /* border:solid 1px black; */ } h1 { font: bold 20px verdana, sans-serif; } h2 { font: bold 14px verdana, sans-serif; } body { text-align: center; } #wrapper { width: 960px; margin: 15px auto; text-align: left; } #wrapper&gt;header { background: #fffbb9; border: solid 1px #999999; padding: 20px; } nav { background: #cccccc; padding: 5px 15px; text-align: right; } nav&gt;ul&gt;li { display: inline-block; list-style: none; padding: 5px; font: bold 14px verdana, sans-serif; } section { float: left; width: 660px; margin: 20px; } aside { float: left; width: 220px; margin: 20px 0px; padding: 20px; background: #cccccc; } article&gt;footer { text-align: right; } #wrapper&gt;footer { clear: both; text-align: cneter; padding: 20px; border-top: 2px solid #999999; } article { background: #fffbcc; border: 1px solid #999999; padding: 20px; margin-bottom: 15px; } time { color: #999999; } time:hover { font-size: 20px; } article footer:active { font-size: 20px; } . 99_mobile_form.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;euc-kr&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;/&gt; &lt;title&gt;모바일 페이지&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;#&quot; &gt; 날짜: &lt;input type=&quot;date&quot; min=&quot;2011-11-01&quot; max=&quot;2021-12-31&quot; step=&quot;1&quot; value=&quot;2018-11-11&quot;/&gt; &lt;br/&gt; 범위: &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;1&quot; value=&quot;50&quot;/&gt; &lt;br/&gt; 숫자: &lt;input type=&quot;number&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;1&quot; value=&quot;50&quot;/&gt; &lt;br/&gt; 검색: &lt;input type=&quot;search&quot;/&gt; &lt;br/&gt; URL: &lt;input type=&quot;url&quot; list=&quot;url_list&quot;/&gt; &lt;br/&gt; 메일: &lt;input type=&quot;email&quot;/&gt; &lt;br/&gt; 힌트문자: &lt;input type=&quot;text&quot; placeholder=&quot;이름을 입력하세요&quot;/&gt; &lt;br/&gt; 자동포커스: &lt;input type=&quot;text&quot; autofocus/&gt; &lt;br/&gt; 빈값검사: &lt;input type=&quot;text&quot; required/&gt; &lt;br/&gt; 정규표현식: &lt;input type=&quot;text&quot; pattern=&quot;(010|011)- d{3,4}- d{4}&quot;/&gt; &lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2019/05/29/HTML5_%EC%98%88%EC%A0%9C.html",
            "relUrl": "/web/2019/05/29/HTML5_%EC%98%88%EC%A0%9C.html",
            "date": " • May 29, 2019"
        }
        
    
  
    
        ,"post152": {
            "title": "[WEB] HTML5 이론",
            "content": "웹 구조 . 1. URI . 클라이언트 (web browser) &lt;&gt; 웹 서버 . URL(Uniform Resource Locator): 실제의 네트워크 경로를 가리키며, 네트워크 상의 리소스 접근시에 사용, ex) http://www.xmlgo.net/document/editor/editor.html | URN(Uniform Resource Name): 위치에 독립적인 이름을 제공하기 위해서 존재, ex) urn:xmlgo:registry1 | URL &gt;(포함) URL + URN | . # URI 예제 http://www.site.com:port/forder/file.html http : 통신프로토콜 www.site.com : HostName(IP주소) folder : 폴더명 file.html : 파일명 . # URI 예제 - 쿼리스트링(query string) http://www.site.com:port/forder/file.html?kind=book&amp;cate=it kind : name book : value kind=book : parameter cate : name it : value cate=it : parameter kind=book&amp;cate=it : query string . 2. http . Hyper-Text Transfer Protocol (TCP/IP 기반) | . HTTP Request(요청) 예제 . GET /test/test.html HTTP/1.1 Accept: */* Accept-Language:ko . HTTP Response(응답) 예제 . HTTP/1.1 200 OK Server: Microsoft-llS/5.1 X-Powered-By: ASP.NET . 응답 상태 코드 . 200: OK | 403: Forbidden | 404: Not Found | 500: Server Error | 503: Service Unavailable | . 웹 표준 . ISO 국제적 표준화 단체에서 표준으로 권장 | . 웹표준의 장점 . 수정과 관리의 용이 | 웹 접근성의 향상 | 검색엔진 최적화 | 호환성 제공 | . 관련규약 . HTML: 구조언어 | JavaScript: 동작언어 | CSS: 표현언어 | . 테스트툴 . http://validator.w3.org (영어) | http://validator.kldp.org (한글) | 직접입력을 누르고 텍스트창에 소스코드를 복사한 후 검사 버튼을 눌ㄹ러 바로 확인가능 | . 웹접근성 . 어떤 사용자(장애인, 고령자를 포함), 어떠한 기술 환경에서도 전문적인 능력없이 웹 사이트를 비 장애인과 동일하게 접근, 이용할 수 있도록 보장해야 한다. | . 웹접근성의 올바른 예 . &lt;img src=&quot;/images/Guide/img01_map.gif&quot; alt=&quot;한국정보화진흥원 약도: 지하철 9호선 등촌역 1번출구로 나와서 이백미터 직진. 백석초등학교 옆(등촌중학교 건너편) 한국정보화진흥원&quot;&gt; . HTML5 . 기본구조 . HTML: Hyper Text Markup Language | DOCTYPE: html의 버전을 브라우저에 지시, 정확한 화면 출력을 위해 반드시 기재(없으면 웹표준과 IE의 폭 범위가 달라서 화면 크기가 변경됨) | . markup 용어 . 요소(element): &lt;p&gt;&lt;a href=&quot;#&quot;/&gt;&lt;/p&gt; 속성(attribute): &lt;p id=&quot;아이디&quot; class=&quot;클래스&quot; title=&quot;제목&quot;&gt;문장&lt;/p&gt; 값(value): &lt;p id=&quot;아이디&quot; class=&quot;클래스&quot; title=&quot;제목&quot;&gt;문장&lt;/p&gt; . HTML5 규칙 . 종료 태그 생략 불가능 . html4: &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt; html5: &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; . 요소명과 속성명에 소문자 사용 . html4: &lt;P&gt;&lt;IMG SRC=&quot;&quot; ALT=&quot;&quot;&gt; html5: &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; . 빈 요소에도 종료 태그 기술 . html4: &lt;img src=&quot;&quot; alt=&quot;&quot;&gt; html5: &lt;img src=&quot;&quot; alt=&quot;&quot;/&gt; . 속성에 속성값 생략 불가 . html4: &lt;option selected&gt;&gt;&lt;/option&gt; html5: &lt;option selected=&quot;selected&quot;&gt;&lt;/option&gt; . 속성값에 인용부호 사용 . html4: &lt;img src=xxx.gif alt=사진&gt; html5: &lt;img src=&quot;xxx.gif&quot; alt=&quot;사진&quot;&gt; . HTML5 새로운 태그 . 태그 설명 . section | 세션의 제목을 나타내는 h1~h6과 함께 사용 | . article | 뉴스 기사나 블로그 표시 | . aside | 문서의 주요 부분을 표시하고 남은 사이드바 표시 | . hgroup | 제목과 부제목을 하나로 묶음 | . header | 헤더 부분으로 사이트 소개나 내비게이션 등을 표시하고 머리글 역할 | . footer | 푸터 부분으로, 사이트 제작자나 저작권 정보 등을 표시 | . nav | 사이트 안의 내비게이션 요소 | . figure, figcaption | 그림이나 비디오 같은 멀티미디어 캡션을 붙일 때 사용 | . audio, video | 오디오, 비디오 | . embed | 플러그인 콘텐츠를 표시 | . mark | 텍스트에 강조효과 | . progress | 시간이 걸리는 작어봑정을 막대로 표시 | . meter | 측정값 표시 | . time | 날씨나 시간 표시 | . ruby, rt, rp | 루비문자 표현 | . canvas | 그림을 그릴 수 있는 캔버스 | . command | 사용자 실행 명령어 표시 | . details | 추가적인 정보 표시 | . datalist | 사용자가 텍스트 필드에 내용을 입력할 때 선택할 수 있는 값들을 목록으로 보여줌 | . keygen | 폼 양식을 서버로 전송할 때 한 쌍의 키를 만들어 private key는 로컬에 저장하고 public key는 서버에 저장함 | . output | 수학적인 계산의 결과값을 표시 | . HTML5 새로운 속성 . 태그 속성 설명 . charset | meta | 문자 인코딩 | . script | async | 스크립트를 실행할 수 있게 되면 비동기적으로 실행 | . html | menifest | 오프라인 웹 캐시를 사용할 경우 menifest 파일의 경로를 지정 | . a | media | 링크할 미디어를 지정 | . area | media | 링크할 미디어를 지정 | . - | hreflang | 링크하는 대상의 언어를 지정 | . - | ref | area가 포함된 문서와 area가 링크하는 대상 간의 관계를 지정 | . base | target | href 송성에서 지정한 링크의 target을 지정 | . li | value | 첫 번째 항목의 값을 지정 | . ol | reversed | 목록이 역순으로 표시 | . - | start | 첫 번째 항목의 시작값을 지정 | . input, select, textarea, button | autofocus | 포커스를 지정 | . input, textarea | required | 필수입력필드 설정 | . input, textarea | placeholder | 입력필드에 힌트 표시 | . input | autocomplete | 자동완성기능을 지정 | . - | min, max | 숫자나 범위의 최소값과 최대값 지정 | . - | multiple | 값을 여러 개 허용 | . - | pattern | 조건을 사용하는 일반식 표시 | . - | step | 숫자나 범위를 지정할 때 값을 조절하는 단계를 지정 | . form | novalidate | 서버로 양식을 전송하는 동안 유효했는지 보증할 수 없음을 나타냄 | . menu | type | 메뉴의 종류 toolbar, context 선택 | . - | type | 메뉴명을 지정 | . style | scoped | 해당 요소의 부모 요소와 자식 요소가 스타일의 적용 대상이 됨. 이 속성이 없으면 스타일의 적용대상이 문서 전체가 됨 | . iframe | seamless | 문서 내용의 일부인 것처럼 끼워 넣는 표시 만남 | . - | sandbox | iframe 안에 플러그인이나 폼, 스크립트 등의 기능을 허용함 | . HTML5 구조화 . . HTML5 태그 . 블록 태그와 인라인 태그 . 태그 : 블록태그와 인라인 태그로 구분 . 블록 태그 사례: &lt;p&gt;, &lt;h1&gt;, &lt;div&gt;, &lt;ul&gt; | 인라인 태그 사례: &lt;strong&gt;, &lt;a&gt;, &lt;img&gt;, &lt;span&gt; | . 블록 태그 . 항상 새 라인에서 시작하여 출력 | 양 옆에 다른 콘텐트를 배치하지 않고 한 라인 독점 사용 | 가장 많이 사용되는 블록 태그: &lt;div&gt; | . 인라인 태그 . 블록 속에 삽입되어 블록의 일부로 출력 | 가장 많이 사용된 인라인 태그: &lt;span&gt; | . 문단(sections) . 태그 기능 . &lt;article&gt; | 문서의 독립적인 부분을 구성하는 섹션 | . &lt;section&gt; | 일반적인 문서 섹션 | . &lt;nav&gt; | 네비게이션 링크로 구성된 섹션 | . &lt;h1&gt;~&lt;h6&gt; | 중요도에 따른 소개말 섹션 | . &lt;header&gt; | 머릿말: 소개 &lt;h1&gt;~&lt;h6&gt;, 네비게이션&lt;nav&gt; 등을 묶음 | . &lt;footer&gt; | 꼬리말: 작성자, 연관, 링크, 저작권 등의 정보 &lt;address&gt;와 &lt;nav&gt; 등을 포함 | . &lt;address&gt; | 작성자, 링크, 저작권 등의 정보 블럭요소 | . 그룹(grouping) . 태그 기능 . &lt;p&gt; | 문단(paragraph) | . &lt;hr&gt; | 수평선(horizontal rule) | . &lt;pre&gt; | 공백문자와 줄바꿈 문자를 보존(preformatted text) | . &lt;ol&gt; / &lt;li&gt; | 순서가 있는 목록(ordered list) | . &lt;ul&gt; / &lt;li&gt; | 순서가 없는 목록(unordered list) | . &lt;dl&gt; / &lt;dt&gt; &lt;dd&gt; | 정의 목록 | . &lt;figure&gt; / &lt;figcaption&gt; | 사진, 다이아그램, 코드 등을 문서에 포함 | . &lt;div&gt; | 그룹핑 블럭 요소 | . 글자(text) . 태그 기능 . &lt;mark&gt; | 문서 내에 하이라이트 표시 | . &lt;sup&gt; | 윗 첨자 | . &lt;sub&gt; | 아랫 첨자 | . &lt;em&gt; &lt;strong&gt; | 강조 | . &lt;span&gt; | 글자를 그룹핑 | . &lt;ins&gt; / &lt;del&gt; | 추가된 문장 / 삭제된 문장 | . Inline level element: 새로운 행으로 표시되지 않기 때문에 width, height 속성 없이 문자 취급됨 | . embedded . &lt;!-- 이미지 --&gt; &lt;img src=&quot;이미지경로&quot; alt=&quot;대체문자열&quot; height=&quot;높이(pixel or %)&quot; width=&quot;폭(pixel or %)&quot; usemap=&quot;이미지맵이름&quot;&gt; &lt;!-- 오디오 --&gt; &lt;audio src=&quot;오디오경로&quot; autoplay=&quot;autoplay 자동재생여부&quot; loop=&quot;loop 반복재생여부&quot; controls=&quot;controls 재생버튼표시&quot; preload={auto | metadata | none}&gt; &lt;!-- 비디오 --&gt; &lt;video src=&quot;비디오경로&quot; autoplay=&quot;autoplay 자동재생여부&quot; loop=&quot;loop 반복재생여부&quot; controls=&quot;controls 재생버튼표시&quot; poster=&quot;재생되기 전에 이미지 경로&quot; audio=&quot;muted&quot;&gt; &lt;!-- 비디오 예시 --&gt; &lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt; &lt;!-- 다양한 브라우저의 지원을 받으려면 source 태그 --&gt; &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt; &lt;!-- 코덱 --&gt; &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg;codes&quot;&gt; &lt;!-- 자막파일 --&gt; &lt;track src=&quot;subtitle_en.vtt&quot; srclang=&quot;en&quot; label=&quot;English&quot;&gt; &lt;track src=&quot;subtitle_ko.vtt&quot; srclang=&quot;ko&quot; label=&quot;Korea&quot;&gt; Your browser does not support the video tag &lt;/video&gt; &lt;iframe src=&quot;페이지 경로&quot; noresize=&quot;noresize&quot; scrolling={yes | no | auto} frameborder={0|1|} marginheight=&quot;pixels&quot; marginwidth=&quot;pixels&quot;&gt; . table . 태그 의미 속성 . &lt;table&gt; | 테이블 | border=”숫자” | . &lt;tr&gt; | 행 | align={right | left | center | justify | char} valign={top | middle | bottom | baseline} | . &lt;td&gt; | 열 | colspan=”숫자”rowspan=”숫자” | . &lt;th&gt; | 테이블의 머리셀 정의 | - | . &lt;thead&gt;, &lt;tbody&gt;, &lt;tfoot&gt; | 그룹화 | - | . &lt;caption&gt; | 테이블 제목 | - | . Form . &lt;form&gt; 사용자 입력 데이터를 서버에 전송 . action = &quot;http request URL&quot; method = {get | post} target = {_blank | _self | _parent | _top | frame_name} enctype = {text/palin | multipart/form-data} name = &quot;form_name&quot; . &lt;label&gt; User Interface의 제목 역할 . &lt;lable&gt; ID: &lt;input type=&quot;text&quot; name=&quot;id&quot; /&gt; &lt;/label&gt; &lt;label for=&quot;pwd&quot;&gt;PWD:&lt;/label&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot; id=&quot;pwe&quot; /&gt; . &lt;input&gt; 사용자 입력 . name = &quot;http request parameter name&quot; value = &quot;http request parameter name&quot; type = {text | button | checkbox | radio | file | password | image | submit | hidden | email | url | number | range | date | time | datetime | color | ...} . &lt;select&gt; 드랍다운 리스트 . &lt;select&gt; &lt;optgroup label=&quot;IT&quot; size=&quot;2&quot;&gt; &lt;option value=&quot;programmer&quot;&gt;개발자&lt;/option&gt; &lt;option value=&quot;pm&quot; select=&quot;selected&quot;&gt;팀장&lt;/option&gt; &lt;/optgroup&gt; &lt;optgroup label=&quot;HR&quot;&gt; &lt;option value=&quot;superviser&quot;&gt;관리자&lt;/option&gt; &lt;option value=&quot;employee&quot;&gt;직원&lt;/option&gt; &lt;/optgroup&gt; &lt;/select&gt; . &lt;textarea&gt; 여러줄 입력창 . &lt;textarea row=&quot;10&quot; cols=&quot;30&quot;&gt; 여기에 여러문장 작성 &lt;/textarea&gt; .",
            "url": "https://safenumz.github.io/blog/web/2019/05/28/HTML5_%EC%9D%B4%EB%A1%A0.html",
            "relUrl": "/web/2019/05/28/HTML5_%EC%9D%B4%EB%A1%A0.html",
            "date": " • May 28, 2019"
        }
        
    
  
    
        ,"post153": {
            "title": "[MongoDB] MongoDB Cluster 구축",
            "content": "MongoDB 설치 . 3.6.4 버전 설치 | . &gt; show collections &gt; db.sarams.insert({ name : &#39;홍길동&#39;, age: 33}) &gt; db.sarams.insert({name: &#39;홍길자&#39;, hobby: [&#39;축구&#39;]}) &gt; db.sarams.find(); &gt; db.sarams.insert({&#39;_id&#39;: 11}) . db.members.insert( { name : &#39;송승헌&#39;, age : 33, grade:&#39;A&#39; } ) db.members.insert( { name : &#39;송승남&#39;, age : 23, grade:&#39;C&#39; } ) db.members.insert( { name : &#39;김남송&#39;, age : 25, grade:&#39;C&#39; } ) db.members.insert( { name : &#39;김남길&#39;, age : 27, grade:&#39;A&#39; } ) db.members.insert( { name : &#39;여진구&#39;, age : 30, grade:&#39;B&#39; } ) db.members.insert( { name : &#39;진구&#39;, age : 29, grade:&#39;A&#39; } ) db.members.insert( { name : &#39;조인성&#39;, age : 39, grade:&#39;B&#39; } ) db.members.insert( { name : &#39;소지섭&#39;, age : 33, grade:&#39;A&#39; } ) -- 33번만 검색 &gt; db.members.find({age: 33}) -- 나이가 25세 이상인 명단 출력 db.members.find({age:{$gte: 25 }}) -- 나이가 25세 이상 33세 이하 명단 출력 db.members.find({age:{$gte: 25}} $and {age:{$lte : 33}}) db.members.find({age:{$gte: 25, $lte: 33 }}) . Master Node . $ mongod --dbpath /data/data1 --master . $ mongo localhost:27017 $ db.printReplicationinfo() $ db.persons.insert({name: &#39;홍길동&#39;}) $ db.persons.insert({name: &#39;홍길자&#39;}) -- 오름차순 정렬 $ db.persons.find().sort({name: 1}) -- 내림차순 정렬 $ db.persons.find().sort({name: -1}) . Slave Node1 . $ mongod --dbpath /data/data2 --slave --source localhost:27017 --port 20000 $ mongo localhost:20000 -- 슬래이브에 관한 정보 보여줌 &gt; db.printSlaveReplicationinfo() &gt; use persondb &gt; db.psersons.setSlaveOk() &gt; db.persons.find() -- 에러 라이팅 불가, 라이팅은 마스터만 불가 &gt; db.persons.insert({name: &#39;홍홍이&#39;}) . sudo iptables -I INPUT -p tcp –dport 80 -j ACCEPT . mongo -u -p &lt;public_ip:&gt;:27017/ . Slave Node2 . $ mongod --dbpath /data/data3 --slave --source localhost:27017 --port 30000 $ mongo localhost:30000 -- 슬래이브에 관한 정보 보여줌 &gt; db.printSlaveReplicationinfo() &gt; use persondb &gt; db.psersons.setSlaveOk() &gt; db.persons.find() &gt; db.persondb.insert(name: &#39;홍홍이&#39;) . use admin db.createUser({ user: &quot;dbadmin&quot;, pwd: &quot;password&quot;, roles: [ { role: &quot;root&quot;, db: &quot;admin&quot; } ]} ) db.createUser({ user: &quot;rhostem&quot;, pwd: &quot;password&quot;, roles: [ { role: &quot;readWrite&quot;, db: &quot;test&quot; } ]} ) . 1번 . &gt; mongod --dbpath c: data work data1 --port 10000 -replSet bokjeSet &gt; mongo localhost:10000 &gt; config = { _id: &#39;bokjeSet&#39;,members:[ {_id:0, host:&#39;localhost:10000&#39;}, {_id:1, host:&#39;localhost:20000&#39;}, {_id:2, host:&#39;localhost:30000&#39;}]} &gt; rs.initiate(config) -- 1번을 마스터로 설정 &gt; db.isMaster() &gt; use persondb &gt; db.persondb.insert({name: &#39;kim&#39;}) &gt; db.persondb.insert({name: &#39;bae&#39;}) &gt; db.persondb.find() . 2번 . &gt; mongod --dbpath c: data work data2 --port 20000 -replSet bokjeSet &gt; mongo localhost:20000 &gt; use persondb &gt; rs.slaveOk() . 3번 . &gt; mongod --dbpath c: data work data3 --port 30000 -replSet bokjeSet &gt; mongo localhost:30000 &gt; use persondb &gt; rs.slaveOk() . netstat : 실행중인 port 찾기 netstat -a -o : 실행중인 port 표시, 프로세스id(pid) 표시 taskkill /f /pid 1234 : 1234 프로세스id(pid) kill하기 . &gt; mongod --shardsvr --dbpath c: data work sh1 --port 10000 &gt; mongod --shardsvr --dbpath c: data work sh2 --port 20000 &gt; mongod --shardsvr --dbpath c: data work sh3 --port 30000 &gt; mongod --configsvr --dbpath c: data work cfg --port 40000 5번째 &gt; mongos --configdb localhost:40000 --chunkSize 1 6번째 창 &gt; mongos mongos&gt; use admin mongos&gt; db mongos&gt; db.runCommand( {addshard: &#39;localhost:10000&#39;}) mongos&gt; db.runCommand( {addshard: &#39;localhost:20000&#39;}) mongos&gt; db.runCommand( {addshard: &#39;localhost:30000&#39;}) mongos&gt; use persondb mongos&gt; db.persons.insert({name: &#39;Kim&#39;}) monbos&gt; db.persons.insert({name: &#39;Park&#39;}) . 7번째 창 mongos&gt; mongo mongos&gt; use admin mongos&gt; db.runCommand({enableSharding: &#39;persondb&#39;}) mongos&gt; db.runCommand({shardCollection:&#39;persondb.persons&#39;.key:{_id:1}}) mongos&gt; . 6번째 창 mongos&gt; for (var i = 0; i &lt; 1000000; i++) {db.persons.insert({i: i+1});} . mongodb 실행 . $ sudo service mongod start $ mongo . 1. mongodb root 계정 설정 . &gt; show databases; &gt; use admin; &gt; db; . &gt; db.createUser({user: &quot;아이디&quot;, pwd: &quot;비밀번호&quot;, roles:[&quot;root&quot;]}); &gt; exit; . 2.mongodb config 변경 . &gt; sudo vi /etc/mongod.conf . # mongod.conf # ... net: port: 27017 bindIp: 0.0.0.0 # ... security: authorization: &#39;enabled&#39; # ... . &gt; sudo service mongod restart . 3. root 계정으로 접속 . &gt; mongo &gt; show databases; &gt;exit . &gt; mongo -u 아이디 -p 비밀번호 &gt; show databases; . 4. database, user 생성 . &gt; use chatbot_service; &gt; db; &gt; db.createUser({user: &quot;developer&quot;, pwd:&quot;developer&quot;, roles:[&quot;readWrite&quot;]}); . 6. 외부 접속 . &gt; mongo -u developer -p developer public_ip:27017/chatbot_service &gt; db; . 원격 접속 설정 . 사용자 생성 . use admin # admin 데이터베이스 선택 db.createUser({ user: &quot;dbadmin&quot;, # 계정 이름 pwd: &quot;password&quot;, # 비밀번호 roles: [ # 사용자에게 주어진 권한 목록. 여러 데이터베이스에 대한 권한을 할당할 수 있다. { role: &quot;root&quot;, # built-in 권한인 root. 문자 그대로 모든 데이터베이스를 관리할 수 있다. db: &quot;admin&quot; # 어떤 데이터베이스에 대한 권한인지 명시 } ]} ) . db.createUser({ user: &quot;rhostem&quot;, pwd: &quot;password&quot;, roles: [ { role: &quot;readWrite&quot;, # 읽기, 쓰기 권한 db: &quot;test&quot; # 위의 권한을 부여할 데이터베이스로 test를 지정 } ]} ) . mongod.conf 파일 설정 . $ service mongod status . security: authorization: enabled net: port: 27017 bindIp: 0.0.0.0 . TCP 포트 개방 . 기본 포트 27107 | . 접속 명령어 . $ sudo mongo -u dbadmin -p --authenticationDatabase admin $ mongo -u dbadmin -p --host &lt;아이피 또는 도메인&gt; --authenticationDatabase admin . 기타설정 . 시스템 재시작 시 MongoDB를 자동으로 실행하도록 설정 . $ crontab -e . 맨 아래쪽에 재부팅 시점에 실행할 명령어를 추가한다. . @reboot sudo service mongod start . 데이터베이스 접속을 위한 쉘 스크립트 작성 . git 저장소에서 작업하고 있다면 쉘 스크립트에 비밀번호가 노출되면 안 되므로 별도에 파일에 저장해서 관리하는 편이 보안상 좋다. 예를들어 비밀번호를 .dbpasswd 파일에 저장했다면 해당 파일은 .gitignore 파일에 등록하고 쉘 스크립트를 아래와 같이 작성한다. | . # connect-db.sh passwd=$(&lt;.dbpasswd) # 변수 passwd에 .dbpasswd 파일의 내용을 할당. mongo -u rhostem -p $passwd --host db.host.name --authenticationDatabase admin .",
            "url": "https://safenumz.github.io/blog/architecture/2019/05/28/MongoDB_Cluster_%EA%B5%AC%EC%B6%95.html",
            "relUrl": "/architecture/2019/05/28/MongoDB_Cluster_%EA%B5%AC%EC%B6%95.html",
            "date": " • May 28, 2019"
        }
        
    
  
    
        ,"post154": {
            "title": "[NoSQL] NoSQL 개념",
            "content": "NoSQL이란? . Not Only SQL: SQL 뿐만 아니라 | . NoSQL 특징 . 조인 없이 간단한 인터페이스를 사용하여 데이터를 추출 | 정해진 스키마가 없어 확장이 용이 | 여러 프로세스 상에서 동작하기에 빠른 검색이 가능 | 클라우드 컴퓨팅의 급격한 부상으로 관심이 높아짐 | 기존의 RDBMS에 비해 더 적은 비용으로 더 많은 데이터 처리가 가능 | 클라우드 컴퓨팅은 많은 데이터를 여러 대의 대용량 서버에 분산처리해야 하는데 NoSQL은 높은 확장성으로 적합 | 고사양 서버가 필요없이 일반 PC 여러 대로 분산처리가 가능 | . NoSQL 오해 . SQL 언어에 관한 것이 아니다 &gt; NoSQL은 SQL도 사용한다 빅데이터만 처리한다 &gt; 빅데이터만 처리하는 것은 아니다 오픈소스이다 &gt; 상업용 NoSQL 시스템도 있다 클라우드 컴퓨팅이어야 한다 &gt; 클라우드 뿐만 아니라 기업데이터센터에서도 실행 가능하다 . NoSQL 종류 . 키-값 저장소: 값에 접근하기 위해 키를 사용하는 단순한 데이터 저장 | 빅테이블 기반: row와 column을 키로 사용하는 sparse matrix 시스템 | 그래프 저장소: 개체 간의 관계 중심적인 문제를 그래프로 처리 | 문서 저장소: 복잡한 계층 구조를 가진 문서 데이터를 저장 | 종류 용도 NoSQL DB . 키-값 저장소 | - 이미지 저장소 - 키 기반 파일 시스템 - 객체 캐쉬 - 확장 가능한 설계 | - Redis - Mevcache - DynamoDB - Berkeley DB - Riak | . 빅테이블 기반 | - 웹 크롤링 결과 저장 - 일관된 규칙이 필요한 빅데이터 - 컬럼을 자유롭게 저장 가능 | - Apache HBase - Apache Cassandra - Google BigTable - Hypertable | . 그래프 저장소 | - 소셜 네트워크 - 복잡한 관계 중심 데이터 | - Neo4j - AllegroGraph - InfiniteGraph | . 문서 저장소 | - 다양한 형태의 데이터 - 문서 검색 및 출판 - 통합 및 연계 허브 - 웹 컨텐츠 관리 - JSON 포맷과 유사 | - MongoDB - CouchDB - etc … | . RDBMS와 비교 . RDBMS NoSQL . 장점 | - 데이터 무결성 보장 - 정규화된 테이블 지원 - 트랜잭션 지원 | - 웹 환경에서 다양한 형태의 정보를 검색하고 저장 가능 | . 단점 | - 확장성에 한계 존재 - 클라우드 분산 환경에 적합하지 않음 | - 데이터에 대한 무결성을 보장하지 않음 | . 설계 | - 어플리케이션 기능이 RDBMS에 집중된다 | - 데이터베이스 단계는 단순한 저장소 역할만 하고 대부분의 기능이 비즈니스 로직 단계에서 한다 | . 저장 순서 | - 데이터베이스에 저장한 데이터를 메모리로 옯기고 이를 다시 로그에 저장 | - 데이터를 먼저 로그에 저장하고, 그 다음에 메모리에 이동시키고 나서 저장할 시기가 오면 그 때 데이터베이스에 저장 | . 트랜젝션 처리 | - ACID 트랜잭션 - 일치성(consistency)에 초점 | - BASE 트랜잭션 - 가용성(availablity)에 초점 | . . [참고] ACID 트랜젝션 . . Atomicity(원자성) | 계좌이체시 두 계좌 간의 금액은 “All Or Nothing”이어야 한다. 트랜잭션 간에 오류 발생시 이를 극복하고 성공 완료를 하는데 실패하면 원래 상태로 되돌려야 한다. | . Consistency(일관성) | 계좌이체시 두 계좌의 전체 잔고가 변경되어서는 안된다 | . Isolation(고립성) | 트랜잭션의 각 부분은 다른 부분과 관계없이 독립적으로 실행되어야 한다. (즉 다른 작업 수행을 못한다) | . Durablity(영속성/지속성) | 트랜잭션이 완료됙 나면 그 결과는 영속성이어야 한다. | . [참고] BASE 트랜잭션 . . Basic Availablity | 일시적인 불일치를 허용하고 데이터의 일치성이 어긋나도 실행한다. | . Soft-State | 일시적인 불일치를 허용하여 데이터는 사용중에도 변경될 것이다. | . Eventual Consistency | 모든 서비스 로직이 실행되었을 떄, 결국엔 일치된 상태가 될 것이다. | . [참고] CAP 이론 . 네트워크 실패시 무엇을 우선할 것인가 | . . Consistency (일치성) | 복제된 파티션에서 여러 클라이언트가 동일한 아이템을 읽었을 떄 일치된 데이터를 조회하는 것 (ACID에서의 Consistency와 다름) | . high Availablity (고가용성) | 분산 DB는 클라이언트가 항상 지연없이 데이터를 갱신하도록 한다. 데이터 간의 통신 실패로 갱신을 막지 않는다. | . network Partition tolerance (네트워크 파티션에 대한 내구성) | DB 파티션 간에 통신 실패시 클라이언트 요청에는 반드시 응답할 수 있도록 한다. 즉 일부 노드에 문제가 발생해도 전체 시스템에 문제는 없도록 한다. | . . . .",
            "url": "https://safenumz.github.io/blog/nosql/2019/05/27/NoSQL_%EA%B0%9C%EB%85%90.html",
            "relUrl": "/nosql/2019/05/27/NoSQL_%EA%B0%9C%EB%85%90.html",
            "date": " • May 27, 2019"
        }
        
    
  
    
        ,"post155": {
            "title": "[MongoDB] MongoDB 기초 문법",
            "content": "MongoDB 개요 . MongoDB는 10gen에서 C++로 개발한 문서 지향 데이터베이스이다. | MongoDB에서 레코드는 문서(document)이다. | MongoDB의 문서 형식은 BSON(Json을 바이너리화한 것)이다. | . (1) Document . 문서는 키와 값의 쌍으로 이루어진 집합 | 키는 중복할 수 없는 문자열이며 데이터형과 대소문자를 구분 | {name: ‘홍길동’, age: 25, groups: [‘hippop’, ‘java’]} | 문서 크기는 최대 16MB (더 큰 용량의 문서를 저장하려면 GridFS API 이용) | . (2) Collection . 컬렉션(Collection)은 문서(Document)의 모음이다. | 문서가 관계형 DB의 행을 의미하고, 컬랙션은 테이블을 의미한다. | 컬렉션은 스키마가 없기에 높은 유연성을 제공한다. (단 제약조건(Constraint)는 응용프로그램에서 지원해야 함) | . (3) Database . 문서의 모음이 컬렉션이고, 여러 컬렉션의 모음이 데이터베이스이다. | 각 데이터베이스는 따로 분리된 파일로 디스크에 저장된다. | . (4) 용어 비교 . SQL MongoDB . 데이터베이스 | 데이터베이스 | . 테이블 | 컬렉션 | . 행 | 문서 (BSON) | . 열 | 필드 | . 테이블 조인 | 내장 문서와 Linking | . 인덱스 | 인덱스 | . [참고] 문서 지향 데이터베이스의 특징 . 확장성: RDBMS는 고성능 컴퓨터를 교체로 수직적인 확장을 고려하는데 반해, 문서 지향 데이터베이스는 슈퍼 컴퓨터가 아나더라도 여려 개의 컴퓨터로 수평확장 통해 클라우드 환경에 적합하다. | 키-값 구조: 정해진 스키마 없이 키-값 구조인 Json 형식으로 저장공간을 저장하여 자유롭게 기존 문서에 추가가 가능하다. | . 기본적인 CRUD . 1) db.collectionName.insert({입력할 문서}) 2) db.collectionName.find({쿼리조건}) 3) db.collectionName.update(쿼리조건, 치환할 문서, 옵션) [옵션] - update: true / flase 조건에 일치하는 문서가 없으면 새로 입력 - multi: true / false 조건에 일치하는 모든 문서에 대해 갱신 4) db.collectionName.remove({삭제할 조건}) . SAVE, INSERT, UPDATE 차이점 . INSERT: 콜랙션에 하나의 문서를 처음으로 저장할 때 일반적으로 사용 | UPDATE: 문서에서 특정 필드만 수정할 떄 사용 | SAVE: 문서에서 특정 필드만 변경하더라도 문서 단위로 데이터를 변경할 때 효율적 | . [참고] SQL과 MongoDB 비교 - CRUD . -- SQL CREATE TABLE members ( id number primary key, name varchar2(20), age number, grade char(1) ) -- MongoDB db.members.insert( name: &#39;kim&#39;, age: 25, grade: &#39;C&#39; ) -- (*) 자동으로 collection 생성 . -- SQL INSERT INTO member (id, name, age, grade) VALUES (seq.nextval, &#39;kim&#39;, 25, &#39;C&#39;) -- MongoDB db.members.insert( name: &#39;kim&#39;, age: 25, grade: &#39;C&#39; ) . -- SQL SELECT * FROM members WHERE grade=&#39;A&#39; -- MongoDB db.members.find(grade: &#39;A&#39;) . -- SQL UPDATE members SET age=10 WHERE grade=&#39;B&#39; -- MongoDB db.members.update( {grade: &#39;B&#39;}, {age: 10}, {multi: true} ) . -- SQL DELETE FROM members WHERE grade=&#39;C&#39; -- MongoDB db.members.remove(grade:&#39;C&#39;) . 연산자 . 비교 연산자 . $gt, $gte, $lt, $lte, $ne | . 조건 연산자 . $and, $or, $nor, $not | . 집합 연산자 . $in, $all, $nin | . update 연산자 . 기본 update 연산자 . $set: 해당 키의 값이 있으면 수정 없으면 추가 | $unset: 해당 키의 값이 있으면 제거 | $inc: 해당 키의 값을 증가 / 감소 | . 배열 업데이트 연산자 . $push: 지정된 키가 없으면 배열의 끝에 추가하고 없으면 새로운 배열을 만들어 추가 | $addToSet: 배열 내에 같은 값이 존재하지 않는 경우에만 추가 | $pop: 배열의 요소를 제거 | $pull: 주어진 조건에 일치하는 배열 요소 제거 | . 집계 연산자 . count(): 콜렉션내의 문서의 수 | distinct(key): 주어진 키의 고유한 값들 검색 | sort(): 정렬 (1: 오름차순, -1: 내림차순) | group(): SQL의 GROUP BY 유사 | . 인덱스 . 특정 레코드를 탐색할 전부를 탐색하지 않고도 데이터를 추출할 수 있는 도구 | 특정 데이터를 쉽게 추출할 수 있도록 데이터 변경이 특징 | RDB의 인덱스와 비슷하며 모든 속성에 인덱스 삽입 가능 | MongoDB 인덱스도 대부분의 DB와 유사, 내부적으로 B-트리로 인덱스를 형성 | .",
            "url": "https://safenumz.github.io/blog/nosql/2019/05/27/MongoDB_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95.html",
            "relUrl": "/nosql/2019/05/27/MongoDB_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95.html",
            "date": " • May 27, 2019"
        }
        
    
  
    
        ,"post156": {
            "title": "[Java] Oracle JDBC 연동 절차",
            "content": "JDBC 연동 절차 . 해당 드라이버 메모리 로딩 | 연결객체 얻어오기 | sql 문장 만들기 | sql 전송 객체 얻어오기 Statement : 완벽한 sql | PreparedStatement : 미완성 sql | CllableStatement : pl-sql의 procedure/function 호출시 | . | sql 전송 INSERT/DELETE/UPDATE : int excuteUpdate() | SELECT : ResultSet executeQuery() | . | 결과처리 | 닫기 | 외부에서 넘어오는 sql문은 auto commit 된다. 기본적으로 rollback, commit이 안된다. autocommit을 수동으로 풀어주면 가능 . INSERT . import java.sql.*; public class InsertTest { public static void main(String[] args) { String driver = &quot;oracle.jdbc.driver.OracleDriver&quot;; String url = &quot;jdbc:oracle:thin:@safesoo7.iptime.org:1521:XE&quot;; String user = &quot;scott&quot;; String pass = &quot;tiger&quot;; Connection con = null; try { // 1. 드라이버를 메모리 로딩 Class.forName(driver); // 2. 연결객체 얻어오기 con = DriverManager.getConnection(url, user, pass); System.out.println(&quot;연결성공&quot;); } catch (Exception ex) { System.out.println(&quot;연결실패:&quot; + ex.getMessage()); } // 3. SQL 문장 만들기 // 4. SQL 전송객체 만들기 // 5. 전송하기 // 6. 닫기 try { // 화면에서 입력값 얻어오기 int empno = 5679; String ename = &quot;갓DB&quot;; int sal = 9000; int deptno = 30; String job = &quot;IT부서&quot;; /* String sql = &quot;INSERT INTO emp(empno, ename, sal, deptno, job) &quot; + &quot; VALUES(&quot;+empno+&quot;, &#39;&quot;+ ename +&quot;&#39;, &quot;+sal+&quot;, &quot;+deptno+&quot;,&quot; + &quot;&#39;&quot;+job+&quot;&#39;)&quot;; */ // placeholder String sql = &quot;INSERT INTO emp(empno, ename, sal, deptno, job) &quot; + &quot; VALUES(?, ?, ?, ?, ?)&quot;; PreparedStatement st = con.prepareStatement(sql); st.setInt(1, empno); st.setString(2, ename); st.setString(2, ename); st.setInt(3, sal); st.setInt(4, deptno); st.setString(5, job); // sql 전송하면 안됨 int result = st.executeUpdate(); System.out.println(sql); // Statement st = con.createStatement(); // st.executeUpdate(sql); st.close(); con.close(); } catch (SQLException ex) { System.out.println(&quot;전송실패: &quot; + ex.getMessage()); } } } . Update . import java.sql.*; public class UpdateTest { public static void main(String[] args) { String driver = &quot;oracle.jdbc.driver.OracleDriver&quot;; String url = &quot;jdbc:oracle:thin:@safesoo7.iptime.org:1521:XE&quot;; String user = &quot;scott&quot;; String pass = &quot;tiger&quot;; Connection con = null; try { // 1. 드라이버를 메모리 로딩 Class.forName(driver); // 2. 연결객체 얻어오기 con = DriverManager.getConnection(url, user, pass); System.out.println(&quot;연결성공&quot;); } catch (Exception ex) { System.out.println(&quot;연결실패:&quot; + ex.getMessage()); } // 3. SQL 문장 만들기 // 4. SQL 전송객체 만들기 // 5. 전송하기 // 6. 닫기 try { // 화면에서 입력값 얻어오기 int empno = 5679; String ename = &quot;홍숙자&quot;; int sal = 12000; int deptno = 20; String job = &quot;개발&quot;; // placeholder String sql = &quot;UPDATE emp SET ename=?, sal=?, deptno=?, job=? &quot; + &quot; WHERE empno=?&quot;; PreparedStatement st = con.prepareStatement(sql); st.setString(1, ename); st.setInt(2, sal); st.setInt(3, deptno); st.setString(4, job); st.setInt(5, empno); // sql 전송하면 안됨 int result = st.executeUpdate(); System.out.println(sql); // Statement st = con.createStatement(); // st.executeUpdate(sql); st.close(); con.close(); } catch (SQLException ex) { System.out.println(&quot;전송실패: &quot; + ex.getMessage()); } } } . SELECT . package emp.oracle2; import java.sql.*; public class SelectTest { public static void main(String[] args) { String driver = &quot;oracle.jdbc.driver.OracleDriver&quot;; String url = &quot;jdbc:oracle:thin:@&lt;IP주소&gt;:1521:XE&quot;; String user = &quot;scott&quot;; String pass = &quot;tiger&quot;; Connection con = null; try { // 1. 드라이버를 메모리 로딩 Class.forName(driver); // 2. 연결객체 얻어오기 con = DriverManager.getConnection(url, user, pass); System.out.println(&quot;연결성공&quot;); } catch (Exception ex) { System.out.println(&quot;연결실패:&quot; + ex.getMessage()); } try { // 사원 테이블의 총 사원수와 월급의 평균을 출력하세요. int empno = 7788; String sql = &quot;SELECT * FROM emp WHERE empno=?&quot;; System.out.println(sql); PreparedStatement st = con.prepareStatement(sql); st.setInt(1, empno); /* ResultSet rs = st.executeQuery(); //&lt;- sql 지정하면 안됨 Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql); while(rs.next()) { System.out.println(rs.getInt(&quot;EMPNO&quot;) + &quot;/&quot; + rs.getString(&quot;ENAME&quot;) + &quot;/&quot; + rs.getInt(&quot;SAL&quot;)); } */ // 하나라도 next를 써야 함, while 문보다는 if문이 좋음 if (rs.next()) { System.out.println(rs.getInt(&quot;EMPNO&quot;) + &quot;/&quot; + rs.getString(&quot;ENAME&quot;) + &quot;/&quot; + rs.getInt(&quot;SAL&quot;)); } st.close(); con.close(); } catch (SQLException ex) { System.out.println(&quot;전송실패: &quot; + ex.getMessage()); } } } . InfoVO.java . package jdbc.gui; // VO(value of) = DTO = Record(X) public class InfoVO { String name; String id; String tel; String gender; int age; String home; // constructor public InfoVO() {} public InfoVO(String name, String id, String tel, String gender, int age, String home) { this.name = name; this.id = id; this.tel = tel; this.gender = gender; this.age = age; this.home = home; } // getter, setter public String getName() { return name; } public void setName(String name) { this.name = name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getTel() { return tel; } public void setTel(String tel) { this.tel = tel; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getHome() { return home; } public void setHome(String home) { this.home = home; } public String toString() { return name + &quot; t&quot; + id + &quot; t&quot; + tel + &quot; t&quot; + gender + &quot; t&quot; + age + &quot; t&quot; + home + &quot; n&quot;; } } . InfoView.java . package jdbc.gui; /* * Java GUI를 구성하는 application을 만든 후 * DataBase에 입력 / 수정 / 삭제 / 검색을 하는 프로그램을 작성하는 예제 * * 또한 이 프로그램은 Java Swing으로 GUI를 구성하였음 * * 테이블명 : temp * name varchar(10) * id char(14) * tel varchar(13) * sex varchar(10) * age number * home varchar(10) * */ import java.awt.*; import java.awt.event.*; import javax.swing.*; import javax.swing.border.*; import java.util.*; class InfoView implements ActionListener{ //-- // 화면에 관련한 변수 선언 //-- JFrame frame; JTextField tf_name, tf_id, tf_tel, tf_age, tf_gender, tf_home ; JButton b_add, b_show, b_modify, b_delete, b_cancel, b_exit; JTextArea ta; //######################################## // 1. business logic를 실행하는 클래스 변수 선언 InfoModelImpl db = null; //-- // 생성자 함수 // : 위의 멤버 변수에 선언된 클래스 객체 생성 //-- public InfoView() { frame = new JFrame(&quot;DBTest&quot;); tf_name = new JTextField(15); tf_id = new JTextField(15); tf_tel = new JTextField(15); tf_age = new JTextField(15); tf_gender = new JTextField(15); tf_home = new JTextField(15); /* * 버튼 생성 ( 이미지 버튼 ) * 1. Text과 ImageIcon를 갖는 버튼 생성 * 2. Text를 그림 아래 위치 * 3. Text를 가운데 정렬 * 4. 버튼의 보더 지정 : 버튼의 모양이 위로 올라와 보이게 * 5. 버튼의 튤팁을 지정 */ b_add = new JButton(&quot;Add&quot;, new ImageIcon(&quot;img/add.gif&quot;)); b_add.setVerticalTextPosition(SwingConstants.BOTTOM); b_add.setHorizontalTextPosition(SwingConstants.CENTER); b_add.setBorder(new BevelBorder(BevelBorder.RAISED)); b_add.setToolTipText(&quot;추가&quot;); b_show = new JButton(&quot;Show&quot;); b_modify = new JButton(&quot;Modify&quot;); b_delete = new JButton(&quot;Delete&quot;); b_cancel = new JButton(&quot;Cancel&quot;); b_exit = new JButton(&quot;Exit&quot;); ta = new JTextArea(20, 50); //######################################### // 2. business logic 역할을 하는 클래스 객체 생성 try { db = new InfoModelImpl(); ta.setText(&quot;디비연결성공&quot;); } catch (Exception ex) { ta.setText(&quot;현재 네트워크 오류가 발생하여 프로그램이 정상적이지~~&quot;); ex.printStackTrace(); } } //-- //-- void setup(){ JPanel p_center = new JPanel(); JPanel p_west = new JPanel(); JPanel p_south = new JPanel(); // 화면출력만 하는 라벨 생성 및 붙이기 JLabel ll_name = new JLabel(&quot;Name&quot;, new ImageIcon(&quot;img/cute/1.gif&quot;),JLabel.CENTER); JLabel ll_id = new JLabel(&quot;ID&quot;, new ImageIcon(&quot;img/cute/2.gif&quot;),SwingConstants.CENTER); JLabel ll_tel = new JLabel(&quot;Tel&quot;, new ImageIcon(&quot;img/cute/3.gif&quot;),SwingConstants.CENTER); JLabel ll_sex = new JLabel(&quot;Sex&quot;, new ImageIcon(&quot;img/cute/4.gif&quot;),SwingConstants.CENTER); JLabel ll_age = new JLabel(&quot;Age&quot;, new ImageIcon(&quot;img/cute/5.gif&quot;),SwingConstants.CENTER); JLabel ll_home = new JLabel(&quot;Home&quot;, new ImageIcon(&quot;img/cute/6.gif&quot;),SwingConstants.CENTER); // west영역 붙이기 p_west.setLayout( new GridLayout(6,2)); p_west.add( ll_name); p_west.add( tf_name ); p_west.add( ll_id); p_west.add( tf_id ); p_west.add( ll_tel); p_west.add( tf_tel ); p_west.add( ll_sex); p_west.add( tf_gender ); p_west.add( ll_age); p_west.add( tf_age ); p_west.add( ll_home); p_west.add( tf_home ); // center 영역 p_center.setLayout(new BorderLayout()); p_center.add(&quot;Center&quot;, ta ); // south 영역 p_south.setLayout( new GridLayout(1,6)); p_south.add( b_add ); p_south.add( b_show ); p_south.add( b_modify ); p_south.add( b_delete ); p_south.add( b_cancel ); p_south.add( b_exit ); // 전체 영역 붙이기 및 화면 출력 frame.getContentPane().setLayout( new BorderLayout() ); frame.getContentPane().add(&quot;West&quot;, p_west ); frame.getContentPane().add(&quot;Center&quot;, p_center ); frame.getContentPane().add(&quot;South&quot;, p_south ); frame.pack(); frame.setTitle(&quot;DBTest&quot;); frame.setVisible(true); } //-- // 각 버튼을 이벤트에 등록 //-- public void eventProc(){ b_add.addActionListener( this ); b_show.addActionListener( this ); b_modify.addActionListener( this ); b_delete.addActionListener( this ); b_cancel.addActionListener( this ); b_exit.addActionListener( this ); tf_id.addActionListener( this ); tf_tel.addActionListener( this ); } //- // ActionListener에 등록한 컴포넌트에서 이벤트 발생시 // JVM에 의해 호출되는 메소드 //- public void actionPerformed( ActionEvent ev ){ if( ev.getSource() == b_add ){ //###################################################### // Add 버튼이 눌렸을 때 // 1. 각 텍스트필드에서 값을 얻어옴 // 3. Database 파일의 insert() 함수의 인자로 값을 넘겨줌 JOptionPane.showMessageDialog( frame, &quot;추가버튼 눌림&quot;); insertData(); } else if( ev.getSource() == b_show ){ //###################################################### // 전체 보기 버튼이 눌렸을 때 // 1. Database 파일의 selectAll() 호출하여 Vector로 리턴받음 // 2. 리턴받은 Vector에서 Record 객체를 하나씩 얻어온후 // 3. 그 Record 객체 안의 toString() 메소드 호출하여 TextArea에 출력 // JOptionPane.showMessageDialog( frame, &quot;전체보기버튼 눌림&quot;); selectAllData(); } else if( ev.getSource() == b_modify ){ //###################################################### // Modify 버튼이 눌렸을 때 // 1. 각 텍스트필드에서 값을 얻어옴 // 3. Database 파일의 modify() 함수의 인자로 값을 넘겨줌 // JOptionPane.showMessageDialog( frame, &quot;수정버튼 눌림&quot;); modify(); } else if( ev.getSource() == b_delete ){ //###################################################### // 삭제버튼 눌렸을 때 // 1. 주민번호 텍스트 필드의 입력값 얻어옴 // 2. Database의 delete() 함수의 인자로 넘겨줌 // JOptionPane.showMessageDialog( frame , &quot;삭제버튼 눌림&quot;); delete(); } else if (ev.getSource() == tf_tel) { // JOptionPane.showMessageDialog(frame, &quot;전화번호 엔터&quot;); selectByTel(); } else if (ev.getSource() == tf_id) { // JOptionPane.showMessageDialog(frame, &quot;주민번호 엔터&quot;); selectById(); } } void modify() { } void delete() { String id = tf_id.getText(); try { db.delete(id); } catch (Exception ex){ System.out.println(&quot;삭제실패&quot;); } clearTextField(); } void selectByTel() { String tel = tf_tel.getText(); try { InfoVO vo = db.selectByTel(tel); tf_name.setText(vo.getName()); tf_id.setText(vo.getId()); tf_tel.setText(vo.getTel()); tf_gender.setText(vo.getGender()); tf_age.setText(String.valueOf(vo.getAge())); tf_home.setText(vo.getHome()); } catch (Exception ex) { ta.setText(&quot;검색실패: &quot; + ex.getMessage()); } } void selectById() { String id = tf_id.getText(); try { InfoVO vo = db.selectById(id); tf_name.setText(vo.getName()); tf_id.setText(vo.getId()); tf_tel.setText(vo.getTel()); tf_gender.setText(vo.getGender()); tf_age.setText(String.valueOf(vo.getAge())); tf_home.setText(vo.getHome()); } catch (Exception ex) { ta.setText(&quot;검색실패: &quot; + ex.getMessage()); } } // 1. Database 파일의 selectAll() 호출하여 Vector로 리턴받음 // 2. 리턴받은 ArrayList에서 InfoVO 객체를 하나씩 얻어온후 // 3. 그 Record 객체 안의 toString() 메소드 호출하여 TextArea에 출력 public void selectAllData() { try { ArrayList&lt;InfoVO&gt; list = db.selectAllData(); ta.setText(&quot;===========검색결과 n n&quot;); for (InfoVO vo : list) { ta.append(vo.toString()); } } catch (Exception ex) { ta.setText(&quot;데이타 검색 실패: &quot; + ex.getMessage()); } } // 1. 각 텍스트필드에서 값을 얻어옴 // 3. Database 파일의 insert() 함수의 인자로 값을 넘겨줌 public void insertData() { InfoVO vo = new InfoVO(); vo.setName(tf_name.getText()); vo.setId(tf_id.getText()); vo.setTel(tf_tel.getText()); vo.setGender(tf_gender.getText()); vo.setAge(Integer.parseInt(tf_age.getText())); vo.setHome(tf_home.getText()); try { db.insert(vo); } catch (Exception e) { ta.setText(&quot;입력실패:&quot; + e.getMessage()); } clearTextField(); } void clearTextField() { tf_name.setText(null); tf_id.setText(null); tf_tel.setText(null); tf_gender.setText(null); tf_age.setText(null); tf_home.setText(null); } public static void main(String args[]) { System.out.println(&quot;Starting DBTest...&quot;); InfoView mainFrame = new InfoView(); mainFrame.setup(); mainFrame.eventProc(); } } . Infomodelimpl.java . package jdbc.gui; import java.sql.*; import java.util.*; public class InfoModelImpl { String driver = &quot;oracle.jdbc.driver.OracleDriver&quot;; String url = &quot;jdbc:oracle:thin:@safesoo7.iptime.org:1521:XE&quot;; String user = &quot;oracle&quot;; String pass = &quot;oracle&quot;; Connection con = null; public InfoModelImpl() throws Exception { String driver = &quot;oracle.jdbc.driver.OracleDriver&quot;; String url = &quot;jdbc:oracle:thin:@safesoo7.iptime.org:1521:XE&quot;; String user = &quot;oracle&quot;; String pass = &quot;oracle&quot;; // 1. 드라이버를 메모리 로딩 Class.forName(driver); // 2. 연결객체 얻어오기 } public void insert(InfoVO vo) throws Exception { con = DriverManager.getConnection(url, user, pass); String sql = &quot;INSERT INTO temp(name, id, tel, gender, age, home) &quot; + &quot; VALUES(?, ?, ?, ?, ?, ?)&quot;; PreparedStatement st = con.prepareStatement(sql); st.setString(1, vo.name); st.setString(2, vo.id); st.setString(3, vo.tel); st.setString(4, vo.gender); st.setInt(5, vo.age); st.setString(6, vo.home); System.out.println(sql); int result = st.executeUpdate(); System.out.println(sql); st.close(); con.close(); /* 2. 연결객체 얻어오기 3. sql 문장 만들기 String sql = &quot;INSERT INTO 테이블명(컬럼명들) VALUES(?,?,?,?,?,?,?)&quot;; 4. sql 전송 객체 얻어오기 - PreparedStatement : 미완성 sql 5. sql 전송 : int executeUpdate() 6. 결과처리 7. 닫기 */ } public ArrayList&lt;InfoVO&gt; selectAllData() throws SQLException { Connection con = null; PreparedStatement st = null; ResultSet rs = null; try { // 2. 연결객체 얻어오기 con = DriverManager.getConnection(url, user, pass); // 3. sql 문장 만들기 String sql = &quot;SELECT * FROM temp&quot;; // 4. sql 전송 객체 얻어오기 - PreparedStatement : 미완성 sql st = con.prepareStatement(sql); // 5. sql 전송 : rs = st.executeQuery(); // 6. 결과처리 // 제너릭스 -&gt; 향상된 for문 가능 ArrayList&lt;InfoVO&gt; list = new ArrayList&lt;InfoVO&gt;(); while (rs.next()) { InfoVO vo = new InfoVO(); vo.setName(rs.getString(&quot;name&quot;)); vo.setId(rs.getString(&quot;id&quot;)); vo.setTel(rs.getString(&quot;tel&quot;)); vo.setGender(rs.getString(&quot;gender&quot;)); vo.setAge(rs.getInt(&quot;age&quot;)); vo.setHome(rs.getString(&quot;home&quot;)); list.add(vo); } return list; } finally { // 7. 닫기 rs.close(); st.close(); con.close(); } } public InfoVO selectByTel(String tel) throws Exception { PreparedStatement st = null; ResultSet rs = null; InfoVO vo = new InfoVO(); con = DriverManager.getConnection(url, user, pass); try { String sql = &quot;SELECT * FROM temp WHERE tel=?&quot;; st = con.prepareStatement(sql); st.setString(1, tel); // 5. sql 전송 : rs = st.executeQuery(); while (rs.next()) { vo.setName(rs.getString(&quot;name&quot;)); vo.setId(rs.getString(&quot;id&quot;)); vo.setTel(rs.getString(&quot;tel&quot;)); vo.setGender(rs.getString(&quot;gender&quot;)); vo.setAge(rs.getInt(&quot;age&quot;)); vo.setHome(rs.getString(&quot;home&quot;)); } System.out.println(vo); return vo; } finally { rs.close(); st.close(); con.close(); } } public InfoVO selectById(String id) throws Exception { PreparedStatement st = null; ResultSet rs = null; InfoVO vo = new InfoVO(); con = DriverManager.getConnection(url, user, pass); try { String sql = &quot;SELECT * FROM temp WHERE id=?&quot;; st = con.prepareStatement(sql); st.setString(1, id); // 5. sql 전송 : rs = st.executeQuery(); while (rs.next()) { vo.setName(rs.getString(&quot;name&quot;)); vo.setId(rs.getString(&quot;id&quot;)); vo.setTel(rs.getString(&quot;tel&quot;)); vo.setGender(rs.getString(&quot;gender&quot;)); vo.setAge(rs.getInt(&quot;age&quot;)); vo.setHome(rs.getString(&quot;home&quot;)); } System.out.println(vo); return vo; } finally { rs.close(); st.close(); con.close(); } } public void delete(String id) throws SQLException { con = DriverManager.getConnection(url, user, pass); String sql = &quot;DELETE FROM temp WHERE id = ?&quot;; PreparedStatement st = con.prepareStatement(sql); st.setString(1, id); int result = st.executeUpdate(); st.close(); con.close(); } } .",
            "url": "https://safenumz.github.io/blog/java/2019/05/20/JDBC_%EC%97%B0%EB%8F%99_%EC%A0%88%EC%B0%A8.html",
            "relUrl": "/java/2019/05/20/JDBC_%EC%97%B0%EB%8F%99_%EC%A0%88%EC%B0%A8.html",
            "date": " • May 20, 2019"
        }
        
    
  
    
        ,"post157": {
            "title": "[DB] RDBMS",
            "content": "RDBMS . 관계형 데이터베이스 | RDB를 관리하는 시스템 | . RDBMS 장점 . 데이터의 분류, 정렬, 탐색 속도 빠름 | 데이터의 일관성을 위해 트랜잭션 사용 | . RDBMS 단점 . 반드시 스키마(테이블) 규격에 맞춰야 함 | 클러스터 환경에서 가동하기 어려움 (복잡한 sql 쿼리 사용) | . NoSQL . Not Only SQL, 여러 유형의 DB를 사용 | 비정형 데이터베이스 (raw data: 동영상, 사진 등) | mongoDB, HBASE, cassandra | . NoSQL 장점 . 스키마가 없어 다루기 쉽다 | 클러스터 환경에서 작동하기 좋다. (집합-지향 모델을 사용) | 집합-지향 모델: JSON 구조처럼 데이터를 통으로 가지고 있는 것 | . NoSQL 단점 . 스키마가 없어 데이터에 대한 규격화된 결과 값을 얻기 어려움 | 갱신이상(추가, 수정, 삭제)이 생길 수 있음 | . RDBMS vs NoSQL . RDBMS NoSQL . 데이터간의 관계를 정의하고 테이블 간 조인을 함 | 관계정의 하지 않고 테이블 조인이 불가능 | . 많은 양의 데이터를 한 서버만 가지고 있어 관리하기 어려움 | 여러 서버에 데이터를 나누고 RDB의 복잡도와 용량한계를 극복했기 때문에 빅데이터를 관리할 수 있다. | .",
            "url": "https://safenumz.github.io/blog/etc/2019/05/17/DB-RDBMS.html",
            "relUrl": "/etc/2019/05/17/DB-RDBMS.html",
            "date": " • May 17, 2019"
        }
        
    
  
    
        ,"post158": {
            "title": "[DB] MySQL scott, hr",
            "content": "MySQL scott.sql . CREATE database SCOTT; USE SCOTT; CREATE TABLE IF NOT EXISTS `BONUS` ( `ENAME` varchar(10) DEFAULT NULL, `JOB` varchar(9) DEFAULT NULL, `SAL` double DEFAULT NULL, `COMM` double DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE IF NOT EXISTS `DEPT` ( `DEPTNO` int(11) NOT NULL, `DNAME` varchar(14) DEFAULT NULL, `LOC` varchar(13) DEFAULT NULL, PRIMARY KEY (`DEPTNO`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `DEPT` (`DEPTNO`, `DNAME`, `LOC`) VALUES (10, &#39;ACCOUNTING&#39;, &#39;NEW YORK&#39;), (20, &#39;RESEARCH&#39;, &#39;DALLAS&#39;), (30, &#39;SALES&#39;, &#39;CHICAGO&#39;), (40, &#39;OPERATIONS&#39;, &#39;BOSTON&#39;); CREATE TABLE IF NOT EXISTS `EMP` ( `EMPNO` int(11) NOT NULL, `ENAME` varchar(10) DEFAULT NULL, `JOB` varchar(9) DEFAULT NULL, `MGR` int(11) DEFAULT NULL, `HIREDATE` datetime DEFAULT NULL, `SAL` double DEFAULT NULL, `COMM` double DEFAULT NULL, `DEPTNO` int(11) DEFAULT NULL, PRIMARY KEY (`EMPNO`), KEY `PK_EMP` (`DEPTNO`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `EMP` (`EMPNO`, `ENAME`, `JOB`, `MGR`, `HIREDATE`, `SAL`, `COMM`, `DEPTNO`) VALUES (7369, &#39;SMITH&#39;, &#39;CLERK&#39;, 7902, &#39;1980-12-17 00:00:00&#39;, 800, NULL, 20), (7499, &#39;ALLEN&#39;, &#39;SALESMAN&#39;, 7698, &#39;1981-02-20 00:00:00&#39;, 1600, 300, 30), (7521, &#39;WARD&#39;, &#39;SALESMAN&#39;, 7698, &#39;1981-02-22 00:00:00&#39;, 1250, 500, 30), (7566, &#39;JONES&#39;, &#39;MANAGER&#39;, 7839, &#39;1981-04-02 00:00:00&#39;, 2975, NULL, 20), (7654, &#39;MARTIN&#39;, &#39;SALESMAN&#39;, 7698, &#39;1981-09-28 00:00:00&#39;, 1250, 1400, 30), (7698, &#39;BLAKE&#39;, &#39;MANAGER&#39;, 7839, &#39;1981-05-01 00:00:00&#39;, 2850, NULL, 30), (7782, &#39;CLARK&#39;, &#39;MANAGER&#39;, 7839, &#39;1981-06-09 00:00:00&#39;, 2450, NULL, 10), (7788, &#39;SCOTT&#39;, &#39;ANALYST&#39;, 7566, &#39;1987-04-19 00:00:00&#39;, 3000, NULL, 20), (7839, &#39;KING&#39;, &#39;PRESIDENT&#39;, NULL, &#39;1981-11-17 00:00:00&#39;, 5000, NULL, 10), (7844, &#39;TURNER&#39;, &#39;SALESMAN&#39;, 7698, &#39;1981-09-08 00:00:00&#39;, 1500, 0, 30), (7876, &#39;ADAMS&#39;, &#39;CLERK&#39;, 7788, &#39;1987-05-23 00:00:00&#39;, 1100, NULL, 20), (7900, &#39;JAMES&#39;, &#39;CLERK&#39;, 7698, &#39;1981-12-03 00:00:00&#39;, 950, NULL, 30), (7902, &#39;FORD&#39;, &#39;ANALYST&#39;, 7566, &#39;1981-12-03 00:00:00&#39;, 3000, NULL, 20), (7934, &#39;MILLER&#39;, &#39;CLERK&#39;, 7782, &#39;1982-01-23 00:00:00&#39;, 1300, NULL, 10); CREATE TABLE IF NOT EXISTS `SALGRADE` ( `GRADE` double DEFAULT NULL, `LOSAL` double DEFAULT NULL, `HISAL` double DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `SALGRADE` (`GRADE`, `LOSAL`, `HISAL`) VALUES (1, 700, 1200), (2, 1201, 1400), (3, 1401, 2000), (4, 2001, 3000), (5, 3001, 9999); ALTER TABLE `EMP` ADD CONSTRAINT `PK_EMP` FOREIGN KEY (`DEPTNO`) REFERENCES `DEPT` (`DEPTNO`) ON DELETE SET NULL ON UPDATE CASCADE; . MySQL hr.sql . /** * You can copy, modify, distribute and perform the work, even for commercial purposes, * all without asking permission. * * @Author: Andrei N. CIOBANU */ DROP SCHEMA IF EXISTS hr; CREATE SCHEMA hr COLLATE = utf8_general_ci; USE hr; /* *************************************************************** ***************************CREATING TABLES************************ **************************************************************** */ CREATE TABLE regions ( region_id INT (11) UNSIGNED NOT NULL, region_name VARCHAR(25), PRIMARY KEY (region_id) ); CREATE TABLE countries ( country_id CHAR(2) NOT NULL, country_name VARCHAR(40), region_id INT (11) UNSIGNED NOT NULL, PRIMARY KEY (country_id) ); CREATE TABLE locations ( location_id INT (11) UNSIGNED NOT NULL AUTO_INCREMENT, street_address VARCHAR(40), postal_code VARCHAR(12), city VARCHAR(30) NOT NULL, state_province VARCHAR(25), country_id CHAR(2) NOT NULL, PRIMARY KEY (location_id) ); CREATE TABLE departments ( department_id INT (11) UNSIGNED NOT NULL, department_name VARCHAR(30) NOT NULL, manager_id INT (11) UNSIGNED, location_id INT (11) UNSIGNED, PRIMARY KEY (department_id) ); CREATE TABLE jobs ( job_id VARCHAR(10) NOT NULL, job_title VARCHAR(35) NOT NULL, min_salary DECIMAL(8, 0) UNSIGNED, max_salary DECIMAL(8, 0) UNSIGNED, PRIMARY KEY (job_id) ); CREATE TABLE employees ( employee_id INT (11) UNSIGNED NOT NULL, first_name VARCHAR(20), last_name VARCHAR(25) NOT NULL, email VARCHAR(25) NOT NULL, phone_number VARCHAR(20), hire_date DATE NOT NULL, job_id VARCHAR(10) NOT NULL, salary DECIMAL(8, 2) NOT NULL, commission_pct DECIMAL(2, 2), manager_id INT (11) UNSIGNED, department_id INT (11) UNSIGNED, PRIMARY KEY (employee_id) ); CREATE TABLE job_history ( employee_id INT (11) UNSIGNED NOT NULL, start_date DATE NOT NULL, end_date DATE NOT NULL, job_id VARCHAR(10) NOT NULL, department_id INT (11) UNSIGNED NOT NULL ); ALTER TABLE job_history ADD UNIQUE INDEX ( employee_id, start_date ); CREATE VIEW emp_details_view AS SELECT e.employee_id, e.job_id, e.manager_id, e.department_id, d.location_id, l.country_id, e.first_name, e.last_name, e.salary, e.commission_pct, d.department_name, j.job_title, l.city, l.state_province, c.country_name, r.region_name FROM employees e, departments d, jobs j, locations l, countries c, regions r WHERE e.department_id = d.department_id AND d.location_id = l.location_id AND l.country_id = c.country_id AND c.region_id = r.region_id AND j.job_id = e.job_id; /* *************************************************************** ***************************INSERTING DATA************************* **************************************************************** */ INSERT INTO regions VALUES ( 1, &#39;Europe&#39; ); INSERT INTO regions VALUES ( 2, &#39;Americas&#39; ); INSERT INTO regions VALUES ( 3, &#39;Asia&#39; ); INSERT INTO regions VALUES ( 4, &#39;Middle East and Africa&#39; ); COMMIT; INSERT INTO countries VALUES ( &#39;IT&#39;, &#39;Italy&#39;, 1 ); INSERT INTO countries VALUES ( &#39;JP&#39;, &#39;Japan&#39;, 3 ); INSERT INTO countries VALUES ( &#39;US&#39;, &#39;United States of America&#39;, 2 ); INSERT INTO countries VALUES ( &#39;CA&#39;, &#39;Canada&#39;, 2 ); INSERT INTO countries VALUES ( &#39;CN&#39;, &#39;China&#39;, 3 ); INSERT INTO countries VALUES ( &#39;IN&#39;, &#39;India&#39;, 3 ); INSERT INTO countries VALUES ( &#39;AU&#39;, &#39;Australia&#39;, 3 ); INSERT INTO countries VALUES ( &#39;ZW&#39;, &#39;Zimbabwe&#39;, 4 ); INSERT INTO countries VALUES ( &#39;SG&#39;, &#39;Singapore&#39;, 3 ); INSERT INTO countries VALUES ( &#39;UK&#39;, &#39;United Kingdom&#39;, 1 ); INSERT INTO countries VALUES ( &#39;FR&#39;, &#39;France&#39;, 1 ); INSERT INTO countries VALUES ( &#39;DE&#39;, &#39;Germany&#39;, 1 ); INSERT INTO countries VALUES ( &#39;ZM&#39;, &#39;Zambia&#39;, 4 ); INSERT INTO countries VALUES ( &#39;EG&#39;, &#39;Egypt&#39;, 4 ); INSERT INTO countries VALUES ( &#39;BR&#39;, &#39;Brazil&#39;, 2 ); INSERT INTO countries VALUES ( &#39;CH&#39;, &#39;Switzerland&#39;, 1 ); INSERT INTO countries VALUES ( &#39;NL&#39;, &#39;Netherlands&#39;, 1 ); INSERT INTO countries VALUES ( &#39;MX&#39;, &#39;Mexico&#39;, 2 ); INSERT INTO countries VALUES ( &#39;KW&#39;, &#39;Kuwait&#39;, 4 ); INSERT INTO countries VALUES ( &#39;IL&#39;, &#39;Israel&#39;, 4 ); INSERT INTO countries VALUES ( &#39;DK&#39;, &#39;Denmark&#39;, 1 ); INSERT INTO countries VALUES ( &#39;HK&#39;, &#39;HongKong&#39;, 3 ); INSERT INTO countries VALUES ( &#39;NG&#39;, &#39;Nigeria&#39;, 4 ); INSERT INTO countries VALUES ( &#39;AR&#39;, &#39;Argentina&#39;, 2 ); INSERT INTO countries VALUES ( &#39;BE&#39;, &#39;Belgium&#39;, 1 ); COMMIT; INSERT INTO locations VALUES ( 1000, &#39;1297 Via Cola di Rie&#39;, &#39;00989&#39;, &#39;Roma&#39;, NULL, &#39;IT&#39; ); INSERT INTO locations VALUES ( 1100, &#39;93091 Calle della Testa&#39;, &#39;10934&#39;, &#39;Venice&#39;, NULL, &#39;IT&#39; ); INSERT INTO locations VALUES ( 1200, &#39;2017 Shinjuku-ku&#39;, &#39;1689&#39;, &#39;Tokyo&#39;, &#39;Tokyo Prefecture&#39;, &#39;JP&#39; ); INSERT INTO locations VALUES ( 1300, &#39;9450 Kamiya-cho&#39;, &#39;6823&#39;, &#39;Hiroshima&#39;, NULL, &#39;JP&#39; ); INSERT INTO locations VALUES ( 1400, &#39;2014 Jabberwocky Rd&#39;, &#39;26192&#39;, &#39;Southlake&#39;, &#39;Texas&#39;, &#39;US&#39; ); INSERT INTO locations VALUES ( 1500, &#39;2011 Interiors Blvd&#39;, &#39;99236&#39;, &#39;South San Francisco&#39;, &#39;California&#39;, &#39;US&#39; ); INSERT INTO locations VALUES ( 1600, &#39;2007 Zagora St&#39;, &#39;50090&#39;, &#39;South Brunswick&#39;, &#39;New Jersey&#39;, &#39;US&#39; ); INSERT INTO locations VALUES ( 1700, &#39;2004 Charade Rd&#39;, &#39;98199&#39;, &#39;Seattle&#39;, &#39;Washington&#39;, &#39;US&#39; ); INSERT INTO locations VALUES ( 1800, &#39;147 Spadina Ave&#39;, &#39;M5V 2L7&#39;, &#39;Toronto&#39;, &#39;Ontario&#39;, &#39;CA&#39; ); INSERT INTO locations VALUES ( 1900, &#39;6092 Boxwood St&#39;, &#39;YSW 9T2&#39;, &#39;Whitehorse&#39;, &#39;Yukon&#39;, &#39;CA&#39; ); INSERT INTO locations VALUES ( 2000, &#39;40-5-12 Laogianggen&#39;, &#39;190518&#39;, &#39;Beijing&#39;, NULL, &#39;CN&#39; ); INSERT INTO locations VALUES ( 2100, &#39;1298 Vileparle (E)&#39;, &#39;490231&#39;, &#39;Bombay&#39;, &#39;Maharashtra&#39;, &#39;IN&#39; ); INSERT INTO locations VALUES ( 2200, &#39;12-98 Victoria Street&#39;, &#39;2901&#39;, &#39;Sydney&#39;, &#39;New South Wales&#39;, &#39;AU&#39; ); INSERT INTO locations VALUES ( 2300, &#39;198 Clementi North&#39;, &#39;540198&#39;, &#39;Singapore&#39;, NULL, &#39;SG&#39; ); INSERT INTO locations VALUES ( 2400, &#39;8204 Arthur St&#39;, NULL, &#39;London&#39;, NULL, &#39;UK&#39; ); INSERT INTO locations VALUES ( 2500, &#39;Magdalen Centre, The Oxford Science Park&#39;, &#39;OX9 9ZB&#39;, &#39;Oxford&#39;, &#39;Oxford&#39;, &#39;UK&#39; ); INSERT INTO locations VALUES ( 2600, &#39;9702 Chester Road&#39;, &#39;09629850293&#39;, &#39;Stretford&#39;, &#39;Manchester&#39;, &#39;UK&#39; ); INSERT INTO locations VALUES ( 2700, &#39;Schwanthalerstr. 7031&#39;, &#39;80925&#39;, &#39;Munich&#39;, &#39;Bavaria&#39;, &#39;DE&#39; ); INSERT INTO locations VALUES ( 2800, &#39;Rua Frei Caneca 1360 &#39;, &#39;01307-002&#39;, &#39;Sao Paulo&#39;, &#39;Sao Paulo&#39;, &#39;BR&#39; ); INSERT INTO locations VALUES ( 2900, &#39;20 Rue des Corps-Saints&#39;, &#39;1730&#39;, &#39;Geneva&#39;, &#39;Geneve&#39;, &#39;CH&#39; ); INSERT INTO locations VALUES ( 3000, &#39;Murtenstrasse 921&#39;, &#39;3095&#39;, &#39;Bern&#39;, &#39;BE&#39;, &#39;CH&#39; ); INSERT INTO locations VALUES ( 3100, &#39;Pieter Breughelstraat 837&#39;, &#39;3029SK&#39;, &#39;Utrecht&#39;, &#39;Utrecht&#39;, &#39;NL&#39; ); INSERT INTO locations VALUES ( 3200, &#39;Mariano Escobedo 9991&#39;, &#39;11932&#39;, &#39;Mexico City&#39;, &#39;Distrito Federal,&#39;, &#39;MX&#39; ); COMMIT; SET FOREIGN_KEY_CHECKS = 0; INSERT INTO departments VALUES ( 10, &#39;Administration&#39;, 200, 1700 ); INSERT INTO departments VALUES ( 20, &#39;Marketing&#39;, 201, 1800 ); INSERT INTO departments VALUES ( 30, &#39;Purchasing&#39;, 114, 1700 ); INSERT INTO departments VALUES ( 40, &#39;Human Resources&#39;, 203, 2400 ); INSERT INTO departments VALUES ( 50, &#39;Shipping&#39;, 121, 1500 ); INSERT INTO departments VALUES ( 60, &#39;IT&#39;, 103, 1400 ); INSERT INTO departments VALUES ( 70, &#39;Public Relations&#39;, 204, 2700 ); INSERT INTO departments VALUES ( 80, &#39;Sales&#39;, 145, 2500 ); INSERT INTO departments VALUES ( 90, &#39;Executive&#39;, 100, 1700 ); INSERT INTO departments VALUES ( 100, &#39;Finance&#39;, 108, 1700 ); INSERT INTO departments VALUES ( 110, &#39;Accounting&#39;, 205, 1700 ); INSERT INTO departments VALUES ( 120, &#39;Treasury&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 130, &#39;Corporate Tax&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 140, &#39;Control And Credit&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 150, &#39;Shareholder Services&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 160, &#39;Benefits&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 170, &#39;Manufacturing&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 180, &#39;Construction&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 190, &#39;Contracting&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 200, &#39;Operations&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 210, &#39;IT Support&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 220, &#39;NOC&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 230, &#39;IT Helpdesk&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 240, &#39;Government Sales&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 250, &#39;Retail Sales&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 260, &#39;Recruiting&#39;, NULL, 1700 ); INSERT INTO departments VALUES ( 270, &#39;Payroll&#39;, NULL, 1700 ); SET FOREIGN_KEY_CHECKS = 1; COMMIT; INSERT INTO jobs VALUES ( &#39;AD_PRES&#39;, &#39;President&#39;, 20000, 40000 ); INSERT INTO jobs VALUES ( &#39;AD_VP&#39;, &#39;Administration Vice President&#39;, 15000, 30000 ); INSERT INTO jobs VALUES ( &#39;AD_ASST&#39;, &#39;Administration Assistant&#39;, 3000, 6000 ); INSERT INTO jobs VALUES ( &#39;FI_MGR&#39;, &#39;Finance Manager&#39;, 8200, 16000 ); INSERT INTO jobs VALUES ( &#39;FI_ACCOUNT&#39;, &#39;Accountant&#39;, 4200, 9000 ); INSERT INTO jobs VALUES ( &#39;AC_MGR&#39;, &#39;Accounting Manager&#39;, 8200, 16000 ); INSERT INTO jobs VALUES ( &#39;AC_ACCOUNT&#39;, &#39;Public Accountant&#39;, 4200, 9000 ); INSERT INTO jobs VALUES ( &#39;SA_MAN&#39;, &#39;Sales Manager&#39;, 10000, 20000 ); INSERT INTO jobs VALUES ( &#39;SA_REP&#39;, &#39;Sales Representative&#39;, 6000, 12000 ); INSERT INTO jobs VALUES ( &#39;PU_MAN&#39;, &#39;Purchasing Manager&#39;, 8000, 15000 ); INSERT INTO jobs VALUES ( &#39;PU_CLERK&#39;, &#39;Purchasing Clerk&#39;, 2500, 5500 ); INSERT INTO jobs VALUES ( &#39;ST_MAN&#39;, &#39;Stock Manager&#39;, 5500, 8500 ); INSERT INTO jobs VALUES ( &#39;ST_CLERK&#39;, &#39;Stock Clerk&#39;, 2000, 5000 ); INSERT INTO jobs VALUES ( &#39;SH_CLERK&#39;, &#39;Shipping Clerk&#39;, 2500, 5500 ); INSERT INTO jobs VALUES ( &#39;IT_PROG&#39;, &#39;Programmer&#39;, 4000, 10000 ); INSERT INTO jobs VALUES ( &#39;MK_MAN&#39;, &#39;Marketing Manager&#39;, 9000, 15000 ); INSERT INTO jobs VALUES ( &#39;MK_REP&#39;, &#39;Marketing Representative&#39;, 4000, 9000 ); INSERT INTO jobs VALUES ( &#39;HR_REP&#39;, &#39;Human Resources Representative&#39;, 4000, 9000 ); INSERT INTO jobs VALUES ( &#39;PR_REP&#39;, &#39;Public Relations Representative&#39;, 4500, 10500 ); COMMIT; INSERT INTO employees VALUES ( 100, &#39;Steven&#39;, &#39;King&#39;, &#39;SKING&#39;, &#39;515.123.4567&#39;, STR_TO_DATE(&#39;17-JUN-1987&#39;, &#39;%d-%M-%Y&#39;), &#39;AD_PRES&#39;, 24000, NULL, NULL, 90 ); INSERT INTO employees VALUES ( 101, &#39;Neena&#39;, &#39;Kochhar&#39;, &#39;NKOCHHAR&#39;, &#39;515.123.4568&#39;, STR_TO_DATE(&#39;21-SEP-1989&#39;, &#39;%d-%M-%Y&#39;), &#39;AD_VP&#39;, 17000, NULL, 100, 90 ); INSERT INTO employees VALUES ( 102, &#39;Lex&#39;, &#39;De Haan&#39;, &#39;LDEHAAN&#39;, &#39;515.123.4569&#39;, STR_TO_DATE(&#39;13-JAN-1993&#39;, &#39;%d-%M-%Y&#39;), &#39;AD_VP&#39;, 17000, NULL, 100, 90 ); INSERT INTO employees VALUES ( 103, &#39;Alexander&#39;, &#39;Hunold&#39;, &#39;AHUNOLD&#39;, &#39;590.423.4567&#39;, STR_TO_DATE(&#39;03-JAN-1990&#39;, &#39;%d-%M-%Y&#39;), &#39;IT_PROG&#39;, 9000, NULL, 102, 60 ); INSERT INTO employees VALUES ( 104, &#39;Bruce&#39;, &#39;Ernst&#39;, &#39;BERNST&#39;, &#39;590.423.4568&#39;, STR_TO_DATE(&#39;21-MAY-1991&#39;, &#39;%d-%M-%Y&#39;), &#39;IT_PROG&#39;, 6000, NULL, 103, 60 ); INSERT INTO employees VALUES ( 105, &#39;David&#39;, &#39;Austin&#39;, &#39;DAUSTIN&#39;, &#39;590.423.4569&#39;, STR_TO_DATE(&#39;25-JUN-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;IT_PROG&#39;, 4800, NULL, 103, 60 ); INSERT INTO employees VALUES ( 106, &#39;Valli&#39;, &#39;Pataballa&#39;, &#39;VPATABAL&#39;, &#39;590.423.4560&#39;, STR_TO_DATE(&#39;05-FEB-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;IT_PROG&#39;, 4800, NULL, 103, 60 ); INSERT INTO employees VALUES ( 107, &#39;Diana&#39;, &#39;Lorentz&#39;, &#39;DLORENTZ&#39;, &#39;590.423.5567&#39;, STR_TO_DATE(&#39;07-FEB-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;IT_PROG&#39;, 4200, NULL, 103, 60 ); INSERT INTO employees VALUES ( 108, &#39;Nancy&#39;, &#39;Greenberg&#39;, &#39;NGREENBE&#39;, &#39;515.124.4569&#39;, STR_TO_DATE(&#39;17-AUG-1994&#39;, &#39;%d-%M-%Y&#39;), &#39;FI_MGR&#39;, 12000, NULL, 101, 100 ); INSERT INTO employees VALUES ( 109, &#39;Daniel&#39;, &#39;Faviet&#39;, &#39;DFAVIET&#39;, &#39;515.124.4169&#39;, STR_TO_DATE(&#39;16-AUG-1994&#39;, &#39;%d-%M-%Y&#39;), &#39;FI_ACCOUNT&#39;, 9000, NULL, 108, 100 ); INSERT INTO employees VALUES ( 110, &#39;John&#39;, &#39;Chen&#39;, &#39;JCHEN&#39;, &#39;515.124.4269&#39;, STR_TO_DATE(&#39;28-SEP-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;FI_ACCOUNT&#39;, 8200, NULL, 108, 100 ); INSERT INTO employees VALUES ( 111, &#39;Ismael&#39;, &#39;Sciarra&#39;, &#39;ISCIARRA&#39;, &#39;515.124.4369&#39;, STR_TO_DATE(&#39;30-SEP-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;FI_ACCOUNT&#39;, 7700, NULL, 108, 100 ); INSERT INTO employees VALUES ( 112, &#39;Jose Manuel&#39;, &#39;Urman&#39;, &#39;JMURMAN&#39;, &#39;515.124.4469&#39;, STR_TO_DATE(&#39;07-MAR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;FI_ACCOUNT&#39;, 7800, NULL, 108, 100 ); INSERT INTO employees VALUES ( 113, &#39;Luis&#39;, &#39;Popp&#39;, &#39;LPOPP&#39;, &#39;515.124.4567&#39;, STR_TO_DATE(&#39;07-DEC-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;FI_ACCOUNT&#39;, 6900, NULL, 108, 100 ); INSERT INTO employees VALUES ( 114, &#39;Den&#39;, &#39;Raphaely&#39;, &#39;DRAPHEAL&#39;, &#39;515.127.4561&#39;, STR_TO_DATE(&#39;07-DEC-1994&#39;, &#39;%d-%M-%Y&#39;), &#39;PU_MAN&#39;, 11000, NULL, 100, 30 ); INSERT INTO employees VALUES ( 115, &#39;Alexander&#39;, &#39;Khoo&#39;, &#39;AKHOO&#39;, &#39;515.127.4562&#39;, STR_TO_DATE(&#39;18-MAY-1995&#39;, &#39;%d-%M-%Y&#39;), &#39;PU_CLERK&#39;, 3100, NULL, 114, 30 ); INSERT INTO employees VALUES ( 116, &#39;Shelli&#39;, &#39;Baida&#39;, &#39;SBAIDA&#39;, &#39;515.127.4563&#39;, STR_TO_DATE(&#39;24-DEC-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;PU_CLERK&#39;, 2900, NULL, 114, 30 ); INSERT INTO employees VALUES ( 117, &#39;Sigal&#39;, &#39;Tobias&#39;, &#39;STOBIAS&#39;, &#39;515.127.4564&#39;, STR_TO_DATE(&#39;24-JUL-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;PU_CLERK&#39;, 2800, NULL, 114, 30 ); INSERT INTO employees VALUES ( 118, &#39;Guy&#39;, &#39;Himuro&#39;, &#39;GHIMURO&#39;, &#39;515.127.4565&#39;, STR_TO_DATE(&#39;15-NOV-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;PU_CLERK&#39;, 2600, NULL, 114, 30 ); INSERT INTO employees VALUES ( 119, &#39;Karen&#39;, &#39;Colmenares&#39;, &#39;KCOLMENA&#39;, &#39;515.127.4566&#39;, STR_TO_DATE(&#39;10-AUG-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;PU_CLERK&#39;, 2500, NULL, 114, 30 ); INSERT INTO employees VALUES ( 120, &#39;Matthew&#39;, &#39;Weiss&#39;, &#39;MWEISS&#39;, &#39;650.123.1234&#39;, STR_TO_DATE(&#39;18-JUL-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_MAN&#39;, 8000, NULL, 100, 50 ); INSERT INTO employees VALUES ( 121, &#39;Adam&#39;, &#39;Fripp&#39;, &#39;AFRIPP&#39;, &#39;650.123.2234&#39;, STR_TO_DATE(&#39;10-APR-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_MAN&#39;, 8200, NULL, 100, 50 ); INSERT INTO employees VALUES ( 122, &#39;Payam&#39;, &#39;Kaufling&#39;, &#39;PKAUFLIN&#39;, &#39;650.123.3234&#39;, STR_TO_DATE(&#39;01-MAY-1995&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_MAN&#39;, 7900, NULL, 100, 50 ); INSERT INTO employees VALUES ( 123, &#39;Shanta&#39;, &#39;Vollman&#39;, &#39;SVOLLMAN&#39;, &#39;650.123.4234&#39;, STR_TO_DATE(&#39;10-OCT-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_MAN&#39;, 6500, NULL, 100, 50 ); INSERT INTO employees VALUES ( 124, &#39;Kevin&#39;, &#39;Mourgos&#39;, &#39;KMOURGOS&#39;, &#39;650.123.5234&#39;, STR_TO_DATE(&#39;16-NOV-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_MAN&#39;, 5800, NULL, 100, 50 ); INSERT INTO employees VALUES ( 125, &#39;Julia&#39;, &#39;Nayer&#39;, &#39;JNAYER&#39;, &#39;650.124.1214&#39;, STR_TO_DATE(&#39;16-JUL-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 3200, NULL, 120, 50 ); INSERT INTO employees VALUES ( 126, &#39;Irene&#39;, &#39;Mikkilineni&#39;, &#39;IMIKKILI&#39;, &#39;650.124.1224&#39;, STR_TO_DATE(&#39;28-SEP-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2700, NULL, 120, 50 ); INSERT INTO employees VALUES ( 127, &#39;James&#39;, &#39;Landry&#39;, &#39;JLANDRY&#39;, &#39;650.124.1334&#39;, STR_TO_DATE(&#39;14-JAN-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2400, NULL, 120, 50 ); INSERT INTO employees VALUES ( 128, &#39;Steven&#39;, &#39;Markle&#39;, &#39;SMARKLE&#39;, &#39;650.124.1434&#39;, STR_TO_DATE(&#39;08-MAR-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2200, NULL, 120, 50 ); INSERT INTO employees VALUES ( 129, &#39;Laura&#39;, &#39;Bissot&#39;, &#39;LBISSOT&#39;, &#39;650.124.5234&#39;, STR_TO_DATE(&#39;20-AUG-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 3300, NULL, 121, 50 ); INSERT INTO employees VALUES ( 130, &#39;Mozhe&#39;, &#39;Atkinson&#39;, &#39;MATKINSO&#39;, &#39;650.124.6234&#39;, STR_TO_DATE(&#39;30-OCT-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2800, NULL, 121, 50 ); INSERT INTO employees VALUES ( 131, &#39;James&#39;, &#39;Marlow&#39;, &#39;JAMRLOW&#39;, &#39;650.124.7234&#39;, STR_TO_DATE(&#39;16-FEB-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2500, NULL, 121, 50 ); INSERT INTO employees VALUES ( 132, &#39;TJ&#39;, &#39;Olson&#39;, &#39;TJOLSON&#39;, &#39;650.124.8234&#39;, STR_TO_DATE(&#39;10-APR-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2100, NULL, 121, 50 ); INSERT INTO employees VALUES ( 133, &#39;Jason&#39;, &#39;Mallin&#39;, &#39;JMALLIN&#39;, &#39;650.127.1934&#39;, STR_TO_DATE(&#39;14-JUN-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 3300, NULL, 122, 50 ); INSERT INTO employees VALUES ( 134, &#39;Michael&#39;, &#39;Rogers&#39;, &#39;MROGERS&#39;, &#39;650.127.1834&#39;, STR_TO_DATE(&#39;26-AUG-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2900, NULL, 122, 50 ); INSERT INTO employees VALUES ( 135, &#39;Ki&#39;, &#39;Gee&#39;, &#39;KGEE&#39;, &#39;650.127.1734&#39;, STR_TO_DATE(&#39;12-DEC-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2400, NULL, 122, 50 ); INSERT INTO employees VALUES ( 136, &#39;Hazel&#39;, &#39;Philtanker&#39;, &#39;HPHILTAN&#39;, &#39;650.127.1634&#39;, STR_TO_DATE(&#39;06-FEB-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2200, NULL, 122, 50 ); INSERT INTO employees VALUES ( 137, &#39;Renske&#39;, &#39;Ladwig&#39;, &#39;RLADWIG&#39;, &#39;650.121.1234&#39;, STR_TO_DATE(&#39;14-JUL-1995&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 3600, NULL, 123, 50 ); INSERT INTO employees VALUES ( 138, &#39;Stephen&#39;, &#39;Stiles&#39;, &#39;SSTILES&#39;, &#39;650.121.2034&#39;, STR_TO_DATE(&#39;26-OCT-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 3200, NULL, 123, 50 ); INSERT INTO employees VALUES ( 139, &#39;John&#39;, &#39;Seo&#39;, &#39;JSEO&#39;, &#39;650.121.2019&#39;, STR_TO_DATE(&#39;12-FEB-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2700, NULL, 123, 50 ); INSERT INTO employees VALUES ( 140, &#39;Joshua&#39;, &#39;Patel&#39;, &#39;JPATEL&#39;, &#39;650.121.1834&#39;, STR_TO_DATE(&#39;06-APR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2500, NULL, 123, 50 ); INSERT INTO employees VALUES ( 141, &#39;Trenna&#39;, &#39;Rajs&#39;, &#39;TRAJS&#39;, &#39;650.121.8009&#39;, STR_TO_DATE(&#39;17-OCT-1995&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 3500, NULL, 124, 50 ); INSERT INTO employees VALUES ( 142, &#39;Curtis&#39;, &#39;Davies&#39;, &#39;CDAVIES&#39;, &#39;650.121.2994&#39;, STR_TO_DATE(&#39;29-JAN-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 3100, NULL, 124, 50 ); INSERT INTO employees VALUES ( 143, &#39;Randall&#39;, &#39;Matos&#39;, &#39;RMATOS&#39;, &#39;650.121.2874&#39;, STR_TO_DATE(&#39;15-MAR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2600, NULL, 124, 50 ); INSERT INTO employees VALUES ( 144, &#39;Peter&#39;, &#39;Vargas&#39;, &#39;PVARGAS&#39;, &#39;650.121.2004&#39;, STR_TO_DATE(&#39;09-JUL-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 2500, NULL, 124, 50 ); INSERT INTO employees VALUES ( 145, &#39;John&#39;, &#39;Russell&#39;, &#39;JRUSSEL&#39;, &#39;011.44.1344.429268&#39;, STR_TO_DATE(&#39;01-OCT-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_MAN&#39;, 14000, .4, 100, 80 ); INSERT INTO employees VALUES ( 146, &#39;Karen&#39;, &#39;Partners&#39;, &#39;KPARTNER&#39;, &#39;011.44.1344.467268&#39;, STR_TO_DATE(&#39;05-JAN-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_MAN&#39;, 13500, .3, 100, 80 ); INSERT INTO employees VALUES ( 147, &#39;Alberto&#39;, &#39;Errazuriz&#39;, &#39;AERRAZUR&#39;, &#39;011.44.1344.429278&#39;, STR_TO_DATE(&#39;10-MAR-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_MAN&#39;, 12000, .3, 100, 80 ); INSERT INTO employees VALUES ( 148, &#39;Gerald&#39;, &#39;Cambrault&#39;, &#39;GCAMBRAU&#39;, &#39;011.44.1344.619268&#39;, STR_TO_DATE(&#39;15-OCT-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_MAN&#39;, 11000, .3, 100, 80 ); INSERT INTO employees VALUES ( 149, &#39;Eleni&#39;, &#39;Zlotkey&#39;, &#39;EZLOTKEY&#39;, &#39;011.44.1344.429018&#39;, STR_TO_DATE(&#39;29-JAN-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_MAN&#39;, 10500, .2, 100, 80 ); INSERT INTO employees VALUES ( 150, &#39;Peter&#39;, &#39;Tucker&#39;, &#39;PTUCKER&#39;, &#39;011.44.1344.129268&#39;, STR_TO_DATE(&#39;30-JAN-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 10000, .3, 145, 80 ); INSERT INTO employees VALUES ( 151, &#39;David&#39;, &#39;Bernstein&#39;, &#39;DBERNSTE&#39;, &#39;011.44.1344.345268&#39;, STR_TO_DATE(&#39;24-MAR-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 9500, .25, 145, 80 ); INSERT INTO employees VALUES ( 152, &#39;Peter&#39;, &#39;Hall&#39;, &#39;PHALL&#39;, &#39;011.44.1344.478968&#39;, STR_TO_DATE(&#39;20-AUG-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 9000, .25, 145, 80 ); INSERT INTO employees VALUES ( 153, &#39;Christopher&#39;, &#39;Olsen&#39;, &#39;COLSEN&#39;, &#39;011.44.1344.498718&#39;, STR_TO_DATE(&#39;30-MAR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 8000, .2, 145, 80 ); INSERT INTO employees VALUES ( 154, &#39;Nanette&#39;, &#39;Cambrault&#39;, &#39;NCAMBRAU&#39;, &#39;011.44.1344.987668&#39;, STR_TO_DATE(&#39;09-DEC-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7500, .2, 145, 80 ); INSERT INTO employees VALUES ( 155, &#39;Oliver&#39;, &#39;Tuvault&#39;, &#39;OTUVAULT&#39;, &#39;011.44.1344.486508&#39;, STR_TO_DATE(&#39;23-NOV-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7000, .15, 145, 80 ); INSERT INTO employees VALUES ( 156, &#39;Janette&#39;, &#39;King&#39;, &#39;JKING&#39;, &#39;011.44.1345.429268&#39;, STR_TO_DATE(&#39;30-JAN-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 10000, .35, 146, 80 ); INSERT INTO employees VALUES ( 157, &#39;Patrick&#39;, &#39;Sully&#39;, &#39;PSULLY&#39;, &#39;011.44.1345.929268&#39;, STR_TO_DATE(&#39;04-MAR-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 9500, .35, 146, 80 ); INSERT INTO employees VALUES ( 158, &#39;Allan&#39;, &#39;McEwen&#39;, &#39;AMCEWEN&#39;, &#39;011.44.1345.829268&#39;, STR_TO_DATE(&#39;01-AUG-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 9000, .35, 146, 80 ); INSERT INTO employees VALUES ( 159, &#39;Lindsey&#39;, &#39;Smith&#39;, &#39;LSMITH&#39;, &#39;011.44.1345.729268&#39;, STR_TO_DATE(&#39;10-MAR-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 8000, .3, 146, 80 ); INSERT INTO employees VALUES ( 160, &#39;Louise&#39;, &#39;Doran&#39;, &#39;LDORAN&#39;, &#39;011.44.1345.629268&#39;, STR_TO_DATE(&#39;15-DEC-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7500, .3, 146, 80 ); INSERT INTO employees VALUES ( 161, &#39;Sarath&#39;, &#39;Sewall&#39;, &#39;SSEWALL&#39;, &#39;011.44.1345.529268&#39;, STR_TO_DATE(&#39;03-NOV-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7000, .25, 146, 80 ); INSERT INTO employees VALUES ( 162, &#39;Clara&#39;, &#39;Vishney&#39;, &#39;CVISHNEY&#39;, &#39;011.44.1346.129268&#39;, STR_TO_DATE(&#39;11-NOV-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 10500, .25, 147, 80 ); INSERT INTO employees VALUES ( 163, &#39;Danielle&#39;, &#39;Greene&#39;, &#39;DGREENE&#39;, &#39;011.44.1346.229268&#39;, STR_TO_DATE(&#39;19-MAR-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 9500, .15, 147, 80 ); INSERT INTO employees VALUES ( 164, &#39;Mattea&#39;, &#39;Marvins&#39;, &#39;MMARVINS&#39;, &#39;011.44.1346.329268&#39;, STR_TO_DATE(&#39;24-JAN-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7200, .10, 147, 80 ); INSERT INTO employees VALUES ( 165, &#39;David&#39;, &#39;Lee&#39;, &#39;DLEE&#39;, &#39;011.44.1346.529268&#39;, STR_TO_DATE(&#39;23-FEB-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 6800, .1, 147, 80 ); INSERT INTO employees VALUES ( 166, &#39;Sundar&#39;, &#39;Ande&#39;, &#39;SANDE&#39;, &#39;011.44.1346.629268&#39;, STR_TO_DATE(&#39;24-MAR-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 6400, .10, 147, 80 ); INSERT INTO employees VALUES ( 167, &#39;Amit&#39;, &#39;Banda&#39;, &#39;ABANDA&#39;, &#39;011.44.1346.729268&#39;, STR_TO_DATE(&#39;21-APR-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 6200, .10, 147, 80 ); INSERT INTO employees VALUES ( 168, &#39;Lisa&#39;, &#39;Ozer&#39;, &#39;LOZER&#39;, &#39;011.44.1343.929268&#39;, STR_TO_DATE(&#39;11-MAR-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 11500, .25, 148, 80 ); INSERT INTO employees VALUES ( 169, &#39;Harrison&#39;, &#39;Bloom&#39;, &#39;HBLOOM&#39;, &#39;011.44.1343.829268&#39;, STR_TO_DATE(&#39;23-MAR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 10000, .20, 148, 80 ); INSERT INTO employees VALUES ( 170, &#39;Tayler&#39;, &#39;Fox&#39;, &#39;TFOX&#39;, &#39;011.44.1343.729268&#39;, STR_TO_DATE(&#39;24-JAN-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 9600, .20, 148, 80 ); INSERT INTO employees VALUES ( 171, &#39;William&#39;, &#39;Smith&#39;, &#39;WSMITH&#39;, &#39;011.44.1343.629268&#39;, STR_TO_DATE(&#39;23-FEB-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7400, .15, 148, 80 ); INSERT INTO employees VALUES ( 172, &#39;Elizabeth&#39;, &#39;Bates&#39;, &#39;EBATES&#39;, &#39;011.44.1343.529268&#39;, STR_TO_DATE(&#39;24-MAR-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7300, .15, 148, 80 ); INSERT INTO employees VALUES ( 173, &#39;Sundita&#39;, &#39;Kumar&#39;, &#39;SKUMAR&#39;, &#39;011.44.1343.329268&#39;, STR_TO_DATE(&#39;21-APR-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 6100, .10, 148, 80 ); INSERT INTO employees VALUES ( 174, &#39;Ellen&#39;, &#39;Abel&#39;, &#39;EABEL&#39;, &#39;011.44.1644.429267&#39;, STR_TO_DATE(&#39;11-MAY-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 11000, .30, 149, 80 ); INSERT INTO employees VALUES ( 175, &#39;Alyssa&#39;, &#39;Hutton&#39;, &#39;AHUTTON&#39;, &#39;011.44.1644.429266&#39;, STR_TO_DATE(&#39;19-MAR-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 8800, .25, 149, 80 ); INSERT INTO employees VALUES ( 176, &#39;Jonathon&#39;, &#39;Taylor&#39;, &#39;JTAYLOR&#39;, &#39;011.44.1644.429265&#39;, STR_TO_DATE(&#39;24-MAR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 8600, .20, 149, 80 ); INSERT INTO employees VALUES ( 177, &#39;Jack&#39;, &#39;Livingston&#39;, &#39;JLIVINGS&#39;, &#39;011.44.1644.429264&#39;, STR_TO_DATE(&#39;23-APR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 8400, .20, 149, 80 ); INSERT INTO employees VALUES ( 178, &#39;Kimberely&#39;, &#39;Grant&#39;, &#39;KGRANT&#39;, &#39;011.44.1644.429263&#39;, STR_TO_DATE(&#39;24-MAY-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 7000, .15, 149, NULL ); INSERT INTO employees VALUES ( 179, &#39;Charles&#39;, &#39;Johnson&#39;, &#39;CJOHNSON&#39;, &#39;011.44.1644.429262&#39;, STR_TO_DATE(&#39;04-JAN-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 6200, .10, 149, 80 ); INSERT INTO employees VALUES ( 180, &#39;Winston&#39;, &#39;Taylor&#39;, &#39;WTAYLOR&#39;, &#39;650.507.9876&#39;, STR_TO_DATE(&#39;24-JAN-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3200, NULL, 120, 50 ); INSERT INTO employees VALUES ( 181, &#39;Jean&#39;, &#39;Fleaur&#39;, &#39;JFLEAUR&#39;, &#39;650.507.9877&#39;, STR_TO_DATE(&#39;23-FEB-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3100, NULL, 120, 50 ); INSERT INTO employees VALUES ( 182, &#39;Martha&#39;, &#39;Sullivan&#39;, &#39;MSULLIVA&#39;, &#39;650.507.9878&#39;, STR_TO_DATE(&#39;21-JUN-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 2500, NULL, 120, 50 ); INSERT INTO employees VALUES ( 183, &#39;Girard&#39;, &#39;Geoni&#39;, &#39;GGEONI&#39;, &#39;650.507.9879&#39;, STR_TO_DATE(&#39;03-FEB-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 2800, NULL, 120, 50 ); INSERT INTO employees VALUES ( 184, &#39;Nandita&#39;, &#39;Sarchand&#39;, &#39;NSARCHAN&#39;, &#39;650.509.1876&#39;, STR_TO_DATE(&#39;27-JAN-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 4200, NULL, 121, 50 ); INSERT INTO employees VALUES ( 185, &#39;Alexis&#39;, &#39;Bull&#39;, &#39;ABULL&#39;, &#39;650.509.2876&#39;, STR_TO_DATE(&#39;20-FEB-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 4100, NULL, 121, 50 ); INSERT INTO employees VALUES ( 186, &#39;Julia&#39;, &#39;Dellinger&#39;, &#39;JDELLING&#39;, &#39;650.509.3876&#39;, STR_TO_DATE(&#39;24-JUN-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3400, NULL, 121, 50 ); INSERT INTO employees VALUES ( 187, &#39;Anthony&#39;, &#39;Cabrio&#39;, &#39;ACABRIO&#39;, &#39;650.509.4876&#39;, STR_TO_DATE(&#39;07-FEB-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3000, NULL, 121, 50 ); INSERT INTO employees VALUES ( 188, &#39;Kelly&#39;, &#39;Chung&#39;, &#39;KCHUNG&#39;, &#39;650.505.1876&#39;, STR_TO_DATE(&#39;14-JUN-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3800, NULL, 122, 50 ); INSERT INTO employees VALUES ( 189, &#39;Jennifer&#39;, &#39;Dilly&#39;, &#39;JDILLY&#39;, &#39;650.505.2876&#39;, STR_TO_DATE(&#39;13-AUG-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3600, NULL, 122, 50 ); INSERT INTO employees VALUES ( 190, &#39;Timothy&#39;, &#39;Gates&#39;, &#39;TGATES&#39;, &#39;650.505.3876&#39;, STR_TO_DATE(&#39;11-JUL-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 2900, NULL, 122, 50 ); INSERT INTO employees VALUES ( 191, &#39;Randall&#39;, &#39;Perkins&#39;, &#39;RPERKINS&#39;, &#39;650.505.4876&#39;, STR_TO_DATE(&#39;19-DEC-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 2500, NULL, 122, 50 ); INSERT INTO employees VALUES ( 192, &#39;Sarah&#39;, &#39;Bell&#39;, &#39;SBELL&#39;, &#39;650.501.1876&#39;, STR_TO_DATE(&#39;04-FEB-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 4000, NULL, 123, 50 ); INSERT INTO employees VALUES ( 193, &#39;Britney&#39;, &#39;Everett&#39;, &#39;BEVERETT&#39;, &#39;650.501.2876&#39;, STR_TO_DATE(&#39;03-MAR-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3900, NULL, 123, 50 ); INSERT INTO employees VALUES ( 194, &#39;Samuel&#39;, &#39;McCain&#39;, &#39;SMCCAIN&#39;, &#39;650.501.3876&#39;, STR_TO_DATE(&#39;01-JUL-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3200, NULL, 123, 50 ); INSERT INTO employees VALUES ( 195, &#39;Vance&#39;, &#39;Jones&#39;, &#39;VJONES&#39;, &#39;650.501.4876&#39;, STR_TO_DATE(&#39;17-MAR-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 2800, NULL, 123, 50 ); INSERT INTO employees VALUES ( 196, &#39;Alana&#39;, &#39;Walsh&#39;, &#39;AWALSH&#39;, &#39;650.507.9811&#39;, STR_TO_DATE(&#39;24-APR-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3100, NULL, 124, 50 ); INSERT INTO employees VALUES ( 197, &#39;Kevin&#39;, &#39;Feeney&#39;, &#39;KFEENEY&#39;, &#39;650.507.9822&#39;, STR_TO_DATE(&#39;23-MAY-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 3000, NULL, 124, 50 ); INSERT INTO employees VALUES ( 198, &#39;Donald&#39;, &#39;OConnell&#39;, &#39;DOCONNEL&#39;, &#39;650.507.9833&#39;, STR_TO_DATE(&#39;21-JUN-1999&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 2600, NULL, 124, 50 ); INSERT INTO employees VALUES ( 199, &#39;Douglas&#39;, &#39;Grant&#39;, &#39;DGRANT&#39;, &#39;650.507.9844&#39;, STR_TO_DATE(&#39;13-JAN-2000&#39;, &#39;%d-%M-%Y&#39;), &#39;SH_CLERK&#39;, 2600, NULL, 124, 50 ); INSERT INTO employees VALUES ( 200, &#39;Jennifer&#39;, &#39;Whalen&#39;, &#39;JWHALEN&#39;, &#39;515.123.4444&#39;, STR_TO_DATE(&#39;17-SEP-1987&#39;, &#39;%d-%M-%Y&#39;), &#39;AD_ASST&#39;, 4400, NULL, 101, 10 ); INSERT INTO employees VALUES ( 201, &#39;Michael&#39;, &#39;Hartstein&#39;, &#39;MHARTSTE&#39;, &#39;515.123.5555&#39;, STR_TO_DATE(&#39;17-FEB-1996&#39;, &#39;%d-%M-%Y&#39;), &#39;MK_MAN&#39;, 13000, NULL, 100, 20 ); INSERT INTO employees VALUES ( 202, &#39;Pat&#39;, &#39;Fay&#39;, &#39;PFAY&#39;, &#39;603.123.6666&#39;, STR_TO_DATE(&#39;17-AUG-1997&#39;, &#39;%d-%M-%Y&#39;), &#39;MK_REP&#39;, 6000, NULL, 201, 20 ); INSERT INTO employees VALUES ( 203, &#39;Susan&#39;, &#39;Mavris&#39;, &#39;SMAVRIS&#39;, &#39;515.123.7777&#39;, STR_TO_DATE(&#39;07-JUN-1994&#39;, &#39;%d-%M-%Y&#39;), &#39;HR_REP&#39;, 6500, NULL, 101, 40 ); INSERT INTO employees VALUES ( 204, &#39;Hermann&#39;, &#39;Baer&#39;, &#39;HBAER&#39;, &#39;515.123.8888&#39;, STR_TO_DATE(&#39;07-JUN-1994&#39;, &#39;%d-%M-%Y&#39;), &#39;PR_REP&#39;, 10000, NULL, 101, 70 ); INSERT INTO employees VALUES ( 205, &#39;Shelley&#39;, &#39;Higgins&#39;, &#39;SHIGGINS&#39;, &#39;515.123.8080&#39;, STR_TO_DATE(&#39;07-JUN-1994&#39;, &#39;%d-%M-%Y&#39;), &#39;AC_MGR&#39;, 12000, NULL, 101, 110 ); INSERT INTO employees VALUES ( 206, &#39;William&#39;, &#39;Gietz&#39;, &#39;WGIETZ&#39;, &#39;51hr5.123.8181&#39;, STR_TO_DATE(&#39;07-JUN-1994&#39;, &#39;%d-%M-%Y&#39;), &#39;AC_ACCOUNT&#39;, 8300, NULL, 205, 110 ); COMMIT; INSERT INTO job_history VALUES ( 102, STR_TO_DATE(&#39;13-Jan-1993&#39;, &#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;24-Jul-1998&#39;, &#39;%d-%M-%Y&#39;), &#39;IT_PROG&#39;, 60 ); INSERT INTO job_history VALUES ( 101, STR_TO_DATE(&#39;21-Sep-1989&#39;, &#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;27-Oct-1993&#39;, &#39;%d-%M-%Y&#39;), &#39;AC_ACCOUNT&#39;, 110 ); INSERT INTO job_history VALUES ( 101, STR_TO_DATE(&#39;28-Oct-1993&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;15-Mar-1997&#39;,&#39;%d-%M-%Y&#39;), &#39;AC_MGR&#39;, 110 ); INSERT INTO job_history VALUES ( 201, STR_TO_DATE(&#39;27-Feb-1996&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;19-Dec-1999&#39;,&#39;%d-%M-%Y&#39;), &#39;MK_REP&#39;, 20 ); INSERT INTO job_history VALUES ( 114, STR_TO_DATE(&#39;24-Mar-1998&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;31-Dec-1999&#39;,&#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 50 ); INSERT INTO job_history VALUES ( 122, STR_TO_DATE(&#39;01-Jan-1999&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;31-Dec-1999&#39;,&#39;%d-%M-%Y&#39;), &#39;ST_CLERK&#39;, 50 ); INSERT INTO job_history VALUES ( 200, STR_TO_DATE(&#39;17-Sep-1987&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;17-Jun-1993&#39;,&#39;%d-%M-%Y&#39;), &#39;AD_ASST&#39;, 90 ); INSERT INTO job_history VALUES ( 176, STR_TO_DATE(&#39;24-Mar-1998&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;31-Dec-1998&#39;,&#39;%d-%M-%Y&#39;), &#39;SA_REP&#39;, 80 ); INSERT INTO job_history VALUES ( 176, STR_TO_DATE(&#39;01-Jan-1999&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;31-Dec-1999&#39;,&#39;%d-%M-%Y&#39;), &#39;SA_MAN&#39;, 80 ); INSERT INTO job_history VALUES ( 200, STR_TO_DATE(&#39;01-Jul-1994&#39;,&#39;%d-%M-%Y&#39;), STR_TO_DATE(&#39;31-Dec-1998&#39;,&#39;%d-%M-%Y&#39;), &#39;AC_ACCOUNT&#39;, 90 ); COMMIT; /* *************************************************************** ***************************FOREIGN KEYS*************************** **************************************************************** */ ALTER TABLE countries ADD FOREIGN KEY (region_id) REFERENCES regions(region_id); ALTER TABLE locations ADD FOREIGN KEY (country_id) REFERENCES countries(country_id); ALTER TABLE departments ADD FOREIGN KEY (location_id) REFERENCES locations(location_id); ALTER TABLE employees ADD FOREIGN KEY (job_id) REFERENCES jobs(job_id); ALTER TABLE employees ADD FOREIGN KEY (department_id) REFERENCES departments(department_id); ALTER TABLE employees ADD FOREIGN KEY (manager_id) REFERENCES employees(employee_id); ALTER TABLE departments ADD FOREIGN KEY (manager_id) REFERENCES employees (employee_id); ALTER TABLE job_history ADD FOREIGN KEY (employee_id) REFERENCES employees(employee_id); ALTER TABLE job_history ADD FOREIGN KEY (job_id) REFERENCES jobs(job_id); ALTER TABLE job_history ADD FOREIGN KEY (department_id) REFERENCES departments(department_id); .",
            "url": "https://safenumz.github.io/blog/etc/2019/05/17/DB-MySQL_scott_hr.html",
            "relUrl": "/etc/2019/05/17/DB-MySQL_scott_hr.html",
            "date": " • May 17, 2019"
        }
        
    
  
    
        ,"post159": {
            "title": "[IntellJ] Mac에서 Oracle과 IntelliJ 연동하는 방법",
            "content": "Environment . MacOS | . Oracle IntelliJ 연동 . /jdbc/ 폴더에 ojdbc6 복사 | /jdk1.8.0_201/jre/lib/ext 외부전용 폴더에 ojdbc6 저장 | 혹시 모르니 /jre1.8.0_201/jre/lib/ext 폴더에도 ojdbc6 저장 | .",
            "url": "https://safenumz.github.io/blog/architecture/2019/05/17/Mac_Oracle_IntelliJ_%EC%97%B0%EB%8F%99.html",
            "relUrl": "/architecture/2019/05/17/Mac_Oracle_IntelliJ_%EC%97%B0%EB%8F%99.html",
            "date": " • May 17, 2019"
        }
        
    
  
    
        ,"post160": {
            "title": "[Oracle] SQL 쿼리 연습",
            "content": "SQL 쿼리 연습 . scott 계정 . 1. 업무가 jones와 같거나 월급이 ford의 월급 이상인 사원의 정보를 이름, 업무, 부서번호, 급여를 출력 단, 업무별, 월급이 많은 순으로 . SELECT ename, job, deptno, sal FROM emp WHERE job = (SELECT job FROM emp WHERE ename=&#39;JONES&#39;) OR sal &gt;= (SELECT sal FROM emp WHERE ename=&#39;FORD&#39;) ORDER BY job, sal DESC; . 2. scott 또는 ward와 월급이 같은 사원의 정보를 이름, 업무, 급여를 출력 . SELECT ename, job, sal FROM emp WHERE ename=&#39;SCOTT&#39; OR sal=(SELECT sal FROM emp WHERE ename=&#39;WARD&#39;); . 3. chicago에서 근무하는 사원과 같은 업무를 하는 사원의 이름, 업무를 출력 . WITH temp AS ( SELECT e.job job FROM emp e INNER JOIN dept d ON e.deptno=d.deptno WHERE d.loc=&#39;CHICAGO&#39; ) SELECT ename, job FROM emp WHERE job in (SELECT job FROM temp); . 4. 부서별로 월급이 평균 월급보다 높은 사원을 부서번호, 이름, 급여를 출력 . SELECT e1.deptno, e1.ename, sal, avg_sal FROM emp e1 LEFT OUTER JOIN (SELECT e.deptno deptno, avg(e.sal) avg_sal FROM emp e GROUP BY e.deptno) e2 ON e1.deptno=e2.deptno WHERE e1.sal &gt; e2.avg_sal; - WITH temp AS ( SELECT e1.deptno, e1.ename, sal, avg_sal FROM emp e1 LEFT OUTER JOIN (SELECT e.deptno deptno, avg(e.sal) avg_sal FROM emp e GROUP BY e.deptno) e2 ON e1.deptno=e2.deptno ) SELECT * FROM temp WHERE sal &gt; avg_sal; - SELECT deptno, ename, sal FROM ( SELECT * FROM emp NATURAL JOIN (SELECT e.deptno deptno, avg(e.sal) avg_sal FROM emp e GROUP BY e.deptno) ) WHERE sal &gt; avg_sal; . 5. 말단 사원의 사번, 이름, 업무, 부서번호를 출력 . SELECT empno, ename, job, deptno, hiredate FROM emp WHERE hiredate = (SELECT max(hiredate) FROM emp); . HR 계정 . 1. Zlotkey와 동일한 부서에 속한 모든 사원의 이름과 입사일을 표시하는 질의를 작성하십시오. Zlotkey는 제외하십시오. . SELECT first_name || &#39; &#39; || last_name name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE last_name=&#39;Zlotkey&#39;) AND last_name!=&#39;Zlotkey&#39;; . 2. 급여가 평균 급여보다 많은 모든 사원의 사원 번호와 이름을 표시하는 질의를 작성하고 결과를 급여에 대해 오름차순으로 정렬하십시오. . SELECT employee_id, first_name || &#39; &#39; || last_name name, salary FROM employees WHERE salary &gt; (SELECT avg(salary) FROM employees) ORDER BY salary; . 3. King에게 보고하는 모든 사원의 이름과 급여를 표시하십시오. . SELECT first_name || &#39; &#39; || last_name name, salary FROM employees WHERE manager_id in (SELECT employee_id FROM employees WHERE last_name=&#39;King&#39;); . 4. Executive 부서의 모든 사원에 대한 부서 번호, 이름 및 업무 ID를 표시하십시오. . SELECT e.department_id, e.first_name || &#39; &#39; || e.last_name name, e.job_id FROM employees e LEFT OUTER JOIN departments d ON e.department_id = d.department_id WHERE d.department_name=&#39;Executive&#39;; . 5. 평균 급여보다 많은 급여를 받고 이름에 u가 포함된 사원과 같은 부서에서 근무하는 모든 사원의 사원 번호, 이름 및 급여를 표시하는 질의를 작성하십시오. . SELECT e1.employee_id, e1.first_name || &#39; &#39; || e1.last_name name, e1.salary FROM employees e1 WHERE e1.salary &gt; (SELECT avg(e2.salary) FROM employees e2) AND e1.department_id IN ( SELECT e3.department_id FROM employees e3 WHERE REGEXP_LIKE(e3.last_name, &#39;u|U&#39;) ); .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/16/Oracle_SQL_%EC%BF%BC%EB%A6%AC%EC%97%B0%EC%8A%B5.html",
            "relUrl": "/sql/2019/05/16/Oracle_SQL_%EC%BF%BC%EB%A6%AC%EC%97%B0%EC%8A%B5.html",
            "date": " • May 16, 2019"
        }
        
    
  
    
        ,"post161": {
            "title": "[Oracle] Procedure / Function",
            "content": "Procedure / Function . 익명블록 (anonymous block)은 실행할 때마다 컴파일을 수행하고 작업을 처리 | 프로시져와 함수는 데이터베이스객체로 저장되어 필요할 때마다 호출 | 프로시져와 함수의 차이는반환값의 여부 | . Procedure . CREATE OR REPLACE PROCEDURE 프로지셔명 (파리미터 [ IN|OUT|INOUT ] 데이터타입) IS 변수선언; BEGIN 처리내용; END; . Fuction . CREATE OR REPLACE FUNCTION 함수명 ( 파리미터 데이터타입 ) RETURN 데이터타입 IS 변수선언; BEGIN 처리내용; RETURN 리턴값; END; . 실행 : EXEC / EXECUTE | VARCHAR2 타입으로파라미터 선언시 구체적인 문자수를 기술하면 오류 발생 | . 1. 사번과 급여를 넘겨받아 수정하는 프로시져 . CREATE OR REPLACE PROCEDURE emp_sal_update ( p_empno IN emp.empno%TYPE, p_sal IN emp.sal%TYPE ) IS BEGIN UPDATE emp SET sal = p_sal WHERE empno = p_empno; IF SQL%NOTFOUND THEN dbms_output.put_line( p_empno || &#39;는 없는 사원번호입니다.&#39;); ELSE dbms_output.put_line( p_empno || &#39;의 급여를 수정하였습니다.&#39;); END IF; COMMIT; END; / . 2. 사원명, 업무, 매니저, 급여를 넘겨받아 등록하는 프로시져를 생성 . 단, 부서번호는 매니저의 부서 번호와 동일하고 사원번호는 시퀀스를 이용 | . CREATE OR REPLACE PROCEDURE emp_input ( v_name IN emp.ename%TYPE, v_job IN emp.job%TYPE, v_mgr IN emp.mgr%TYPE, v_sal IN emp.sal%TYPE ) IS -- 변수선언 v_deptno emp.deptno%TYPE; BEGIN SELECT deptno INTO v_deptno FROM emp WHERE empno=v_mgr; INSERT INTO emp(empno, ename, job, mgr, sal, deptno ) VALUES( emp_empno_seq.nextval, upper(v_name), upper(v_job), v_mgr, v_sal, v_deptno ); --EXCEPTION --WHEN NO_DATA_FOUND THEN dbms_output.put_line(&#39;입력한 매니저 번호가 없습니다&#39;); --WHEN OTHERS THEN dbms_output.put_line(&#39;에러발생&#39;); END; . set serveroutput on execute emp_input(‘KIM’, ‘SALESMAN’, 7788, 3000 ); . 3.넘겨 받은 사원명의 정보 중 부서명과 급여를 검색하는 프로시져 . CREATE OR REPLACE PROCEDURE dname_sal_display ( v_ename IN emp.ename%TYPE, v_dname OUT dept.dname%TYPE, v_sal OUT emp.sal%TYPE ) IS BEGIN SELECT e.sal , d.dname INTO v_sal, v_dname FROM emp e, dept d WHERE e.deptno=d.deptno AND ename=upper(v_ename); EXCEPTION WHEN NO_DATA_FOUND THEN dbms_output.put_line(&#39;해당 데이터가 없습니다&#39;); WHEN TOO_MANY_ROWS THEN dbms_output.put_line(&#39;검색 데이터가 2건 이상입니다.&#39;); WHEN OTHERS THEN dbms_output.put_line(&#39;에러발생&#39;); END; . VAR g_dname VARCHAR2(15) VAR g_sal NUMBER set serveroutput on EXECUTE dname_sal_display(‘SCOTT’, :g_dname, :g_sal ); PRINT g_dname PRINT g_sal . 4. 사원명을 입력받아 부서번호, 부서명, 급여를 출력하는 FUNCTION을 작성하되 부서번호를 리턴한다. . CREATE OR REPLACE FUNCTION emp_dis_func ( v_ename IN emp.ename%TYPE ) RETURN emp.deptno%TYPE IS v_deptno emp.deptno%TYPE; v_dname dept.dname%TYPE; v_sal emp.sal%TYPE; BEGIN SELECT deptno, sal INTO v_deptno, v_sal FROM emp WHERE ename=upper(v_ename); SELECT dname INTO v_dname FROM dept WHERE deptno=v_deptno; dbms_output.put_line(&#39;사 원 명 : &#39; || v_ename ); dbms_output.put_line(&#39;부서번호 : &#39; || v_deptno ); dbms_output.put_line(&#39;부 서 명 : &#39; || v_dname ); dbms_output.put_line(&#39;급 여 : &#39; || v_sal ); RETURN v_deptno; EXCEPTION WHEN NO_DATA_FOUND THEN dbms_output.put_line(&#39;해당 데이터가 없습니다&#39;); WHEN TOO_MANY_ROWS THEN dbms_output.put_line(&#39;검색 데이터가 2건 이상입니다.&#39;); WHEN OTHERS THEN dbms_output.put_line(&#39;에러발생&#39;); END; . VAR g_deptno NUMBER set serveroutput on EXECUTE :g_deptno := emp_dis_func(‘WARD’); PRINT g_deptno . [ 도전 ] 사번과 이동할 부서를 넘겨받아 수정하는 프로시져 . 단, 연봉은 기본 연봉의 30%증가 하되, 이동할 부서의 최고연봉보다높으면 최고연봉으로 지정하고 최소연봉보다 낮으면최소연봉으로 지정한다. | . Package . 패키지 선언 . CREATE OR REPLACE PACKAGE emp_package AS -- 사번과 급여를 넘겨받아 수정하는 프로시져 PROCEDURE emp_sal_update ( p_empno IN emp.empno%TYPE, p_sal IN emp.sal%TYPE ); -- 사원명, 업무, 매니저, 급여를 넘겨받아 등록하는 프로시져를 생성 PROCEDURE emp_input ( v_name IN emp.ename%TYPE, v_job IN emp.job%TYPE, v_mgr IN emp.mgr%TYPE, v_sal IN emp.sal%TYPE ); END emp_package; . 패키지 구현 . CREATE OR REPLACE PACKAGE BODY emp_package AS -- 사번과 급여를 넘겨받아 수정하는 프로시져 PROCEDURE emp_sal_update ( p_empno IN emp.empno%TYPE, p_sal IN emp.sal%TYPE ) IS BEGIN UPDATE emp SET sal = p_sal WHERE empno = p_empno; IF SQL%NOTFOUND THEN dbms_output.put_line( p_empno || &#39;는 없는 사원번호입니다.&#39;); ELSE dbms_output.put_line( p_empno || &#39;의 급여를 수정하였습니다.&#39;); END IF; END emp_sal_update; --사원명, 업무, 매니저, 급여를 넘겨받아 등록하는 프로시져를 생성 PROCEDURE emp_input ( v_name IN emp.ename%TYPE, v_job IN emp.job%TYPE, v_mgr IN emp.mgr%TYPE, v_sal IN emp.sal%TYPE ) IS -- 변수선언 v_deptno emp.deptno%TYPE; BEGIN SELECT deptno INTO v_deptno FROM emp WHERE empno=v_mgr; INSERT INTO emp(empno, ename, job, mgr, sal, deptno ) VALUES( emp_empno_seq.nextval, upper(v_name), upper(v_job), v_mgr, v_sal, v_deptno ); EXCEPTION WHEN NO_DATA_FOUND THEN dbms_output.put_line(&#39;입력한 매니저 번호가 없습니다&#39;); WHEN OTHERS THEN dbms_output.put_line(&#39;에러발생&#39;); END emp_input; END emp_package; . 3. 패키지 실행 . exec emp_package.emp_sal_update ( 8021, 2000 ); exec emp_package.emp_input(&#39;홍&#39;,&#39;SALESMAN&#39;,8021, 3000); .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/16/Oracle_SQL_Procedure_Function.html",
            "relUrl": "/sql/2019/05/16/Oracle_SQL_Procedure_Function.html",
            "date": " • May 16, 2019"
        }
        
    
  
    
        ,"post162": {
            "title": "[Oracle] Partition",
            "content": "Partition . # 파이션 파일 생성 SQL&gt; CREATE TABLESPACE p1 datafile &#39;/u01/app/oracle/oradata/XE/p1.DBF&#39; size 5m; SQL&gt; CREATE TABLESPACE p2 datafile &#39;/u01/app/oracle/oradata/XE/p2.DBF&#39; size 5m; SQL&gt; CREATE TABLESPACE p3 datafile &#39;/u01/app/oracle/oradata/XE/p3.DBF&#39; size 5m; . -- 테이블 생성 CREATE TABLE sawon_p ( sabun number(4), saname varchar2(20), job varchar2(20), sal number ) -- 파티션 생성 partition by range(sabun) ( partition sawon_p1 values less than (2000) tablespace p1, partition sawon_p2 values less than (4000) tablespace p2, partition sawon_p3 values less than (8000) tablespace p3 ); INSERT INTO sawon_p VALUES(101, &#39;삼순이&#39;, &#39;개발&#39;, 5000); INSERT INTO sawon_p VALUES(101, &#39;사순이&#39;, &#39;디자인&#39;, 5000); INSERT INTO sawon_p VALUES(101, &#39;오순이&#39;, &#39;디자인&#39;, 5000); SELECT * FROM sawon_p; -- 테이블에 일부 파티션 p2만 검색된다. SELECT * FROM sawon_p partition(sawon_p2); .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/16/Oracle_SQL_Partition.html",
            "relUrl": "/sql/2019/05/16/Oracle_SQL_Partition.html",
            "date": " • May 16, 2019"
        }
        
    
  
    
        ,"post163": {
            "title": "[Oracle] PL-SQL",
            "content": "PL-SQL . Procedural language extension to Structured Query Language | SQL을 확장한 순차적 처리 언어 | SQL과 일반 프로그래밍 언어의 결합 | 성능향상 : 여러 SQL 문장을 하나의 블록으로묶어서 한 번에 처리하기 속도 개선 | . PL/SQL 블록의 유형 . Anonymous . [DECLARE] BEGIN statement; statement; statement; [EXCEPTION] END; . Procedure . CREATE PROCEDURE p_name IS BEGIN statement; statement; statement; [EXCEPTION] END; . Function . CREATE FUNCTION f_name RETURN datatype IS BEGIN statement; statement; statement; RETURN value; [EXCEPTION] END; . 익명블록 (Anonymous block) . 선언부 : 변수나 상수를 선언 | 실행부 : 실제 처리할 로직을 기술 | 예외처리부 : 로직을 처리하다 발생할 수 있는 예외에 대한 처리 | . 1. PL/SQL 변수 . Scalar : 단일 값 | Composite : 레코드 같은 조합 데이터형 | Reference : 참조 데이터형 (pointer) | LOB : 큰 객체 데이터형 | . (1) 기본 스칼라 데이터형 . 데이터형 설 명 . VARCHAR2 (n) | 가변길이 문자 데이터 | . NUMBER (p, s) | 숫자 데이터 | . DATE | 날짜 데이터 | . CHAR (n) | 고정길이 문자 데이터 (32767바이트까지) | . BOOLEAN | TURE, FALSE, NULL 데이터 | . BINARY_INTEGER | 정수에 대한 기본형 | . [문제-1] emp 테이블에서 scott의 사원번호, 이름, 입사일을 처리할 변수를 선언하고 값을 지정한후 화면 출력 . SET serveroutput ON; -- 명령문 실행이 아니라 스크립트 실행 (F5) DECLARE v_empno number; v_ename varchar2(30); v_hiredate date; BEGIN SELECT empno, ename, hiredate INTO v_empno, v_ename, v_hiredate FROM emp WHERE ename=upper(&#39;SCOTT&#39;); -- “” 사용하면 에러 ‘’사용해야 dbms_output.put_line(&#39;사번 #&#39; || v_empno); dbms_output.put_line(&#39;이름 #&#39; || v_ename); dbms_output.put_line(&#39;입사일 #&#39; || v_hiredate); END; . (2) 조합 데이터 형(Composite Datatype) . 데이터형 설 명 . TABLE (nested table) | 배열과 유사하나 동적으로 크기가 지정될 수 있음, 데이터 참조시 순서대로 지정하지 않아도 됨 | . RECORD | 서로 다른 데이터형들을 하나로 묶은 단위, C언의 structure와 유사한 개념으로 테이블의 row를 읽어올 때 주로 사용 | . VARRAY | 고정 길이를 가진 배열 | . [문제-2] EMP 테이블의 컬럼의 데이터 타입으로 레코드 선언 . SET SERVEROUTPUT ON ACCEPT p_ename PROMPT &#39;조회할 사원 이름은?&#39; DECLARE -- EMP 테이블의 컬럼들로 레코드타입 변수 선언 emp_record emp%ROWTYPE; -- 입력한 이름을 저장할 변수 선언 -- PL-SQL 대입 연산자 := -- 자바에서 STRING ename = msg;와 같음 v_ename emp.ename%TYPE := &#39;&amp;p_ename&#39;; BEGIN SELECT * -- *는 emp%ROWTYPE으로 정의시 가능 INTO emp_record FROM emp WHERE ename = upper( v_ename ); dbms_output.put_line(&#39;사원번호 : &#39; || to_char(emp_record.empno) ); dbms_output.put_line(&#39;사 원 명 : &#39; || emp_record.ename ); dbms_output.put_line(&#39;업 무 : &#39; || emp_record.job ); EXCEPTION WHEN NO_DATA_FOUND THEN dbms_output.put_line(&#39;&amp;p_ename&#39; || &#39;의 자료는 없습니다&#39;); WHEN TOO_MANY_ROWS THEN dbms_output.put_line(&#39;&amp;p_ename&#39; || &#39;자료가 2건 이상입니다.&#39;); WHEN OTHERS THEN dbms_output.put_line(&#39;검색시 오류가 발생하였습니다.&#39;); END; SET SERVEROUTPUT OFF -- # 한줄 주석 -- 과 여러줄 주석 /* */이 있다 -- # &amp;문자 인식 못하면 set verify off 지정 . 2. PL/SQL 제어 . 조건문 . IF condition THEN statement; ELSIF condition THEN statement; ELSE statement; END IF; / -- sqlplus 사용시 실행 기호 . CASE condition WHEN state THEN statement; WHEN state THEN statement; ELSE statement; END CASE; -- * 만일 ELSE에서 아무것도 하지 않을 때는 NULL 문을기술. (ex. ELSE NULL;) . 1. 이름, 급여, 부서번호를 입력 받아 사원 테이블에 입력시 부서번호가 20이면 급여의 30%를 추가하고, 사번은 시퀀스를 이용한다. . ACCEPT p_name PROMPT &#39;이름?&#39; ACCEPT p_sal PROMPT &#39;월급?&#39; ACCEPT p_deptno PROMPT &#39;부서번호?&#39; DECLARE -- emp 테이블에 있는 자료형과 같은 것으로 사용 v_name emp.ename%type := &#39;&amp;p_name&#39;; -- 대입연산자 v_sal emp.sal%type := &#39;&amp;p_sal&#39;; v_deptno emp.deptno%type := &#39;&amp;p_deptno&#39;; BEGIN IF v_deptno = 20 THEN v_sal := v_sal * 1.3; END IF; INSERT INTO emp(empno, ename, sal, deptno) VALUES(seq_emp_empno.nextval, v_name, v_sal, v_deptno); COMMIT; END; . 2. 이름을 입력받아 그 사람의 업무가 MANAGER이면 10% , ANALYST이면 20%, SALESMAN이면 30%, PRESIDENT이면 40%, CLERK이면 50% 급여를 증가한다. . -- if문 ACCEPT p_name PROMPT &#39;이름?&#39; DECLARE v_name emp.ename%type := &#39;&amp;p_name&#39;; v_job emp.job%type; v_sal emp.sal%type; v_empno emp.empno%type; BEGIN SELECT empno, sal, job INTO v_empno, v_sal, v_job FROM emp WHERE ename=v_name; IF v_job = &#39;MANAGER&#39; THEN v_sal := v_sal * 1.1; ELSIF v_job = &#39;ANALYST&#39; THEN v_sal := v_sal * 1.2; ELSIF v_job = &#39;SALESMAN&#39; THEN v_sal := v_sal * 1.3; ELSIF v_job = &#39;PRESIDENT&#39; THEN v_sal := v_sal * 1.4; ELSIF v_job = &#39;CLERK&#39; THEN v_sal := v_sal * 1.5; END IF; UPDATE emp SET sal = v_sal WHERE ename=v_name; COMMIT; END; SELECT * FROM emp; - CASE문 ACCEPT p_name PROMPT &#39;이름?&#39; DECLARE v_name emp.ename%type := &#39;&amp;p_name&#39;; v_job emp.job%type; v_sal emp.sal%type; v_empno emp.empno%type; BEGIN SELECT empno, sal, job INTO v_empno, v_sal, v_job FROM emp WHERE ename=v_name; CASE v_job WHEN &#39;MANAGER&#39; THEN v_sal := v_sal * 1.1; WHEN &#39;ANALYST&#39; THEN v_sal := v_sal * 1.2; WHEN &#39;SALESMAN&#39; THEN v_sal := v_sal * 1.3; WHEN &#39;PRESIDENT&#39; THEN v_sal := v_sal * 1.4; WHEN &#39;CLERK&#39; THEN v_sal := v_sal * 1.5; END CASE; UPDATE emp SET sal=v_sal WHERE ename=v_name; dbms_output.put_line(v_name || &#39;님 정보 수정&#39;); END; . 반복문 . LOOP IF condition THEN EXIT; END IF; END LOOP; . LOOP EXIT WHEN condition; END LOOP; . WHILE condition LOOP END LOOP; . FOR i IN [REVERSE] min..max LOOP END LOOP; . continue 조건문 | 반복문 안에서 사용 (11g에서 ) | 조건에 맞으면 반복문의 끝으로 가서 반복 실행 | . 1. 1부터 9까지의숫자를 입력 받아 해당하는 구구단을 출력 . ACCEPT p_dan PROMPT &#39;구구단 단을 입력 : &#39; DECLARE v_dan INTEGER := &amp;p_dan; cnt INTEGER; BEGIN -- 1부터 9까지 반복문 돌림 FOR i IN 1..9 LOOP cnt := v_dan * i; dbms_output.put_line( v_dan || &#39; * &#39; || i || &#39; = &#39; || cnt ); END LOOP; END; . 2. 1부터 100까지의 홀수의 합과 짝수의 합을 출력 . – 나머지 연산자 : mod . DECLARE even_sum INTEGER := 0; odd_sum INTEGER := 0; BEGIN FOR i IN 1..100 LOOP -- i mode 2 IF MOD(i, 2) = 0 THEN even_sum := even_sum + i; ELSIF MOD(i, 2) != 0 THEN odd_sum := odd_sum + i; END IF; END LOOP; dbms_output.put_line(&#39;짝수의 합: &#39; || even_sum); dbms_output.put_line(&#39;홀수의 합: &#39; || odd_sum); END; . 3. 커서(CURSOR) . :SQL문장을 실행할 때마다 오라클 서버는 명령이 분석되고 실행되는 곳에서 메모리영역을 개방하는데, 이 영역을 커서라 한다 | . (1) 묵시적커서 . 오라클에서자동적으로 선언 | 묵시적 커서에 저장되는 데이터는 단 1행 | . 묵시적 커서의 속성 . 종 류 설 명 . SQL%ROWCOUNT | 가장 최근의 SQL문장에 의해 영향을 받은 행의 수 | . SQL%FOUND | 가장 최근의 SQL문장이 하나 이상의 행에 영향을 미친다면 TRUE | . SQL%NOTFOUND | 가장 최근의 SQL문장이 어떤 행에도 영향을 미치지 않는다면 TURE | . SQL%ISOPEN | PL/SQL이 실행된 후에 즉시 암시적 커서를 닫기 때문에 항상 FALSE | . 1. EMP 테이블에서 사번이 8001인 자료를 삭제 . --VARIABLE rows_deleted VARCHAR2(60) DECLARE v_empno emp.empno%TYPE := 8001; BEGIN DELETE FROM emp WHERE empno=v_empno; IF SQL%FOUND THEN dbms_output.put_line( SQL%ROWCOUNT || &#39;행을 삭제하였습니다&#39;); END IF; END; -- PRINTrows_deleted; . (2) 명시적 커서 (FETCH CURSOR) : 사용자가 선언하는 커서 . SELECT 문장을 실행하면 여러 건의 결과 집합이 추출되는데, | 이결과 집합의 각 개별 데이터에 접근하기 위해 커서를 사용 | . 커서 선언: CURSOR 커서명 IS SELECT문장; 커서 열기: OPEN 커서명; ( 실제 커서가 사용할 메모리 공간이 할당 ) 패치: FETCH 커서명 INTO 변수…; ( 명시적 커서로부터 데이터를 읽어서 변수로 할당 ) 커서 닫기: CLOSE 커서명; (메모리 공간 반환) . 2. 부서번호를 입력 받아 사원번호,이름, 급여를 출력 . SET SERVEROUTPUT ON; ACCEPT p_deptno PROMPT &#39;부서번호?&#39; DECLARE v_deptno emp.deptno%type := &amp;p_deptno; v_empno emp.empno%type; v_ename emp.ename%type; v_sal emp.sal%type; CURSOR emp_cursor IS SELECT empno, ename, sal FROM emp WHERE deptno=v_deptno ORDER BY ename; BEGIN OPEN emp_cursor; LOOP FETCH emp_cursor INTO v_empno, v_ename, v_sal; EXIT WHEN emp_cursor%NOTFOUND; dbms_output.put_line(lpad(v_empno, 6) || lpad(v_ename, 10) || lpad(v_sal, 10)); END LOOP; CLOSE emp_cursor; END; . 업무를 입력 받아 평균급여와 최소/최대 급여를 출력 . SET SERVEROUTPUT ON; ACCEPT p_job PROMPT &#39;업무?&#39; DECLARE v_job emp.job%type := &#39;&amp;p_job&#39;; v_avg_sal number(7 ,2); v_min_sal emp.sal%type; v_max_sal emp.sal%type; CURSOR emp_cursor IS SELECT round(avg(sal), 2) avg_sal, min(sal) min_sal, max(sal) max_sal FROM emp GROUP BY job HAVING job=v_job; BEGIN OPEN emp_cursor; LOOP FETCH emp_cursor INTO v_avg_sal, v_min_sal, v_max_sal; EXIT WHEN emp_cursor%NOTFOUND; dbms_output.put_line(v_job || &#39; 평균급여 &#39; || v_avg_sal || &#39; 최대급여: &#39; || v_max_sal || &#39; 최소급여: &#39; || v_min_sal); END LOOP; CLOSE emp_cursor; END; . 각 업무별 평균급여와 최소/최대 급여를 출력 . DECLARE v_job emp.job%type; v_avg_sal number(7 ,2); v_min_sal emp.sal%type; v_max_sal emp.sal%type; CURSOR emp_cursor IS SELECT nvl(job, &#39;NULL&#39;) job, round(avg(sal), 2) avg_sal, min(sal) min_sal, max(sal) max_sal FROM emp GROUP BY job; BEGIN OPEN emp_cursor; LOOP FETCH emp_cursor INTO v_job, v_avg_sal, v_min_sal, v_max_sal; EXIT WHEN emp_cursor%NOTFOUND; dbms_output.put_line(v_job || &#39; 평균급여 &#39; || v_avg_sal || &#39; 최대급여: &#39; || v_max_sal || &#39; 최소급여: &#39; || v_min_sal); END LOOP; CLOSE emp_cursor; END; .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/16/Oracle_SQL_PL-SQL.html",
            "relUrl": "/sql/2019/05/16/Oracle_SQL_PL-SQL.html",
            "date": " • May 16, 2019"
        }
        
    
  
    
        ,"post164": {
            "title": "[DB] 데이터베이스 스키마",
            "content": "스키마 . 데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 메타데이터의 집합 | . 외부 스키마 . 외부 스키마는 사용자나 응용 프로그래머가 각 개인의 입장에서 필요로 하는 데이터베이스의 논리적 구조를 정의 | 한 사용자는 SELECT * FROM TABLE; 을 사용해 데이터를 볼 수 있다. | 다른 사용자는 JOIN을 통해 테이블을 결합해 조회할 수 있다. | SELECT 쿼리를 던졌을 때 볼 수 있는 테이블을 외부스키마의 대표적인 예 라고 할 수 있다. | . 개념 스키마 . 개념 스키마는 데이터베이스의 논리적 구조로서, 모든 응용 프로그램이나 사용자들이 필요로 하는 데이터를 통합한 조직 전체의 데이터베이스 명세로서 하나만 존재 | E-R 다이어그램의 테이블 구조와 같이 테이블의 구성과, 속성이 어떻게 되는지, 또한 어떤 테이블과 릴레이션을 갖고 있는지 등의 점을 개념 스키마라고 한다. | . 내부 스키마 . 내부 스키마는 물리적 저장장치의 관점에서 본 전체 데이터베이스의 명세로서 하나만 존재 | INSERT문에 의해 저장되는 VALUES가 어떠한 알고리즘으로 하드디스크의 어떠한 부분에 저장이되는데, 이러한 시스템적, 물리적인 시각의 스키마를 내부 스키마라고 한다. | .",
            "url": "https://safenumz.github.io/blog/etc/2019/05/16/DB-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EC%8A%A4%ED%82%A4%EB%A7%88.html",
            "relUrl": "/etc/2019/05/16/DB-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EC%8A%A4%ED%82%A4%EB%A7%88.html",
            "date": " • May 16, 2019"
        }
        
    
  
    
        ,"post165": {
            "title": "[DB] Oracle sqlplus 화면 크기 조절",
            "content": "sqlplus 화면설정 . set linesize 1000 set pagesize 100 . 고정설정 . /sqlplus/admin/glogin.sql 파일 마지막 부분에 입력 | . set linesize 1000 set pagesize 100 . cmd 옵션변경 . 속성 -&gt; 레이아웃 -&gt; 화면 버퍼 크기(너비), 창크기(너비) 200 | . . 참고 . set numwidth 10; set lines 150; set trimout on; set pagesize 10000; set tab off; set wrap on; .",
            "url": "https://safenumz.github.io/blog/etc/2019/05/16/DB-Oracle_sqlplus_%ED%99%94%EB%A9%B4%ED%81%AC%EA%B8%B0_%EC%A1%B0%EC%A0%88.html",
            "relUrl": "/etc/2019/05/16/DB-Oracle_sqlplus_%ED%99%94%EB%A9%B4%ED%81%AC%EA%B8%B0_%EC%A1%B0%EC%A0%88.html",
            "date": " • May 16, 2019"
        }
        
    
  
    
        ,"post166": {
            "title": "[Oracle] View",
            "content": "View . 가상 테이블 | 데이터 보안 | 복잡한 쿼리의 사용빈도가 높은 경우 | . CREATE OR REPLACE VIEW v_emp AS SELECT empno, ename, deptno FROM emp; . View 생성권한 부여 . scott 계정에 뷰 생성 권한을 부여해야 함 | . $ sql plus &quot;/as sysdba&quot; $ GRANT create view TO scott; . View의 장점 . View는 데이터베이스의 선택적인 내용을 보여줄 수 있기 때문에 데이터베이스에 대한 액세스를 제한한다 | 조인을 한 것처럼 여러 테이블에 대한 데이터를 View를 통해 볼 수 있다 | 한 개의 View로 여러 테이블에 대한 데이터를 검색한다 | 특정 기준에 따른 사용자 별로 다른 데이터를 액세스 할 수 있다 | . updatable 뷰 . 뷰에 대한 데이터의 입력, 변경, 삭제 가능하지만 제약조건으로 테이블처럼 가능하진 않음 | INSERT 쿼리 시 check 조건은 무시되는데 생성시 with check option 추가 | . CREATE OR REPLACE VIEW v_emp AS SELECT empno, ename, deptno FROM emp; . CREATE OR REPLACE VIEW v_emp AS SELECT empno, ename, deptno FROM emp; SELECT * FROM emp; -- 진짜 테이블 SELECT * FROM v_emp; -- 가상 테이블 -- 가상테이블이라도 원본에 영향을 미친다. 가령 VIEW에서 INSERT가 되는 문제가 있다. -- 이런문제를 해결하기 위해 VIEW는 읽기전용으로 만드는 경향이 있다. (with read only 옵션) INSERT INTO v_emp(empno, ename, deptno) VALUES(8888, &#39;맹심이&#39;, 30); INSERT INTO v_emp(empno, ename, deptno) VALUES(8888, &#39;꽁심이&#39;, 30); -- 원본 pk 제약조건 INSERT INTO v_emp(empno, ename, deptno) VALUES(7777, &#39;박심이&#39;, 60); -- 원본 FK 제약조건 -- 읽기 전용으로 뷰생성 CREATE OR REPLACE VIEW v_emp AS SELECT empno, ename, deptno FROM emp with read only; INSERT INTO v_emp(empno, ename, deptno) VALUES(7777, &#39;박심이&#39;, 20); -- 사원번호, 사원명, 부서명 -&gt; v_emp_info CREATE OR REPLACE VIEW v_emp_info AS SELECT e.empno empno, e.ename ename, d.dname dname FROM emp e LEFT OUTER JOIN dept d ON e.deptno=d.deptno; SELECT * FROM v_emp_info; -- 테이블이 두개이상 조인해서 생성된 뷰는 입력이 안된다. INSERT INTO v_emp_info(empno, ename, deptno) VALUES(7777, &#39;박심이&#39;, 20); -- [ 연습 ] 부서별로 부서명, 최소급여, 최대급여, 부서의 평균 급여를 포함하는 DEPT_SUM 뷰를생성하여라. CREATE OR REPLACE VIEW v_dept_sum AS SELECT d.dname dname, max(e.sal) max_sal, min(e.sal) min_sal, round(avg(e.sal), 2) avg_sal FROM emp e INNER JOIN dept d ON e.deptno = d.deptno GROUP BY d.dname; SELECT * FROM v_dept_sum; -- 원본 테이블을 변경하면 뷰도 변경된다. INSERT INTO emp(empno, ename, sal, deptno) VALUES(8890, &#39;홍홍홍&#39;, 10000, 20); . read-only 뷰 . CREATE or REPLACE VIEW v_emp AS SELECT empno, ename, deptno FROM emp WITH READ ONLY; . 복합뷰 . CREATE OR REPLACE VIEW v_emp AS SELECT e.empno empno e.ename ename, d.dname dname FROM emp e, dept d WHERE e.deptno = d.deptno; -- 입력은 두 테이블이라 안되지만, 사번으로 삭제를 한다면 가능 . -- [ 연습 ] 부서별로 부서명, 최소급여, 최대급여, 부서의 평균 급여를 포함하는 DEPT_SUM 뷰를 생성하여라. .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/15/Oracle_SQL_View.html",
            "relUrl": "/sql/2019/05/15/Oracle_SQL_View.html",
            "date": " • May 15, 2019"
        }
        
    
  
    
        ,"post167": {
            "title": "[Oracle] Sequence Index",
            "content": "시퀀스 (Sequence) . 자동증가수 | . CREATE SEQUENCE sequence_name [ minvalue 1 -- 시퀀스 최소 숫자 maxvalue 999999999999 -- 시퀀스 최대 숫자 increment by 1 -- 증가치 start with 1 -- 시작숫자 nocache -- cache를 사용하면 미리 값을 할당하여 조금 빠르게 접근 noorder -- 요청되는 순서대로 값 할당 nocycle ]; -- 다시 시작할지 여부 . -- 시퀀스(auto_increment) DROP SEQUENCE seq_emp_empno; CREATE SEQUENCE seq_emp_empno start with 5000; -- 홍은 5000번 사번으로 들어간다. INSERT INTO emp(empno, ename, deptno) VALUES(seq_emp_empno.nextval, &#39;홍&#39;, 10); SELECT * FROM emp; -- 홍2는 5001번 사번으로 들어간다. INSERT INTO emp(empno, ename, deptno) VALUES(seq_emp_empno.nextval, &#39;홍2&#39;, 10); SELECT * FROM emp; -- 현재 몇번까지 들어가 있는지 확인 SELECT seq_emp_empno.currval FROM dual; . 시퀀스에 사용되는 의사 컬럼 . CURRVAL: 현재 시퀀스 값 | NEXTVAL: 다음 생성될 시퀀스 값 . | 의사컬럼(Pseudocolumns): 테이블에 있는 컬럼처럼 사용되지만 실제로 저장되어 있지 않은 컬럼 | . 인덱스 (Index) . 빠른 검색을 위해 메모리 상주 | . [ 참고 ] rowid 확인 . -- rownum, rowid SELECT rownum empno, ename, job, rowid FROM emp; . 별로로 인덱스 컬럼과 ROWID 정보를 관리하고 이 정보를 먼저 찾아 실제 테이블에 있는데이터를 검색 | 테이블에 새로운 행이 입력되거나 변경 제거되면 인덱스 정보도 갱신된다. | 너무 많은 인덱스나 테이블의 데이터가 적은 경우는 성능을 저하 | PRIMARY KEY와 UNIQUE KEY는 자동으로 UNIQUEINDEX로 자동 생성 | . CREATE UNIQUE INDEX emp_email_uk ON emp( email ); CREATE INDEX emp_deptno_ix ON emp(deptno, ename); . unique index는 중복값을 허용하지 않음 | . [ 확인 ] hr 계정에서 - Sql Developer에서 F6으로 autotrace로 실행 . SELECT employee_id, first_name, last_name,phone_number FROM employees WHERE salary=3000; -&gt; FULL SCAN COST(3) . [ 에러 ] 데이터베이스 관리자로부터 카탈로그 읽기 권한을 얻으십시오. . $ sqlplus “/as sysdba” . grant SELECT_CATALOG_ROLE to HR grant SELECT ANY DICTIONARY to HR . [ 확인 ] 인덱스 생성후 F6으로 확인 . CREATE UNIQUE INDEX emp_name_idx ONemployees( salary ); SELECT employee_id, first_name, last_name,phone_number FROM employees WHERE salary=3000; -&gt; INDEX (RANGE SCAN) . [ 인덱스 검색 ] . 인덱스가 생성되어 메모리에 올라가면 검색 속도가 빨라진다. | . SELECT index_name, index_type, uniqueness FROM user_indexes WHERE table_name=’EMPLOYEES’; . SELECT employee_id, first_name, last_name, phone_number FROM employees WHERE salary=100; SELECT employee_id, first_name, last_name, phone_number FROM employees WHERE salary=3000; -- 메모리에 인덱스가 안올라왔기 때문에 cost 3 SELECT employee_id, first_name, last_name, phone_number FROM employees WHERE phone_number=&#39;515.123.4567&#39;; -- 메모리에 올라와있는 인덱스 확인 SELECT index_name, index_type FROM user_indexes WHERE table_name=&#39;EMPLOYEES&#39;; -- 메모리에 인덱스가 올라와 있기 때문에 cost 1 SELECT employee_id, first_name, last_name, phone_number FROM employees WHERE last_name=&#39;King&#39;; -- 전화 번호 메모리에 올림 CREATE INDEX emp_phone_ix ON employees(phone_number); -- cost3에서 cost 1로 변경 SELECT employee_id, first_name, last_name, phone_number FROM employees WHERE phone_number=&#39;515.123.4567&#39;; . 인덱스 종류 . unique 인덱스 | non-unique 인덱스 . | 단일 인덱스 : 컬럼 한 개 | 복합 인덱스 : 2개 이상의 컬럼 . | 수동인덱스 : 사용자가 create index로생성 | 자동인덱스 : unique나 primary key 생성시 | . 인덱스에 대한 가이드 라인 . 자주 조회되는 컬럼을 인덱스 컬럼으로 선택 | 데이터 량이 많은 테이블에서 15% 이하의 데이터를 조회할 경우 | 검색속도가 빠를 수 있음 | 조인에 사용된 컬럼을 인덱스 컬럼으로 하면 조인 성능이 향상 | 테이블 데이터가 적은 경우는 직접 테이블 검색이 더 빠름 | 삽입, 갱신, 삭제가 많이 발생하는 테이블에서는인덱스로 성능이 저하될 수 있음 | . 인덱스 생성을 위한 지침 . 많은 것이 항상 더 좋은 것은 아니다. . 인덱스를 가지고 있는 테이블에 대한 각 DML 작업은 인덱스도 갱신되어야 함을 의미한다. | DML 후에 모든 인덱스를 갱신하기 위해 많은 작업을 한다 | . 언제 인덱스를 생성하는가? . 열은 WHERE 절 또는 조인 조건에서 자주 사용한다 | 열은 광범위한 값을 포함한다 | 열은 많은 수의 NULL 값을 포함한다 | 둘 또는 이상의 열은 WHERE 절 또는 조인 조건에서 자주 함께 사용한다 | 테이블은 대형이고 대부분의 질의들은 행의 2~4%보다 적게 읽어 들일 것으로 예상한다 | . 언제 인덱스를 생성해서는 안되는가? . 테이블이 작다 | 옆이 질의의 조건으로 자주 사용되지 않는다 | 대부분의 질의들은 행의 2~4% 이상을 읽어 들일 것으로 예상한다 | 테이블은 자주 갱신한다. | .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/15/Oracle_SQL_Sequence_Index.html",
            "relUrl": "/sql/2019/05/15/Oracle_SQL_Sequence_Index.html",
            "date": " • May 15, 2019"
        }
        
    
  
    
        ,"post168": {
            "title": "[DB] 정규화",
            "content": "정규화 . 데이터베이스의 릴레이션이나 튜플을 불필요한 중복없이, 수정할 때 의도하지 않았던 불필요한 사실이 추가, 삭제, 갱신되는 일이 없도록 DB를 재구성하는 과정을 공식화한 과정 | . 제 1 정규형 . 원자값이 아닌 도메인을 분해 | 속성들이 각각 다른 열로 분해된 릴레이션을 만드는 | . 제 2 정규형 . 부분함수 종속 제거 | 기본키가 아닌 속성이 기본키에 완전 함수 종속일 때를 의미 | . 제 3 정규형 . 이행함수 종속 제거 | . 제 3 정규형의 문제 . 복수의 후보키를 가지고 있고, | 후보키들이 복합 애트리뷰트들로 구성되며 | 후보키들이 서로 중첩되는 경우 | . BCNF 정규형 . 결정자가 후보키가 아닌 함수종속(FD) 제거 | 릴렝이션의 함수 종속 관계에서 모든 결정자가 후보키이면 보이스/코드 정규형에 속한다. | 강한 제3정규형(Strong 3NF) | . 제 4 정규형 . 함수종속이 아닌 다치종속(MVD) 제거 | Muti-valued dependency | 한 테이블에 두 개 이상의 다가속성이 나타나는 경우 | 릴레이션 R에서 MVD A B가 존재할 때 R의 모든 애트리뷰트들이 A에 함수 종속(FD) (즉 R의 모든 애트리뷰트 X에 대해 AX 이고 A가 후보키)이면 릴레이션 R은 제 4 정규형에 속한다 | . 제 5 정규형 . 후보키를 통하지 않은 조인종속(JD) 제거 | 릴레이션 R에 존재하는 모든 조인 종속 (JD)이 릴레이션 R의 후보키를 통해서만 성립된다면 릴레이션 R은 제 5 정규형 또는 PJ/NF(Projection-Join Normal Form)에 속한다. | . 반정규화(De-Normalization) . 현실적으로 모든 릴레이션을 반드시 5NF에 속하도록 분해할 필요는 없음 | 학생주소(학번,이름,주소,전화번호) : BCNF가 아님 | 기본키 : 학번 | FD : 전화번호→주소 | .",
            "url": "https://safenumz.github.io/blog/etc/2019/05/15/DB-SQL_%EC%A0%95%EA%B7%9C%ED%99%94.html",
            "relUrl": "/etc/2019/05/15/DB-SQL_%EC%A0%95%EA%B7%9C%ED%99%94.html",
            "date": " • May 15, 2019"
        }
        
    
  
    
        ,"post169": {
            "title": "[Oracle] 서브쿼리",
            "content": "서브쿼리 . 하나의 SQL문장 내부에 존재하는 또 다른 SELECT 문장 | DML(SELECT, INSERT, UPDATE, DELETE)에 사용가능 | 서브쿼리는 ( ) 로 묶는다 [권장] | 서브쿼리는 연산자의 오른쪽에 [권장] | 단일 행인 경우 비교 연산자 가능 ( &gt;, &gt;=, &lt;, &lt;=, =, !=(&lt;&gt;) ) | 복수 행인 경우 IN, NOT IN, ANY, ALL, EXISTS | ORDER BY에선 사용 못한다 | . -- 전체 사원들 중 평균 급여보다 낮은 급여를 받는 사원의 명단을 조회 SELECT empno, ename, sal FROM emp WHERE sal &lt; (SELECT avg(sal) FROM emp); -- 평균급여보다 높고 최대 급여보다 낮은 월급을 받는 사원 명단 조회 SELECT ename, sal FROM emp WHERE sal &gt; (SELECT avg(sal) FROM emp) and sal &lt; (SELECT max(sal) FROM emp); -- 월급순으로 상위 10명의 명단을 출력 (rownum 이용) SELECT * FROM ( SELECT ename, sal FROM emp ORDER BY nvl(sal, 0) DESC ) e1 WHERE rownum &lt;= 10; . --&lt;&lt; 연습문제 &gt;&gt; 서브쿼리 --1. SCOTT의 급여보다 많은 사원의 정보를 사원번호, 이름, 담당업무, 급여를 출력 --select sal from emp where ename = &#39;SCOTT&#39;; select empno, ename,job,sal from emp where sal &gt; (select sal from emp where ename = &#39;SCOTT&#39;); --2. 30번 부서의 최소 급여보다 각부서의 최소 급여가 높은 부서를 출력 --select min(sal) from emp where deptno = 30; select deptno, min(sal) min from emp group by deptno having min(sal) &gt;(select min(sal) from emp where deptno = 30); --3. 업무별로 평균 급여 중에서 가장 적은 급여를 가진 직업을 출력 --select job,round(avg(sal)) avg from emp group by job; --select min( round(avg(sal))) min_avg from emp group by job; select job from (select job,round(avg(sal)) avg from emp group by job) e1, (select min( round(avg(sal))) min_avg from emp group by job) e2 where e1.avg = e2.min_avg; --4. 사원번호가 7521의 업무와 같고 사번 7934인 직원보다 급여를 많이 받는 사원의 정보를 출력 --select job from emp where empno = 7521; --select sal from emp where empno = 7934; select * from emp where job =(select job from emp where empno = 7521) and sal&gt;(select sal from emp where empno = 7934); --5. 업무가 ‘MANAGER’인 사원의 정보를 이름, 업무, 부서명, 근무지를 출력 select e.ename, e.job, d.dname,d.loc from emp e inner join dept d on e.deptno=d.deptno where e.job= &#39;MANAGER&#39;; --6. &#39;WARD&#39;와 부서와 업무가 같은 사원 명단 출력 --select deptno, job from emp where ename = &#39;WARD&#39;; select * from emp e1,(select deptno, job from emp where ename = &#39;WARD&#39;) e2 where e1.deptno =e2.deptno and e1.job = e2.job;--&lt;&lt; 연습문제 &gt;&gt; 서브쿼리 --1. SCOTT의 급여보다 많은 사원의 정보를 사원번호, 이름, 담당업무, 급여를 출력 --select sal from emp where ename = &#39;SCOTT&#39;; select empno, ename,job,sal from emp where sal &gt; (select sal from emp where ename = &#39;SCOTT&#39;); --2. 30번 부서의 최소 급여보다 각부서의 최소 급여가 높은 부서를 출력 --select min(sal) from emp where deptno = 30; select deptno, min(sal) min from emp group by deptno having min(sal) &gt;(select min(sal) from emp where deptno = 30); --3. 업무별로 평균 급여 중에서 가장 적은 급여를 가진 직업을 출력 --select job,round(avg(sal)) avg from emp group by job; --select min( round(avg(sal))) min_avg from emp group by job; select job from (select job,round(avg(sal)) avg from emp group by job) e1, (select min( round(avg(sal))) min_avg from emp group by job) e2 where e1.avg = e2.min_avg; --4. 사원번호가 7521의 업무와 같고 사번 7934인 직원보다 급여를 많이 받는 사원의 정보를 출력 --select job from emp where empno = 7521; --select sal from emp where empno = 7934; select * from emp where job =(select job from emp where empno = 7521) and sal&gt;(select sal from emp where empno = 7934); --5. 업무가 ‘MANAGER’인 사원의 정보를 이름, 업무, 부서명, 근무지를 출력 select e.ename, e.job, d.dname,d.loc from emp e inner join dept d on e.deptno=d.deptno where e.job= &#39;MANAGER&#39;; --6. &#39;WARD&#39;와 부서와 업무가 같은 사원 명단 출력 --select deptno, job from emp where ename = &#39;WARD&#39;; select * from emp e1,(select deptno, job from emp where ename = &#39;WARD&#39;) e2 where e1.deptno =e2.deptno and e1.job = e2.job; . -- 업무별로 최소 급여를 받는 사원의 정보를 사원번호, 이름, 담당업무, 급여를 출력 SELECT empno, ename, job, sal FROM emp WHERE (job, sal) in (SELECT job, min(sal) FROM emp GROUP BY job); -- 10번 부서사원들의 업무와 동일한 직원들 검색 SELECT * FROM emp -- 하나라도 맞는 것이 있으면 걸러줌 WHERE job = ANY (SELECT job FROM emp WHERE deptno=10); -- 부서별 최소 급여를 받는 사원보다 많은 급여를 받는 사원 정보 출력 -- ANY: 여러가지 조건 중 하나의 조건이라도 만족하면 참 -- ALL: 모든 조건을 만족해야 참 SELECT * FROM emp WHERE sal &gt; ANY (SELECT min(sal) FROM emp GROUP BY deptno); -- 적어도 한명의 사원으로부터 보고를 받을 수 있는 사원의 정보를 사원번호, 이름, 업무를 출력 SELECT e.empno, e.ename, e.job FROM emp e WHERE exists(SELECT * FROM emp e2 WHERE e.empno=e2.mgr); -- 부하직원이 없는 사원들을 검색 SELECT e.empno, e.ename, e.job, e.mgr FROM emp e WHERE not exists(SELECT * FROM emp e2 WHERE e.empno=e2.mgr); . -- INSERT / UPDATE / DELETE에서 -- (1) 부서별 급여통계 테이블 생성 create table stat_salary ( stat_date date not null, -- 날짜 dept_no number, --부서 emp_count number, --사원수 tot_salary number, --급여총액 avg_salary number ); -- 급여평균 -- (2) 날짜와 부서번호 입력 INSERT INTO stat_salary(stat_date, dept_no) SELECT sysdate, deptno FROM dept; SELECT * FROM stat_salary; -- (3) 사원수, 급여총액, 평균급여 입력(?) -&gt; 수정 UPDATE stat_salary s SET (s.emp_count, s.tot_salary, s.avg_salary) = (SELECT count(*), sum(sal), avg(sal) FROM emp e WHERE e.deptno=s.dept_no GROUP BY deptno); DROP TABLE emp_copy; CREATE TABLE emp_copy AS SELECT * FROM emp; -- INSERT / UPDATE / DELETE에서 -- (1) 부서별 급여통계 테이블 생성 create table stat_salary ( stat_date date not null, -- 날짜 dept_no number, --부서 emp_count number, --사원수 tot_salary number, --급여총액 avg_salary number ); -- 급여평균 -- (2) 날짜와 부서번호 입력 INSERT INTO stat_salary(stat_date, dept_no) SELECT sysdate, deptno FROM dept; SELECT * FROM stat_salary; -- (3) 사원수, 급여총액, 평균급여 입력(?) -&gt; 수정 UPDATE stat_salary s SET (s.emp_count, s.tot_salary, s.avg_salary) = (SELECT count(*), sum(sal), avg(sal) FROM emp e WHERE e.deptno=s.dept_no GROUP BY deptno); DROP TABLE emp_copy; CREATE TABLE emp_copy AS SELECT * FROM emp; -- 1. scott의 업무와 급여로 jones의 업무와 급여를 수정 UPDATE emp_copy e SET (e.job, e.sal) = (SELECT e2.job, e2.sal FROM emp e2 WHERE e2.ename = &#39;SCOTT&#39;) WHERE e.ename = &#39;JONES&#39;; -- 2. 부서명이 sales인 사원의 정보를 삭제 DELETE FROM emp_copy WHERE empno in ( SELECT e.empno FROM emp_copy e LEFT OUTER JOIN dept d ON e.deptno = d.deptno WHERE d.dname=&#39;SALES&#39; ); DELETE FROM emp_copy WHERE deptno = (SELECT deptno FROM dept WHERE dname=&#39;SALES&#39;); DROP TABLE emp_copy; CREATE TABLE emp_copy AS SELECT * FROM emp; -- 3. King에게 보고하는 모든 사원의 이름과 급여를 출력 SELECT e1.ename, e1.sal FROM emp_copy e1 WHERE e1.mgr = (SELECT e2.empno FROM emp_copy e2 WHERE e2.ename=&#39;KING&#39;); -- 4. 월급이 30번 부서의 최저 월급보다 많은 사원들을 출력 SELECT * FROM emp_copy e1 WHERE e1.sal &gt; (SELECT min(e2.sal) FROM emp_copy e2 WHERE deptno=30); -- 5. 10번 부서의 직원들 중 30번 부서의 사원과 같은 업무를 맡고 있는 사원의 이름과 업무를 출력 SELECT e1.ename, e1.job FROM emp_copy e1 WHERE e1.deptno=10 AND e1.job in (SELECT e2.job FROM emp_copy e2 WHERE e2.deptno=30); .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/14/Oracle_SQL_%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC.html",
            "relUrl": "/sql/2019/05/14/Oracle_SQL_%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC.html",
            "date": " • May 14, 2019"
        }
        
    
  
    
        ,"post170": {
            "title": "[Oracle] JOIN",
            "content": "JOIN . 하나 이상의 테이블로부터 데이터를 검색할 때 | 사원테이블(emp)에 사원명과 부서테이블(dept)에 그 사원의 부서명을 출력 | . 1. 두 테이블만 기술 . Cartesian Product | . SELECT ename, dname FROM emp, dept; . 2. 내부조인 . 두 테이블 연결 | . SELECT e.ename AS ename, d.dname AS danme, e.deptno AS deptno FROM emp e, dept d WHERE e.deptno = d.deptno; SELECT e.ename, d.dname, d.deptno FROM emp e INNER JOIN dept d ON e.deptno = d.deptno; . 3. 외부조인 . 없는 데이터를 포함하여 조인 | 기존문법에서 (+)가 데이터가 없는 테이블에 붙였다면, | LEFT나 RIGHT는 반대로 데이터가 있는 테이블에 붙인다. | 기존 문법에서는 양 쪽에 (+)에 붙일 수 없는데,FULL OUTER JOIN으로 가능. | . -- emp 테이블에는 있는데 dept 테이블에 없는 경우도 출력 SELECT e.ename ename, d.dname dname, e.deptno deptno FROM emp e, dept d WHERE e.deptno=d.deptno(+); SELECT e.ename, d.dname, d.deptno FROM emp e LEFT OUTER JOIN dept d ON e.deptno = d.deptno; -- dept 테이블에는 있는데 emp 테이블에 없는 경우도 출력 SELECT e.ename ename, d.dname dname, e.deptno deptno FROM emp e, dept d WHERE e.deptno(+)=d.deptno; SELECT e.ename, d.dname, d.deptno FROM emp e RIGHT OUTER JOIN dept d ON e.deptno = d.deptno; -- 에러 SELECT e.ename ename, d.dname dname, e.deptno deptno FROM emp e, dept d WHERE e.deptno(+)=d.deptno(+); . Full OUTER JOIN . SELECT e.ename, d.dname, d.deptno FROM emp e FULL OUTER JOIN dept d ON e.deptno = d.deptno; . 3. self JOIN . -- 각 사원의 매니저를 검색 SELECT e1.empno, e1.ename, e1.mgr, e2.ename FROM emp e1, emp e2 WHERE e1.mgr = e2.empno; SELECT e1.empno, e1.ename, e1.mgr, e2.ename FROM emp e1 INNER JOIN emp e2 ON e1.mgr = e2.empno; SELECT e1.empno, e1.ename, e1.mgr, e2.ename FROM emp e1, emp e2 WHERE e1.mgr = e2.empno(+); SELECT e1.empno, e1.ename, e1.mgr, e2.ename FROM emp e1 LEFT OUTER JOIN emp e2 ON e1.mgr = e2.empno; . HR 계정 연습문제 . -- 1. 사원번호, 사원명, 부서명 출력 SELECT e.employee_id, e.first_name || &#39; &#39; || e.last_name, d.department_name FROM employees e LEFT OUTER JOIN departments d ON e.department_id = d.department_id; -- 2. 사원번호, 사원명, 업무명, 부서명 출력 SELECT e.employee_id, e.first_name || &#39; &#39; || e.last_name, j.job_title, d.department_name FROM employees e LEFT OUTER JOIN departments d ON e.department_id = d.department_id LEFT OUTER JOIN jobs j ON e.job_id = j.job_id; -- 3. 사원번호, 사원명, 부서명, 위치 출력 SELECT e.employee_id, e.first_name || &#39; &#39; || e.last_name AS name, d.department_name, l.country_id || &#39; &#39; || l.state_province || &#39; &#39; || l.city || &#39; &#39; || l.street_address AS location FROM employees e LEFT OUTER JOIN departments d ON e.department_id = d.department_id LEFT OUTER JOIN locations l ON d.location_id = l.location_id; -- 4. 사원번호, 사원명, 업무명, 부서명, 위치출력 SELECT e.employee_id, e.first_name || &#39; &#39; || e.last_name AS name, j.job_title, d.department_name, l.country_id || &#39; &#39; || l.state_province || &#39; &#39; || l.city || &#39; &#39; || l.street_address AS location FROM employees e LEFT OUTER JOIN jobs j ON e.job_id = j.job_id LEFT OUTER JOIN departments d ON e.department_id = d.department_id LEFT OUTER JOIN locations l ON d.location_id = l.location_id; -- 5. 입사년도별 최고 월급을 받는 사원의 이름과 부서명을 출력 WITH temp AS ( SELECT to_char(e.hire_date, &#39;YY&#39;) AS hire_year, max(e.salary) AS max_salary, max(e.first_name) keep(dense_rank first order by e.salary DESC) || &#39; &#39; || max(e.last_name) keep(dense_rank first order by e.salary DESC) AS maxsal_name, max(e.department_id) keep(dense_rank first order by e.salary DESC) AS maxsal_depid FROM employees e GROUP BY to_char(e.hire_date, &#39;YY&#39;) ) SELECT t.hire_year, t.max_salary, t.maxsal_name name, d.department_name FROM temp t LEFT OUTER JOIN departments d ON t.maxsal_depid = d.department_id ORDER BY hire_year; . 집합(SET) . UNION (합집합) | UNION ALL (합집합 + 중복 2번 출력) | INTERSECT (교집합) | MINUS (차집합) | . -- 컬럼명이 동일할 경우에 합집합을 구할 수 있다. -- 업무가 CLERK 인 사원의 사번, 사원명, 업무, 부서번호 SELECT empno, ename, job, deptno FROM emp WHERE job=&#39;CLERK&#39; UNION -- 10번 부서의 사번, 사원명, 업무, 부서번호 SELECT empno, ename, job, deptno FROM emp WHERE deptno=10; --&gt; 5명 SELECT empno, ename, job, deptno FROM emp WHERE job=&#39;CLERK&#39; UNION ALL SELECT empno, ename, job, deptno FROM emp WHERE deptno=10; --&gt; 6명 -- 교집합 SELECT empno, ename, job, deptno FROM emp WHERE job=&#39;CLERK&#39; INTERSECT SELECT empno, ename, job, deptno FROM emp WHERE deptno=10; --&gt; 1명 -- 차집합 SELECT empno, ename, job, deptno FROM emp WHERE job=&#39;CLERK&#39; MINUS SELECT empno, ename, job, deptno FROM emp WHERE deptno=10; --&gt; 3명 .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/14/Oracle_SQL_JOIN.html",
            "relUrl": "/sql/2019/05/14/Oracle_SQL_JOIN.html",
            "date": " • May 14, 2019"
        }
        
    
  
    
        ,"post171": {
            "title": "[Oracle] 함수",
            "content": "SQL 함수 . 함수를 사용하면 alias는 필수 | . 1. 숫자형 함수 . ABS(n) | 절대값 | . SIGN(n) | 양수(-&gt;1), 음수(-&gt;-1), 0(-&gt;0)을 구분 | . ROUND(n, i) | 숫자 n을 소수점 i자리에서 반올림 | . TRUNC(n, i) | 숫자 n을 소수점 i자리에서 자름 | . CEIL(n) | 가장 큰 정수 | . FLOOR(n) | 가장 작은 정수 | . MOD(n2, n1) | n2에서 n1을 나눈 나머지 연산 | . POWER(n2, n1) | n2의 n1 제곱값 | . SQRT(n) | n의 제곱근의 값 | . -- 사원명, 급여, 월급(급여/12)를 출력하되 월급은 십단위에서 반올림하여 출력 -- 한글은 &quot;&quot; 써야 함 SELECT ename, sal, round(sal/12, -2) &quot;월급&quot; FROM emp; -- 사원명, 급여, 세금(급여의 3.3%)를 원단위 절삭하고 출력 SELECT ename, sal, trunc(sal*0.033, -1) AS TAX FROM emp; . 2. 문자형 함수 . LOWER(str) | 알파벳을 소문자로 변환 | . UPPER(str) | 알파벳을 대문자로 변환 | . INITCAP(str) | 첫번째 글자만 대문자로 변환 | . CONCAT(str1, str2) | 두 문자열을 연결 | . SUBSTR(str, i, n) | 문자열 중 i번째에서 n개의 일부 문자를 선택 | . INSTR(str, ch, n, i) | 문자열 중에서 ch문자열이 n번째부터 i번쨰 있는 위치 | . LENGTH(str) | 문자열의 길이 | . LPAD / RPAD(str, n, ch) | n자리수 만큼 확보 후 빈 공백에 특정 문자로 채움 | . TRIM / LTRIM / RTRIM | 문자를 제거 양쪽 공백 제거에 사용 | . TRANSLATE(column, str1, str2) | 문자열에서 str1을 str2로 대체 | . REPLACE(column, str1, str2) | 문자열에서 str1을 str2로 대신 | . SELECT &#39;-&#39; || trim(&#39; 이 순신 &#39;)|| &#39;-&#39; as col1, &#39;-&#39;|| ltrim(&#39; 이 순신 &#39;) || &#39;-&#39; as col2, &#39;-&#39;|| rtrim(&#39; 이 순신 &#39;) || &#39;-&#39; as col3 from dual; SELECT replace(&#39; a b c &#39;, &#39; &#39;, &#39;&#39;) FROM dual; -- TRANSLATE -- 월급의 숫자에서 0을 ‘$’로 3을 &amp;로 바꾸어 출력 SELECT sal, TRANSLATE(sal, 53, &#39;$&amp;&#39;) FROM emp; -- REPLACE -- 월급의 숫자에서 50을 $로 바꾸어 출력 SELECT REPLACE(sal, 50, &#39;$&#39;) FROM emp; -- smith의정보를 사원번호, 성명, 담당업무(소문자) 출력 SELECT empno, ename, lower(job) FROM emp WHERE ename=&#39;SMITH&#39;; -- 사원번호, 사원명(첫글자만 대문자), 담당업무(첫글자만대문자)로 출력 SELECT empno, INITCAP(ename) as ename, INITCAP(job) as job FROM emp; -- 이름의 첫글자가 ‘K’보다크고 ‘Y’보다 작은 사원의 정보( 사원번호, 이름, 업무, 급여, 부서번호)를 출력하되 이름순으로 정렬 SELECT empno, ename, job, sal, deptno FROM emp WHERE SUBSTR(ename, 1, 1)&gt;&#39;K&#39; and SUBSTR(ename, 1, 1)&lt;&#39;Y&#39; ORDER BY ename; -- 이름이 5글자 이상인사원들을 출력 SELECT * FROM emp WHERE LENGTH(ename)&gt;=5; -- 이름을 15자로 맞추고글자는 왼쪽에 오른쪽에는 ‘*’로 채운다 SELECT RPAD(ename, 15, &#39;*&#39;) as ename FROM emp; -- 월급은 10자로 맞추고숫자는 오른쪽에 왼쪽엔 ‘-‘로 채운다 SELECT LPAD(sal, 15, &#39;-&#39;) as ename FROM emp; -- 양쪽 공백을 제거 SELECT &#39;-&#39; || trim(&#39; 이순신 &#39;)|| &#39;-&#39; as col1, &#39;-&#39;|| ltrim(&#39; 이순신 &#39;) || &#39;-&#39; as col2, &#39;-&#39;|| rtrim(&#39; 이순신 &#39;) || &#39;-&#39; as col3 FROM dual; -- (*) dual : dummy 테이블로 sys user가 owner이고 모든 사용자가 사용가능. -- 임의의 값을 알고자 할 경우 유용하게 사용하는 테이블. -- 월급을 숫자에서 ‘영일이삼사오육칠팔구’ 글자로 대체 -- 월급의 숫자에서 0을‘$’로 바꾸어 출력 . 3. 날짜형 함수 . 시스템의 날짜를 가져오는 함수 | SYSDATE, CURRENT_DATE, SYSTIMESTAMP, CURRENT_TIMESTAMP | 이 함수들은 사용수 ()가 필요없다. | sysdate와 current_date의 차이는 current_date는 세션 시간을 따른다. | 만약 한 명은 한국에서 한 명은 미국 본사 시스템에 접속시 각각 세션에 따른 시간을 확ㅇ니하게 됨 | . 날짜 연산 . 연산 결과 설명 . Date + number | Date | 일수에 날짜를 더함 | . Date - number | Date | 일수에 날짜를 뺌 | . Date - Date | 일수 | 일수에 다른 일수를 뺌 | . Date + number / 24 | Date | 시간을 날짜에 더함 | . 날짜 함수 . MONTHS_BETWEEN | 두 날짜 사이의 월수를 계산 | . ADD_MONTHS | 월을 날짜에 더함 | . NEXT_DAY | 다음 요일에 대한 날짜 | . LAST_DAY | 월의 마지막 날을 계산 | . ROUND | 날짜를 반올림 | . TRUNC | 날짜를 절삭 | . -- 현재까지 근무일 수가 많은 사람 순으로 출력 SELECT * FROM emp ORDER BY sysdate - nvl(hiredate, sysdate) DESC; -- 현재까지 근무일 수가 몇 주 몇 일인가를 출력 SELECT ename, hiredate, round(sysdate-hiredate, 7) AS total_days, trunc((sysdate-hiredate)/7) AS weeks, ceil(mod(sysdate-hiredate,7)) AS days FROM emp; -- 10번 부서의 사원의 현재까지의 근무 월수를 계산 SELECT ename, hiredate, TRUNC(months_between(sysdate, hiredate)) AS &quot;근무월수&quot; FROM emp WHERE deptno=&#39;10&#39; ORDER BY &quot;근무월수&quot; DESC; -- 현재 날짜에서 3개월후의 날짜 구하기 SELECT add_months( sysdate, 3 ) AS mydate FROM dual; -- 현재 날짜에서 돌아오는 ‘월’요일의 날짜 구하기 SELECT next_day(sysdate, &#39;화&#39;) FROM dual; -- 현재 날짜에서 해당 월의 마지막 날짜 구하기 SELECT last_day(sysdate) FROM dual; . 4. 변환 함수 . TO_CAHR | TO_DATE | TO_NUMBER | . -- 입사일자에서 입사년도를 출력 SELECT ename, hiredate, to_char(hiredate, &#39;YYYY&#39;) hireyear FROM emp; -- 입사월 출력 SELECT emane, hiredate, to_char(hiredate, &#39;MM&#39;) hiremonth FROM emp; -- 입사년도-월 출력 SELECT ename, hiredate, to_char(hiredate, &#39;YYYY-MM&#39;) hireyearmonth FROM emp; -- 입사일 출력 SELECT ename, hiredate, to_char(hiredate, &#39;DD&#39;) hireday FROM emp; -- 입사일자를 ‘1999년 1월 1일’ 형식으로 출력 SELECT ename, hiredate, to_char(hiredate, &#39;YYYY&#39;) || &#39;년 &#39; || to_char(hiredate, &#39;MM&#39;) || &#39;월 &#39; || to_char(hiredate, &#39;DD&#39;) || &#39;일 &#39; AS &quot;입사일자&quot; FROM emp; SELECT enamen, hiredate, to_char(hiredate,&#39;YYYY&quot;년&quot; MM&quot;월&quot; DD&quot;일&quot;&#39;) hireyear FROM emp; -- 1981년도에 입사한 사원 검색 SELECT ename, hiredate FROM emp WHERE to_char(hiredate, &#39;YYYY&#39;)=&#39;1981&#39;; -- 5월에 입사한 사원 검색 SELECT ename, hiredate FROM emp WHERE to_char(hiredate, &#39;MM&#39;)=5; -- 급여 앞에 $를 삽입하고 3자리 마다 ,를 출력 . 5. 조건 함수 . DROP TABLE info; CREATE TABLE info ( hakbun varchar2(30), name varchar2(30), jumin varchar2(30), gender varchar2(30), column_id number(30) ); INSERT INTO info VALUES (&#39;1000&#39;, &#39;홍길동&#39;, &#39;801232-1234567&#39;, &#39;남자&#39;, 1); INSERT INTO info VALUES (&#39;1001&#39;, &#39;홍길자&#39;, &#39;811232-2234567&#39;, &#39;여자&#39;, 2); -- 주민번호에서 성별 구하기 SELECT decode( substr(jumin, 8, 1), 1, &#39;남자&#39;, 3, &#39;남자&#39;, &#39;여자&#39;) AS gender FROM table_name; SELECT CASE substr(jumin, 8, 1) WHEN &#39;1&#39; THEN &#39;남자&#39; WHEN &#39;3&#39; THEN &#39;여자&#39; ELSE &#39;여자&#39; END as gender FROM emp; -- 부서번호가 10이면영업부, 20이면 관리부, 30이면 IT부 그 외는 기술부로 출력 SELECT decode(deptno, 10, &#39;영업부&#39;, 20, &#39;관리부&#39;, 30, &#39;IT부&#39;, &#39;기술부&#39;) AS department FROM emp; SELECT ename, CASE deptno WHEN 10 THEN &#39;영업부&#39; WHEN 20 THEN &#39;관리부&#39; WHEN 30 THEN &#39;IT부&#39; ELSE &#39;기술부&#39; END as department FROM emp; -- 업무(job)이 analyst이면 급여 증가가 10%이고 clerk이면 15%, manager이면 20%인 경우 사원번호, 사원명, 업무, 급여, 증가한 급여를 출력 SELECT empno, ename, job, sal, decode(job, &#39;analyst&#39;, sal*1.10, &#39;clerk&#39;, sal*1.15, &#39;manager&#39;, sal*1.2, sal) AS &quot;증가한급여&quot; FROM emp; SELECT empno, ename, job, sal, CASE job WHEN &#39;analyst&#39; THEN sal*1.10 WHEN &#39;clerk&#39; THEN sal*1.15 WHEN &#39;manager&#39; THEN sal*1.2 ELSE sal END as &quot;증가한급여&quot; FROM emp; .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/10/Oracle_SQL_%ED%95%A8%EC%88%98.html",
            "relUrl": "/sql/2019/05/10/Oracle_SQL_%ED%95%A8%EC%88%98.html",
            "date": " • May 10, 2019"
        }
        
    
  
    
        ,"post172": {
            "title": "[Oracle] 그룹",
            "content": "그룹 . 1. ALL, DISTINCT . select all job from emp; | select distinct job from emp; | (*)rownum | . SELECT rownum, empno, enmame FROM emp WHERE rownum&lt;=5; . 2. 집계함수 . 집계함수에 한에서는 null값도 처리해 준다. | 함수 인자에 distinct를 이용하면 중복되지 않는 값으로 계산 | . AVG | 평균 | . COUNT | 행의 갯수 | . SUM | 합계 | . MIN / MAX | 최소값, 최대값 | . VARIANCE | 분산값 | . STDDEV | 표준편차값 | . -- 업무가 ‘SALESMAN’인 사람들의 월급의 평균, 총합, 최소값, 최대값을 구하기 SELECT avg(sal) avg, sum(sal) sum, min(sal) min, max(sal) max FROM emp WHERE job=&#39;SALESMAN&#39;; -- 전체 사람 수 SELECT count(*) cnt FROM emp; --커미션(COMM)을 받는 사람들의 수는? SELECT count(comm) cnt FROM emp WHERE nvl(comm, 0)!=0; . 3. 데이터 그룹 . SELECT columns FROM table_name WHERE condition GROUP BY group_by_expression HAVING condition ORDER BY column; . -- 부서별로인원수, 평균급여, 최저급여, 최고급여, 급여의 합을 구하기 SELECT deptno, count(*) cnt, round(avg(sal), 2) avg, min(sal) min, max(sal) max, sum(sal) sum FROM emp GROUP BY deptno; -- 부서별로인원수, 평균급여, 최저급여, 최고급여, 급여의 합을 구하기 (부서별 급여의 합이 높은 순으로 SELECT deptno, count(*) cnt, round(avg(sal), 2) avg, min(sal) min, max(sal) max, sum(sal) sum FROM emp GROUP BY deptno ORDER BY sum DESC; -- 부서별업무별 그룹하여 부서번호, 업무, 인원수, 급여의 평균, 급여의 합을 구하기 SELECT deptno, job, count(*) cnt, round(avg(sal), 2) avg, sum(sal) sum FROM emp GROUP BY deptno, job ORDER BY deptno; -- 급여가 최대 2900 이상인부서에 대해 부서번호, 평균 급여, 급여의 합을 출력 SELECT deptno, round(avg(sal), 2) avg, sum(sal) sum FROM emp GROUP BY deptno HAVING max(sal) &gt;= 2900; -- 업무별 급여의 평균이 3000이상인 업무에 대해 업무명, 평균 급여, 급여의 합을 출력 SELECT job, round(avg(sal), 2) avg, sum(sal) sum FROM emp GROUP BY job HAVING avg(sal) &gt;= 3000; -- 전체 합계 급여가 5000를초과하는 각 업무에 대해서 업무와 급여 합계를 출력 -- 단, SALESMAN은제외하고 급여 합계가 높은 순으로 정렬 SELECT job, sum(sal) sum FROM emp WHERE job!=&#39;SALESMAN&#39; GROUP BY job HAVING sum(sal) &gt; 5000 ORDER BY sum DESC; -- 업무별최고 급여와 최소 급여의 차이를 구하라 SELECT job, max(sal)-min(sal) AS cha FROM emp GROUP BY job; -- 부서 인원이 4명보다 많은 부서의 부서번호, 인원수, 급여의 합을 출력 SELECT deptno, count(*), sum(sal) FROM emp GROUP BY deptno HAVING count(deptno)&gt;4; . GROUP BY 절에 사용하는 함수 . select job, sum( sal ) from emp group by job; select job, sum( sal ) from emp group by rollup(job); select job, sum( sal ) from emp group by cube(job); . hr계정의 employees 테이블 연습문제 . -- # HR 계정에서 ( employees 테이블 ) SELECT * FROM employees ORDER BY JOB_ID; -- 1. 2003년에 입사한 사원들의 사번, 이름, 입사일을 출력 SELECT employee_id, first_name || &#39; &#39; || last_name AS name, hire_date FROM employees WHERE to_char(hire_date, &#39;YY&#39;)=&#39;03&#39;; -- 2. 업무가 FI_ACCOUNT / FI_MGR / SA_MAN / SA_REP 인 사원들의 정보를 출력 SELECT * FROM employees WHERE job_id IN (&#39;FI_ACCOUNT&#39;, &#39;FI_MGR&#39;, &#39;SA_MAN&#39;, &#39;SA_REP&#39;); -- 3. 커미션을 받는 사원들의 명단을 출력 SELECT first_name || &#39; &#39; || last_name AS name, commission_pct FROM employees WHERE nvl(commission_pct, 0)!=0 ORDER BY commission_pct DESC; -- 4.업무가 SA_MAN 또는 SA_REP이면 &quot;판매부서&quot;를 그 외는 &quot;그 외 부서&quot;라고 출력 SELECT first_name || &#39; &#39; || last_name AS name, CASE job_id WHEN &#39;SA_MAN&#39; THEN &#39;판매 부서&#39; WHEN &#39;SA_REP&#39; THEN &#39;판매 부서&#39; ELSE &#39;그 외 부서&#39; END as department FROM employees ORDER BY department DESC; . &lt;&lt; 도전 문제 &gt;&gt; 1. 업무별, 부서별 급여 합계와 인원수를 출력하되, 10번 부서를 제외하고 업무가 ‘SALESMAN’과 ‘MANAGER’만 출력한다. SELECT job, deptno, sum(sal), count(*) FROM emp GROUP BY job, deptno HAVING deptno != 10 and (job in (&#39;SALESMAN&#39;, &#39;MANAGER&#39;)); 2. 업무별로 평균급여와 최대급여를 출력하되, 평균급여가 2000이상인 것만 출력하고 평균급여가 높은 순으로 정렬 SELECT job, round(avg(sal), 2) avg_sal, max(sal) max_sal FROM emp GROUP BY job HAVING avg(sal) &gt;= 2000 ORDER BY avg_sal DESC; 3. 5개씩 급여합계와 인원수를 출력 (rownum이용) SELECT ceil(rownum/5) grp, sum(sal) sum_sal, count(*) cnt FROM emp GROUP BY ceil(rownum / 5); 4. 같은 입사년도 별로 인원수를 출력 SELECT to_char(hiredate, &#39;YYYY&#39;) AS year, count(*) FROM emp GROUP BY to_char(hiredate, &#39;YYYY&#39;); 5. 다음과 같이 출력 CLERK SALESMAN MANAGER (업무명) 4 4 3 (인원수) SELECT job, count(*) FROM emp GROUP BY job HAVING job = &#39;CLERK&#39; or job = &#39;SALESMAN&#39; or job = &#39;MANAGER&#39;; 6. 다음과 같이 출력 업무명 10번부서 20번부서 30번부서 급여합계 -- CLERK 1300 1900 950 4150 SALESMAN 0 0 5600 5600 PRESIDENT 5000 0 0 5000 MANAGER 2450 2975 2850 8275 ANALYST 0 6000 0 6000 -- decode 활용 SELECT job &quot;업무명&quot;, sum(decode(deptno,10,sal, 0)) &quot;10번부서&quot; , sum(decode(deptno,20,sal, 0)) &quot;20번부서&quot; , sum(decode(deptno,30,sal, 0)) &quot;30번부서&quot; , sum(sal) &quot;급여합계&quot; FROM emp GROUP BY job; -- case문 활용 SELECT job &quot;업무명&quot;, sum(CASE deptno WHEN 10 THEN sal else 0 END) as &quot;10번부서&quot;, sum(CASE deptno WHEN 20 THEN sal else 0 END) as &quot;20번부서&quot;, sum(CASE deptno WHEN 30 THEN sal else 0 END) as &quot;30번부서&quot;, sum(sal) &quot;급여합계&quot; FROM emp GROUP BY job; -- 피봇테이블 활용 풀이 WITH temp AS ( SELECT job, deptno, sal FROM emp ) SELECT job AS &quot;업무명&quot;, nvl(&quot;n10&quot;, 0) AS &quot;10번부서&quot;, nvl(&quot;n20&quot;, 0) AS &quot;20번부서&quot;, nvl(&quot;n30&quot;, 0) AS &quot;30번부서&quot;, nvl(&quot;n10&quot;, 0) + nvl(&quot;n20&quot;, 0) + nvl(&quot;n30&quot;, 0) AS &quot;급여합계&quot; FROM temp PIVOT(sum(sal) FOR deptno IN (10 AS &quot;n10&quot;, 20 AS &quot;n20&quot;, 30 AS &quot;n30&quot;) ); .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/10/Oracle_SQL_%EA%B7%B8%EB%A3%B9.html",
            "relUrl": "/sql/2019/05/10/Oracle_SQL_%EA%B7%B8%EB%A3%B9.html",
            "date": " • May 10, 2019"
        }
        
    
  
    
        ,"post173": {
            "title": "[알고리즘] 소수의 개수 구하기",
            "content": "소수의 개수 구하기 . C . #include &lt;stdio.h&gt; main() { int k, i, j, m; int a[99]; k = 1; do { k++; a[k - 2] = k; } while (k &lt; 100) i = -1, j = 0; while (1) { i++; if (i &gt; 98) { printf(&quot;%d&quot;, d); break; } if (a[i] == 0) { continue; } j++; m = i; while (1) { m += a[i]; if (m &gt; 98) { break; } a[m] = 0; } } } .",
            "url": "https://safenumz.github.io/blog/algorithm/2019/05/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%86%8C%EC%88%98%EC%9D%98_%EA%B0%9C%EC%88%98_%EA%B5%AC%ED%95%98%EA%B8%B0.html",
            "relUrl": "/algorithm/2019/05/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%86%8C%EC%88%98%EC%9D%98_%EA%B0%9C%EC%88%98_%EA%B5%AC%ED%95%98%EA%B8%B0.html",
            "date": " • May 10, 2019"
        }
        
    
  
    
        ,"post174": {
            "title": "[Oracle] 제약조건",
            "content": "제약조건 . NOT NULL | null 값을 허용하지 않음 ( 컬럼레벨 방식으로만 적용 ) | . UNIQUE | 유일하게 식별하는 값만 허용 -&gt; 중복허용안함 | . ^ | ( PRIMARY KEY와 유사하나 null값 허용됨 ) | . PRIMARY KEY | null값 허용하지 않고 유일하게 식별 | . ^ | ( UNIQUE + NOT NULL ) | . ^ | UNIQUE INDEX 자동생성 | . FOREIGN KEY | 다른 테이블의 PK를 참조 | . CHECK | 제한적인 입력처리 | . (*)DEFAULT | 제약조건은 아니지만, 입력값이 없을 때 디폴트 설정값으로 자동 입력됨 | . [1] PRIMARY KEY 지정시 . -- 컬럼 레벨 제약조건 방식 CREATE TABEL table_name ( column_name data_type [ CONSTRAINT pk_name ] PRIMARY KEY ); . 모든 제약 조건은DATA DICTIONARY에 저장하는데, 제약 조건 이름을 의미 있게 부여하면 참조하기 쉽기에 규칙적인 제약조건이름을 권장한다. | ex) pk_tablename_columnname 또는 tablename_columnname_pk | . -- 테이블 레벨 제약조건 방식 CREATE TABEL table_name ( column_nam data_type, CONSTRAINT pk_name PRIMARY KEY [ column_name ] ); . [2] FOREIGNKEY 지정시 . -- 컬럼 레벨 제약조건 방식 CREATE TABEL table_name ( column_nam data_type CONSTRAINT fk_name REFERENCES ref_table_name ( ref_column_name) ); . -- 테이블 레벨 제약조건 방식 CREATE TABEL table_name ( column_name data_type, CONSTRAINT fk_name FOREIGN KEY (column_name) REFERENCES ef_table_name ( ref_column_name ) ); . -- 테이블 생성 후 제약조건을 추가한다면 -&gt; 테이블 수정 ALTER TABLE table_name ADD CONSTRAINTS pk_name PRIMARY KEY ( column_name ); ALTER TABLE table_name ADD CONSTRAINTS fk_name FOREIGN KEY ( column_name ) REFERENCES ref_table_name ( ref_column_name ); . [3] CHECK 지정시 . gender varchar2(10) NOT NULL CONSTRAINT check_gender CHECK ( gender IN (‘남자’,’여자’) ) . [4] DEFAULT 지정시 . -- DEFAULT는 NOT NULL 과 같이 기술시 앞에 기술 gendervarchar2(10) DEFAULT ‘남자’ NOT NULL . 테이블 생성 후 제약조건을 추가한다면 -&gt; 테이블 수정 . ALTER TABLE table_name MODIFY gender DEFAULT ‘남자’; . 참고 . 제약조건 추가 . constraint_type : Primary Key, Foreign Key, Unique | . ALTER TABLE table_name ADD CONSTRAINT constraint_name constraint_type( column ); . 제약조건 삭제 . ALTER TABLE table_name DROP CONSTRAINT constraint_name [CASCADE]; . 제약조건 (비)활성화 . ALTER TABLE table_name DISABLE/ENABLE CONSTRAINT constraint_name [CASCADE]; . 제약조건 확인 . SELECT constraint_name, constraint_type FROM user_constraints WHERE table_name=’대문자로 테이블명’; . [ 연습문제 ] . . 1. sawon 테이블을 생성하세요. . sabun은 6자리 숫자 | sawon_name은 최대 한글 5자리 | ubmu는최대 한글 10자리 | weolgub는정수형 8자리와 소수점 2자리 | buseo는숫자 3자리 | . CREATE TABLE sawon ( sabun char(6), sawon_name varchar2(10), ubmu varchar2(20), weolgub number(10 ,2), buseo number(3) ); . 2. 위의 테이블에서 sabun을 기본키로 설정 . ALTER TABLE sawon ADD CONSTRAINT pk_sawon_sabun PRIMARY KEY (sabun); . 3. 최대 한글 10자리의 jiyeok 컬럼을 추가하되 NULL 값이 입력되지 않도록 지정 . ALTER TABLE sawon ADD jiyeok varchar2(20) NOT NULL; . 4. weolgub 컬럼은 정수형 7자리로 변경 . ALTER TABLE sawon MODIFY weolgub number(7); . 5. ubmu컬럼은 ‘개발’, ‘유지보수’, ‘관리’ 만데이터 값으로 입력되도록 지정 . ALTER TABLE sawon ADD CONSTRAINT sawon_ubmu CHECK (ubmu IN (&#39;개발&#39;, &#39;유지보수&#39;, &#39;관리&#39;)); . 6. ubmu컬럼에 데이터가 입력이 안될 경우 디폴드값으로 ‘개발’을 설정 . ALTER TABLE sawon MODIFY ubmu DEFAULT &#39;개발&#39;; . 7. buseo 테이블을 생성하세요 . buseo_no는숫자 3자로 이루어진 번호로 기본키 | buseo_name은최대 한글 10자리 | . CREATE TABLE buseo ( buseo_no number(3) PRIMARY KEY, buseo_name varchar2(20) ); . 8. sawon 테이블의 buseo컬럼을 buseo 테이블의 buseo_no 를참조하는 외래키로 설정 . ALTER TABLE sawon ADD CONSTRAINT fk_sawon_buseo FOREIGN KEY (buseo) REFERENCES buseo(buseo_no); . 9. buseo 테이블에 데이터 입력 . buseo_no buseo_name . 101 | 소프트웨어유지보수부 | . 202 | 관리부 | . 303 | 인적자원부 | . INSERT INTO buseo(buseo_no, buseo_name) VALUES (101, &#39;소프트웨어유지보수부&#39;); INSERT INTO buseo(buseo_no, buseo_name) VALUES (202, &#39;관리부&#39;); INSERT INTO buseo(buseo_no, buseo_name) VALUES (303, &#39;인적자원부&#39;); . 10. sawon 테이블에 데이터 입력 (입력이 안될 경우도 있음) . sabun sawon_name ubmu weolgub buseo jiyeok . 8001 | 홍길동이군 |   | 100000 | 101 | 부산 | . 8002 | 홍길자 | 사무 | 200000 | 202 | 인천 | . 8003 | 홍길순 | 개발 |   | 111 | 대전 | . 8004 | 홍길석 |   | 12345678 |   | 서울 | . 8005 | 홍길철 | 유지보수 |   | 303 | 판교 | . INSERT INTO sawon(sabun, sawon_name, weolgub, buseo, jiyeok) VALUES (&#39;8001&#39;, &#39;홍길동이군&#39;, 100000, 101, &#39;부산&#39;); INSERT INTO sawon(sabun, sawon_name, ubmu, weolgub, buseo, jiyeok) VALUES (&#39;8002&#39;, &#39;홍길자&#39;, &#39;사무&#39;, 200000, 202, &#39;인천&#39;); INSERT INTO sawon(sabun, sawon_name, ubmu, buseo, jiyeok) VALUES (&#39;8003&#39;, &#39;홍길순&#39;, &#39;개발&#39;, 111, &#39;인천&#39;); INSERT INTO sawon(sabun, sawon_name, weolgub, jiyeok) VALUES (&#39;8004&#39;, &#39;홍길석&#39;, 12345678, &#39;서울&#39;); INSERT INTO sawon(sabun, sawon_name, ubmu, buseo, jiyeok) VALUES (&#39;8005&#39;, &#39;홍길철&#39;, &#39;유지보수&#39;, 303, &#39;판교&#39;); . 11. sawon 테이블에서 jiyeok 컬럼을 제거 . ALTER TABLE sawon DROP (jiyeok); . 12. buseo 테이블에서 buseo 명이 ‘인적자원부’인 행을 삭제 . -- 부서 테이블을 참조하고 있어서 삭제 불가능 DELETE FROM buseo WHERE buseo_name=&#39;인적자원부&#39;; . 13. sawon 테이블이 모든 내용을 삭제하고 저장공간을 해제 . TRUNCATE TABLE sawon; . 14. 1~8 단계까지를 하나의CREATE 문으로 작성 . CREATE TABLE buseo ( buseo_no number(3), buseo_name varchar2(20), CONSTRAINT pk_buseo_no PRIMARY KEY(buseo_no) ); CREATE TABLE sawon ( sabun char(6), sawon_name varchar2(10), ubmu varchar2(20) DEFAULT &#39;개발&#39;, weolgub number(7), buseo number(3), jiyeok varchar2(10) NOT NULL, CONSTRAINT sawon_pk PRIMARY KEY (sabun), CONSTRAINT sawon_ubmu CHECK (ubmu IN (&#39;개발&#39;, &#39;유지보수&#39;, &#39;관리&#39;)), CONSTRAINT sawon_fk FOREIGN KEY (buseo) REFERENCES buseo(buseo_no) ON DELETE CASCADE ); . .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/09/Oracle_SQL_%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4.html",
            "relUrl": "/sql/2019/05/09/Oracle_SQL_%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4.html",
            "date": " • May 9, 2019"
        }
        
    
  
    
        ,"post175": {
            "title": "[Oracle] 정규식",
            "content": "정규식 . 1. REGEXP_LIKE . -- 소문자 영문자가 들어있는 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[a-z]&#39;); -- 대문자 영문자가 들어있는 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[A-Z]&#39;); -- 대소문자 영문자가 들어있는 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[a-zA-z]&#39;); -- 소문자로 시작하고 뒤에 공백이 있는 모든 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[a-z] &#39;); -- 소문자로 시작하고 공백이 1칸 있고 숫자로 끝나는 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[a-z] [0-9]&#39;); -- 공백이 있는 모든 데이터를 찾고 싶은 경우 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[[:SPACE:]]&#39;); -- 대문자가 연속적으로 2글자 이상 오는 경우 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[A-Z]{2}&#39;); 시작 문자 지정 ^(캐럿), 끝나는 문자 지정 $(달러) -- 시작을 대문자나 소문자로 하는 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;^[a-zA-Z]&#39;); -- 시작을 숫자나 대문자로 시작하는 행 출력 SELECT * FROM reg_text WHERE REGEXP_LIKE(text, &#39;^[0-9A-Z]&#39;); 여러가지 조건을 줄 경우 바 기호(|)를 사용하여 연결할 수도 있음 -- 소문자로 시작하거나, 숫자로 시작하는 경우 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;^[a-z]|^[0-9]&#39;); -- STUDENT 테이블에서 학생의 ID중 첫 글자가 s(소문자)로 시작하고 두번째 글자가 a나 t가 나오는 id 출력 SELECT name, id FROM student WHERE REGEXP_LIKE(id, &#39;^s(a|t).&#39;); -- 소문자로 끝나는 모든 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;[a-z]$&#39;); ^(캐럿)문자가 대괄호 안에 들어갈 경우에는 대괄호 안의 문자가 아닌 다른 것만 출력하라는 의미 -- 소문자로 시작하지 않은 행을 모두 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;^[a-z]&#39;); -- student 테이블에서 학생의 id를 조사해 4번쨰 자리에 v(소문자)가 있는 행을 출력 SELECT name, id FROM STUDENT WHERE REGEXP_LIKE(id, &#39;^...v.&#39;); 특정 조건을 제외한 결과 출력(NOT) -- 영문자(대소문자)를 포함하지 않는 행을 출력 SELECT * FROM reg_test WHERE NOT REGEXP_LIKE(text, &#39;[A-Za-z]&#39;); 특수문자 찾기 (* 또는 ? 기호는 모든 것이라는 뜻을 가진 메타캐릭터 문자이기 때문에 를 붙여준다) -- ?가 들어간 행 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39; ?&#39;); -- ?가 들어가지 않는 행 출력 SELECT * FROM reg_test WHERE NOT REGEXP_LIKE(text, &#39; ?&#39;); 소문자가 들어 있는 모든 행을 출력 SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;*[a-z]&#39;); SELECT * FROM reg_test WHERE REGEXP_LIKE(text, &#39;?[a-z]&#39;); -- 지역번호가 2자리이고 국번이 4자리가 나오는 경우 SELECT name, tel FROM student WHERE REGEXP_LIKE(tel, &#39;^[0-9]{2} )[0-9]{4}&#39;); -- 대괄호 안에 있는 숫자의 순서와 상관없이 해당 숫자가 있는 행은 모두 출력됨 SELECT * FROM t_reg2 WHERE REGEXP_LIKE(ip, &#39;^[172]{3} .[16]{2} .[168]{3}&#39;); . 예제 . reg_tab 테이블 생성 . CREATE TABLE reg_tab(text varchar2(20)); INSERT INTO reg_tab VALUES(&#39;TIGER&#39;); INSERT INTO reg_tab VALUES(&#39;TIGGER&#39;); INSERT INTO reg_tab VALUES(&#39;elephant&#39;); INSERT INTO reg_tab VALUES(&#39;tiger&#39;); INSERT INTO reg_tab VALUES(&#39;tiger2&#39;); INSERT INTO reg_tab VALUES(&#39;tiger3&#39;); INSERT INTO reg_tab VALUES(&#39;doggy&#39;); INSERT INTO reg_tab VALUES(&#39;5doggy&#39;); INSERT INTO reg_tab VALUES(&#39;DOG&#39;); INSERT INTO reg_tab VALUES(&#39;DOG2&#39;); INSERT INTO reg_tab VALUES(&#39;개&#39;); INSERT INTO reg_tab VALUES(&#39;cat&#39;); INSERT INTO reg_tab VALUES(&#39;catty&#39;); INSERT INTO reg_tab VALUES(&#39;9catty&#39;); INSERT INTO reg_tab VALUES(&#39;catwoman&#39;); INSERT INTO reg_tab VALUES(&#39;고양이&#39;); INSERT INTO reg_tab VALUES(&#39;BAT&#39;); INSERT INTO reg_tab VALUES(&#39;BATMAN&#39;); INSERT INTO reg_tab VALUES(&#39;BATGIRL&#39;); INSERT INTO reg_tab VALUES(&#39;0BATGIRL&#39;); INSERT INTO reg_tab VALUES(&#39;박쥐&#39;); COMMIT; . 1. text 컬럼의 문자열에서 ‘t’로시작하는 데이터 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;^t&#39;); . 2. text 컬럼의 문자열에서 ‘t’로 끝나는 데이터 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;t$&#39;); . 3. 첫번째 ‘t’로시작하여 5번째 ‘r’이 있는 데이터 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE( text,&#39;^t...r&#39;); . SELECT * FROM reg_tab WHERE REGEXP_LIKE (text,&#39;^t|____r&#39;); . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text,&#39;[^t][++++r]&#39;); . 4. 숫자로 끝나는 데이터 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE( text,&#39;[0-9]$&#39;); . 5. 숫자로 시작하는 데이타 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text,&#39;^[0-9]&#39;); . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;^ d&#39;); . 6. 숫자가 아닌 문자로 시작하는 데이터 검색 . SELECT * FROM reg_tab WHERE NOT REGEXP_LIKE(text,&#39;^[0-9]&#39;); . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;^[^0-9]&#39;); . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;^ D&#39;); . 7. 대문자로 시작하는 데이터 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE( text,&#39;^[A-Z]&#39;); . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;^[[:upper:]]&#39;); . 8. 소문자 외의 문자로 시작하는 데이터 검색 . SELECT * FROM reg_tab WHERE NOT REGEXP_LIKE(text, &#39;^[a-z]|^[0-9]&#39;); . SELECT * FROm reg_tab WHERE REGEXP_LIKE(text, &#39;^[^[:lower:]]&#39;); . 9. 한글로 시작하는 데이터 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE( text,&#39;^[ㄱ-힣]&#39;); . 10. 데이터 중 ‘gg’나 ‘GG’가 들어있는 데이터 검색 . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;gg|GG&#39;); . SELECT * FROM reg_tab WHERE REGEXP_LIKE(text, &#39;-*gg-*|-*GG-*&#39;); . REGEXP_REPLACE 함수 . 주어진 문자열에서 특정 패턴을 찾아서 다른 모양으로 치환하는 함수 | . -- 숫자 부분을 @기호로 변경 SELECT text, REGEXP_REPLACE(text, &#39;[[:digit:]]&#39;, &#39;@&#39;) FROM reg_test; -- 숫자를 찾아서 숫자 뒤에 &#39;-*&#39;을 추가 SELECT text, REGEXP_REPLACE(text, &#39;[0-9]&#39;, &#39; 1-*&#39;) FROM reg_test; -- reg_test2 테이블에서 ip의 .(dot) 부분을 모두 삭제하고 출력 SELECT no, ip, REGEXP_REPLACE(ip, &#39; .&#39;, &#39;&#39;) FROM reg_test2; -- reg_test2 테이블에서 ip의 첫번째 .(dot) 부분을 &#39;/&#39; (슬래쉬) 기호로 변경해서 출력 SELECT no, ip, REGEXP_REPLACE(ip, &#39; .&#39;, &#39;/&#39;, 1, 1) FROM reg_test2; 사용자에게 입력받은 문자 가운데 공백이 여러 개 들어있는 경우 그 공백을 제거하는 방법 -- 사용자가 ID를 &#39;abc 123&#39; 이렇게 입력했을 경우 &#39;abc&#39; 와 &#39;123&#39; 사이의 공백을 없애고 싶은 경우 -- {} 내의 숫자는 앞문자가 나타나는 횟수 또는 번위, {,}은 이상을 의미 SELECT REGEXP_REPLACE(&#39;abc 123&#39;, &#39;(){1,}&#39;, &#39;&#39;) FROM dual; 사용자가 검색어를 입력할 때 공백 문자를 가장 먼저 입력하고 아이디 중간에도 공백이 있어서 모든 공백을 제거하는 예 -- 아이디 입력시 : (공백) 75 true 를 입력하였을때 중간 중간 공백을 모두 제거하는 방법 SELECT studno, name, id FROM student WHERE id=REGEXP_REPLACE(&#39;&amp;id&#39;, &#39;(){1,}&#39;, &#39;&#39;); SELECT no, ip, REGEXP_REPLACE(ip, &#39; .&#39;, &#39;/&#39;, 1, 1) &quot;REPLACE&quot; FROM t_reg2; SELECT REGEXP_REPLACE(&#39;20160905&#39;, &#39;([[:digit:]]{4})([[:digit&quot;]]{2})([[:digit:]]{2})&#39;, &#39; 1- 2- 3&#39;; -- 2016-09-05 . 3. REGEXP_INSTR 함수 . 특정 패턴이 출현하는 첫 위치 값을 반환하는 함수 | 0이 아니라 1부터 시작한다. | 0은 특정 패턴을 만족하는 값이 없다는 의미이다. | . -- text 중에서 &#39;*&#39;의 위치를 찾는 방법 SELECT text, REGEXP_INSTR(text, &#39; *&#39;) FROM reg_test; . 4. REGEXP_SUBSTR 함수 . SUBSTR 함수의 확장판으로 특정 패턴에서 주어진 문자를 추출해 내는 함수 | . -- &#39;abc* *def %ghi,jkl&#39; 이란 문자열에서 첫 글자가 공백이 아니고 (&#39;[^ ]&#39;) 그 후에 &#39;def&#39;가 나오는 부분을 추출 SELECT REGEXP_SUBSTR(&#39;abc* *def %ghi,jkl&#39;, &#39;[^ ]+[def]&#39;) FROM dual; -- Professor 테이블에서 101번 학과와 201번 학과 교수들의 메일 주소의 도메인 주소를 출력하시오. 단 메일주소는 @뒤에 있는 주소만 출력하시오. -- &#39;http://&#39; 부분을 제거하고 .으로 구분되는 필드를 최소 3개에서 최대 4개까지 출력하라는 의미 -- 그 후 왼쪽부분에 나오는 &#39;/&#39; 기호를 LTRIM 함수로 제거함 SELECT LTRIM(REGEXP_SUBSTR(email, &#39;@([[:alnum:]]+ .?){3, 4}?&#39;), &#39;@&#39;) domain FROM professor WHERE deptno IN (101, 201); -- abc.net 특정기호나 문자를 기준으로 데이터를 추출할 때 -- : 기호를 기준으로 3번째의 문자열을 추출 SELECT REGEXP_SUBSTR(&#39;sys/oracle@racdb:1521:racdb&#39;, &#39;[^:]+&#39;, 1, 3) result FROM dual; -- racdb -- 슬래쉬를 기준으로 출력 SELECT REGEXP_SUBSTR(&#39;sys/oracle@racdb:1521:racdb&#39;, &#39;[^/:]+&#39;, 1, 2) result FROM dual; -- oracle@racdb . 5. REGEXP_COUNT 함수 . 특정 문자의 개수를 세는 함수 | . -- 주어진 문자열에서 소문자 &#39;a&#39;가 몇개인지 찾아주는 예 SELECT text, REGEXP_COUNT(text, &#39;a&#39;) FROM reg_test; -- 검색 위치를 3으로 지정해서 3번쨰 문자 이후부터 해당 소문자 &#39;c&#39;가 나오는 개수를 세는 예 SELECT text, REGEXP_COUNT(text, &#39;c&#39;, 3) FROM t_reg; -- 대소문자 구분 없이 갯수 체크 SELECT text, REGEXP_COUNT(text, &#39;c&#39;, 1, &#39;i&#39;) FROM t_reg; . SELECT text, REGEXP_COUNT(text, &#39;aa&#39;) RESULT1, REGEXP_COUNT(text, &#39;a{2}&#39;) RESULT2, REGEXP_COUNT(text, &#39;(a)(a)&#39;) RESULT3 FROM t_reg; .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/09/Oracle_SQL_%EC%A0%95%EA%B7%9C%EC%8B%9D.html",
            "relUrl": "/sql/2019/05/09/Oracle_SQL_%EC%A0%95%EA%B7%9C%EC%8B%9D.html",
            "date": " • May 9, 2019"
        }
        
    
  
    
        ,"post176": {
            "title": "[Oracle] SELECT",
            "content": "SELECT . SELECT 컬럼명 FROM 테이블명 WHERE 조건문 ORDER BY 정렬기준; . 조건절을 구성하는 항목 . 1. 컬럼 2. 연산자 - 산술 연산자 : +, -, *, /, mod - 비교 연산자 : &gt;, &lt;, &gt;=, &lt;=, =, != (&lt;&gt;) - 논리 연산자 : not, and, or - 문자열 연산자 : like, || 3. IN / BETWEEN / EXISTS / NOT 4. IS NULL, IS NOT NULL 5. 함수 6. ANY / SOME / ALL . scott계정 EMP 테이블 연습문제 . 모든 사원의 사원명과 급여, 급여와 보너스를 더한 합계 출력 . 함수나 연산자가 끼어 있으면 별칭을 부여해야 나중에 불러 올 수 있다. | . SELECT ename || &#39; &#39; || job AS enamejob, sal, comm, sal+NVL(comm, 0) AS YEONBONG FROM EMP; . 사원테이블에서 부서 번호를 중복제거하고 출력 . -- 사원테이블에서 부서 번호를 출력 SELECT all deptno FROM EMP; -- 중복제거 SELECT distinct deptno FROM EMP; . 20번 부서에서 근무하는 사원의 사원번호, 이름, 부서번호 출력 . SELECT empno, ename, deptno FROM EMP WHERE deptno=20; . 입사일이 81/01/01에서 81/06/09인 사원의 사원번호, 이름, 입사일을 출력 . SELECT empno, ename, hiredate FROM EMP WHERE hiredate&gt;=&#39;81/01/01&#39; AND hiredate&lt;=&#39;81/06/09&#39;; . -- BETWEEN 구문을 쓸 수도 있다. SELECT empno, ename, hiredate FROM emp WHERE hiredate BETWEEN &#39;81/01/01&#39; AND &#39;81/06/09&#39;; . 담당업무가 salesman, clerk인 사원들의 이름과 업무를 출력 . SELECT ename, job FROM EMP WHERE lower(job)=&#39;SALESMAN&#39; OR lower(job)=&#39;CLERK&#39;; . 업무가 president이고 급여가 1500이상이거나 업무가 salesman인 사원의 정보를 출력 . SELECT * FROM EMP WHERE (job=&#39;PRESIDENT&#39; AND sal&gt;1500) OR (job=&#39;SALESMAN&#39;); . 부서번호 정렬된 월급이 높은 순서대로 사원테이블 출력 . SELECT * FROM emp ORDER BY deptno, sal desc; . 최근 입사순으로 사원명, 급여, 입사일자 출력 . SELECT * FROM emp ORDER BY hiredate DESC; . 커미션이 높은 순으로 출력 . SELECT * FROM emp ORDER BY nvl(comm, -1) DESC; . 커미션(comm)이 없는 사원의 이름, 급여, 커미션을 출력 . SELECT ename, sal, comm FROM emp WHERE comm IS NULL OR comm=0; . SELECT ename, sal, comm FROM emp WHERE nvl(comm, 0)=0; . 이름 A로 시작하는 사원명 출력 . SELECT ename FROM emp WHERE ename LIKE &#39;A%&#39;; . 이름이 두번째 문자가 L인 사원명 출력 . SELECT ename FROM emp WHERE ename LIKE &#39;_A%&#39;; . 이름에 L이 두 번 이상 포함된 사원명 출력 . SELECT ename FROM (SELECT ename, length(ename)-length(replace(ename,&#39;L&#39;)) AS num FROM emp) WHERE num&gt;=2; . SELECT ename FROM emp WHERE ename LIKE &#39;%L%L%&#39;; . 커미션(COMM)이 NULL이 아닌 사원의 모든 정보를 출력 . SELECT * FROM emp WHERE COMM IS NOT NULL; . 보너스가 급여보다 10%가 많은 모든 사원에 대해 이름, 급여, 보너스를 출력 . SELECT ename, sal, comm FROM emp WHERE nvl(comm, 0)&gt;sal*1.1; . 업무가 clerk이거나 analyst이고 급여가 1000, 3000, 5000이 아닌 모든 사원의 정보를 출력 . SELECT * FROM emp WHERE (job =&#39;CLERK&#39; OR job=&#39;ANALYST&#39;) AND (sal!=1000 AND sal!=3000 AND sal!=5000); . SELECT * FROM emp WHERE (job =&#39;CLERK&#39; OR job=&#39;ANALYST&#39;) AND sal not in (1000, 3000, 5000); . 업무가 clerk이거나 analyst이고 급여가 1000, 3000, 5000인 모든 사원의 정보를 출력 . SELECT * FROM emp WHERE (job =&#39;CLERK&#39; OR job=&#39;ANALYST&#39;) AND (sal=1000 OR sal=3000 OR sal=5000); . SELECT * FROM emp WHERE (job =&#39;CLERK&#39; OR job=&#39;ANALYST&#39;) AND sal in (1000, 3000, 5000); . 부서가 30이거나 또는 관리자가 7782인 사원의 모든 정보를 출력 . SELECT * FROM emp WHERE deptno=30 or mgr=7782; . 인사관리(hr 계정) EMPLOYEES 테이블 연습문제 . EMPLOYEES 테이블에서 사원 이름을 first_name과 last_name를 합쳐 full_name으로 출력 . SELECT first_name || &#39; &#39; || last_name AS full_name FROM employees; . 부서번호가 30(구매부서)이고 급여 10000미만인 사원의 full_name과 월급,부서번호를 출력 . SELECT first_name || &#39; &#39; || last_name AS full_name, salary, department_id FROM employees WHERE department_id=30 AND salary&lt;10000; . 부서번호가 30이고 급여가 10000달러 이하를 받는 2006년도 이전 입사한 사원의 full_name을 출력 . SELECT first_name || &#39; &#39; || last_name AS full_name FROM employees WHERE department_id=30 AND salary=&lt;10000 AND hire_date&lt;&#39;06/01/01&#39;; . 부서번호가 30(구매부서)이고 급여가 10000이하인 사원과 부서번호가 60(IT부서)에서 급여가 5000이상인 사원을 조회 . SELECT first_name || &#39; &#39; || last_name AS full_name FROM employees WHERE (department_id=30 AND salary&lt;10000) OR (department_id=60 AND salary&gt;5000); . 사원번호가 110번에서 120번인 사원 중 급여가 5000에서 10000사이의 사원명단을 조회 . SELECT first_name || &#39; &#39; || last_name AS full_name FROM employees WHERE (employee_id&gt;=110 AND employee_id&lt;=120) AND (salary&gt;=5000 AND salary&lt;=10000); . 사원번호가 110번에서 120번이 아닌 사원을 조회 . SELECT employee_id, first_name || &#39; &#39; || last_name AS full_name FROM employees WHERE (employee_id &lt; 110 OR employee_id &gt; 120); . 부서번호가 30(구매부서), 60(IT부서), 90(경영부서)에 속한 사원을 조회 . SELECT employee_id, first_name || &#39; &#39; || last_name AS full_name FROM employees WHERE (department_id=30 OR department_id=60 OR department_id=90); . 부서번호가 30(구매부서), 60(IT부서), 90(경영부서) 외의 부서에 속한 사원을 조회 . SELECT employee_id, first_name || &#39; &#39; || last_name AS full_name FROM employees WHERE (department_id!=30 AND department_id!=60 AND department_id!=90); . 전화번호에서 590으로 시작하는 사원명과 전화번호를 조회 . SELECT first_name || &#39; &#39; || last_name AS full_name, phone_number FROM employees WHERE phone_number LIKE &#39;590%&#39; .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/09/Oracle_SQL_SELECT.html",
            "relUrl": "/sql/2019/05/09/Oracle_SQL_SELECT.html",
            "date": " • May 9, 2019"
        }
        
    
  
    
        ,"post177": {
            "title": "[Oracle] DB 계정생성",
            "content": "테스트 환경 . OS: Ubuntu 18.4 | . 오라클 DB 계정생성 . (0) system 계정 접속 . sqlplus 실행 | 사용자명 : system | 비밀번호 : 설치시 지정한 비밀번호 | . 또는 . sqlplus /as sysdba | . (1) 계정 생성 . 계정이름 : team | 계정비밀번호 : 1234 | . $ CREATE USER team IDENTIFIED BY 1234; . (2) 자원과 연결 권한 부여 . team 사용자에게 자원을 쓸 수 있는 권한과 연결할 수 있는 권한을 준다. | . $ GRANT resource, connect TO team; . (3) 테이블 저장 공간 기본값으로 설정 . User 및 TEMP tablespace를 사용할 수 있게 한다. | . $ ALTER USER team DEFAULT tablespace USERS; $ ALTER USER team temporary tablespace TEMP; . (4) 연결 확인 . $ conn team/1234 . (5) 계정 삭제 . DROP USER team CASCADE; .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/09/Oracle_DB_%EA%B3%84%EC%A0%95%EC%83%9D%EC%84%B1.html",
            "relUrl": "/sql/2019/05/09/Oracle_DB_%EA%B3%84%EC%A0%95%EC%83%9D%EC%84%B1.html",
            "date": " • May 9, 2019"
        }
        
    
  
    
        ,"post178": {
            "title": "[DB] 무결성 제약조건 (Integrity constraint)",
            "content": "무결성 제약 조건 . 테이블에 부적절한 자료가 입력되는 것을 방지하기 위해 테이브에 생성할 때 각 컬럼에 대해서 정의되는 여러가지 규칙을 말한다. | 무결성 : 데이터베이스 내에 있는 데이터의 정확성 유지 | 제약조건 : 바람직하지 않은 데이터가 저장 되는 것을 방지하는 것 | . 1. 개체 무결성 . 릴레이션에서 기본키를 구성하는 속성은 널(NULL)값이나 중복값을 가질 수 없습니다. | . 2. 참조 무결성 . 외래키 값은 NULL이거나 참조 릴레이션의 기본키 값과 동일해야 합니다. 즉 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없습니다. | . 3. 도메인 무결성 . 특정 속성의 값이 그 속성이 정의된 도메인에 속한 값이어야 한다는 규정입니다. 인간의 성별은 남, 여로 나뉩니다. 그렇다면 성별이라는 속성에 들어 갈 수 있는 값은 여자 이거나 남자 여야 합니다. 남자, 여자 이외의 값은 도메인 무결성을 위반한 것이라 할 수 있습니다. | . 4. 고유 무결성 . 특정 속성에 대해 고유한 값을 가지도록 조건이 주어진 경우, 그 속성값은 모두 달라야 하는 제약조건을 말합니다. | 학생 릴레이션(테이블)에서 테이블 정의시 ‘이름’ 속성에는 중복된 값이 없도록 제한했다면, ‘이름’ 속성에는 중복된 이름이 있어서는 안됩니다. | . 5. NULL 무결성 . 특정 속성값에 NULL 이 올 수 없다는 조건이 주어진 경우, 그 속성값은 NULL 값이 올 수 없다는 제약조건을 말합니다. | 학생 릴레이션에서 릴레이션 정의 시 ‘학과’ 속성에는 NULL 값이 올 수 없도록 제한했다면 ‘학과’ 속성에는 NULL 이 있어서는 안됩니다. | . 6. 키 무결성 . 한 릴레이션(테이블)에는 최소한 하나의 키가 존재해야 한다는 제약조건을 뜻합니다. | .",
            "url": "https://safenumz.github.io/blog/etc/2019/05/09/DB-%EB%AC%B4%EA%B2%B0%EC%84%B1_%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4.html",
            "relUrl": "/etc/2019/05/09/DB-%EB%AC%B4%EA%B2%B0%EC%84%B1_%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4.html",
            "date": " • May 9, 2019"
        }
        
    
  
    
        ,"post179": {
            "title": "[알고리즘] 소수의 합 구하기",
            "content": "소수의 합 구하기 . C . #include &lt;stdio.h&gt; main() { int a, hap, k, j; scanf(&quot;%d, &amp;a&quot;); hap = 0; k = 2; while (1) { j = 2; while (k % j != 0) { j++; } if (k == j) hap += k; else { printf(&quot;%d&quot;, hap); break; } } } . java . import java.util.Scanner; public static void main(String[] args) { int hap = 0, k = 0, j = 2; System.out.println(&quot;정수 하나를 입력해주세요&quot;); Scanner input = new Scanner(System.in); k = input.nextInt(); while (true) { j = 2; while (k % j != 0) { j++; } if (k == j) { hap += k; } else { System.out.printf(&quot;%d&quot;, hap); break; } } } .",
            "url": "https://safenumz.github.io/blog/algorithm/2019/05/09/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%86%8C%EC%88%98%EC%9D%98_%ED%95%A9_%EA%B5%AC%ED%95%98%EA%B8%B0.html",
            "relUrl": "/algorithm/2019/05/09/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%86%8C%EC%88%98%EC%9D%98_%ED%95%A9_%EA%B5%AC%ED%95%98%EA%B8%B0.html",
            "date": " • May 9, 2019"
        }
        
    
  
    
        ,"post180": {
            "title": "[Oracle] 개요",
            "content": "SQL . Structured Query Language | 데이터베이스에서 데이터를 조회, 입력, 수정, 삭제하는데 사용하는 언어 | DDL (Data Definition Language) : 데이터 정의 언어 | DML (Data Manipulation Language) : 데이터 조작 언어 | DCL (Data Control Language) : 데이터 제어 언어 | . 오라클 기본 셋팅 . 제어판 &gt; 서비스 | 필요없는 것들은 중지한다. | Oracle ORCL VSS Writer Service: 중지, 수동 | OracleDBConsoleorcl : 중지, 수동 | OracleMTSRecoveryService : 중시, 수동 | . 용어설명 . data/ column, row / table / database | . SQL 문장 작성법 . 대소문자 구별안함 | [ 권장 ] 키워드는 대문자 / 테이블명, 열이름 등은 소문자 | 한줄 또는 여러 줄에 입력 가능 | [ 권장 ] 보기 편하게 여러줄로나누고 탭과 들여쓰기 | 명령어의 끝에 ; (세미콜론) 표시하여 SQL 문장 실행 | . 이름 지정 규칙 – 테이블명 / 컬럼명 . 문자, _ , $ , # 조합 (한글도 가능) | 첫글자는 문자로 시작 | 예약어 사용안됨 | 길이 제한 ( 1 ~ 30 ) | . (1) DML (Data Manipulation Language) . INSERT : 입력 . INSERT INTO table_name(columns) VALUES (values); . UPDATE : 수정 . UPDATE table_name SET column=value WHERE condition; . DELETE : 삭제 . DELETE FROM table_name WHERE condition; . SELECT : 검색 . SELECT columns FROM table_name WHERE condition; . (2) DDL (Data Definition Language) . CREATE . CREATE TABLE table_name ( [column_name data_type] ); . DROP | . DROP TABLE table_name [CASCADE CONSTRAINT]; . ALTER . ALTER TABLE table_name ADD ( [ column_name data_type ] ); MODIFY( [ column_name data_type ] ); DROP( [ column_name ] ); . TRUNCATE . 테이블에 있는 데이터들을 삭제 | DELETE : 데이터를 삭제시 rollback으로 복구 가능 | TRUNCATE : 삭제하면 복구할 수 없음 | . (3) DCL (Data Control Language) . 데이터베이스에 있는 데이터에 접근을 제어하는 언어 | GRANT : 접근제어나 어떤 작업을 허용하는 권한을 주는 역할 | REVOKE : 권한을 박탈 | . select * from emp; select * from dept; -- hr 계정 접속 conn hr/hr select * from employees; -- 부서 검색 select * from departments; . -- sql (DLL / DML / DCL) -- DDL select * from emp; CREATE TABLE emp_copy AS SELECT * FROM emp; -- [ 연습문제 ] emp 전체emp_copy 복사본 테이블 생성 후 SELECT * FROM emp_copy; -- 1. 사원번호가 7782인 사원의 부서를 10번으로 변경 UPDATE emp_copy SET deptno=30 WHERE empno=7782; -- 2. 사원번호가 7782인 사원의 이름을 홍길숙으로 변경하고 급여를 3500으로 변경 UPDATE emp_copy SET ename=&#39;홍길숙&#39;, sal=3500 WHERE empno=7782; -- 3. 모든 부서원의 보너스를 300씩 인상 변경 -- nvl null 값을 만나면 0으로 변경후 300 더함 UPDATE emp_copy SET comm=nvl(comm, 0)+300; -- 4. 사원번호가 7499인 사원의 정보를 삭제 DELETE FROM emp_copy WHERE empno=7499; -- 5. 입사일자가 81년 6월 1일 이전인 사원의 정보를 삭제 DELETE FROM emp_copy WHERE hiredate&lt;&#39;81/06/01&#39;; -- 6. 입사(사번 : 8000, 사원명 : 본인명, 업무 : CLERK, 월급 : 5000) INSERT INTO emp_copy(empno, ename, job, sal) VALUES (8000, &#39;JASON&#39;, &#39;CLERK&#39;, 5000); DELETE FROM emp_copy; DROP TABLE emp_copy; . 2. 테이블 만들기 . (0) 이름 지정 규칙 . 문자, _ , $ , # 조합 (한글도 가능) | 첫글자는 문자로 시작 | 예약어 사용안됨 | 길이 제한 ( 1 ~ 30 ) | . (1) 기본 데이터 타입 . VARCHAR2(n) | 가변 길이 문자 데이터 (4000byte) | . CHAR(n) | 고정 길이 문자 데이터 (2000byte) | . NUMBER(p,s) | 전체 p 자리 중 소수점 이하 s 자리 | . DATE | 날짜형 | . LONG | 가변 길이 문자 데이터 (2Gbyte) | . BLOB | 가변 길이 이진 데이터 (4Gbyte) | . CLOB | 단일 바이트 가변 길이 문자 데이터 (4Gbyte) | . varchar도 현재는 varchar2와 동일하지만, | 추후에 오라클에서 별도의 데이터 타입으로 지정한다고 사용하지 말라고 권고한다. . | 한글은 2bytes | number ( 전체자릿수, 소수점 이하 자릿수) : 지정된자릿수를 맞추기 위해 반올림됨 | timestamp : date보다 정밀 | . (2) 테이블 연습 . create / alter / drop | desc | insert / update /delete / select | commit / rollback | . 테이블명: student . 학번 | id | char(4) | . 학생이름 | name | varchar2(10) | . 국어점수 | kor | number(3) | . 수학점수 | math | number(3) | . 총점 | total | number(3) | . 평균 | sum | number(5 ,2) | . -- student 테이블 생성 CREATE TABLE student ( id char(4), name varchar2(10), kor number(3), math number(3), avg number(5 ,2), total number(5 ,2) ); -- 테이블 구조 확인 DESC student; -- 데이터 (레코드) 확인 SELECT * FROM student; -- 영어점수 컬럼 추가 (eng number(3)) ALTER TABLE student ADD (eng number(3)); -- 총점 컬럼 삭제 ALTER TABLE student DROP (total); -- 평균 컬럼에서 소숫점 1자리 변경 ALTER TABLE student MODIFY(avg number(4 ,1)); -- 데이터 입력 INSERT INTO student VALUES (&#39;8001&#39;, &#39;홍길순&#39;, 100, 80, 50, 0); INSERT INTO student(id, name, kor, math, eng, avg) VALUES (&#39;8088&#39;, &#39;홍길동&#39;, 55, 66, 88, 0); -- 홍길동 학생의 평균값을 입력하세요. UPDATE student SET avg=(kor+math+eng)/3 WHERE name=&#39;홍길동&#39;; -- 데이터 (레코드) 확인 SELECT * FROM student; . 1. 오라클 IP 접속 --&gt; SQLDeveloper에서 localhost -&gt; 본인컴퓨터IP 2. 사용자계정 만들기 - 각 조의 한개의 계정 (ourjo / 1234) . * SQL - DDL : 테이블 관련 정의 - CREATE / DROP / ALTER - DML : 데이타 조작 - INSERT / DELETE / UPDATE / SELECT - DCL : 권한 - GRANT / REVOKE * 목표 1. DDL + 제약조건 2. DML (SELECT) .",
            "url": "https://safenumz.github.io/blog/sql/2019/05/08/Oracle_SQL_%EA%B0%9C%EC%9A%94.html",
            "relUrl": "/sql/2019/05/08/Oracle_SQL_%EA%B0%9C%EC%9A%94.html",
            "date": " • May 8, 2019"
        }
        
    
  
    
        ,"post181": {
            "title": "[git] git 초기화",
            "content": "git 초기화 . 1. 기존의 히스토리 삭제 . $ rm -rf .git . 2. 파일정리 후 새로운 git 설정 . $ git init $ git add . $ git commit -m &quot;first commit&quot; . 3. git 저장소 연결 후 강제 push . $ git remote add origin &lt;git remote url&gt; $ git push -u --force origin master .",
            "url": "https://safenumz.github.io/blog/devops/2019/05/08/git-git_%EC%B4%88%EA%B8%B0%ED%99%94.html",
            "relUrl": "/devops/2019/05/08/git-git_%EC%B4%88%EA%B8%B0%ED%99%94.html",
            "date": " • May 8, 2019"
        }
        
    
  
    
        ,"post182": {
            "title": "[Trouble sqldeveloper] Mac에서 접속 시 locale not recognized 에러",
            "content": "Environment . MacOS Mojave 10.14.5 | . Trouble . Mac에서 sqldeveloper 접속시 locale not recognized 에러가 발생하는 경우 | . Shooting . sqldeveloper 우클릭 &gt; 패키지 내용보기 선택 후에 | Contents/Resources/sqldeveloper/bin/sqldeveloper.conf 파일을 열어서 다음과 같은 옵션을 추가 한다. 지정된 경로에 sqldeveloper.conf 파일이 없으면 새로 생성하면 된다. | . AddVMOption -Duser.language=ko AddVMOption -Duser.country=KR . 저장 후 sqldeveloper를 실행하면 로케일이 KR로 바뀐다. | .",
            "url": "https://safenumz.github.io/blog/trouble/2019/05/07/Mac_sqldeveloper_%EC%A0%91%EC%86%8D%EC%8B%9C_locale_not_recognized_%EC%98%A4%EB%A5%98.html",
            "relUrl": "/trouble/2019/05/07/Mac_sqldeveloper_%EC%A0%91%EC%86%8D%EC%8B%9C_locale_not_recognized_%EC%98%A4%EB%A5%98.html",
            "date": " • May 7, 2019"
        }
        
    
  
    
        ,"post183": {
            "title": "[Java] 네트워크",
            "content": "네트워크 . 네트워크 : 네트워크 케이블, 전화선, 무선 링크 등으로 연결되어 동일한 프로토콜을 사용하는 장치(디바이스)의 집합 | 디바이스 : 기존의 서버와 클라이언트 뿐만 아니라 최근에는 프린터, 휴대폰 등 | 프로토콜 : 컴퓨터간의 통신 방법을 정의하는 규칙의 집합 | . 네트워크의 계층 . Application : HTTP, FTP | Transport : TCP, UDP | Network : IP | Data link : Ethernet Frame | Physical | . 1. Physical layer . 자바는 고려하지 않음 | . 2. DataLink layer . 이더넷 카드나 PPP 연결과 같이 특정한 네트워크 인터페이스가 물리적인 연결을 통해서 어떻게 IP 데이타그램을 송신하는지를 정의 | . 3. Network layer . 데이터의 비트와 바이트가 어떻게 패킷으로 구성되는지, 서버를 찾을 때 사용하는 주소를 어떻게 구성하는지를 정의 | IP | . 4. Transfer layer . 패킷이 손상되는지 감지 | TCP : 손상된 데이터를 감지하고 재전송하도록 하고, 보낸 순서대로 전달하도록 하기에 오버헤드가 크지만 신뢰성 있는 프로토콜 ex) 전화통신 | 전체 데이터를 한번에 보냄, 정확도 높음 | UDP : 손상된 패킷을 감지는 하지만 재전송하지 않고, 순서도 보장하지 않기에 신뢰성이 없는 프로토콜이지만 속도가 빠르다. ex) 우편통신 | 데이터를 쪼개서 보냄, 정확도는 낮지만 빠르게 전송해야 하는 경우, 동영상 전송에 활용 | . 5. Application layer . 데이터가 전송된 후에 전송된 데이터로 무엇을 해야 할지 결정 | HTTP, SMTP, POP, IMAP, FTP, NFS, NNTP 등 | . port? . Host는 Network 상에서 유일한 IP 주소를 할당 받는다. | 하나의 Host는 많은 Network 관련 응용 프로그램을 실행할 수 있다. | 이 때 각각의 응용 프로그램은 유일한 Port 번호로 서비스를 하게 된다. | Port 번호는 0 부터 65535까지 사용하능 하다. | 1부터 1023까지는 시스템에서 사용될 목적으로 예약되어 있다. (0은 사용하지 않음) | FTP : 21 | TELNET : 23 | SMTP : 25 | HTTP : 80 | . 서버 . ServerSocket(포트번호) 생성 . | Socket s = ss.accept() . | 소캣 안의 입출력 얻어오기 in = s.getInputStream() | out = s.getOutputStream() | . | 데이터 입출력 data = in.read() | out.write(“ok”) | . | 스트림 닫기 in.close() | out.close() | s.close() // 나중에 닫음 | . | 클라이언트 . Socket(서버IP, 서버 Port) 생성 . | 소캣 안의 입출력 얻어오기 s.getInputStream() | s.getOutputStream() | . | 데이터 입출력 out.write(data) | result = in.read() | . | 스트림 닫기 | Network Basic . SimpleClient . package network1.basic; import java.io.*; import java.net.*; import java.util.*; public class SimpleClient { public final static int PORT = 5000; // PortNumber : 1024 ~ // 192.168.43.128 // 192.168.0.238 114 public final static String HOST = &quot;192.168.43.128&quot;; public static void main( String args[] ) { Socket client = null; DataInputStream in = null; DataOutputStream out = null; // 콘솔 입력을 받기 위해 Scanner stdin = new Scanner( System.in ); try{ // 1. 서버에 연결하기 위해 소켓 생성 client = new Socket(HOST, PORT); // 2. 소켓의 입출력 스트림 얻기 in = new DataInputStream(client.getInputStream()); out = new DataOutputStream(client.getOutputStream()); // 3. 키보드 입력 받아 서버에 전송 System.out.println(&quot;인사말 입력-&gt;&quot;); String greeting = stdin.nextLine(); out.writeUTF(greeting); // 4. 서버로부터 응답을 받음 String result = in.readUTF(); System.out.println(&quot;짝꿍의 메시지&quot; + result); // 5. 입출력 스트림의 닫음 in.close(); out.close(); client.close(); } catch ( Exception ex ) { System.out.println(&quot;Error writing..&quot; + ex ); } } } . Simple Server . package network1.basic; import java.io.*; import java.net.*; public class SimpleServer { public final static int PORT = 5000; // PortNumer : 1024 ~ public static void main( String args[] ) { ServerSocket server = null; DataInputStream in = null; DataOutputStream out = null; Socket clientSocket = null; try{ // 1. 서버 소켓 생성 server = new ServerSocket( PORT ); System.out.println(&quot;SimpleServer started..&quot;); // 2. 클라이언트 접속시 소켓 생성 // 3. 소켓의 입출력 스트림 얻기 clientSocket = server.accept(); in = new DataInputStream( clientSocket.getInputStream()); out = new DataOutputStream( clientSocket.getOutputStream() ); // 4. 데이터 전송 String line = in.readUTF(); System.out.println(&quot;we received : &quot; + line ); if( line.compareTo(&quot;안녕&quot;) == 0 ) { out.writeUTF(&quot;저도 반갑습니다.&quot; ); } else { out.writeUTF(&quot;인사말이 아닙니다.&quot;); } // 5. 소켓닫기 in.close(); out.close(); clientSocket.close(); } catch ( Exception ex ) { System.out.println( ex.getMessage() ); } } } . Network thread . Network thread Clinet . package network2.thread; import java.io.*; import java.net.*; public class Client{ public final static int PORT = 3333; static int a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; static int b[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }; public static void main( String args[] ) { Socket cl = null; DataInputStream br = null; DataOutputStream dos = null; int result[] = new int[10]; /*********************************************** * 소켓 객체, 입력스트림과 출력 스트림 객체 생성 */ try{ //1. 소켓 객체 생성 //2. 입력 스트림 생성 //3. 출력 스트림 생성 } catch ( Exception ex ) { System.out.println(&quot;Error is &quot; + ex ); } /*********************************************** * 숫자 배열을 서버에 전송 */ try{ for( int i=0; i&lt;a.length ; i++ ){ // 1. a 배열을 서버에 전송 } for( int i=0; i&lt;b.length ; i++ ){ // 2. b 배열을 서버에 전송 } } catch( Exception ex ) { System.out.println(&quot;error writing to server..&quot; + ex ); } /*********************************************** * 서버로부터 결과를 읽어 옴 */ try{ for( int i=0 ; i&lt;result.length; i++ ){ // 1. 서버에서 읽어와서 result 배열에 저장 } } catch ( Exception ex ) { ex.printStackTrace(); } /*********************************************** * 결과를 화면에 출력 */ System.out.println(&quot;The sum of the two arrays : &quot; ); for( int i=0 ; i &lt; result.length ; i++ ) System.out.println( result[i] + &quot; &quot; ); /*********************************************** * 출력 스트림, 입력 스트림, 소켓 객체 닫기 */ try{ // 1. 출력 스트림 닫기 // 2. 입력 스트림 닫기 // 3. 소켓 닫기 } catch( Exception ex ) { System.out.println(&quot;Error close.... &quot; + ex ); } } } . Network thread Server . package network2.thread; import java.io.*; import java.net.*; public class Server extends Thread { public static final int PORT = 3333; protected ServerSocket listen; public Server() { try{ listen = new ServerSocket( PORT ); } catch( IOException ex ) { System.out.println(&quot;Creating the ServerSocket..&quot; + ex ); } this.start(); } // 요청이 들어올 때마다 연결 상태를 새로이 생성 public void run() { try{ while( true){ Socket client = listen.accept(); JuryThread cc = new JuryThread( client ); System.out.println(&quot;클라이언트 입장 : &quot; + client ); } } catch( IOException ex ) { System.out.println(&quot;Creating the Socket..&quot; + ex ); } } public static void main( String args[] ) { new Server(); } } class JuryThread extends Thread{ Socket client; DataInputStream in; DataOutputStream out; public JuryThread( Socket s ) { client = s; try { in = new DataInputStream( client.getInputStream()); out = new DataOutputStream( client.getOutputStream()); } catch ( IOException ex ) { try{ client.close(); } catch ( IOException exc ) { System.out.println(&quot;Error getting socket stream : &quot; + exc ); } return; } this.start(); } public void run() { /******************************************* * 클라이언트로부터 데이타를 읽어옴 */ int a[] = new int [10]; int b[] = new int [10]; try{ for( int i =0 ; i&lt; a.length ; i++ ) a[i] = in.readInt(); for( int i =0 ; i&lt; b.length ; i++ ) b[i] = in.readInt(); } catch ( Exception ex ){ ex.printStackTrace(); } /******************************************* * 읽어 온 데이타를 계산 */ int result[] = new int [10]; for( int i=0 ; i&lt;result.length ; i++ ) result[i] = a[i] + b[i]; /******************************************* * 계산 결과를 다시 클라이언트로 보냄 */ try{ for( int i=0 ; i&lt;result.length ; i++ ) out.writeInt( result[i] ); } catch( Exception ex ) { ex.printStackTrace(); } /******************************************* * 닫기 */ try{ in.close(); out.close(); client.close(); }catch( Exception ex ){ } } } . 1. 채팅 완성 (네트워크 개념) - 오목 (보기) 2. 데이타베이스 (오라클) - SQL (DDL, DML, DCL) . import java.io.*; import java.util.*; import java.net.*; public class ChatServer implements Runnable { ArrayList vc = new ArrayList(); public void run() { ServerSocket ss = null; try { ss = new ServerSocket(1234); } catch (Exception 2) { System.out.println(e); } } while (true) { try { Socket s = ss.accept(); CahtService cs = new ChatService(s); cs.start(); vc.add(cs); } catch (Exception 2) { } } public static void main(String[] args) { ChatServer cs = new ChatServer(); new Thread(cs).start(); } } import java.io.*; import java.util.*; import java.net.*; public class ChatServer implements Runnable { ArrayList vc = new ArrayList(); public void run() { ServerSocekt ss = null; try { ss. new ServerSoccket(1234); } catch (Exceptine e) { System.out.println(e); } } while (true) { try { Socket s = ss.accept(); ChatService cs = new ChatService(s); cs.start(); vs.add(cs); } catch (Exception e) { } } public static void main(Strign[] args) { ChatServer cs = new ChatServer(); new Thread(cs).start(); } public static void main(String[] args) { ChatServer cs = new ChatServer(); new Thread(cs).start(); } } class ChatService extends Thread { String myname = &quot;guest&quot;; BufferedReader in; OutputStream out; ChatService(Socket s) { try { in = new BufferedReader(new InputStreamReader(s.getInputStream())); out = s.getOutputStream(); } catch(Exception e) { } } } import java.awt.*; import java.util.*; import java.net.*; public class ChatServer implements Runnable { ArrayList vc = new ArrayList(); public void run() { ServerSocket ss = null; try { ss = new ServerSocket(1234); } catch (Exception e) { System.out.println(e); } } while (true) { try { Socket s = ss.accept(); System.out.println(&quot;Client가 접속시도: &quot; + s); ChatService cs = new ChatService(s); cs.start(); vc.add(cs) } catch(Ec) } } import java.io.*; import java.util.*; import java.net.*; public class ChatServer implements Runnable { ArrayList vc = new ArrayList(); public void run() { ServerSocket ss = null; try { ss = new ServerSocket(1234); } catch (Exception e) { System.out.println(e); } } while(true) { try { Socket s = ss.accept(); System.out.println(&quot;Client가 접속 시도: &quot; + s); ChatService cs = new ChatService(s); cs.start(); vc.add(cs); } catch (Exception e) { } } while (true) { try { Socket s = ss.accept(); System.out.println(&quot;접속 시도:&quot; + s); ChatService cs = new ChatService(s); cs.start(); vc.add(cs) } catch (Exception e) { } } } .",
            "url": "https://safenumz.github.io/blog/java/2019/05/07/Java_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC.html",
            "relUrl": "/java/2019/05/07/Java_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC.html",
            "date": " • May 7, 2019"
        }
        
    
  
    
        ,"post184": {
            "title": "[Java] thread",
            "content": "Java의 입출력(IO) . Java &lt;—&gt; 다른장치(device) *stream : 데이터를 보내고 받는 가상 장치 1) byte 형 | OuputStream | InpuStream | filter stream | DataOutputStream / DataInputStream | ObjectOuputStream / ObjectInputStream -&gt; 직렬화 (Serializable) 2) char 형 | . // String을 타는 클래스는 직렬화 시켜야 한다. class Student implements Serializable { String name; int age; double height; Encore encore; Student(String name, int age, double height) { // 멤버 변수에 각각 지정 } void setName() {} void getName() {} void calScore() {} } class Encore implements Serializable { } . program : 일종 software | process : 현재 cpu가 실행중인 프로그램 | thread : 한 프로세스 안에서 동시에(?) 여러 작업 | . cf) processor : cpu . 자바의 쓰레드 처리 절차 . Thread 상속 (Runnable 구현) run() 오버라이딩 | . | start() 호출 -&gt; run() 호출됨 | package thread.basic; import java.io.IOException; public class EX_Ex01_Process { public static void main(String[] args) { // 다른 응용 프로그램을 프로세스 실행 Runtime rt = Runtime.getRuntime(); try { rt.exec(&quot;C://Program Files/internel explorer/iexplore.exe&quot;); } catch (IOException e) { e.printStackTrace(); } } } . package thread.basic; public class Ex02_ThreadTest { public static void main(String[] args) { MakeCar1 mc1 = new MakeCar1(&quot;차틀만들기&quot;); // mc1.run(); mc1.start(); MakeCar1 mc2 = new MakeCar1(&quot;도색작업&quot;); // mc2.run(); mc2.start(); } } class MakeCar1 extends Thread { String work; // 옛날 방식, this를 써서 명확하게 하는 것이 좋다. MakeCar1(String _work) { work = _work; } public void run() { for (int i = 0; i &lt; 5; i++) { System.out.println(work + &quot;작업중&quot;); // 0.5초 try { Thread.sleep(500); } catch (InterruptedException e) { } } } } . public class Ex { public static void main(String[] args) { MakeCar1 mc1 = new MakeCar1(&quot;차틀 만들기&quot;); mc1.start(); MakeCar mc2 = new MakeCar1 } } . Runnable . package thread.basic; public class Ex02_RunnableTest { public static void main(String[] args) { MakeCar1 mc1 = new MakeCar1(&quot;차틀만들기&quot;); Thread t1 = new Thread(mc1); // mc1.run(); t1.start(); /* MakeCar1 mc2 = new MakeCar1(&quot;도색작업&quot;); Thread t2 = new Thread(mc2); mc2.start(); */ // mc2.run(); new Thread(new MakeCar2(&quot;도색&quot;)).start(); System.out.println(&quot;프로그램 끝&quot;); } } class MakeCar2 implements Runnable { String work; // 옛날 방식, this를 써서 명확하게 하는 것이 좋다. MakeCar2(String _work) { work = _work; } public void run() { for (int i = 0; i &lt; 5; i++) { System.out.println(work + &quot;작업중&quot;); // 0.5초 try { Thread.sleep(500); } catch (InterruptedException e) { } } } } . package thread.basic; import java.awt.*; public class Ex3_DalTest extends Frame{ Dal a, b, c; public Ex3_DalTest() { setSize( 500, 400 ); setVisible( true ); a = new Dal(this, 0, 50); b = new Dal(this, 0, 100); c = new Dal(this, 0, 150); // # // 각 객체의 쓰레드 메소드(run) 호출한다 /* a.start(); b.start(); c.start(); */ new Thread(a).start(); new Thread(b).start(); new Thread(c).start(); } public void paint( Graphics g ) { g.setColor(Color.red); g.drawString(&quot;__@&quot;, a.x, a.y ); g.setColor(Color.blue); g.drawString(&quot;__@&quot;, b.x, b.y ); g.setColor(Color.green); g.drawString(&quot;__@&quot;, c.x, c.y ); } public static void main(String[] args) { Ex3_DalTest dal = new Ex3_DalTest(); } } /* # Thread 처리 (1) Thread 클래스나 Runnable 인터페이스 상속 (2) run() 오버라이딩 - 임의의 수를 speed 값으로 지정 - x 값을 위의 임의의 수를 더하기 - 화면을 다시 그린다 (*) app.repaint() 이용 - 임의의 수만큼 잠시 쓰레드를 블럭한다 # 위의 작업을 반복한다 */ class Dal implements Runnable { // class Dal extends Thread { int x, y; int speed; Frame app; public Dal( Frame _app, int _x, int _y ) { app = _app; x = _x; y = _y; } public void run() { while (true) { speed = (int) (Math.random() * 10); // 0 ~ 9 임의의 수 x += speed; // 그림을 다시 그리는 함수 app.repaint(); try { Thread.sleep((int) (Math.random() * 10) * 100); } catch (InterruptedException e) { } } } } . package thread.basic; import javax.swing.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; public class Ex4_CounterTest extends JFrame{ private JPanel p1, p2; private JButton btn; private JTextArea ta; private JLabel lb; private boolean inputChk; public Ex4_CounterTest() { setTitle(&quot;단일 스레드 테스트!&quot;); p1 = new JPanel(); p1.add(btn = new JButton(&quot;Click&quot;)); p1.add(lb = new JLabel(&quot;Count!&quot;));//추가 add(p1,&quot;North&quot;); p2 = new JPanel(); p2.add( ta = new JTextArea(20,50)); add(p2); setBounds(200, 200, 600, 400); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); btn.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { // 1- 카운트 다운을 시작하는 스레드 new Thread(new Runnable(){ public void run() { for (int i = 10; i &gt; 0; i--) { lb.setText(String.valueOf(i)); try { Thread.sleep(1000); } catch (Exception ex) { } } } }).start(); // 2- 입력값을 받아서 JTextArea에 붙이는 작업 new Thread(new Runnable() { public void run() { for (int i = 10; i &gt; 0; i--) { if (inputChk) { lb.setText(&quot;빙고&quot;); inputChk = false; return; } lb.setText(String.valueOf(i)); try { Thread.sleep(1000); } catch (Exception ex) { } } /* String input = JOptionPane.showInputDialog(&quot;값을 입력&quot;); ta.append(input); */ } }).start(); } }); } public static void main(String[] args) { new Ex4_CounterTest(); } } . package thread.basic; import javax.swing.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; public class Ex4_ZBombTest extends JFrame{ private JPanel p1,p2; private JButton btn; private JLabel lb, image; private boolean inputChk; Ex4_ZBombTest(){ setTitle(&quot;폭탄 테스트!&quot;); p1 = new JPanel(); p1.add(btn = new JButton(&quot;시작&quot;)); p1.add(lb = new JLabel(&quot;카운트다운&quot;)); add(p1,&quot;North&quot;); p2 = new JPanel(); p2.add(image = new JLabel(new ImageIcon(&quot;src thread basic ex bomb_1.jpg&quot;))); add(p2, &quot;Center&quot;); setBounds(200, 200, 600, 600); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setVisible(true); btn.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { // 1- 카운트 다운을 시작하는 스레드 new Thread(new Runnable() { public void run() { for (int i = 10; i &gt; 0; i--) { if (inputChk) { inputChk = false; return; } if (i == 1) image.setIcon(new ImageIcon( &quot;Basic5Class/src/thread/basic/imgs/bomb_2.jpg&quot;)); lb.setText(String.valueOf(i)); try { Thread.sleep(1000); } catch (Exception e) { } } } }).start(); // 2- 입력값을 받아서 JTextArea에 붙이는 작업 new Thread(new Runnable() { public void run() { String secret = &quot;1234&quot;; String answer = JOptionPane.showInputDialog(&quot;암호를 대시오&quot;); if (secret.equals(answer)) { inputChk = true; } } }).start(); } }); } public static void main(String[] args) { new Ex4_ZBombTest(); } } . package thread.basic; public class Ex05_ThreadStop { public static void main(String[] args) { System.out.println(&quot;메인쓰레드:&quot; + Thread.currentThread().getName()); MakeCar3 mc = new MakeCar3(); mc.start(); try { Thread.sleep(2000); } catch (Exception ex) { } System.out.println(&quot;쓰레드 종료&quot;); /* 일반적으로 stop은 사용하지 않음, boolean 변수로 제어한다. mc.stop(); */ /* 한번 stop으로 죽인 Thread는 다시 살아나지 않는다. mc.start(); */ mc.flag = true; } } class MakeCar3 extends Thread { boolean flag = false; public void run() { for (int i = 0; i &lt; 50; i++) { if (flag) return; System.out.println(getName() + &quot;작업중&quot;); try { Thread.sleep(500); } catch (InterruptedException e) { } catch(ThreadDeath e) { System.out.println(&quot;쓰레드 강제 종료됨&quot;); } } } } . package thread.basic; public class EX06_Priority { public static void main(String[] args) { // 운영체제에서 라운드로빈 방식으로 실행되기 때문에 사용자가 아무리 // 우선순위를 높게 준다고 해도 크게 영향을 미치지 못한다. MakeCar mc1 = new MakeCar(&quot;차틀&quot;, Thread.MAX_PRIORITY); mc1.start(); MakeCar mc2 = new MakeCar(&quot;도색&quot;, Thread.MIN_PRIORITY); mc2.start(); } } class MakeCar extends Thread { String work; MakeCar(String _work, int prio) { work = _work; setPriority(prio); } public void run() { for (int i = 0; i &lt; 5; i++) { System.out.println(work + &quot;작업중&quot;); } } } . package thread.basic; class Count { int i = 0; // synchronized 앞의 작업이 끝날 때까지 기다린다. // 느리지만 자원을 공유하고 있다면 자원의 신뢰성을 보장하기 위해 쓴다. // synchronized void increment() { void increment() { // 전체가 아닌 필요한 것만 synchronized를 쓰는 것이 좋다. // 공유하는 객체가 없을 때는 자기 자신(this)이라도 lock을 건다. synchronized (this) { i++; } }; } class ThreadCount extends Thread { Count cnt; public ThreadCount(Count cnt) { this.cnt = cnt; } public void run() { for (int i = 0; i &lt; 100000000; i++) { cnt.increment(); } } } public class Ex07_Synch { public static void main(String[] args) { Count cnt = new Count(); ThreadCount tc1 = new ThreadCount(cnt); tc1.start(); ThreadCount tc2 = new ThreadCount(cnt); tc2.start(); try { tc1.join(); tc2.join(); } catch (Exception ex) {} System.out.println(&quot;i값 = &quot; + cnt.i); } } . BreadTest . class Bread { String bread; boolean isCheck = false; public void setBread(String bread) { this.bread = bread; } public String getBread() { return bread; } } class Baker extends Thread { Bread bbang; Baker(Bread bbang) { this.bbang = bbang; } public void run() { bbang.setBread(&quot;진열된 완성된 맛있는 빵&quot;); } } class Customer extends Thread { Bread bbang; Customer(Bread bbang) { this.bbang = bbang; } public void run() { System.out.println(&quot;빵을 사감: &quot; + bbang.getBread()); } } class Ex08_BreadTest { publci static void main(String[] args) { Bread bread = new Bread(); Baker baker = new Baker(bread); Customer customer = new Customer(bread); customer.start(); baker.start(); try { customer.join(); baker.join(); } catch (Exception ex) {} } } . 복습 . 1. 다음 메소드들 중에서 쓰레드의 실행은 멈추기 하는 것은 ? (1) sleep() (2) stop() (3) wait() (4) notify() (5) notifyAll() /* [정답] 1 2 3 */ 2. 쓰레드를 실행할 수 있는 클래스를 만들기 위해 사용되는 인터페이스는 ? (1) Run (2) Runnable (3) Thread (4) Threadable (5) Exception /* [정답] 2 */ 3. 쓰레드를 실행할 수 있는 클래스를 선언하였을 때 정의해야 하는메소드는 ? (1) start() (2) wait() (3) run() (4) init() (5) stop() /* [정답] 3 */ 4. 쓰레드에는 우선순위를 부여할 수 있는데, 이 경우 setPriority() 메소드를 안에 어떤 상수를 지정할수 있는가 ? (1) MAX_PRIORITY (2) PRIORITY_MAX (3) Thread.MAX_PRIORITY (4) Thread.PRIORITY_MAX /* [정답] 3 */ 10. 다음 소스 중 main() 메소드안에 “여기” 부분에서 쓰레드를 생성하고 실행하는 코드로적당한 것은 ? class Test implements Runnable { public static void main(String[] args) { /* 여기 */ } public void run() { } } (1) Test t = new Test(); t.run(); (2) Test t = new Test(); new Thread().run(); (3) Test t = new Test(); new Thread(t).run(); (4) Test t = new Test(); new Thread(t).start(); /* [정답] 4 */ 11. 아래 프로그램에서 쓰레드를 생성하고 시작하기 위한 코드로 맞는것은 ? class MyThread implements Runnable { public void run() { try { for (int i = 0; i &lt; 10; i++) { System.out.println(“Thread is running”); Thread.sleep(1000); } } catch (InterruptedException ex) {} } } (1) new Thread(MyThread).start(); (2) new Thread(new MyThread()).run(); (3) new MyThread().start(); (4) new Thread(new MyThread()).start(); /* [정답] 4 */ .",
            "url": "https://safenumz.github.io/blog/java/2019/05/07/Java_thred.html",
            "relUrl": "/java/2019/05/07/Java_thred.html",
            "date": " • May 7, 2019"
        }
        
    
  
    
        ,"post185": {
            "title": "[MacOS] Mac IP 주소 확인",
            "content": "MacBook IP 주소 확인 . 1. 시스템 환경설정 &gt; 네트워크 . 2. 터미널 명령어로 확인 . $ ifconfig | grep inet $ ipconfig getifaddr en0 .",
            "url": "https://safenumz.github.io/blog/etc/2019/05/07/MacOS-IP%EC%A3%BC%EC%86%8C_%ED%99%95%EC%9D%B8.html",
            "relUrl": "/etc/2019/05/07/MacOS-IP%EC%A3%BC%EC%86%8C_%ED%99%95%EC%9D%B8.html",
            "date": " • May 7, 2019"
        }
        
    
  
    
        ,"post186": {
            "title": "[Trouble centos] Oracle 설치시 Swap Space 부족 에러",
            "content": "Environment . CentOS 7 | Oracle 11g EE | . Trouble . CentOS에 Oracle 설치시 Swap Space 부족 에러가 발생하는 경우 | . This system does not meet the minimum requirements for swap space. Based on the amount of physical memory available on the system, Oracle Database 11g Express Edition requires 2048 MB of swap space. This system has 199 MB of swap space. Configure more swap space on the system and retry the installation. . Shooting . Swap Space를 늘려 준다. | . $ mkdir /swap $ dd if=/dev/zero of=/swap/swapfile bs=1024 count=2097152 $ cd /swap $ mkswap swapfile .",
            "url": "https://safenumz.github.io/blog/trouble/2019/05/03/CentOS%EC%97%90_Oracle_%EC%84%A4%EC%B9%98%EC%8B%9C_Swap_Space_%EB%B6%80%EC%A1%B1_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/05/03/CentOS%EC%97%90_Oracle_%EC%84%A4%EC%B9%98%EC%8B%9C_Swap_Space_%EB%B6%80%EC%A1%B1_%EC%97%90%EB%9F%AC.html",
            "date": " • May 3, 2019"
        }
        
    
  
    
        ,"post187": {
            "title": "[Java] 파일 입출력",
            "content": "파일 입출력 . Java IO (Input Output) - 자바 입출력 입출력 - Stream - java.io. 패키지 1. byte 스트림 - InputStream - FileInputStream - OuputStream - FileOutputStream + 필터 스트림 - DataOutputStream - DataInputStream - ObjectOutputStream - ObjectInputStream (*직렬화 필수) 2. char 스트림 - Reader - FileReader - Writer - FileWriter cf. RandomAccessFile : 입출력스트림 . 바이트 단위 출력 . package io.bytestream; /* =========================================================== OuputStream을 구현한 FileOutputStream을 이용한 예제 =========================================================== @ write( int ) ` 0-255 사이의 정수를 인자로 받아 해당하는 바이트를 출력스트림에 쓴다 ` 인자로 정수형을 받지만, 실제로는 부호없는 바이트로 전송 ( 자바에서 정수형은 32bit이지만 그 중 8bit만 사용 ) */ import java.io.FileOutputStream; import java.io.IOException; public class OutputTestFirst { public static void main( String args[] ) { try { // 바이트 단위로만 보내짐 FileOutputStream fos = new FileOutputStream(&quot;a.txt&quot;); for( int ch = &#39;A&#39;; ch &lt;=&#39;Z&#39;; ch++) { fos.write(ch); } /* fos.write(100); // 메모장은 숫자 문자 구분못함, 깨짐 fos.write(&#39;한&#39;); // 2byte짜리 유니코드, 출력 안됨 */ fos.close(); }catch( IOException ex ){ System.out.println(&quot;파일전송실패 :&quot; + ex.toString() ); } } } . 바이트 단위 입력 . package io.bytestream; /* ====================================================== InputStream을 구현한 FileInputStream을 이용한 예 ====================================================== @ int read() ` 한 바이트를 읽고 이를 0-255사이의 값을 리턴하지만4byte의 int 형으로 리턴 ` 리턴되는 값은 0-255 부호없는 바이트이지만 형변환 과정에서 -128 ~127의 부호 있는 바이트가 된다 ` 데이타를 읽어들이기 전까지 기다리므로 다른 부분을 실행할 수가 없다 -&gt; 쓰레드 적용 필요 ` 더이상 읽을 바이트가 없으면 -1 리턴 [ 참고 ] int i = b &gt;= 0 ? b : 256 + b; */ import java.io.FileInputStream; import java.io.IOException; public class InputTestFirst { public static void main(String[] args) { try { FileInputStream fos = new FileInputStream(&quot;a.txt&quot;); /* while(true) { int data = fos.read(); if (data == -1) break; System.out.print((char) data); } */ int data = 0; while ((data = fos.read()) != -1) { System.out.print((char) data); } fos.close(); } catch(IOException ex){ System.out.println(&quot;파일입력실패 :&quot; + ex.toString() ); } } } /* ====================================== 결과 출력 ====================================== ` 숫자만 나오는데, 우선 열개만 읽어서 숫자 자체로 출력하고 나머지는 읽어서 (char) 형변환 하면 문자로 출력될 것이다 */ . DataStream . package io.datastream; import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.DataOutputStream; import java.io.DataInputStream; import java.io.ObjectOutputStream; import io.objectstream.Person; public class DataStreamTest { public static void main( String [] args ) { UIForm ui = new UIForm(); ui.addToLayout(); ui.eventProc(); } } //-- // 화면을 관리하는 클래스 class UIForm extends JFrame { // 데이타를 저장할 변수 String name; int age; double height; char bloodType; // 화면 GUI에 관련한 변수 JTextField tfName, tfAge, tfHeight, tfBloodType; JButton bSave, bLoad; UIForm() { tfName = new JTextField(10); tfAge = new JTextField(10); tfHeight = new JTextField(10); tfBloodType = new JTextField(10); bSave = new JButton(&quot;저장하기&quot;, new ImageIcon(&quot;../img/save.gif&quot;)); bLoad = new JButton(&quot;읽어오기&quot;, new ImageIcon(&quot;../img/load.gif&quot;)); } // 화면 구성하는 메소 void addToLayout() { JPanel pCenter = new JPanel(); pCenter.setLayout( new GridLayout(5 ,2,10,10) ); pCenter.add( new JLabel(&quot;이름&quot;) ); pCenter.add( tfName ); pCenter.add( new JLabel(&quot;나이&quot;) ); pCenter.add( tfAge ); pCenter.add( new JLabel(&quot;신장&quot;) ); pCenter.add( tfHeight ); pCenter.add( new JLabel(&quot;혈액형&quot;) ); pCenter.add( tfBloodType ); pCenter.add( bSave ); pCenter.add( bLoad ); getContentPane().add(&quot;Center&quot;, pCenter); setSize( 400, 300 ); setVisible( true ); setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); } // 이벤트 처리하는 메소드 void eventProc() { BtnHandler bHdlr = new BtnHandler(); bSave.addActionListener(bHdlr); bLoad.addActionListener(bHdlr); } class BtnHandler implements ActionListener { public void actionPerformed( ActionEvent ev ){ Object evtBtn = ev.getSource(); // &quot;저장하기&quot; 버튼이 눌렸을 if( evtBtn == bSave ) { /* 1. 텍스트필드에서 입력값 얻어와서 변수에 저장 2. 파일출력스트림 생성 ( filter 포함 ) 3. 스트림에 출력 4. 스트림 닫기 5. 텍스트필드 초기화 */ name = tfName.getText(); age = Integer.parseInt(tfAge.getText()); height = Double.parseDouble(tfHeight.getText()); bloodType = (tfBloodType.getText()).charAt(0); /** * @@@@@@@@@@@@@@@@@@@@@@@@@ * */ try{ Person p = new Person(name, age, height, bloodType); ObjectOutputStream oos = new ObjectOutputStream( new FileOutputStream(&quot;person.ksm&quot;)); oos.writeObject(p); oos.close(); /* DataInputStream dos = new DataInputStream( new FileInputStream(&quot;data.txt&quot;)); name = dos.readUTF(); age = dos.readInt(); height = dos.readDouble(); bloodType = dos.readChar(); dos.close(); */ }catch( Exception ex ){ System.out.println(&quot;쓰기 실패&quot;); ex.printStackTrace(); } tfName.setText(&quot;&quot;); tfAge.setText(&quot;&quot;); tfHeight.setText(&quot;&quot;); tfBloodType.setText(&quot;&quot;); } // &quot;읽어오기&quot; 버튼이 눌렸을 때 else if ( evtBtn == bLoad ) { /** * @@@@@@@@@@@@@@@@@@@@@@@@@ * */ /* 1. 파일입력스트림 생성 (filter 포함 ) 2. 스트림에서 데이타 읽어서 변수에 저장 3. 텍스트필드에 출력 4. 스트림 닫기 */ try{ // FileOutputStream fos = new FileOutputStream(&quot;data.txt&quot;); DataOutputStream dos = new DataOutputStream( new FileOutputStream(&quot;data.txt&quot;)); dos.writeUTF(name); dos.writeInt(age); dos.writeDouble(height); dos.writeChar(bloodType); dos.close(); }catch( Exception ex ){ System.out.println(&quot;읽기 실패&quot;); } tfName.setText(name ); tfAge.setText(String.valueOf( age )); tfHeight.setText(String.valueOf( height )); tfBloodType.setText(String.valueOf( bloodType )); } } } } . Json 파일 입출력 . package io.json; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.FileReader; import java.io.FileWriter; class MyFrame extends JFrame { // 변수선언 JTextField tfName, tfTel, tfJumin, tfGender, tfAge, tfHome; JButton bSave, bOpen; // 객체 생성 public MyFrame(){ super(&quot;나의 첫 화면&quot;); tfName = new JTextField(15); tfTel = new JTextField(15); tfJumin = new JTextField(15); tfGender = new JTextField(15); tfAge = new JTextField(15); tfHome = new JTextField(15); bSave = new JButton(&quot;저장하기&quot;); bOpen = new JButton(&quot;읽어오기&quot;); } // 화면구성 및 보여주기 public void addLayout(){ JPanel p_center = new JPanel(); p_center.setLayout( new GridLayout( 6, 2 )); p_center.add( new JLabel(&quot;이름&quot;)); p_center.add( tfName ); p_center.add( new JLabel(&quot;전화&quot;)); p_center.add( tfTel ); p_center.add( new JLabel(&quot;주민&quot;)); p_center.add( tfJumin ); p_center.add( new JLabel(&quot;성별&quot;)); p_center.add( tfGender ); p_center.add( new JLabel(&quot;나이&quot;)); p_center.add( tfAge ); p_center.add( new JLabel(&quot;출신지&quot;)); p_center.add( tfHome ); JPanel p_south = new JPanel(); p_south.add(bSave); p_south.add(bOpen); add( p_center, BorderLayout.CENTER); add( p_south, BorderLayout.SOUTH); setSize(400, 300); setVisible(true); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } // 이벤트 연결 public void eventProc() { /* 이벤트 핸들러 객체 생성*/ BtnHandler bHandler = new BtnHandler(); /* 컴포넌트와 이벤트핸들러 연결 */ bSave.addActionListener(bHandler); bOpen.addActionListener(bHandler); } /* 이벤트 핸들러 선언 */ class BtnHandler implements ActionListener { public void actionPerformed( ActionEvent ev) { Object btn = ev.getSource(); //JButton btn = (JButton)ev.getSource(); if( btn == bSave ) { //JOptionPane.showMessageDialog(null, &quot;저장합니다.&quot;); saveData(); } else if ( btn == bOpen) { //JOptionPane.showMessageDialog(null, &quot;입력합니다.&quot;); readData(); } } } // end of class BtnHandler /** http://code.google.com/p/json-simple/ 왼쪽 메뉴 &gt; Download &gt; json_simple-1.1.jar를 직접 다운 Add External Jar 추가 */ void saveData() { JSONObject obj = new JSONObject(); obj.put(&quot;name&quot;, tfName.getText()); obj.put(&quot;tel&quot;, tfTel.getText()); obj.put(&quot;id&quot;, tfJumin.getText()); obj.put(&quot;gender&quot;, tfGender.getText()); obj.put(&quot;age&quot;, tfAge.getText()); obj.put(&quot;home&quot;, tfHome.getText()); System.out.println(obj); try { /* 파일명 : test.json */ FileWriter fw = new FileWriter(&quot;test.json&quot;); fw.write(obj.toJSONString()); fw.close(); } catch (Exception e) { e.printStackTrace(); } } void readData() { try { FileReader fr = new FileReader(&quot;test.json&quot;); JSONParser parser = new JSONParser(); JSONObject obj = (JSONObject) parser.parse(fr); tfName.setText((String) obj.get(&quot;name&quot;)); } catch (Exception e) { e.printStackTrace(); } } } // end of class MyFrame public class GuiTest { public static void main(String[] args) { MyFrame my = new MyFrame(); my.addLayout(); my.eventProc(); } } . 복습 . 1. DataInputStream 객체를 생성하는 방법으로 맞은 것은 ? (1) new DataInputStream(“data.txt”); (2) new DataInputStream(new File(“data.txt”)); (3) new DataInputStream(new FileReader(“data.txt”)); (4) new DataInputStream(new InputStream(“data.txt”)); (5) new DataInputStream(new FileInputStream(“data.txt”)); /* [정답] 5 */ 2. 다음 중 맞는 코드는 ? (1) OutputStream out = new FileInputStream(“data.txt”)); (2) OutputStream out = new DataOutputStream(new FileOutputStream(“data.txt”))); (3) OutputStream out = new FileOutputStream(“data.txt”, “rw”); (4) OutputStream out = new ObjectOutputStream(new FileOutputStream(new File(“data.txt”)))); /* [정답] 2, 4 1번 에러 2번 가능 3번 &quot;rw&quot; 없음 4번 가능 */ 3. 현재 작업 경로가c: work 인 경우 다음 프로그램을 실행한 출력 결과는 ? import java.io.*; class Test { public static void main(String a[] args) throws Exception { File f = new File(“data.txt”); System.out.println(f.getAbsolutePath()); } } (1) data.txt (2) work data.txt (3) c: work data.txt (4) c: work /* [정답] 3 */ 4. 자바에서 파일이나 디렉토리를 관리할 수 있는 클래스는 ? (1) File (2) Directory (3) FileWriter (4) FileChooser /* [정답] 1 */ .",
            "url": "https://safenumz.github.io/blog/java/2019/05/03/Java_%ED%8C%8C%EC%9D%BC_%EC%9E%85%EC%B6%9C%EB%A0%A5.html",
            "relUrl": "/java/2019/05/03/Java_%ED%8C%8C%EC%9D%BC_%EC%9E%85%EC%B6%9C%EB%A0%A5.html",
            "date": " • May 3, 2019"
        }
        
    
  
    
        ,"post188": {
            "title": "[Oracle] Windows Oracle 설치 및 설정",
            "content": "Environment . Windows 10 | Oracle 11.1.0 | . Oracle 설치 . Oracle 홈페이지에서 다운받은 후 GUI로 설치 가능 | . Oracle 기본 설정 . hr 계정 unlock 하기 . SQL&gt; conn sys/as sysdba SQL&gt; alter user hr account unlock; -- 사용자(hr)가 소유한 모든 테이블 보기 SQL&gt; select table_name from user_tables; -- employees 테이블의 컬럼 정보 보기 SQL&gt; desc employees; -- 사용자 보기 SQL&gt; show user; -- 전체 사용자 정보 보기(sys계정으로 접속해야 함) SQL&gt; select username, default_tablespace from dba_users; -- hr 계정으로 sysdba에 접속 SQL&gt; conn hr/as sysdba . scott 계정 생성 . SQL&gt; create user scott identified by tiger SQL&gt; default tablespace user SQL&gt; temporary tablespace temp; -- 사용자를 삭제하는 법 SQL&gt; drop user scott; -- scott 사용자에게 권한부여 SQL&gt; grant connect, resource to scott; -- scott 계정에 샘플데이터 생성법 -- scott 내 테이블 목록확인 SQL&gt; select * from tab; -- scott에 학습용 오브젝트 일괄 생성 SQL&gt; conn /as sysdba SQL&gt; @C: oraclexe app oracle product 11.2.0 server rdbms admin scott.sql; -- @-실행하라(뒷내용을[scott.sql]). system유저 상태에서 실행할것 -- 실행하면 scott유저로 자동접속이 되어있음(show user;-&gt;&quot;SCOTT&quot;) SQL&gt; select * from tab; -- 실행후 scott 유저로 접속 안될 시 비밀번호 변경하면 접속가능 SQL&gt; select username from all_users; SQL&gt; user scott identified by tiger; SQL&gt; desc tab; SQL&gt; select tname from tab; -- scott 정보 조회하기 -- emp 테이블에 있는 컬럼 정보 조회 SQL&gt; desc emp; -- 사원 정보 조회 SQL&gt; select * from emp; -- 사원명만 조회 SQL&gt; select ename from emp; . Oracle DB 외부접속 . C://app/product/11.1.0/db_1/network/ADMIN/ | . 방화벽 열어주기 . 제어판 &gt; Windows Defender 방화벽 &gt; 고급설정 &gt; 인바운드 규칙 &gt; 새규칙 | 프로그램 설정 &gt; 다른 프로그램 경로 &gt; 찾아보기 &gt; mysqld.exe 등록 | 예) C://Program Files/MySQL/MySQL Server 5.7/bin/mysqld.exe | . hosts 파일 수정 . 개인 DNS 서비스 역할을 하며, 특정 도메인/IP 차단 역할 및 개인 IP 등록 역할을 함 | Windows : C://windows/system32/drivers/etc/hosts | Linux : /etc/hosts | 예) 192.188.0.1 ora11g 구문을 추가하고 웹브라우저에 ora11g를 치면 자동으로 192.168.0.1로 연결됨 | . listener.ora . 클라이언트가 오라클 서버에 접속하기 위해서 서버 컴퓨터에 하는 설정 | C: app a product 11.2.0 dbhome_1 NETWORK ADMIN | . [oracle@ora11g admin]$ cat listener.ora # listener.ora Network Configuration File: /u01/app/oracle/product/11.2.0/dbhome_1/network/admin/listener.ora # Generated by Oracle configuration tools. LISTENER = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = ora11g)(PORT = 1521)) (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521)) ) ) ADR_BASE_LISTENER = /u01/app/oracle . tnsnames.ora . 클라이언트에서 오라클 서버로 접속할 때 필요한 프로토콜 및 포트번호, 서버주소, 인스턴스를 설정해 주는 파일 | . ORACLR_CONNECTION_DATA = (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521)) ) (CONNECT_DATA = (SID = ORCL) (PRESENTATION = RO) ) ) ORCL = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = ora11g)(PORT = 1521)) (CONNECT_DATA = (SERVICE_NAME = ORCL) ) ) . sqlnet.ora . 클라이언트가 오라클 서버로의 접속 방식을 설정하는 파일 (수정하지 않음) | 시도만 해봄 | . #SQLNET.AUTHENTICATION_SERVICES=(NTS) SQLNET.AUTHENTICATION_SERVICES=(NONE) sqlnet.CONNECT_TIMEOUT = 0 . services.msc . OracleOraHome92TNSListener가 시작되었는지 확인 | . $ tnsping &lt;외부ip주소&gt; $ ping ora11g . # tnslistener 상태확인 $ lsnrctl status # tnslistener 시작 $ lsnrctl start # tnslistener 중지 $ lsnrctl stop # tnslistener 재시작 $ lsnrctl reload . 테스트 . select * from emp; select * from dept; -- hr 계정 접속 conn hr/hr select * from employees; select * from departments; .",
            "url": "https://safenumz.github.io/blog/architecture/2019/05/03/Windows_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/architecture/2019/05/03/Windows_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "date": " • May 3, 2019"
        }
        
    
  
    
        ,"post189": {
            "title": "[Oracle] Ubuntu Oracle 설치 및 설정",
            "content": "Environment . Ubuntu 18.4 | Oracle XE 11.2.0 | . Oracle 설치 . Oracle 프로그램 다운로드 . 오라클 홈페이지 접속 | Database 11g Express Edition 다운로드 | Oracle Database Express Edition 11g Release 2 for Linux x64 | home//Downloads 폴더에 저장 | . root 계정 로그인 . sudo su root / 자신의 패스워드 | . $ sudo su root . 압축 파일 풀기 . 오라클 압축파일을 다운받은 경로(다운로드 폴더)로 이동 | unzip 명령어로 압축파일 풀어줌 | oracle-xe-11.2.0-1.0.x86_64.rpm | 압축 해제 후 생성된 Disk1 폴더로 이동 | . $ cd Downloads $ unzip oracle* # 압축 해제 후 생성된 Disk1 폴더로 이동 $ cd Disk1 . alien libaio1 unixodbc 설치 . $ apt-get -y install alien libaio1 unixodbc . rpm 파일을 deb 파일로 변환 . $ alien --scripts -d oracle* . 오라클 설치 . $ dpkg --install oracle*.deb . /etc/init.d/oracle-xe configure 설정 . 포트는 기본 포트로 유지, 건드리지 않고 엔터만 치면 됨 | 비밀번호는 신규 설정 | . 오라클 실행 확인 . $ systemctl start oracle-xe $ systemctl status oracle-xe . 환경변수 등록 . . /u01/app/oracle/product/11.2.0/xe/bin/oracle_env.sh 수정 | . $ . /u01/app/oracle/product/11.2.0/xe/bin/oracle_env.sh # vim 에디터 설치, 다른 에디터를 쓰고 있다면 설치하지 않아도 된다. $ sudo apt-get install vim # vim 에디터로 bash.bashrc 파일을 열어 준다. $ vim bash.bashrc $ source bash.bashrc . bash.bashrc 파일 하단에 아래 설정을 넣어준다. | . . /u01/app/oracle/product/11.2.0/xe/bin/oracle_env.sh . 데이터베이스 저장 폴더 생성 . $ mkdir /oradata/ $ chmod 777 /oradata/ . scott 계정 및 hr 계정 생성 . $ sqlplus system/&lt;system계정 비밀번호&gt; # 계정 생성 SQL&gt; CREATE USER scott IDENTIFIED BY tiger; # 자원과 연결 권한 부여 SQL&gt; GRANT resource, connect TO scott # 테이블 저장 공간 기본값으로 설정 SQL&gt; ALTER USER scott DEFAULT tablespace USERS; SQL&gt; ALTER USER scott temporay tablespace TEMP; . 연습용 데이터셋 넣기 . https://github.com/mv/mvdba/tree/master/demo | demobld.sql 파일을 다운받고, | 오라클이 설치된 경로 /u01/app/oracle/product/11.2.0/xe/sqlplus/admin 에 demobld.sql 파일을 넣어준다. | . # scott계정 연결 확인 SQL&gt; conn scott/tiger # demobld.sql 파일이 있는 경로, 스크립트 실행 SQL&gt; @/u01/app/oracle/product/11.2.0/xe/sqlplus/admin/demobld.sql # 연습용 데이터셋 확인 SQL&gt; SELECT * FROM emp; . 위 방식으로 실행했는데도 불구하고 데이터 테이블만 생성되고 데이터가 비어서 나올경우 데이터를 수작업으로 집어넣는다. | . INSERT INTO EMP VALUES (7369,&#39;SMITH&#39;,&#39;CLERK&#39;,7902,to_date(&#39;17-12-1980&#39;,&#39;dd-mm-yyyy&#39;),800,NULL,20); INSERT INTO EMP VALUES (7499,&#39;ALLEN&#39;,&#39;SALESMAN&#39;,7698,to_date(&#39;20-2-1981&#39;,&#39;dd-mm-yyyy&#39;),1600,300,30); INSERT INTO EMP VALUES (7521,&#39;WARD&#39;,&#39;SALESMAN&#39;,7698,to_date(&#39;22-2-1981&#39;,&#39;dd-mm-yyyy&#39;),1250,500,30); INSERT INTO EMP VALUES (7566,&#39;JONES&#39;,&#39;MANAGER&#39;,7839,to_date(&#39;2-4-1981&#39;,&#39;dd-mm-yyyy&#39;),2975,NULL,20); INSERT INTO EMP VALUES (7654,&#39;MARTIN&#39;,&#39;SALESMAN&#39;,7698,to_date(&#39;28-9-1981&#39;,&#39;dd-mm-yyyy&#39;),1250,1400,30); INSERT INTO EMP VALUES (7698,&#39;BLAKE&#39;,&#39;MANAGER&#39;,7839,to_date(&#39;1-5-1981&#39;,&#39;dd-mm-yyyy&#39;),2850,NULL,30); INSERT INTO EMP VALUES (7782,&#39;CLARK&#39;,&#39;MANAGER&#39;,7839,to_date(&#39;9-6-1981&#39;,&#39;dd-mm-yyyy&#39;),2450,NULL,10); INSERT INTO EMP VALUES (7788,&#39;SCOTT&#39;,&#39;ANALYST&#39;,7566,to_date(&#39;13-7-1987&#39;,&#39;dd-mm-yyyy&#39;),3000,NULL,20); INSERT INTO EMP VALUES (7839,&#39;KING&#39;,&#39;PRESIDENT&#39;,NULL,to_date(&#39;17-11-1981&#39;,&#39;dd-mm-yyyy&#39;),5000,NULL,10); INSERT INTO EMP VALUES (7844,&#39;TURNER&#39;,&#39;SALESMAN&#39;,7698,to_date(&#39;8-9-1981&#39;,&#39;dd-mm-yyyy&#39;),1500,0,30); INSERT INTO EMP VALUES (7876,&#39;ADAMS&#39;,&#39;CLERK&#39;,7788,to_date(&#39;13-7-1987&#39;,&#39;dd-mm-yyyy&#39;),1100,NULL,20); INSERT INTO EMP VALUES (7900,&#39;JAMES&#39;,&#39;CLERK&#39;,7698,to_date(&#39;3-12-1981&#39;,&#39;dd-mm-yyyy&#39;),950,NULL,30); INSERT INTO EMP VALUES (7902,&#39;FORD&#39;,&#39;ANALYST&#39;,7566,to_date(&#39;3-12-1981&#39;,&#39;dd-mm-yyyy&#39;),3000,NULL,20); INSERT INTO EMP VALUES (7934,&#39;MILLER&#39;,&#39;CLERK&#39;,7782,to_date(&#39;23-1-1982&#39;,&#39;dd-mm-yyyy&#39;),1300,NULL,10); INSERT INTO DEPT VALUES (10,&#39;ACCOUNTING&#39;,&#39;NEW YORK&#39;); INSERT INTO DEPT VALUES (20,&#39;RESEARCH&#39;,&#39;DALLAS&#39;); INSERT INTO DEPT VALUES (30,&#39;SALES&#39;,&#39;CHICAGO&#39;); INSERT INTO DEPT VALUES (40,&#39;OPERATIONS&#39;,&#39;BOSTON&#39;); INSERT INTO SALGRADE VALUES (1,700,1200); INSERT INTO SALGRADE VALUES (2,1201,1400); INSERT INTO SALGRADE VALUES (3,1401,2000); INSERT INTO SALGRADE VALUES (4,2001,3000); INSERT INTO SALGRADE VALUES (5,3001,9999); . 계정 삭제 . # 계정 삭제, system 계정 로그인 후 SQL&gt; DROP USER scott CASCADE . 원격 접속 설정 . /u01/app/oracle/product/11.2.0/xe/network/admin | 위 경로에 있는 listener.ora 파일과 tnsnames.ora 파일을 수정한다. | . listener.ora . 부분을 자신의 내부 IP로 변경한다. | . # listener.ora Network Configuration File: 2 3 SID_LIST_LISTENER = 4 (SID_LIST = 5 (SID_DESC = 6 (SID_NAME = PLSExtProc) 7 (ORACLE_HOME = /u01/app/oracle/product/11.2.0/xe) 8 (PROGRAM = extproc) 9 ) 10 ) 11 12 LISTENER = 13 (DESCRIPTION_LIST = 14 (DESCRIPTION = 15 (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC_FOR_XE)) 16 (ADDRESS = (PROTOCOL = TCP)(HOST = &lt;내부 IP&gt;)(PORT = 1521)) 17 ) 18 ) 19 20 DEFAULT_SERVICE_LISTENER = (XE) . tnsnames.ora . 부분을 자신의 내부 IP로 변경한다. | SID와 SERVICE_NAME이 XE인지 확인한다.(변경 가능) | (SERVER = DEDICATED) 부분은 삭제 | . 1 # tnsnames.ora Network Configuration File: 2 3 XE = 4 (DESCRIPTION = 5 (ADDRESS = (PROTOCOL = TCP)(HOST = &lt;내부 IP&gt;)(PORT = 1521)) 6 (CONNECT_DATA = 7 (SERVICE_NAME = XE) 8 ) 9 ) 10 11 EXTPROC_CONNECTION_DATA = 12 (DESCRIPTION = 13 (ADDRESS_LIST = 14 (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC_FOR_XE)) 15 ) 16 (CONNECT_DATA = 17 (SID = XE) 18 (PRESENTATION = RO) 19 ) 20 ) . Oracle 중지 후 재실행 . $ systemctl stop oracle-xe $ systemctl start oracle-xe $ systemctl status oracle-xe .",
            "url": "https://safenumz.github.io/blog/architecture/2019/05/03/Ubuntu_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/architecture/2019/05/03/Ubuntu_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "date": " • May 3, 2019"
        }
        
    
  
    
        ,"post190": {
            "title": "[Oracle] CentOS Oracle 설치 및 설정",
            "content": "Environment . CentOS 7 | Oracle 11g | . Oracle 설치 . 필요한 패키치 설치 . $ yum install wget unzip $ yum install libaio bc flex . Oralce 11g 다운 및 설치 . https://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/xe-prior-releases-5172097.html . # Oracle 11g 다운 $ wget https://download.oracle.com/otn/linux/oracle11g/xe/oracle-xe-11.2.0-1.0.x86_64.rpm.zip?AuthParam=1562773337_a5433eea07c2e368a6e711a52006727f # 압축 해제 $ upzip -q oracle-xe-11.2.0-1.0.x86_64.rpm.zip # Disk1 폴더로 이동 $ cd Disk1 # oracle 설치 $ rpm -ivh oracle-xe-11.2.0-1.0.x86_64.rpm # makefile 생성 $ cd / . &amp;&amp; cd /etc/init.d/oracle-xe configure $ cd /u01/app/oracle/product/11.2.0/xe/bin/ # sqlplus 명령어를 통해 dbms 접속가능하게 함 $ . ./oracle_env.sh # oracle db 접속 $ sqlplus . Oracle 계정 생성 및 권한 부여 . $ sqlplus system/&lt;system계정 비밀번호&gt; # 계정 생성 SQL&gt; CREATE USER scott IDENTIFIED BY tiger; # 자원과 연결 권한 부여 SQL&gt; GRANT resource, connect TO scott; # 테이블 저장 공간 기본값으로 설정 SQL&gt; ALTER USER scott DEFAULT tablespace USERS; SQL&gt; ALTER USER scott temporary tablespace TEMP; .",
            "url": "https://safenumz.github.io/blog/architecture/2019/05/03/CentOS_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/architecture/2019/05/03/CentOS_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "date": " • May 3, 2019"
        }
        
    
  
    
        ,"post191": {
            "title": "[Java] GUI (2)",
            "content": "1. 이벤트 핸들러 만들기 (이벤트 구현 클래스) (1) 이벤트 Listener(interface) 구현 ** 자주 사용하는 이벤트 - ActionEvent 1. ActionListener 구현 클래스 (1) actionPerformed() 오버라이딩 2. 객체생성 3 . interface ABListener { void a(); void b(); void c(); } class ABAdapter implements AAListener { public void a() { } public void b() { } public void c() { } } class MyHdlr extends ABAdapter { public void a() { } } class MyHdler implements ABListener { // a(), b(), c() 전부 오버라이딩 public void a() { } public void b() { } public void c() { } } . 2 3 2 2 / + 3 * + 2 + (3 + 2 / 2) * 3 2 3 2 2 / + 3 * + . (1) 숫자일 때 출력 (2) 연산자일 때 푸시 - 스택이 비어있지 않을 때 스택의 peek인 우선순위가 최근 들어온 연산자보다 같거나 크면, 우선순위가 변경될때까지 스택에서 꺼내 출력. (3) &quot;(&quot; 푸시 (4) &quot;)&quot; -&gt; &quot;(&quot; 나올 때까지 스택에서 꺼내 출력. . import java.awt.*; import java.swing.*; import java.awt.event.*; public class CalendarEx { JFrame f; JComboBox cbY, cbM, cbD; JButton b; JLabel; int[] lastDays = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; CalendarEx() { f = new JFrame(&quot;날짜&quot;); Integer[] msu = new Integer[12]; for (int i = 0; i &lt; msu.length; i++) { msu[i] = i + 1; } Integer[] ysu = new Integer[11]; for (int) } void setDate() { System.out.println(&quot;버튼이벤트&quot;); Calendar c = Calendar.getInstance(); int date = c.get(Calendar.DAY_OF_WEEK); Calendar c = Calendar.getInstance(); int date = c.get(Calendar.DAY_OF_WEEK); } Integer[] ysu = new Integer[11]; for (int i = 0, year = 2015; i &lt; ysu.length; i++, year++) { ysu[i] = year; } Integer[] ysu = new Integer[11]; for (int i = 0; year = 2015; i &lt; ysu.length; i++, year++) { ysu[i] = year; } Integer[] ysu = new Integer[11]; for (int i = 0; year = 2015; i &lt; ysu.length; i++, year++) { ysu[i] = year; } cbY = new JComboBox(ysu); cbM = new JComboBox(msu); cbD = new JComboBox(); b = new JButton(&quot;▶︎&quot;); la = new JLabel(&quot;요일&quot;); void addLayout() { f.setLayout(new FlowLayout()); f.add(cbY); f.add(new JLabel(&quot;년&quot;)); f.add(cbM); f.add(new JLabel(&quot;월&quot;)); f.add(cbD); f.add(new JLabel(&quot;일&quot;)); f.add(b); f.add(la); f.setSize(500, 100); f.setVisible(true); } void eventProc() { CbHdlr cb = new CbHdlr(); cbY.addActionListener(cb); cbM.addActionListener(cb); b.addActionListener(cb); } class CbHdlr implements ActionListener { public void actionPerformed(ActionEvet e) } } void eventProc() { for (int i = 0; i &lt; la.length; i++) { for (int j = 0; j &lt; la[i].length; j++) { la[i][j].addActionListener(this); } } } vodi eventProc() { la.addActionListener(this); la.addActionListener(this); la.addActionListener(this); la.addActionListener(this); la.addActionListener(this); la.addActionListener(this); la.addActionListener(this); } public void actionPerformed(ActionEvent e) { JOptionPane.showMessageDialog(null, &quot;이벤트확인&quot;); JOptionPane.showMessageDialog(null, &quot;이벤트확인&quot;); JOptionPane.showMessageDialog(null, &quot;이벤트확인&quot;); JOptionPane.showMessageDialog(null, &quot;이벤트확인&quot;); JOptionPane.showMessageDialog(null, &quot;이벤트확인&quot;); JOptionPane.showMessageDialog(null, &quot;이벤트확인&quot;); JOptionPane.showMessageDialog(null, &quot;이벤트확인&quot;); . double calculatePostfix(String postfix) { double result = 0.; double num_a = 0.; double num_b = 0.; String token = &quot;&quot;; Stack&lt;Double&gt; stack = new Stack&lt;Double&gt;(); StringTokenizer stn = new StringTokenizer(postfix, &quot; &quot;); while (stn.hasMoreTokens()) { token = stn.nextToken(); if (isNumber(token)) { stack.push(Double.parseDouble(token)); } else { num_a = stack.pop(); num_b = stack.pop(); if (token.equals(&quot;+&quot;)) { stack.push(num_b + num_a); } else if (token.equals(&quot;-&quot;)) { stack.push(num_b - num_a); } else if (token.equals(&quot;*&quot;)) { stack.push(num_b * num_a); } else if (token.equal(&quot;/&quot;)) { stack.push(num_b / num_a); } } } result = stack.pop(); result return; } double calculatePostfix(String postfix) { double result = 0.; double num_a = 0.; double num_b = 0.; String token = &quot;&quot;; Stack&lt;Double&gt; stack = new Stack&lt;Double&gt;(); StringTokenizer stn = new StringTokenizer(postfix, &quot; &quot;) } void addLayout() { JPanel p_center = new JPanel(); p_center.setLayout(new GridLayout(6, 3)); for (int i = 0; i &lt; button.length; i++) { p_center.add(button[i]); } f.setLayout(new BorderLayout()); f.add(p_center, BorderLayout.CENTER); f.add(output, BorderLayout.NORTH); output.setFont(new Font(&quot;san-serif&quot;, Font.PLAIN, 20)); f.setSize(300, 400); f.setVisible(true); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } void eventProc() { BtnHdlr hb } . 버거세트 3개 * 3개 = 9개 디저트 3 * 3 드링크 3 * 3 4 * 3 .",
            "url": "https://safenumz.github.io/blog/java/2019/05/02/Java_GUI_(2).html",
            "relUrl": "/java/2019/05/02/Java_GUI_(2).html",
            "date": " • May 2, 2019"
        }
        
    
  
    
        ,"post192": {
            "title": "[Trouble mysql] COM.MYSQL.JDBC.DRIVER 에러",
            "content": "Environment . MacOS Mojave 10.14.5 | . Trouble . MySQL의 COM.MYSQL.JDBC.DRIVER 에러 | . LOADING CLASS `COM.MYSQL.JDBC.DRIVER’. THIS IS DEPRECATED. THE NEW DRIVER CLASS IS `COM.MYSQL.CJ.JDBC.DRIVER’. THE DRIVER IS AUTOMATICALLY REGISTERED VIA THE SPI AND MANUAL LOADING OF THE DRIVER CLASS IS GENERALLY UNNECESSARY. . Shooting . driver 이름 변경 필요 | 변경 전: com.mysql.jdbc.Driver | 변경 후: com.mysql.cj.jdbc.Driver | .",
            "url": "https://safenumz.github.io/blog/trouble/2019/05/01/MySQL%EC%9D%98_COM_MYSQL_JDBC_DRIVER_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/05/01/MySQL%EC%9D%98_COM_MYSQL_JDBC_DRIVER_%EC%97%90%EB%9F%AC.html",
            "date": " • May 1, 2019"
        }
        
    
  
    
        ,"post193": {
            "title": "[자료구조] Java Stack 계산기 알고리즘",
            "content": "Java Stack 계산기 알고리즘 . package a_sample; /** * http://mmlab.uos.ac.kr/Capstone/실습자료/계산기구현.pdf * 위 자료의 pseudo code 참고하여 계산기 구현함 */ import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.util.*; public class StackCalculator { JFrame f; JButton[] button; JTextArea output; String formula; double raw_result; StackCalculator() { f = new JFrame(&quot;스택 계산기&quot;); String[] buttons = {&quot;(&quot;, &quot;)&quot;, &quot;AC&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;+&quot;, &quot;0&quot;, &quot;=&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;}; button = new JButton[buttons.length]; for (int i = 0; i &lt; button.length; i++) { button[i] = new JButton(buttons[i]); } output = new JTextArea(5, 15); formula = &quot;&quot;; raw_result = 0.; } void addLayout() { JPanel p_center = new JPanel(); p_center.setLayout(new GridLayout(6, 3)); for (int i = 0; i &lt; button.length; i++) { p_center.add(button[i]); } f.setLayout(new BorderLayout()); f.add(p_center, BorderLayout.CENTER); f.add(output, BorderLayout.NORTH); output.setFont(new Font(&quot;san-serif&quot;, Font.PLAIN, 20)); f.setSize(300, 400); f.setVisible(true); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } void eventProc() { BtnHdlr bh = new BtnHdlr(); for (int i = 0; i &lt; button.length; i++) { button[i].addActionListener(bh); } } class BtnHdlr implements ActionListener { public void actionPerformed(ActionEvent e) { Object evt = e.getActionCommand(); if (evt.toString().equals(&quot;=&quot;)) { System.out.println(formula); String postfix = convertPostfix(formula); raw_result = calculatePostfix(postfix); String result = String.valueOf((double) Math.round(raw_result * 10000) / 10000); System.out.println(result); output.setText(result); formula = &quot;&quot;; formula += result; } else if (evt.toString().equals(&quot;AC&quot;)){ output.setText(null); formula = &quot;&quot;; } else if (isNumber((String) evt)) { formula += evt.toString(); output.setText(formula); } else { formula += &quot; &quot; + evt.toString() + &quot; &quot;; output.setText(formula); } } } // String 문자열이 숫자로 변환가능한지 확인하는 함수 // 숫자면 true, 문자면 false 반환 boolean isNumber(String evt) { try { Double.parseDouble(evt); return true; } catch (NumberFormatException e) { return false; } } // 연산자의 우선순위를 확인하는 함수 int checkOrder(Object a) { int order = -1; if (a.equals(&quot;+&quot;) | a.equals(&quot;-&quot;)) { order = 0; } else if (a.equals(&quot;*&quot;) | a.equals(&quot;/&quot;)) { order = 1; } return order; } // 중위표기법을 후위표기법으로 변환하는 함수 // 후위표기법 계산식을 String으로 반환 String convertPostfix(String formula) { String temp = &quot;&quot;; String token = &quot;&quot;; String postfix = &quot;&quot;; Stack&lt;String&gt; symbol_stack = new Stack&lt;String&gt;(); StringTokenizer stn = new StringTokenizer(formula, &quot; &quot;); while (stn.hasMoreTokens()) { token = stn.nextToken(); if (isNumber(token)) { postfix += token + &quot; &quot;; } else if (token.equals(&quot;(&quot;)) { symbol_stack.push(token); } else if (token.equals(&quot;)&quot;)) { temp = symbol_stack.pop(); while (!temp.equals(&quot;(&quot;)) { postfix += temp + &quot; &quot;; temp = symbol_stack.pop(); } } else { while (!symbol_stack.empty() &amp;&amp; checkOrder(symbol_stack.peek()) &gt;= checkOrder(token)) { temp = symbol_stack.pop(); postfix += temp + &quot; &quot;; } symbol_stack.push(token); } } while (!symbol_stack.empty()) { postfix += symbol_stack.pop() + &quot; &quot;; } return postfix; } // 후위표기법으로 변환된 String 계산식을 받아 사칙연산 수행 // 계산결과를 double형으로 반환 double calculatePostfix(String postfix) { double result = 0.; double num_a = 0.; double num_b = 0.; String token = &quot;&quot;; Stack&lt;Double&gt; stack = new Stack&lt;Double&gt;(); StringTokenizer stn = new StringTokenizer(postfix, &quot; &quot;); while (stn.hasMoreTokens()) { token = stn.nextToken(); if (isNumber(token)) { stack.push(Double.parseDouble(token)); } else { num_a = stack.pop(); num_b = stack.pop(); if (token.equals(&quot;+&quot;)) { stack.push(num_b + num_a); } else if (token.equals(&quot;-&quot;)) { stack.push(num_b - num_a); } else if (token.equals(&quot;*&quot;)) { stack.push(num_b * num_a); } else if (token.equals(&quot;/&quot;)) { stack.push(num_b / num_a); } } } result = stack.pop(); return result; } public static void main(String[] args) { StackCalculator cal = new StackCalculator(); cal.addLayout(); cal.eventProc(); } } .",
            "url": "https://safenumz.github.io/blog/algorithm/2019/05/01/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Java_%EC%8A%A4%ED%85%8D%EA%B3%84%EC%82%B0%EA%B8%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "relUrl": "/algorithm/2019/05/01/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Java_%EC%8A%A4%ED%85%8D%EA%B3%84%EC%82%B0%EA%B8%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "date": " • May 1, 2019"
        }
        
    
  
    
        ,"post194": {
            "title": "[Java] GUI (1)",
            "content": "이벤트 절차 . 1. 이벤트 핸들러 만들기 (이벤트 구현 클래스) . (1) 이벤트 Listener(interface) 구현 . (2) 이벤트 메소드 overriding . 2. 핸들러 객체 생성 . 3. 이벤트가 발생 컴포넌트와 핸들러 객체 연결 . ** 자주 사용하는 이벤트 - ActionEvent . 1. ActionListener 구현 . (1) actionPerformed() 오버라이딩 . 2. 객체 생성 . 3. 연결 . ** ActionEvent . 1. 버튼 클릭 . 2. 메뉴 클릭 . 3. 텍스트필드에서 엔터쳤을 때 . 4. 리스트에서 더블클릭했을 때 . 5. 선택버튼을 선택했을 때 . public class InfoTestA { JFrame f; JButton b .",
            "url": "https://safenumz.github.io/blog/java/2019/04/30/Java_GUI_(1).html",
            "relUrl": "/java/2019/04/30/Java_GUI_(1).html",
            "date": " • Apr 30, 2019"
        }
        
    
  
    
        ,"post195": {
            "title": "[알고리즘] Java 계산기 알고리즘",
            "content": "Stack 자료구조를 사용하지 않은 계산기 알고리즘 . package a_sample; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.util.*; public class Calculator { JFrame f; JButton bplus, bequal, bminus, bmul, bdiv; JButton[] numbtn; JTextArea output; ArrayList&lt;String&gt; symbol_list; ArrayList&lt;Double&gt; num_list; String numtemp; Calculator() { f = new JFrame(&quot;유치원 계산기&quot;); String[] num = {&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;}; numbtn = new JButton[10]; for (int i = 0; i &lt; numbtn.length; i++) { numbtn[i] = new JButton(num[i]); } bplus = new JButton(&quot;+&quot;); bequal = new JButton(&quot;=&quot;); bminus = new JButton(&quot;-&quot;); bmul = new JButton(&quot;*&quot;); bdiv = new JButton(&quot;/&quot;); output = new JTextArea(5, 15); symbol_list = new ArrayList&lt;String&gt;(); num_list = new ArrayList&lt;Double&gt;(); numtemp = &quot;&quot;; } void addLayout() { JPanel p_center = new JPanel(); p_center.setLayout(new GridLayout(5, 3)); for (int i = 1; i &lt; numbtn.length; i++) { p_center.add(numbtn[i]); } p_center.add(bplus); p_center.add(numbtn[0]); p_center.add(bequal); p_center.add(bminus); p_center.add(bmul); p_center.add(bdiv); f.setLayout(new BorderLayout()); f.add(p_center, BorderLayout.CENTER); f.add(output, BorderLayout.NORTH); output.setFont(new Font(&quot;san-serif&quot;, Font.PLAIN, 20)); f.setSize(350, 400); f.setVisible(true); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } void eventProc() { BtnHdlr bh = new BtnHdlr(); // 버튼과 이벤트 핸들러 연결 for (int i = 0; i &lt; numbtn.length; i++) { numbtn[i].addActionListener(bh); } bplus.addActionListener(bh); bequal.addActionListener(bh); bminus.addActionListener(bh); bmul.addActionListener(bh); bdiv.addActionListener(bh); } class BtnHdlr implements ActionListener { public void actionPerformed(ActionEvent e) { Object evt = e.getActionCommand(); // 사용자가 &quot;=&quot; 기호를 눌렀을 때 if (evt.toString().equals(&quot;=&quot;)) { num_list.add(Double.parseDouble(numtemp)); // 사칙연산을 위해 calculateFormula 함수를 실행한다. double result = calculateFormula(num_list, symbol_list); // 계산이 끝나면 결과를 리턴하고 계산기 초기화 output.setText(Double.toString(result)); num_list.clear(); symbol_list.clear(); numtemp = &quot;&quot;; // 사용자가 숫자를 눌렀을 때 } else if (isInteger((String) evt)) { numtemp = numtemp + evt.toString(); output.setText(numtemp); // 사용자가 문자를 눌렀을 때 } else { // 숫자는 num_list ArrayList에 누적시켜 저장한다. num_list.add(Double.parseDouble(numtemp)); numtemp = &quot;&quot;; // 부호는 symbol_list ArrayList에 누적시켜 저장한다. symbol_list.add((String) evt); output.setText(null); } } } /** Integer, String 판별하는 함수 String을 인자로 받아 Integer이면 true, String이면 false 리턴 */ boolean isInteger(String evt) { try { Integer.parseInt(evt); return true; } catch (NumberFormatException e) { return false; } } /** 사칙연산을 수행하는 함수 숫자와 관련된 num_list, 부호와 관련된 symbol_list를 인자로 받아 사칙연산을 수행하여 그 결과를 Double형으로 리턴한다. */ double calculateFormula(ArrayList&lt;Double&gt; num_list, ArrayList&lt;String&gt; symbol_list) { // 곱셈, 나눗셈 계산 POINT: while (true) { for (int i = 0; i &lt; symbol_list.size(); i++) { // 곱셈 if (symbol_list.get(i).equals(&quot;*&quot;)) { num_list.set(i, num_list.get(i) * num_list.get(i + 1)); num_list.remove(i + 1); symbol_list.remove(i); continue POINT; // 나눗셈 } else if (symbol_list.get(i).equals(&quot;/&quot;)) { num_list.set(i, num_list.get(i) / num_list.get(i+1)); num_list.remove(i + 1); symbol_list.remove(i); continue POINT; } } break; } // 덧셈, 뺄셈 계산 double result = num_list.get(0); for (int i = 0; i &lt; symbol_list.size(); i++) { // 덧셈 if (symbol_list.get(i).equals(&quot;+&quot;)) { result += num_list.get(i + 1); // 뺄셈 } else if (symbol_list.get(i).equals(&quot;-&quot;)) { result -= num_list.get(i + 1); } } return result; } public static void main(String[] args) { Calculator cal = new Calculator(); cal.addLayout(); cal.eventProc(); } } .",
            "url": "https://safenumz.github.io/blog/algorithm/2019/04/30/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EA%B3%84%EC%82%B0%EA%B8%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "relUrl": "/algorithm/2019/04/30/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EA%B3%84%EC%82%B0%EA%B8%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "date": " • Apr 30, 2019"
        }
        
    
  
    
        ,"post196": {
            "title": "[Java] Collection",
            "content": "정리 . 1. 상속 . 설계자 . 부모클래스 설계 : 공통부분 | 자식클래스 설계 : 고유부분 | . 개발자 . 부모클래스의 멤버 그냥 사용 | 부모클래스의 없는 요소는 추가해서 사용 | 부모클래스의 멤버있지만 수정필요 경우 - overriding | . 2. 다형성 . [조건] . 상속관계 + 오버라이딩 | 부모변수에 자식 객체가 생성 | . 3. abstract(추상) . 미완성 | 자식클래스가 오버라이딩으로 미완성을 완성시켜줘야 함 | . 4. interface : 표준화 . 5. 변경불가 - final . 6. 공유 - static . 클래스명 접근 | . 유용한 클래스 . 기본 함수 형변환 . package z_useful; import java.util.Objects; public class EqualsEx { public static void main(String[] args) { Student a = new Student(&quot;012345&quot;, &quot;홍길동&quot;); Student b = new Student(&quot;012345&quot;, &quot;홍길동&quot;); if (a.equals(b)) System.out.println(&quot;동일인&quot;); else System.out.println(b); System.out.println(a.toString()); System.out.println(b); } } class Student extends Object { String hakbun, name; Student() {} Student(String hakbun, String name) { this.hakbun = hakbun; this.name = name; } public boolean equals(Object obj) { // 형변환 Student other = (Student) obj; if (hakbun.equals(other.hakbun)) return true; else return false; } public String toString() { return &quot;[&quot; + hakbun + &quot;]&quot; + name; } } . 얉은 복사 vs 깊은 복사 . package z_useful; import java.util.Arrays; public class CloneEx { public static void main(String[] args) { String[] array = {&quot;안녕&quot;, &quot;헬로우&quot;, &quot;올라&quot;, &quot;곤니찌와&quot;}; // String[] copy = array; // 얉은 복사 String[] copy = array.clone(); // 깊은 복사, 실질적인 메모리까지 복사 System.out.println(Arrays.toString(array)); System.out.println(Arrays.toString(copy)); copy[1] = &quot;Hello&quot;; copy[2] = &quot;Hola&quot;; System.out.println(Arrays.toString(array)); System.out.println(Arrays.toString(copy)); } } . enum . package z_useful; // enum : 상수들의 모음, 클래스와 유사 사용 enum Size { SMALL, MEDIUM, LARGE } public class EnumTest { public static void main(String[] args) { Size size = Size.SMALL; // 추후에 화면에서 넘어오는 값 switch (size) { case SMALL : System.out.println(&quot;작은거&quot;); break; case MEDIUM : System.out.println(&quot;중간거&quot;); break; case LARGE : System.out.println(&quot;큰거&quot;); break; } } } . package z_useful; public enum Names { GILDONG(&quot;개발자&quot;) { String salary() { return &quot;추가급여&quot;; } }, GILJA(&quot;디자이너&quot;), GILJUN(&quot;팀장&quot;); String job; Names(String job) { this.job = job; } String salary() { return &quot;고정급여&quot;; } } . SimpleDataFormat . package k_format; import java.text.SimpleDateFormat; import java.util.Date; public class DateFormatEx { public static void main(String[] args) { Date today = new Date(); System.out.println(today); SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy년 MM월 dd일&quot; + &quot; E요일 hh시 mm분 ss초&quot;); System.out.println(sdf.format(today)); } } . DecimalFormat . package k_format; import java.text.DecimalFormat; public class DecimalFormatEx { public static void main(String[] args) { double[] data = {1234567, 555555555.123, 99.9999999, 1234.50}; // 자리수 벗어나면 반올림되기 때문에 넉넉하게 표시해야 함 DecimalFormat df = new DecimalFormat(&quot;###,###,###.###########&quot;); for (int i = 0; i &lt; data.length; i++) { System.out.println(df.format(data[i])); } } } . MessageFormat . package k_format; import java.text.MessageFormat; public class MessageFormatEx { public static void main(String[] args) { String message = &quot;친애하는 &lt;{0}&gt; {1}님, 본문생략.....감사합니다.&quot;; String[][] data = { {&quot;홍길동&quot;, &quot;부장&quot;}, {&quot;홍길자&quot;, &quot;과장&quot;}, {&quot;홍길숙&quot;, &quot;대리&quot;}, {&quot;홍길순&quot;, &quot;사원&quot;}, }; for (int i = 0; i &lt; data.length; i++) { System.out.println(MessageFormat.format(message, data[i])); } } } . ChoiceFormat . package k_format; import java.text.ChoiceFormat; public class ChoiceFormatEx { public static void main(String[] args) { int[] scores = {88, 79, 55, 62, 78, 100}; double[] limits = {60, 70, 80, 90}; String[] grades = {&quot;D&quot;, &quot;C&quot;, &quot;B&quot;, &quot;A&quot;}; ChoiceFormat cf = new ChoiceFormat(limits, grades); for (int k : scores) { System.out.println(k + &quot;:&quot; + cf.format(k)); } } } /* 88:B 79:C 55:D 62:D 78:C 100:A */ . MessageFormat . package k_format; import java.text.MessageFormat; public class MessageFormatEx { public static void main(String[] args) { String message = &quot;친애하는 &lt;{0}&gt; {1}님, 본문생략.....감사합니다.&quot;; String[][] data = { {&quot;홍길동&quot;, &quot;부장&quot;}, {&quot;홍길자&quot;, &quot;과장&quot;}, {&quot;홍길숙&quot;, &quot;대리&quot;}, {&quot;홍길순&quot;, &quot;사원&quot;}, }; for (int i = 0; i &lt; data.length; i++) { System.out.println(MessageFormat.format(message, data[i])); } } } . Collection . 배경 . JDK 1.2 이전 . Vector, HashTable, Properties 등 | 각각의 클래스로 각각의 메소드를 이용 | . JDK 1.2 이후 . 모든 컬랙션 클래스를 표준화하여 체계화 | 인터페이스와 다형성을 이용ㅇ한 객체지향적 설계 | 공통으로 사용하는 메소드 | . 기본 인터페이스 . List와 Set은 공통 메소드가 많아 Collection 인터페이스에 공통부분을 넣고 그것을 확장(extends) | Map은 키와 값을 가지는 구조로 다른 데이터 형식임 | . List . 순서가 있는 데이터의 집합 | 데이터 중복을 허용 | . Set . 순서를 유지하지 않는 데이터의 집합 | 데이터의 중복을 허용 안함 | . Map . 키(key)와 값(value)으로 이루어진 데이터의 집합 | 순서를 유지하지 않음 | 키는 중복을 허용하지 않음 | 값은 중복을 허용 | . (1) Collection 인터페이스 . 메소드 설명 . boolean add(Object o) | Collection에 추가 | . boolean addAll(Collection c) |   | . void clear() | 모든 객체를 삭제 | . boolean contain(Object o) | 지정된 객체가 포함되어 있는지 확인 | . boolean containAll(Collection c) |   | . boolean equals(Object o) | 동일한지 확인 | . boolean isEmpty() | 비어 있는지 확인 | . Iterator iterator() | Iterator를 얻어 반환 | . boolean remove(Obejct o) | 지정된 객체를 삭제 | . boolean removeAll(Collection c) |   | . int size() | 객체의 개수를 반환 | . Object[] toArray() | 객체를 객체배열로 반환 | . Object[] toArray(Obejct[] a) |   | . (2) List 인터페이스 . 저장순서가 유지되는 컬렉션의 인터페이스 | ArrayList : 1.2 버전 이전의 Vector | LinkedList | . (3) Set 인터페이스 . 중복을 허용하지 않고 저장순서가 유지되지 않는 컬렉션의 인터페이스 | . (4) Map 인터페이스 . 키(key)와 값(value)을 묶어서 저장하는 컬렉션 인터페이스 | 키는 유일해야하기에 중복 허용 안됨 | . 2. List 구현 . Stack : LIFO (Last In First Out) . 마지막에 넣는 것을 먼저 꺼내는 구조 | 0, 1, 2 데이터를 순서대로 넣으면, 꺼낼 때는 2부터 꺼내야 함. | 예) 웹브라우저의 뒤로 눌렸을 때 워드프로그램에서 undo/redo 실행시 | Stack은 Vector를 확장한 클래스 | . Stack stack = new Stack(); stack.push(&quot;0&quot;); stack.push(&quot;1&quot;); stack.push(&quot;2&quot;); while (!stack.empth()) { System.out.println(stack.pop()); } . package l_collection; import java.util.*; public class StackQueueEx { public static void main(String[] args) { // Stack - LIFO(Last In First Out) Stack stack = new Stack(); stack.push(&quot;A&quot;); stack.push(&quot;B&quot;); stack.push(&quot;C&quot;); while (!stack.isEmpty()) { System.out.println(stack.pop()); } } } . Queue : FIFO (First In First Out) . 처음에 넣은 것을 먼저 꺼내는 구조 | 0, 1, 2 데이터를 순서대로 넣으면, 꺼낼 때는 0부터 꺼내야 함. | 예) 최근사용문서, 프린터 대기목록 | Queue는 인터페이스로 이것을 구현한 클래스가 LinkedList를 비롯하여 여러개 있음 | . Queue queue = new LinkedList(); queue.offer(&quot;0&quot;); queue.offer(&quot;1&quot;); queue.offer(&quot;2&quot;); while (!queue.isEmpty()) { System.out.println(queue.poll()); } . package l_collection; import java.util.*; public class StackQueueEx { public static void main(String[] args) { // Queue - FIFO (First In First Out) - 인터페이스 Queue queue = new LinkedList(); queue.offer(&quot;가&quot;); queue.offer(&quot;나&quot;); queue.offer(&quot;다&quot;); while (!queue.isEmpty()) { System.out.println(queue.poll()); } } } . Iterator . List list = new ArrayList(); Iterator it = list.iterator(); while (is.hasNext()) { System.out.println(it.next()); } . package l_collection; import java.util.*; /* 1. List 구조 - 순서를 저장 */ public class ArrayListEx { public static void main(String[] args) { ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(4); // 동적인 배열 list.add(&quot;rabbit&quot;); list.add(&quot;zebra&quot;); list.add(&quot;fox&quot;); list.add(&quot;cat&quot;); list.add(&quot;ant&quot;); list.add(&quot;lion&quot;); // list.add(100); // list.add(200); for (String str : list) { System.out.println(str); } System.out.println(list); System.out.println(list.toString()); list.set(2, &quot;dog&quot;); System.out.println(list); list.remove(4); System.out.println(list); Collections.sort(list); System.out.println(list); /* for (int i = 0; i &lt; list.size(); i++) { String str = (String) list.get(i); System.out.println(str); } */ } } . package l_collection; import java.util.ArrayList; public class ArrayListEx2 { public static void main(String[] args) { ArrayList list = method(); // 여기서 출력 System.out.println(list); } static ArrayList method() { ArrayList list = new ArrayList(); Student a = new Student(&quot;홍길자&quot;, 20); Student b = new Student(&quot;홍길숙&quot;, 30); Student c = new Student(&quot;홍길동&quot;, 40); list.add(a); list.add(b); list.add(b); return list; } } class Student { String name; int age; Student (String name, int age) { this.name = name; this.age = age; } public String toString() { return name + &quot;학생은 &quot; + age + &quot;세입니다.&quot;; } } . 3. Set 구현 . Hashset . HashSet은 저장순서를 유지하지 않고 중복 요소를 저장하지 않는 Set을 구현한 클래스 | . // 로또 번호 만들기 Set set = new HashSet(); for (int i = 0; set.size() &lt; 5; i++) { int num = (int)(Math.random() * 45) + 1; set.add(num); } . package l_collection; import java.util.HashSet; public class HashSetEx { public static void main(String[] args) { HashSet list = new HashSet(); list.add(&quot;rabbit&quot;); list.add(&quot;zebra&quot;); list.add(&quot;fox&quot;); list.add(&quot;fox&quot;); list.add(&quot;ant&quot;); list.add(&quot;lion&quot;); System.out.println(list); } } . package l_collection; import java.util.HashSet; import java.util.ArrayList; import java.util.Collections; public class HashSetLotto { public static void main(String[] args) { HashSet&lt;Integer&gt; lotto = new HashSet&lt;Integer&gt;(); while (lotto.size() &lt; 6) { int su = (int)(Math.random() * 45) + 1; lotto.add(su); } System.out.println(lotto); ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(lotto); Collections.sort(list); System.out.println(list); } } . TreeSet . TreeSet은 이진검색트리 형태로 데이터를 저장하는 컬랙션 클래스 | 이진검색트리는 정렬, 검색, 범위 검색 탁월 | . TreeSet set = new TreeSet(); int[] score = {56, 35, 77, 68, 92, 58, 93, 90, 88, 73}; &gt; set.subSet(20, 50); 35 &gt; set.haedSet(80); 35, 56, 58, 68, 73, 77 &gt; set.tailSet(80); 88, 90, 92, 93 . 기본은 중위순회 | 전위, 후위는 직접 함수를 만들어야 함 | . package l_collection; import java.util.TreeSet; public class TreeSetEx { public static void main(String[] args) { TreeSet set = new TreeSet(); set.add(&quot;lion&quot;); set.add(&quot;ant&quot;); set.add(&quot;snake&quot;); set.add(&quot;dog&quot;); set.add(&quot;cat&quot;); set.add(&quot;elephant&quot;); set.add(&quot;zebra&quot;); set.add(&quot;bee&quot;); set.add(&quot;tiger&quot;); System.out.println(set); System.out.println(set.subSet(&quot;d&quot;, &quot;s&quot;)); System.out.println(set.headSet(&quot;d&quot;)); System.out.println(set.tailSet(&quot;d&quot;)); } } /* [ant, bee, cat, dog, elephant, lion, snake, tiger, zebra] [dog, elephant, lion] [ant, bee, cat] [dog, elephant, lion, snake, tiger, zebra] */ . 4. Map 구현 . hashtable -&gt; HashMap . Map은 키(key)와 값(value)을 묶어서 하나의 데이터(entry)로 저장하는데, 유일한 키로 어떤 값을 검색 | . Entry[] talble; class Entry { Object key; Object value; } . package l_collection; import java.util.HashMap; import java.util.Scanner; public class HashMapEx { public static void main(String[] args) { HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put(&quot;kimjava&quot;, &quot;1111&quot;); map.put(&quot;parkjava&quot;, &quot;1234&quot;); map.put(&quot;leejava&quot;, &quot;1234&quot;); // kimjava가 중복되었기 때문에 1111은 지워지고 9999로 대체된다. map.put(&quot;kimjava&quot;, &quot;9999&quot;); Scanner input = new Scanner(System.in); boolean stop = false; while(!stop) { System.out.println(&quot;아이디와 패스워드 입력&quot;); System.out.println(&quot;아이디 입력-&gt;&quot;); String id = input.nextLine(); System.out.println(&quot;패스워드 입력-&gt;&quot;); String pw = input.nextLine(); // 아이디가 map에 key에 해당되는가? if (map.containsKey(id)) { // if (map.containValue(pw)) if (map.get(id).equals(pw)) { System.out.println(&quot;로그인성공&quot;); stop = true; } else { System.out.println(&quot;비밀번호가 일치하지 않습니다.&quot;); continue; } } else { System.out.println(&quot;존재하지 않는 아이디입니다.&quot;); continue; } } } } /* 아이디와 패스워드 입력 아이디 입력-&gt; kimjava 패스워드 입력-&gt; 9999 로그인성공 */ . Properties . Properties는 이전 클래스인 Hashtable을 상속받아 구현한 클래스 | Hashtable의 키와 값이 Obejct 형태인데 반해, Properties의 키와 값은 String이다. | 환경설정 등을 저장하는데 사용 | . Java GUI . package a_sample; /* Java GUI - AWT - 1.2 이전 - SWING - 1.2 이후 Java - Write Once Run Anywhere */ import java.awt.*; import javax.swing.*; public class AwtTest extends JFrame { // 1. 멤버변수 선언 JButton b1; JButton b2; // 한 칸 입력받는 텍스트에어리어 JTextField tf; // 여러줄 입력받는 텍스트에어리어 JTextArea ta; // Checkbox JCheckBox 대소문자 주의 JRadioButton cb1, cb2; AwtTest() { super(&quot;나의 두번째 창&quot;); // 2. 객체 생성 b1 = new JButton(&quot;OK&quot;); b2 = new JButton(&quot;Cancel&quot;); tf = new JTextField(30); ta = new JTextArea(10, 50); /* CheckBox를 Radio 버튼으로 변경해야 함 cb1 = new JCheckBox(&quot;Male&quot;); cb2 = new JCheckBox(&quot;Feamale&quot;); */ cb1 = new JRadioButton(&quot;Male&quot;); cb2 = new JRadioButton(&quot;Female&quot;); ButtonGroup bg = new ButtonGroup(); bg.add(cb1); bg.add(cb2); } void addLayout() { // 3. 붙이기 /* FlowLayout f1 = new FlowLayout(); setLayout(f1); // 한 개일 때는 위의 두 줄을 한 줄로 줄일 수 있다. */ // 윗줄 상단 중앙에 배치 - 컴포넌트의 크기가 고정 // setLayout(new FlowLayout()); // 행과 열에 배치 - 컴포넌트 크기가 전체 사이즈의 크기에 맞춰 변경됨 // setLayout(new GridLayout(3, 2)); // NORTH, SOUTH, CENTER, WEST, EAST 영역에 배치 - 5개 밖에 못 붙임 setLayout(new BorderLayout()); add(b1, BorderLayout.NORTH); add(b2, BorderLayout.SOUTH); add(tf, BorderLayout.WEST); add(ta, BorderLayout.CENTER); /* add(cb1, BorderLayout.EAST); add(cb2, BorderLayout.EAST); // 중복되서 안나옴 패널을 써야 함 */ // Pannel에다가 J를 붙여줘야 swing에서 쓸 수 있음 JPanel p = new JPanel(); p.add(cb1); p.add(cb2); add(p, BorderLayout.EAST); // 4. 화면에 출력 setSize(600, 480); setVisible(true); // Swing 기능, x버튼 누르면 프로그램 실행 종료 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); } public static void main(String[] args) { AwtTest at = new AwtTest(); at.addLayout(); } } . package b_info; import java.awt.*; import javax.swing.*; public class InfoTest { // 1. 멤버변수 선언 // is a가 아닌 has a 사용(상속 안받았음), f 써야 함 JFrame f; JButton bAdd, bShow, bSearch, bDelete, bCancel, bExit; JTextArea ta; JTextField tfName, tfId, tfTel, tfSex, tfAge, tfHome; // 2. 멤버객체 생성 InfoTest() { f = new JFrame(&quot;정보&quot;); bAdd = new JButton(&quot;입력&quot;); bShow = new JButton(&quot;전체보기&quot;); bSearch = new JButton(&quot;검색&quot;); bDelete = new JButton(&quot;삭제&quot;); bCancel = new JButton(&quot;취소&quot;); bExit = new JButton(&quot;종료&quot;); ta = new JTextArea(); tfName = new JTextField(15); tfId = new JTextField(); tfTel = new JTextField(); tfSex = new JTextField(); tfAge = new JTextField(); tfHome = new JTextField(); } // 3. 화면 붙이기 및 화면 출력 void addLayout() { // South 영역 JPanel p_south = new JPanel(); p_south.setLayout(new GridLayout(1, 6)); p_south.add(bAdd); p_south.add(bShow); p_south.add(bSearch); p_south.add(bDelete); p_south.add(bCancel); p_south.add(bExit); // West 영역 JPanel p_west = new JPanel(); p_west.setLayout(new GridLayout(6, 2)); p_west.add(new JLabel(&quot;이름&quot;)); p_west.add(tfName); p_west.add(new JLabel(&quot;아이디&quot;)); p_west.add(tfId); p_west.add(new JLabel(&quot;전화번호&quot;)); p_west.add(tfTel); p_west.add(new JLabel(&quot;성별&quot;)); p_west.add(tfSex); p_west.add(new JLabel(&quot;나이&quot;)); p_west.add(tfAge); p_west.add(new JLabel(&quot;주소&quot;)); p_west.add(tfHome); // 프레임영역에 붙이기 f.setLayout(new BorderLayout()); f.add(p_south, BorderLayout.SOUTH); f.add(p_west, BorderLayout.WEST); f.add(ta, BorderLayout.CENTER); f.setSize(480, 500); f.setVisible(true); } public static void main(String[] args) { InfoTest it = new InfoTest(); it.addLayout(); } } .",
            "url": "https://safenumz.github.io/blog/java/2019/04/29/Java_collection.html",
            "relUrl": "/java/2019/04/29/Java_collection.html",
            "date": " • Apr 29, 2019"
        }
        
    
  
    
        ,"post197": {
            "title": "[알고리즘] Java 인터페이스 음식배달 알고리즘",
            "content": "Java 인터페이스 음식배달 알고리즘 . .",
            "url": "https://safenumz.github.io/blog/algorithm/2019/04/29/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_%EB%B0%B0%EB%8B%AC%EC%9D%8C%EC%8B%9D_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "relUrl": "/algorithm/2019/04/29/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_%EB%B0%B0%EB%8B%AC%EC%9D%8C%EC%8B%9D_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "date": " • Apr 29, 2019"
        }
        
    
  
    
        ,"post198": {
            "title": "[알고리즘] Java 상품정보 인터페이스 알고리즘",
            "content": "Java 상품정보 인터페이스 알고리즘 . . . ProductInfo.java . package h_inherit_product; import java.util.ArrayList; import java.util.Scanner; public class ProductInfo { public static void main(String[] args) { Product[] product = new Product[5]; int count = 0; while (true) { int cat = selectCat(); // 상품추가 if (cat == 1) { if (count &lt; 5) { product = insertData(count++, product); } else { System.out.println(&quot;더 이상 추가할 수 없습니다.&quot;); } // 모든 상품 조회 } else if (cat == 2) { for (int i = 0; i &lt; count; i++) { System.out.println(&quot;상품ID&gt;&gt;&quot; + i); product[i].showInfo(); } // 끝내기 } else { System.out.println(&quot;시스템 종료&quot;); break; } } } // 사용자로부터 상품추가, 조회, 끝내기 선택 입력받음 public static int selectCat() { Scanner input = new Scanner(System.in); int cat = 0; System.out.println(&quot;상품추가(1),&quot; + &quot; 모든 상품 조회(2), 끝내기(3)&quot;); cat = Integer.parseInt(input.nextLine()); return cat; } // 사용자로부터 입력받은 상품정보를 Arraylist로 반환 public static ArrayList&lt;String&gt; createList() { Scanner input = new Scanner(System.in); System.out.println(&quot;상품종류 책(1), 음악CD(2), 회화책(3)&quot;); String cat = input.nextLine(); String[] booksub = {&quot;상품 설명&quot;, &quot;생산자&quot;, &quot;가격&quot;, &quot;책 제목&quot;, &quot;저자&quot;, &quot;ISBN&quot;}; String[] disksub = {&quot;상품 설명&quot;, &quot;생산자&quot;, &quot;가격&quot;, &quot;앨범 제목&quot;, &quot;가수&quot;}; String[] conbooksub = {&quot;상품 설명&quot;, &quot;생산자&quot;, &quot;가격&quot;, &quot;책 제목&quot;, &quot;저자&quot;, &quot;언어&quot;, &quot;ISBN&quot;}; String[][] sub = {booksub, disksub, conbooksub}; ArrayList&lt;String&gt; list = new ArrayList(); list.add(cat); for (int i = 0; i &lt; sub[Integer.parseInt(cat) - 1].length; i++) { System.out.print(sub[Integer.parseInt(cat) - 1][i] + &quot;&gt;&gt;&quot;); list.add(input.nextLine()); } return list; } // createList함수를 호출하여 사용자로부터 입력받은 상품정보를 불러오고 // 이를 Product 클래스배열에 등록한 후 Product 클래스배열 반환 public static Product[] insertData(int count, Product[] product) { // createList 함수를 호출하여 상품 정보를 사용자로부터 받는다. ArrayList&lt;String&gt; list = createList(); int cat = Integer.parseInt(list.get(0)); product[count] = new Product(); // Book 정보 리스트를 product에 추가 if (cat == 1) { product[count] = new Book(list.get(1), list.get(2), list.get(3), list.get(4), list.get(5), list.get(6)); // CompactDisk 정보 리스트를 product에 추가 } else if (cat == 2) { product[count] = new CompactDisk(list.get(1), list.get(2), list.get(3), list.get(4), list.get(5)); // ConversationBook 정보 리스트를 product에 추가 } else if (cat == 3) { product[count] = new ConversationBook(list.get(1), list.get(2), list.get(3), list.get(4), list.get(5), list.get(6), list.get(7)); } return product; } } . Product.java . package h_inherit_product; public class Product { String count; String description; String producer; String price; Product() { } Product(String description, String producer, String price) { this.description = description; this.producer = producer; this.price = price; } public void showInfo() { } } . Book.java . package h_inherit_product; public class Book extends Product { String isbn_number; String author; String book_title; Book() { super(); } Book(String description, String producer, String price, String isbn_number, String author, String book_title) { super(); super.description = description; super.producer = producer; super.price = price; this.isbn_number = isbn_number; this.author = author; this.book_title = book_title; } public void showInfo() { String[] sub = {&quot;상품 설명&quot;, &quot;생산자&quot;, &quot;가격&quot;, &quot;책 제목&quot;, &quot;저자&quot;, &quot;ISBN&quot;}; Object[] data = {description, producer, price, book_title, author, isbn_number}; for (int i = 0; i &lt; data.length; i++) { System.out.println(sub[i] + &quot;&gt;&gt;&quot; + data[i]); } } } . CompactDisk.java . package h_inherit_product; public class CompactDisk extends Product { String album_title; String singer; CompactDisk() { super(); } CompactDisk(String description, String producer, String price, String album_title, String singer) { super(); super.description = description; super.producer = producer; super.price = price; this.album_title = album_title; this.singer = singer; } public void showInfo() { String[] sub = {&quot;상품 설명&quot;, &quot;생산자&quot;, &quot;가격&quot;, &quot;앨범 제목&quot;, &quot;가수&quot;}; Object[] data = {description, producer, price, album_title, singer}; for (int i = 0; i &lt; data.length; i++) { System.out.println(sub[i] + &quot;&gt;&gt;&quot; + data[i]); } } } . ConversationBook . package h_inherit_product; public class ConversationBook extends Book { String language; ConversationBook() { } ConversationBook(String description, String producer, String price, String isbn_number, String author, String book_title, String language) { super.description = description; super.producer = producer; super.price = price; super.isbn_number = isbn_number; super.author = author; super.book_title = book_title; this.language = language; } public void showInfo() { String[] sub = {&quot;상품 설명&quot;, &quot;생산자&quot;, &quot;가격&quot;, &quot;책 제목&quot;, &quot;저자&quot;, &quot;언어&quot;, &quot;ISBN&quot;}; Object[] data = {description, producer, price, book_title, author, language, isbn_number}; for (int i = 0; i &lt; data.length; i++) { System.out.println(sub[i] + &quot;&gt;&gt;&quot; + data[i]); } } } .",
            "url": "https://safenumz.github.io/blog/algorithm/2019/04/28/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "relUrl": "/algorithm/2019/04/28/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "date": " • Apr 28, 2019"
        }
        
    
  
    
        ,"post199": {
            "title": "[Java] 인터페이스",
            "content": "abstract . 미완성 | 오버라이딩에 강제성을 부여하기 위해 | 오버라이딩 -&gt; 다형성을 쓰기 위해 | 부모가 미완성이 자식이 완성해줘야 함 | Item 클래스는 미완성 클래스라 객체생성이 안됨, 추상(미완성) 클래스는 부모역할만 하라는 뜻 | Item i = Item(); -&gt; 에러 | . package h_inherit_book; import h_inherit_book.sub.Item; public class Book extends Item { String writer; String publisher; Book() { super(); System.out.println(&quot;Book 기본생성자&quot;); } Book(String no, String title, String writer, String publisher) { // 부모 멤버를 접근할 때는 super super(); super.no = no; super.title = title; this.writer = writer; this.publisher = publisher; System.out.println(&quot;Book 인자생성자&quot;); } public void output() { System.out.println(&quot;책번호: &quot; + no); System.out.println(&quot;책제목: &quot; + title); System.out.println(&quot;작가: &quot; + writer); System.out.println(&quot;출판사: &quot; + publisher); } } . 1. 다음 소스의 실행 결과는? // 디폴트 abstract class Parent{ abstract int getNumber(); // 추상 } public class Child extends Parent { // 반드시 자식클래스에서 오버라이딩 private int number = 100; private int getNumber() {return number;} // 에러 } // 오버라이딩 감지, 부모가 디폴트인데 프라이빗을 쓰면 안됨 (1)에러없이 컴파일 된다. (2)2라인에서 에러가 발생한다 (3)4라인에서 에러가 발생한다. (4)6라인에서 에러가 발생한다. /* [정답] 4 */ 8. 다음소스에서 잘못 된 부분을 찾아 수정하시오. // 객체생성 안됨 abstract class Parent { public void method() { } } public class Child extends Parent { public void method() { } public static void main( String [] args ) { Parent p = new Parent(); // 객체생성 안됨 p.method(); Child c = new Child(); c.method(); } } /* Parent p = new Parent(); -&gt; Parent p = new Child(); */ . final . 변경불가 | final field : 값 변경 불가, 상 | final method : overriding 불가 | final class : 상속 불가 | . package i_final; /* final - 변경불가 final field - 값 변경 불가, 상 final method - overriding 불가 final class - 상속 불가 */ final class Parent { // final은 변경이 안됨 final String field = &quot;부모님꺼&quot;; final public void job() { // field = &quot;진짜내꺼&quot;; System.out.println(&quot;부모님께서 장만&quot;); } } /* // final은 상속받을 수 없음 class Child extends Parent { Child() { // field = &quot;내꺼임&quot;; } // public void job() { // System.out.println(&quot;물려받아 탕진&quot;); // } } */ public class Test { public static void main(String[] args) { // new Child() 쓸 수 없다. Parent p = new Parent(); System.out.println(p.field); p.job(); } } . 2. 다음 소스 중에서 상속 할 수 없는 클래스는 ? (1) final abstract class Test { int i; void method() {} } (2) private class Test { int i; void method() {} } (3) abstract class Test { int i; void method() {} } (4) class Test { final int i; final void method() {} } (5) final class Test { int i; void method() {} } /* [정답] 1, 2, 5 2 : 컴파일 오류 */ 3. 같은 패키지에 있는 클래스에서는 참조할 수 있고, 다른 패키지에 있는 클래스에서는 참조할 수 없는 메소드를 만들고자 할 때, 이메소드 앞에 어떤 접근 지정자를 선언해야 하나 ? (1) public (2) private (3) protected (4) 아무것도 지정하지 않는다. /* [정답] 4 */ 4. 다음 소스의 실행 결과는 ? public class Test { private final String str = “매력있는”; void method(String s) { str += s; } public static void main(String[] args) { Test t = new Test(); t.method(“자바”); System.out.println(t.str); } } (1) 컴파일에러가 발생한다 (2)“ 매력있는” 문장 출력된다. (3)“ 매력있는자바” 문장 출력된다. (4) 실행은 되지만 아무것도 출력되지 않는다. /* [정답] */ 5. 다음 소스에서“ 여기” 부분에 메소드 오버라이딩으로 적합한 것은 ? class Parent { public void method() {} } class Child extends Parent { /* 여기 */ } (1) void method() {} (2) public void method() {} (3) public void method(int i) {} (4) public int method() { return 0; } /* [정답] 2 알맞은 코드 2, 3 오버라이딩 2 */ 6. 다음 소스에서“ 여기” 부분에 들어갈 코드로 알맞은 것은 ? class Parent { public double method() { return 36.7; } } class Child extends Parent { /* 여기 */ } (1) public void method() { double d = 36.7; }; (2) public double method(double d) { return d; } (3) double method(double d) { return d; } (4) double method() { return 36.7; } /* [정답] 2, 3 */ 7. 다음 소스에서“ 여기” 부분에 들어갈 코드로 알맞은 것은 ? class Parent { final int i = 1; Parent() {} Parent(String s) { System.out.println(s); } } class Child extends Parent { int i; Child() {} Child(int i) { /* 여기 */ } public static void main(String[] args) { Child ch = new Child(10); } } (1) Child(int i) { this.i = i; this(); } (2) Child(int i) { this.i = i; super(“생성”); } (3) Child(int i) { super(“생성”); this.i = i; } (4) Child(int i) { super(“생성”); super.i = i; } /* [정답] 3 */ 9. 다음 소스의 출력 결과는 ? class Parent { int i = 7; public int get() { return i; } } class Child extends Parent { int i = 5; public int get() { return i; } } public class Test { public static void main(String[] args) { Parent p = new Parent(); System.out.println(“-- -- -- -- -- -- -- -- -- -- - 1-- -- -- -- -- -- -- -- -- -- - “); System.out.println(p.i); System.out.println(p.get()); Child c = new Child(); System.out.println(“-- -- -- -- -- -- -- -- -- -- - 2-- -- -- -- -- -- -- -- -- -- - “); System.out.println(c.i); System.out.println(c.get()); Parent p2 = new Child(); System.out.println(“-- -- -- -- -- -- -- -- -- -- - 3-- -- -- -- -- -- -- -- -- -- - “); System.out.println(p2.i); System.out.println(p2.get()); } } /* 1 7 7 2 5 5 3 7 5 */ . interface . 구조(틀) | . class A { int A; A(){} void A(){} abstract void AA(); } class B extends A { void AA()(){} } . interface B { int B; // 자동으로 public static final이 붙는다. void B(); // 자동으로 public abstract가 붙는다. } class BB implemnets B { void B() {} } . // 오라클 연결 OracleConnection con = new OracleConnection(); con.oracleCon(); // MySQL 연결 MySQL con = new MySQL(); con.connect(); Connection con = 실제디비객체; con.create(); .",
            "url": "https://safenumz.github.io/blog/java/2019/04/26/Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4.html",
            "relUrl": "/java/2019/04/26/Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4.html",
            "date": " • Apr 26, 2019"
        }
        
    
  
    
        ,"post200": {
            "title": "[Java] 상속",
            "content": "향상된 for문 . 집합체인 경우에는 향상된 for문을 쓰는 것이 빠르다. | 향상된 for문에는 인덱스 처리가 되지 않는다. | 데이터를 추출할 때만 쓴다. | . import java.util.Scanner; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;학생수 입력 -&gt; &quot;); int num = input.nextInt(); // 3 + 엔터 input.nextLine(); Student[] s = new Student[num]; String[] s2 = {&quot;헬로우&quot;, &quot;안녕&quot;, &quot;올라&quot;}; // 집합체인 경우에는 향상된 for문을 쓰는 것이 빠르다. // 향상된 for문은 인덱스처리가 되지 않는다. for (Student stu : s) { System.out.println(&quot;학생정보입력 (예)홍길동/20/30/40&quot;); String info = input.nextLine(); StringTokenizer st = new StringTokenizer(info, &quot;/&quot;); String name = st.nextToken(); int kor = Integer.parseInt(st.nextToken()); int eng = Integer.parseInt(st.nextToken()); int math = Integer.parseInt(st.nextToken()); // 클래스 초기화 - 객체생성 + 값 지정 stu = new Student(name, kor, eng, math); stu.calTotal(); stu.calAverage(); System.out.println(stu); } } } . static 활용 . class Singleton { private static Singleton one; private Singleton() { } public static Singleton getInstance() { if (one == null) { one = new Singleton(); } return one; } } public class SingletoneTest { public static void main(String[] args) { Singleton singleton1 = Singleton.getInstance(); Singleton singleton2 = Singleton.getInstance(); System.out.println(singleton1 == singleton2); } } . Inner Class . // bin 폴더에 보면 3개 클래스 파일이 생성된다. // Outer.class class Outer { // Outer$Innter.class // Inner Class는 static을 붙일 수 있다. // Inner Class는 멤머취급 class Inner { void najavara() { System.out.println(&quot;호출해주세요.&quot;); } } static class Inner2 { void najavara2() { System.out.println(&quot;Inner Static&quot;); } } } // InnerTest.class public class f_innerclass { public static void main(String[] args) { Outer o = new Outer(); Outer.Inner in = o.new Inner(); in.najavara(); Outer.Inner2 in2 = new Outer.Inner2(); in2.najavara2(); // Outer.Inner2.najavara2(); } } . 상속 . package g_access.sub; public class Access { private String a = &quot;프라이빗 데이터&quot;; public String b = &quot;퍼블릭 데이터&quot;; String c = &quot;디폴트 데이터&quot;; protected String d = &quot;프로텍티드 데이터&quot;; public void output() { System.out.println(a); System.out.println(b); System.out.println(c); System.out.println(d); } } /* * 접근지정자 - private : 해당 클래스만 사용 - public : 모든 허용 - default(아무것도 지정 없는 경우) : 해당 패키지에서만 사용 - protected : 다른 패키지인 경우 상속관계에만 허용 (동일한 패키지는 허용) private &lt; default &lt; protected &lt; public */ package g_access.sub; public class Main { public static void main(String[] args) { // 동일한 패키지에 있을 때는 프라이빗 빼고는 접근이 가능하다. // 다른 패키지에 있을 때는 퍼블릭만 접근이 가능하다. Access me = new Access(); // me.a = &quot;프라이빗 변경&quot;; me.b = &quot;퍼블릭 변경&quot;; me.c = &quot;디폴트 변경&quot;; me.d = &quot;프로텍티드 변경&quot;; me.output(); } } package g_access_; import g_access.sub.Access; public class Main { public static void main(String[] args) { // 동일한 패키지에 있을 때는 프라이빗 빼고는 접근이 가능하다. // 다른 패키지에 있을 때는 퍼블릭만 접근이 가능하다. Access me = new Access(); me.a = &quot;프라이빗 변경&quot;; me.b = &quot;퍼블릭 변경&quot;; me.c = &quot;디폴트 변경&quot;; me.d = &quot;프로텍티드 변경&quot;; me.output(); } } package g_access_; import g_access.sub.Access; public class SubClassMain extends Access { public static void main(String[] args) { SubClassMain me = new SubClassMain(); // me.a = &quot;프라이빗 변경&quot;; me.b = &quot;퍼블릭 변경&quot;; me.c = &quot;디폴트 변경&quot;; me.d = &quot;프로텍티드 변경&quot;; me.output(); } } . package h_inherit; public class Umma extends Object { public Umma() { System.out.println(&quot;부모생성자&quot;); } public void gene() { System.out.println(&quot;부모는 부모다&quot;); } public void job() { System.out.println(&quot;엄마는 대장&quot;); } } package h_inherit; //*** 상속관계 public class Ddal extends Umma { public Ddal() { System.out.println(&quot;자식생성자&quot;); } public void gene() { System.out.println(&quot;자식은 자식이다&quot;); } public void study() { System.out.println(&quot;딸은 학생&quot;); } } package h_inherit; public class Test { public static void main(String[] args) { // 1. 클래스 생성과 메소드 호출 확인 Umma u = new Umma(); u.gene(); u.job(); // 부모 클래스까지 전부 참조 Ddal d = new Ddal(); d.gene(); d.study(); // 자식은 부모가 가지고 있는 것을 다 접근할 수 있다. d.job(); // 2. 부모변수에 자식객체 생성 // Ddal dd = new Umma(); Umma uu = new Ddal(); // 오버라이딩 메소드 uu.gene(); // 변수가 부모임에도 자식 함수가 호출 uu.job(); // uu.study(); //** overriding // - 부모자식간의 메소드명이 동일 // - 인자동일 / 리턴값 동일 // - 접근지정자는 같거나 크거나 // * 부모 변수에서 자식의 멤버 호출 // 3. 형변환 (casting) - 상속관계에서만 가능 // String a = new String(&quot;헬로우&quot;); // StringBuffer b = (StringBuffer) a; // 안됨 // Umma uuu = new Umma(); // Ddal ddd = (Ddal) uuu; // 메모리에 없는 것을 형변환 안됨 Ddal dddd = new Ddal(); Umma uuuu = (Umma) dddd; // 부모것만 참조하되, 오버라이딩 된것은 자식 것 참조 dddd.study(); // 가능 // uuuu.study(); // 불가능 Umma uuuuu = new Ddal(); uuuuu.gene(); uuuuu.job(); // 메모리에 study()가 있음에도 불구하고 // 부모라서 안되는 상황 - 형변환하면 가능하다. Ddal ddddd = (Ddal) uuuuu; ddddd.study(); } } . 개발자 입장 (상속) . 부모 클래스 멤버로 있는 경우 - 그냥 호출 | 부모 클래스에 없는 경우 - 추가 | 부모 클래스에 있는데 수정이 필요 - overriding | is a vs has a . // has a package h_inherit; import java.awt.*; public class hasATest { hasATest() { // has - a Frame f = new Frame(&quot;나의 첫 화면&quot;); f.setSize(500, 400); f.setVisible(true); } public static void main(String[] args) { hasATest test = new hasATest(); } } // is a package h_inherit; import java.awt.Frame; public class isATest extends Frame { isATest() { setSize(400, 300); setVisible(true); } public static void main(String[] args) { isATest test = new isATest(); } } . package h_interit_book; public class Main { public static void main(String[] args) { // Book b = new Book(); // // b.output(); Book b2 = new Book(&quot;0001&quot;, &quot;자바&quot;, &quot;아무개&quot;, &quot;엔코아&quot;); b2.output(); } } package h_interit_book; public class Item { String no; String title; Item() { System.out.println(&quot;Item 기본생성자&quot;); } Item(String no, String title) { this.no = no; this.title = title; System.out.println(&quot;Item 인자생성자&quot;); } } package h_interit_book; public class Book extends Item { String writer; String publisher; Book() { super(); System.out.println(&quot;Book 기본생성자&quot;); } Book(String no, String title, String writer, String publisher) { // 부모 멤버를 접근할 때는 super super(); super.no = no; super.title = title; this.writer = writer; this.publisher = publisher; System.out.println(&quot;Book 인자생성자&quot;); } public void output() { System.out.println(&quot;책번호: &quot; + no); System.out.println(&quot;책제목: &quot; + title); System.out.println(&quot;작가: &quot; + writer); System.out.println(&quot;출판사: &quot; + publisher); } } package h_interit_book; public class Dvd extends Item { String singer; Dvd() { super(); System.out.println(&quot;Dvd 기본생성자&quot;); } Dvd(String no, String title, String singer) { super(); super.no = no; super.title = title; this.singer = singer; System.out.println(&quot;Dvd 인자생성자&quot;); } public void output() { System.out.println(&quot;책번호: &quot; + no); System.out.println(&quot;책제목: &quot; + title); System.out.println(&quot;가수: &quot; + singer); } } . package h_inherit_lang; public class Kor extends Lang { Kor() { super(); System.out.println(&quot;Kor 기본생성자&quot;); } Kor(String hello, String intro, String talk) { super(); super.hello = hello; super.intro = intro; super.talk = talk; System.out.println(&quot;Book 인자생성자&quot;); } public void outputHello() { System.out.println(hello); } public void outputIntro() { System.out.println(intro); } public void outputTalk() { System.out.println(talk); } } package h_inherit_lang; public class Eng extends Lang { Eng() { super(); System.out.println(&quot;Eng 기본생성자&quot;); } Eng(String hello, String intro, String talk) { super(); super.hello = hello; super.intro = intro; super.talk = talk; System.out.println(&quot;Eng 인자생성자&quot;); } public void outputHello() { System.out.println(hello); } public void outputIntro() { System.out.println(intro); } public void outputTalk() { System.out.println(talk); } } package h_inherit_lang; public class Jap extends Lang { Jap() { super(); System.out.println(&quot;Jap 기본생성자&quot;); } Jap(String hello, String intro, String talk) { super(); super.hello = hello; super.intro = intro; super.talk = talk; System.out.println(&quot;Jap 인자생성자&quot;); } public void outputHello() { System.out.println(hello); } public void outputIntro() { System.out.println(intro); } public void outputTalk() { System.out.println(talk); } } package h_inherit_lang; public class Lang { String hello; String intro; String talk; Lang() { System.out.println(&quot;Lang 기본생성자&quot;); } Lang(String hello, String intro, String talk) { this.hello = hello; this.intro = intro; this.talk = talk; System.out.println(&quot;Lang 인자생성자&quot;); } public void outputHello() { } public void outputIntro() { } public void outputTalk() { } } package h_inherit_lang; import java.util.Scanner; public class Main { public static void main(String[] args) { Lang lang = null; int sel = 0, msg = 0; char react = &#39;y&#39;; Scanner input = new Scanner(System.in); while (true) { System.out.println(&quot;언어를 선택하세요.&quot; + &quot; (1.한국어 2.영어 3.일본어)&quot;); sel = Integer.parseInt(input.nextLine()); switch(sel) { case 1: lang = new Kor(&quot;안녕하세요.&quot;, &quot;홍길동입니다.&quot;, &quot;반갑습니다&quot;); break; case 2: lang = new Eng(&quot;Hello.&quot;, &quot;My name is Hong Gil Dong.&quot;, &quot;It&#39;s good to see you again&quot;); break; case 3: lang = new Jap(&quot;gonichiwa&quot;, &quot;Watachiwa Hong Gil Dong deth.&quot;, &quot;Ohisachiburideth&quot;); break; } System.out.println(&quot;메시지를 선택하세요.&quot; + &quot; 1.인사말 2.자기소개 3.하고픈말&quot;); msg = Integer.parseInt(input.nextLine()); switch(msg) { case 1: lang.outputHello(); break; case 2: lang.outputIntro(); break; case 3: lang.outputTalk(); break; } System.out.println(&quot;다시하시겠습니까? (Y/N)&quot;); react = input.nextLine().charAt(0); if (react == &#39;n&#39; | react == &#39;N&#39;) { System.out.println(&quot;시스템을 종료합니다.&quot;); break; } } } } . 자식한테 주면 protected | 막아버리면 private | . package z_etc; import java.util.ArrayList; public class Test2 { public static void main(String[] args) { ArrayList data = method(); for (int i = 0; i &lt; data.size(); i++) { String str = (String) data.get(i); System.out.println(str); } } static ArrayList method() { String a = &quot;올라&quot;; String b = &quot;헬로우&quot;; String c = &quot;안녕&quot;; ArrayList list = new ArrayList(3); list.add(a); list.add(b); list.add(c); list.add(&quot;곤니찌와&quot;); return list; } } . 상속 정리 . inner class 2. | 상속 private / protected | public / default | . | 같은 패키지 내에 있을 때 : default, public, protected 접근가능 | 다른 패키지에서 접근 가능 : public | 다른 패키지, 상속 관계의 자식일 때: public, potected(자식) | . (1) 설계자 입장 . 여러 클래스의 공통적요소를 부모클래스에 지정 | 개별요소는 각 클래스에 지정 | . (2) 개발자 입장 . 부모클래스에 있는 요소는 그냥 호출 | 부모클래스에 없는 요소는 그냥 추가해서 사용 | 부모클래스에 있는데 수정이 필요 -&gt; overriding . | overriding - 상속관계에서 메소드명 동일한 경우 (리턴형, 인자, 접근자 동일) | . 다형성 상속관계 | 부모 변수에 자식 객체 생성 | overrding method | . |",
            "url": "https://safenumz.github.io/blog/java/2019/04/25/Java_%EC%83%81%EC%86%8D.html",
            "relUrl": "/java/2019/04/25/Java_%EC%83%81%EC%86%8D.html",
            "date": " • Apr 25, 2019"
        }
        
    
  
    
        ,"post201": {
            "title": "[Java] 클래스 배열",
            "content": "클래스 배열 . OOP : Object Oriented Programming | object, class, instance 일단 다 같은 용어로 생각 | 인스턴스 : 객체 | 클래스 = 서로 다른 자료형의 변수들 + 메소드 | 캡슐화 = 권한관련부여 | . 멤버변수 - private ( 다른 클래스에서 접근 허용 안함 ) | 멤버메소드 - public ( 모든 접근 허용 ) | // OOP - Object Oriented Programming // 클래스 = 서로 다른 자료형의 변수들 + 메소드 // 캡슐화 = 권한관련부여 /* * 1. 멤버변수 - private * 2. 멤버메소드 - public */ public class Student { // 멤버변수 private String name; private int kor, eng, math; private int total; private double avg; // 멤버메소드 public int calTotal() { total = kor + eng + math; return total; } public double calAverage() { avg = (double) total / 3; return avg; } // setter / getter public void setName(String name) { // name = n; this.name = name; } public void setKor(int kor) { this.kor = kor; } public void setEng(int eng) { this.eng = eng; } public void setMath(int math) { this.math = math; } public String getName() { return name; } public int getKor() { return kor; } public int getEng() { return eng; } public int getMath() { return math; } public int getTotal() { return total; } public double getAvg() { return avg; } // 멤버변수 출력하기 위한 메소드 public String toString() { return name + &quot; 학생 총점:&quot; + total + &quot; / 평균: &quot; + avg; } } . import java.util.Scanner; public class Main { public static void main(String[] args) { Student[] s = new Student[3]; Scanner input = new Scanner(System.in); for (int i = 0; i &lt; s.length; i++) { s[i] = new Student(); System.out.println(&quot;학생명 입력 -&gt;&quot;); s[i].setName(input.next()); System.out.println(&quot;국어점수 -&gt;&quot;); s[i].setKor(input.nextInt()); System.out.println(&quot;영어점수 -&gt;&quot;); s[i].setEng(input.nextInt()); System.out.println(&quot;수학점수 -&gt;&quot;); s[i].setMath(input.nextInt()); s[i].calTotal(); s[i].calAverage(); System.out.println(s[i]); } } } . public class Student { // 멤버변수 private String name; private int kor, eng, math; private int total; private double avg; // 멤버메소드 public int calTotal() { total = kor + eng + math; return total; } public double calAverage() { avg = (double) total / 3; return avg; } // setter / getter public void setName(String name) { // name = n; this.name = name; } public void setKor(int kor) { this.kor = kor; } public void setEng(int eng) { this.eng = eng; } public void setMath(int math) { this.math = math; } public String getName() { return name; } public int getKor() { return kor; } public int getEng() { return eng; } public int getMath() { return math; } public int getTotal() { return total; } public double getAvg() { return avg; } // 멤버변수 출력하기 위한 메소드 public String toString() { return name + &quot; 학생, 총점:&quot; + total + &quot;, 평균: &quot; + avg; } public void print() { System.out.printf(&quot;%s 학생, 총점: %d, 평균: %.2f n&quot;, name, total, avg); } } . import java.util.Scanner; import java.util.StringTokenizer; public class Main { public static void main(String[] args) { System.out.println(&quot;학생수 입력 -&gt; &quot;); Scanner input = new Scanner(System.in); int num = Integer.parseInt(input.nextLine()); Student[] s = new Student[num]; for (int i = 0; i &lt; s.length; i++) { s[i] = new Student(); System.out.printf(&quot;%d 번째 학생의 정보 입력 -&gt; n&quot;, i + 1); StringTokenizer stn = new StringTokenizer(input.nextLine()); s[i].setName(stn.nextToken()); s[i].setKor(Integer.parseInt(stn.nextToken())); s[i].setEng(Integer.parseInt(stn.nextToken())); s[i].setMath(Integer.parseInt(stn.nextToken())); s[i].calTotal(); s[i].calAverage(); } for (int i = 0; i &lt; s.length; i++) { // System.out.println(s[i].toString()); s[i].print(); } } } /* 학생수 입력 -&gt; 3 1 번째 학생의 정보 입력 -&gt; 홍길동 70 70 70 2 번째 학생의 정보 입력 -&gt; 홍길숙 80 80 80 3 번째 학생의 정보 입력 -&gt; 홍길자 75 75 75 홍길동 학생, 총점: 210, 평균: 70.00 홍길숙 학생, 총점: 240, 평균: 80.00 홍길자 학생, 총점: 225, 평균: 75.00 */ . 초기화 . (1) 변수 초기화 . int a; // 변수선언(메모리 확보) a = 10; // 값지정 int b = 20; // 변수 초기화 . (2) 배열 초기화 . int[] a; // 변수선언 a = new int[3]; // 객체생성(메모리확보) a[0] = 10; // 값지정 a[1] = 20; a[2] = 30; int[] b = {10, 20, 30} // 배열 초기화 (3) 클래스 초기화 ~~~java Student s; //변수선언 s = new Student(); // 객체생성(메모리확보) s.name = &quot;홍길동&quot;; // 값지정 s.kor = 100; Student s = new Studnet(&quot;홍길동&quot;, 100); . 생성자 . class MyClass{ int var ; } public class Test { public static void main ( String [] args ) { MyClass my; my.var = 1000; System.out.println( my. var ); } } . public class Main { public static void main(String[] args) { Student s2 = new Student(&quot;홍길동&quot;, 100, 80, 70); System.out.println(&quot;이름: &quot; + s2.getName()); System.out.println(&quot;총점: &quot; + s2.calTotal()); System.out.println(&quot;평균: &quot; + s2.calAverage()); Student s = new Student(); // s.name = &quot;홍길동&quot;; // s.kor = 100; // s.eng = 88; // s.math = 77; // 객체라서 힙에 들어가기 때문에 자동초기화됨 System.out.println(&quot;이름: &quot; + s.getName()); System.out.println(&quot;총점: &quot; + s.calTotal()); System.out.println(&quot;평균: &quot; + s.calAverage()); } } . [[ 기초다지기 ]] 1. 다음 프로그램의 결과는? public class Test { public static void main ( String[] args ) { String s; System.out.println(“s=” + s ); } } (1) String s에 초기값을 지정하지 않아 컴파일 에러가 발생한다. (2) 결과는 “s=”만 출력된다. (3) 결과는 “s=null”이라고 출력된다. (4) 컴파일은 성공하지만, 실행할 때 NullPointerException이 발생한다. /* 지역변수의 초기화가 되지 않았다. 컴파일 에러 발생 - String s = null; - 멤버변수(전역변수) static String s; [답] 1 */ 2 다음 소스중에서 출력 결과로“i=0”이라고 출력되는 것은? (1) class Test { // static int i; int i; public static void main( String [] args ) { System.out.println(“i=”+i); } } (2) class Test { static int i; public static void main( String[] args ) { System.out.println(“i=”+i); } } (3) class Test { int i; public static void main(String[] args) { System.out.println(“i=”+Test.i); } } (4) class Var { private int i; } class Test { int i; public static void main(String[] args) { Var v = new Var(); System.out.println(“i=”+v.i); } } /* [답] 2 */ 3. 다음 소스에서 method()메소드의 오버로딩으로 선언한 메소드는? class Test { private int x, y; private double z; public void method ( int a, int b, double c ) { x = a; y = b; z = c; } } (1) void method( int a, int b, double c ) { x = a; y = b; z = c; } (2) public void method ( int a, double b, int c ) { method( a, c, b ); } (3) public void method ( int a, double b, int c ) { this( a, c, b); } // this는 생성자 함수에만 씀 (4) void method( int a, int b) { x = a; y = b; } (5) void method( int i, int j, double k ) { x = i; y = j; z = k; } /* [답] 2, 4 */ 4. 다음 소스에서 잘못 된 부분을 찾아 수정하시오. class MyClass{ int var ; } public class Test { public static void main ( String [] args ) { MyClass my; my.var = 1000; System.out.println(my.var); } } // 수정코드 class MyClass{ int var ; } public class Test { public static void main ( String[] args ) { MyClass my = new MyCalss(); my.var = 1000; System.out.println(my.var); } } 5. 다음 소스에서 잘못 된 부분을 찾아 수정하시오. class MyClass{ public int method ( int i , int j ) { return i + j; } public double method ( int i, int j ) { return ( i + j ) / 3. 0; } } // 수정코드 class MyClass{ public int method ( int i , int j ) { return i + j; } public double method2 ( int i, int j ) { return (double) ( i + j ) / 3. 0; } } 6. 다음 소스에서 잘못 된 부분을 찾아 수정하시오. class MyClass{ String name; public MyClass() { System.out.println(“생성자 실행”); this(“이름없음”); } public MyClass( String name ) { this.name = name; } public static void main ( String [] args ) { MyClass my = new MyClass(); } } // 수정코드 class MyClass{ String name; public MyClass() { // construct는 첫줄에 써줘야 함 this(&quot;이름없음&quot;); System.out.println(“생성자 실행”); } public MyClass(String name) { this.name = name; } public static void main ( String [] args ) { MyClass my = new MyClass(); } } . Static . public class Book { // 멤버 변수라서 초기화 0; // static 변수 : 각 객체에서 공유하려고, 메모리에 단 하나임 // 객체 생성하기 전에 이미 메모리에 떠있다. 클래스명 접근이 가능하다. // static 변수를 클래스 변수라 부르는 책들도 있다. private static int count; // static이 없으면 Book b3 = new Book(); 순간에 메모리에 올라온다. int temp; public Book() { count++; System.out.println(&quot;책 한권 생성&quot;); } public static int getCount() { return count; } } . public class Main { public static void main(String[] args) { // Book b1 = new Book(); // Book b2 = new Book(); // Book b3 = new Book(); // 원래는 객체를 타고 올라가야 하지만 // static은 클래스명으로 바로 접근할 수 있다. System.out.println(&quot;갯수: &quot; + Book.getCount()); // System.out.println(&quot;갯수: &quot; + b2.count); // System.out.println(&quot;갯수: &quot; + b3.count); } {} } . public class Baduk { int x, y; static int r; void method() { x = 10; y = 10; r = 10; } static void staticMethod() { x = 10; r = 10; } } public class Test2 { public static void main(String[] args) { Baduk b = new Baduk(); } } . DBConnect.java . public class DBConnect { static DBConnect db; private DBConnect() { System.out.println(&quot;실제로 디비에 연결을 얻어옴&quot;); } public static DBConnect getInstance() { if (db == null) db = new DBConnect(); return db; } } . UserA . public class UserA { DBConnect con; public UserA() { // con = new DBConnect(); con = DBConnect.getInstance(); } public void use() { System.out.println(&quot;디비 작업중&quot;); } } . UserB . public class UserB { DBConnect con; public UserB() { // con = new DBConnect(); con = DBConnect.getInstance(); } public void use() { System.out.println(&quot;디비 작업중&quot;); } } . UserC . public class UserC { DBConnect con; public UserC() { // con = new DBConnect(); con = DBConnect.getInstance(); } public void use() { System.out.println(&quot;디비 작업중&quot;); } } . Test.java . public class Test { public static void main(String[] args) { UserA a = new UserA(); a.use(); UserB b = new UserB(); b.use(); UserC c = new UserC(); c.use(); } } . public class Ex { publci } public class DBConnect { static DBConnect db; private DBConnect() { System.out.println(&quot;실제로 디비에 연결을 얻어옴&quot;); } public static DBConnect getInstance() { if (db == null) db = new DBConnect(); return db; } } . 정리 . inner class | 접근지정자 private / public | protected /default (아무 표시 없는 경우) | . | 상속 |",
            "url": "https://safenumz.github.io/blog/java/2019/04/24/Java_%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B0%B0%EC%97%B4.html",
            "relUrl": "/java/2019/04/24/Java_%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B0%B0%EC%97%B4.html",
            "date": " • Apr 24, 2019"
        }
        
    
  
    
        ,"post202": {
            "title": "[Java] 메소드, 클래스",
            "content": "ctrl + shift -&gt; 변수 선택하여 연결된 변수 찾는다. . 재귀호출 . public class Ex01_Fatorial { // 5! = 5 * 4 * 3 * 2 * 1 = 120 public static void main(String[] args) { int n = 5; System.out.println(&quot;합 : &quot; + factorial(n)); } static int factorial(int n) { if (n == 1) return 1; return n * factorial(n - 1); } } . public class Ex01_Fibonacci { // 피보나치 수열 : 1 1 2 3 5 8 13 21 public static void main(String[] args) { int n = 5; int result = fib(n); System.out.println(&quot;결과: &quot; + result); } static int fib(int n) { if (n == 1) return 1; if (n == 2) return 2; return fib(n - 1) + fib(n - 2); } } . // 19. f(4)를 호출한다면? public static void f( int N ) { System.out.println(N); if( N &gt; 0 ) f( N-1); } /* 4 3 2 1 */ // 20. g(4)를 호출한다면? public static void g( int N) { if( N &gt; 0 ) g( N-1 ); System.out.println(N); } g(3) 4 g(2) 3 4 g(1) 2 3 4 1 2 3 4 /* 1 2 3 4 */ // 21. h(4)를 호출한다면? public static void h( int N ) { System.out.println(N); if( N &gt; 0 ) h( N -2 ); System.out.println(N); } 4 h(2) 4 4 2 h(0) 2 4 4 2 0 0 2 4 /* 4 2 0 0 2 4 */ // 25. 무엇을 계산하는 함수인가??? t(5) public static void t( int N ) { if( N &gt; 0 ) t(N / 2); System.out.println( N % 2); } /* t(5) t(2) 5%2 t(1) 2%2 5%2 t(0) 1%2 2%2 5%2 0%2 1%2 2%2 5%2 0 1 0 1 */ . 예외처리 . /* * 오류 * - 에러 : 심각 오류 * - 예외 : 심각하지 않은 오류 * * 예외처리 - 프로그램을 정상적으로 종료하기 위해 * * (1) 예외를 잡자 - try ~ catch 구문 * * try { * 예외 발생할 구문 * } catch() { * 예외 발생한 후의 구문 * } finally { * 예외 발생 여부 상관없이 무조건 실행 구문 * } */ public class Ex01_TryCatch { public static void main(String[] args) { String[] str = {&quot;맛점&quot;, &quot;우산&quot;, &quot;즐거운화요일&quot;}; try { for (int i = 0; i &lt;= str.length; i++) { System.out.println(str[i]); } System.out.println(&quot;예외가 발생할 여지가 있는 구문&quot;); return; } catch(Exception ex) { // ex.toString(); ex.getMessage(); System.out.println(&quot;예외 발생: &quot; + ex.toString()); ex.printStackTrace(); } finally { // 앞에 return이 있어도 finally 실행이 된다. // connection 닫는 구문, // 비정상적으로 종료되어도 connection은 닫아야 한다. System.out.println(&quot;무조건 실행 구문&quot;); } System.out.println(&quot;프로그램 정상 종료&quot;); } } /* 맛점 우산 즐거운화요일 예외 발생: java.lang.ArrayIndexOutOfBoundsException: 3 무조건 실행 구문 프로그램 정상 종료 java.lang.ArrayIndexOutOfBoundsException: 3 at g_exception.Ex01_TryCatch.main(Ex01_TryCatch.java:29) */ . public class Ex02_TryCatch2 { public static void main(String[] args) { FileInputStream fis = null; // 파일 입출력, 웹, 네트워킹 등 자바 외부와 연결된 부분은 전부 예외처리 해야 한다. try { fis = new FileInputStream(&quot;abc.txt&quot;); System.out.println(&quot;파일 연결&quot;); fis.read(); } catch (FileNotFoundException e) { // FileNotFoundException e 과 같은 구체적인 예외를 잡지 않고 // Exception e 전체 에러를 다 잡는 것을 쓸 수 있다. System.out.println(&quot;파일없는 예외: &quot; + e.getMessage()); } catch (IOException e) { System.out.println(&quot;입출력 예외: &quot; + e.getMessage()); } catch (Exception e) { // 범용적인 예외처리는 맨 마지막에 처리해야 한다. System.out.println(&quot;그 외 예외처리&quot;); e.printStackTrace(); } finally { try { fis.close(); } catch (Exception ex) {} } } } . import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; public class Ex03_throws { public static void main(String[] args) { try { readFile(); System.out.println(&quot;파일연결&quot;); } catch (Exception ex) { System.out.println(&quot;예외발생&quot;); } } // 일반적으로는 throws Exception 으로 쓴다. static void readFile() throws FileNotFoundException, IOException { FileInputStream fis = new FileInputStream(&quot;xxx.txt&quot;); System.out.println(&quot;파일연결&quot;); fis.read(); } } . [[ 기초다지기 ]] 1. 다음 문장들 중에서 올바른 메소드 정의는? (1) void method() throw MyException {throws MyException(); } (2) void method() throw MyException {throws new MyExceptio(); } (3) void method() throws MyException {throw MyException(); } (4) void method() throws MyException {throw new MyExceptio(); } /* [답] 4 */ 2. 다음 프로그램의 출력 결과는? class Test{ static void method() { throw new Exception(); } public static void main( String[] args ) { try{ method(); } catch( Exception ex ) { System.out.println(“예외처리”); } } } (1) 컴파일 에러가 발생한다 (2) “예외처리”가 출력된다 (3) 실행은 성공하나 아무것도 출력되지 않는다. (4) 실행시 예외가 발생하여 프로그램이 비정상적으로 종료한다. /* [답] 1 */ 3. 다음 프로그램의출력 결과는? class Test{ public static void main( String[] args ) { try{ return; } finally { System.out.println(&quot;FINALLY&quot;); } } } (1) 컴파일 에러가 발생한다 (2) 컴파일 에러는 없으나 실행시 예외가 발생한다. (3) 실행은 성공하나 아무것도 출력되지 않는다. (4) “FINALLY”라는 문장이 출력된다. /* [답] 4 */ 4. 다음 프로그램의출력 결과는? class Test{ public static void main( String [] args ) { try { // 프로그램 강제 종료 System.exit(0); } finally { System.out.println(&quot;FINALLY&quot;); } } } (1) 컴파일 에러가 발생한다 (2) 컴파일 에러는 없으나 실행시 예외가 발생한다. (3) 실행은 성공하나 아무것도 출력되지 않는다. (4) “FINALLY”라는 문장이 출력된다. /* [답] 3 */ 5. 다음 프로그램에서 출력 결과로 “try”라는 단어가 몇 번 출력되나? class Test{ static void method( int i ) throws Exception { if ( i % 2 == 0 ) throw new Exception(); } public static void main( String[] args ) { for( int i = 0; i &lt;= 4 ; i++ ) { try{ method( i ); System.out.println(“try”); }catch( Exception ex ) { System.out.println(&quot;catch&quot;); } } } } /* [답] 2 0 catch 1 try 2 catch 3 try 4 catch */ 6. 다음 프로그램의출력 결과는? import java.io.IOException; class Test{ static void method() throws IOException { throw new IOException(); } public static void main( String [] args ) { try{ method(); System.out.println(“TRY”); } catch( IOException ex ) { System.out.println(“IOEXCEPTION”); } catch( Exception ex ) { System.out.println(“EXCEPTION”); } finally { System.out.println(“FINALLY”); } System.out.println(“END”); } } (1) 컴파일 에러 (2) 실행시 예외발생으로 프로그램 비정상 종료 (3) IOEXCEPTION – FINALLY – END (4) EXCEPTION – FINALLY – END (5) TRY – IOEXCEPTION – END /* [답] 3 */ 7. 다음 프로그램의출력 결과는? import java.io.IOException; class Test{ static void method() throws IOException { throw new IOException(); } public static void main( String [] args ) { try{ method(); System.out.println(“TRY”); } catch( Exception ex ) { System.out.println(“EXCEPTION”); } catch( IOException ex ) { System.out.println(“IOEXCEPTION”); } finally { System.out.println(“FINALLY”); } System.out.println(“END”); } } (1) 컴파일 에러 (2) 실행시 예외발생으로 프로그램 비정상 종료 (3) IOEXCEPTION – FINALLY – END (4) EXCEPTION – FINALLY – END (5) TRY – IOEXCEPTION – END /* [답] 1 */ 8. 다음 프로그램의출력 결과는? class Test{ static String str = “”; static void method( int i ){ try { if ( i == 10 ) throw new Exception(); str += “A”; } catch( Exception ex ) { str += “B”; return; } finally { str += “C”; } str += “D”; } public static void main( String[] args ) { method(5); method(10); System.out.println(str); } } /* [답] ACDBC */ . 클래스 . C . 배열: 동일 자료형 여러개 | 구조체(struct) : 서로 다른 자료형 여러개 | . struct { int a; String b; double d; } void method() { } . C++ . 클래스 : 서로 다른 자료형 여러개 + 함수들 | . Java . 배열 : 동일한 자료형 여러개를 하나로 묶은 것 | 클래스 : 서로 다른 자료형 여러개를 묶는 것 + 메소드들 | . 블락 씌우고 컨트롤 손 클릭하면 다음으로 넘어감 . setter getter은 자동으로 만드는 것을 권장 . 커서를 끝에 가져간다음 오른쪽 마우스 클릭 | Source &gt; Generate Getters and Setters | . Main.java . public class Main { public static void main(String[] args) { Student s = new Student(); s.name = &quot;홍길동&quot;; s.kor = 100; s.eng = 88; s.math = 77; System.out.println(&quot;총점: &quot; + s.calTotal()); s.total = 300; System.out.println(&quot;평균: &quot; + s.calAverage()); } } . Student.java . // 클래스 = 서로 다른 자료형의 변수들 + 메소드 public class Student { String name; int kor, eng, math; int total; double avg; int calTotal() { total = kor + eng + math; return total; } double calAverage() { avg = (double) total / 3; return avg; } } . CalculatorExpr.java . public class CalculatorExpr { private int num1; private int num2; private int addition; private int subtraction; private int mutiplication; private double division; public int getAddition() { int addition = num1 + num2; return addition; } public int getSubtraction() { int subtraction = num1 - num2; return subtraction; } public int getMutiplication() { int mutiplication = num1 * num2; return mutiplication; } public double getDivision() { double division = (double) num1 / num2; return division; } public int getNum1() { return num1; } public void setNum1(int num1) { this.num1 = num1; } public int getNum2() { return num2; } public void setNum2(int num2) { this.num2 = num2; } } . CalculatorTest.java . import java.util.Scanner; public class CalculatorTest { public static void main(String[] args) { int[] num0 = inputNum(); printNum(num0[0], num0[1], false); char ch = &#39;y&#39;; while (true) { System.out.println(&quot;계속 진행하시겠습니까? (y/n)&quot;); Scanner input_yn = new Scanner(System.in); ch = input_yn.next().charAt(0); if (ch == &#39;n&#39;) { System.out.println(&quot;사칙연산을 종료합니다.&quot;); break; } else if (ch == &#39;y&#39;) { int[] num = inputNum(); printNum(num[0], num[1], true); } else { System.out.println(&quot;y 또는 n로 답해주세요.&quot;); } } } static int[] inputNum() { System.out.println(&quot;숫자 두개를 입력주세요.&quot;); Scanner input = new Scanner(System.in); int num1 = input.nextInt(), num2 = input.nextInt(); int[] num = {num1, num2}; return num; } static void printNum(int num1, int num2, boolean test) { CalculatorExpr calc = new CalculatorExpr(); calc.setNum1(num1); calc.setNum2(num2); if (test == true) { System.out.printf(&quot;추출된 숫자: %d, %d n&quot;, calc.getNum1(), calc.getNum2()); } System.out.printf(&quot;덧셈: %d n&quot;, calc.getAddition()); System.out.printf(&quot;뺄셈: %d n&quot;, calc.getSubtraction()); System.out.printf(&quot;곰셈: %d n&quot;, calc.getMutiplication()); System.out.printf(&quot;나눗셈: %.2f n&quot;, calc.getDivision()); } } .",
            "url": "https://safenumz.github.io/blog/java/2019/04/23/Java_%EB%A9%94%EC%86%8C%EB%93%9C_%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "relUrl": "/java/2019/04/23/Java_%EB%A9%94%EC%86%8C%EB%93%9C_%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "date": " • Apr 23, 2019"
        }
        
    
  
    
        ,"post203": {
            "title": "[Java] 메소드",
            "content": "메소드 . public class Ex01_흐름 { public static void main(String[] args) { System.out.println(&quot;main 시작&quot;); method(); System.out.println(&quot;main 끝&quot;); } // static 메소드에서 static만 접근가능 static void method() { System.out.println(&quot;method 실행&quot;); } } . public class Ex01_흐름2 { public static void main(String[] args) { System.out.println(&quot;main 시작&quot;); // static을 안써주면 클래스를 재설정해줘야 함 Ex01_흐름2 ex = new Ex01_흐름2(); ex.method(); System.out.println(&quot;main 끝&quot;); } // static 메소드에서 static만 접근가능 void method() { System.out.println(&quot;method 실행&quot;); } } . public class Ex02_인자와반환 { public static void main(String[] args) { // 데이타 입력받기 int a = 10; double b = 20; add(a, b); } static void add(int a, double b) { // 입력받은 데이타의 합을 구해서 출력 int sum = (int)(a + b); System.out.println(&quot;합: &quot; + sum); } } . public class Ex02_인자와반환2 { public static void main(String[] args) { int sum = add(); System.out.println(&quot;합: &quot; + sum); } // void : return 되는 값이 없다는 뜻 static int add() { int a = 10, b = 20; int sum = a + b; return sum; } // return : 흐름 반환 // return 값 : 호출한 곳으로 딱 하나의 값을 반환 } . public class Ex03_인자와반환3 { public static void main(String[] args) { int[] arr = add(); // 합을 계산하기 int sum = arr[0] + arr[1]; System.out.println(&quot;합: &quot; + sum); } static int[] add() { int a = 10, b = 20; int[] arr = {a, b}; return arr; } } . public class Ex04_인자와반환4 { // main함수의 static에 접근하기 위해 static 붙임 static int a, b; // 맴버변수(다른 언어에서는 전역변수) static int sum; public static void main(String[] args) { a = 10; b = 20; add(); System.out.println(&quot;합: &quot; + sum); } static void add() { sum = a + b; } } /* 합: 30 */ . import java.util.Scanner; public class Ex03_성적 { public static void main(String[] args) { int[] score = input(); double[] result = calc(score); output(result); } static int[] input() { // 국영수 점수를 입력받기 String[] sub = {&quot;국어&quot;, &quot;영어&quot;, &quot;수학&quot;}; Scanner input = new Scanner(System.in); int[] score = new int[sub.length]; for (int i = 0; i &lt; sub.length; i++){ System.out.println(sub[i] + &quot;점수를 입력해주세요.&quot;); score[i] = input.nextInt(); } return score; } static double[] calc(int[] score) { // input()에서 입력받은 점수들의 합과 평균을 구하기 int sum = 0; for (int i = 0; i &lt; score.length; i++) { sum += score[i]; } double avg = (double) sum / score.length; double[] result = {sum, avg}; return result; } static void output(double[] result) { // calc() 에서 구한 합과 평균을 출력 System.out.printf(&quot;합은 %.0f이고 평균은 %.2f입니다.&quot;, result[0], result[1]); } } . import java.util.Scanner; public class Ex_메소드 { public static void main(String[] args) { // (문제 1) 영문자를 입력하여 이 문자가 대문자이면 false을 반환 // 소문자이면 true을 반환하는 메소드를 작성하시오. // 함수명 : checkLower // 인자 : char // 리턴(반환) : boolean System.out.println(&quot;영문자를 하나 입력해주세요.&quot;); Scanner input = new Scanner(System.in); char ch = input.next().charAt(0); boolean result = checkLower(ch); } static boolean checkLower(char ch) { if (ch &gt;= &#39;a&#39; &amp;&amp; ch &lt;= &#39;z&#39;) { return true; } else if (ch &gt;= &#39;A&#39; &amp;&amp; ch &lt;= &#39;Z&#39;) { return false; } else { return false; } } } . import java.util.Scanner; public class Ex_메소드2 { public static void main(String[] args) { // (문제 2) 영문자를 입력하여 이 문자가 소문자이면 대문자로 변환하여 반환하고 대문자라면 그대로 반환하는 메소드를 작성하시오. // 함수명 : checkUpper // 인자 : char // 리턴(반환) : char System.out.println(&quot;영문자를 하나 입력해주세요.&quot;); Scanner input = new Scanner(System.in); char ch = input.next().charAt(0); char result = checkLower(ch); System.out.println(result); } static char checkLower(char ch) { // char -&gt; Character.isLowerCase(ch) // String 대문자에서 소문자로 변환 -&gt; ch.toLowerCase(); // ch-32 대신 ch-(&#39;a&#39;-&#39;A&#39;) if (ch &gt;= &#39;a&#39; &amp;&amp; ch &lt;= &#39;z&#39;) { return (char) (ch-32); } else if (ch &gt;= &#39;A&#39; &amp;&amp; ch &lt;= &#39;Z&#39;) { return ch; } return ch; } } . overloading . public class Ex05_overloading { /* * overloading * - 동일한 이름의 메소드들 * - 인자의 자료형과 갯수가 달라야 함 * * [주의할점] add(1, 2) * int add(int a, int b) { } * double add(int x, int b) { } &lt;- 컴파일 에러 * 리턴형만 다른 경우에는 컴파일 오류 발생 */ public static void main(String[] args) { // 메소드는 카멜표기법으로 씀, 메소드는 동사로 시작하는 것이 좋음 // 변수는 동일한 변수를 쓸 수 없지만 메소드는 동일한 이름으로 쓸 수 있다. int a = 5, b = 7; add(a, b); int c = 3; double d = 3.6; add(c, d); } static void add(int a, double b) { System.out.println(a + b); } static void add(int a, int b) { System.out.println(a + b); } } . Wrong Overloading . public class Ex06_WrongOverloading { public static void main(String[] args) { String msg = &quot;안녕&quot;; output(msg); String result = output(msg); } static void output(String msg) { System.out.println(msg); } // 같은 이름의 메소드인데 return 자료형만 다를 때는 컴파일 에러 // 이런 경우에는 오버로딩을 쓸 수 없다. 이름을 바꿔줘야 함 // output1, output2 방식으로 메소명을 바꾸는 것은 권장되지 않음 // outputPrint, outputString 방식으로 메소드명을 구성하는 것이 좋음 static String output(String msg) { String result = &quot;맞점&quot; + msg; return result; } } . 프로그램 흐름 판단 . public class Ex00_복습 { public static void main(String[] args) { System.out.println(&quot;A&quot;); test(); System.out.println(&quot;B&quot;); } static void test() { System.out.println(&quot;C&quot;); sample(); imsi(); System.out.println(&quot;D&quot;); } static void sample() { System.out.println(&quot;E&quot;); } static void imsi() { System.out.println(&quot;F&quot;); } } /* A C E F D B */ . Stack vs Queue . stack : LIFO (last in first out), 인터넷 뒤로가기 | queue : FIFO, 프린트 버퍼 | . Call By Value . public class Ex07_CallByValue { public static void main(String[] args) { int a = 10, b = 20; add(a, b); // 30, 20 System.out.println(&quot;1. A = &quot; + a + &quot; B = &quot; + b); // 10, 20 } static void add(int a, int b) { a += b; System.out.println(&quot;2. A = &quot; + a + &quot; B = &quot; + b); } } /* 2. A = 30 B = 20 1. A = 10 B = 20 */ . Call By Reference . public class Ex07_CallByReference { public static void main(String[] args) { // 참조형, 주소를 가지고 있다. StringBuffer a = new StringBuffer(&quot;행복하자&quot;); StringBuffer b = new StringBuffer(&quot;짝꿍님&quot;); // 기본형인지 참조형인지 정확히 구분해야 함 add(a, b); //행복하자짝꿍님, 짝꿍님 System.out.println(&quot;2. A = &quot; + a + &quot;, B = &quot; + b); } static void add(StringBuffer a, StringBuffer b) { a.append(b); //행복하자짝꿍님, 짝꿍님 System.out.println(&quot;1. A = &quot; + a + &quot;, B = &quot; + b); } } /* 1. A = 행복하자짝꿍님, B = 짝꿍님 2. A = 행복하자짝꿍님, B = 짝꿍님 */ . stack | heap | . add |   | . (a 1000) | 1000 행복하자짝꿍님 | . (b 2000) | 2000 짝꿍님 | . main |   | . a 1000 | (1000 행복하자) | . b 2000 | (2000 짝꿍님) | . Call By String . String은 Call By Reference지만 Call By Value와 동일하게 출력된다. | String Class는 내용이 조금만 변경되도 메모리를 새로 잡는다. | . public class Ex07_CallByString { public static void main(String[] args) { String a = new String(&quot;행복하자&quot;); String b = new String(&quot;짝꿍님&quot;); add(a, b); System.out.println(&quot;2. A = &quot; + a + &quot;, b = &quot; + b); } static void add(String a, String b) { a += b; System.out.println(&quot;1. A = &quot; + a + &quot;, B = &quot; + b); } } /* 1. A = 행복하자짝꿍님, B = 짝꿍님 2. A = 행복하자, b = 짝꿍님 */ . 아이피, 아이디, 패스워드 쉽게 변경 . 소스를 수정하지 않고 접근하고자 하는 것을 수정할 수 있다. | main의 인자를 수정하면 실행할 때 받아 올 수 있다. | . Run As &gt; Run Configurations &gt; Arguments &gt; Program arguments . 192.168.0.1 scott tiger . public class Ex08_Main { /* * 메소드명 : main * 인자 : String[] args * 리턴형 : void * public : 다른 곳에서 접근가능 */ // Java의 main함수는 return되는 것이 없다. /* * Test.java -&gt; Test.class * (1) 컴파일 : javac Test.java * (2) 실행 : java Test 192.168.0.1 scott tiger * (3) * */ public static void main(String[] args) { for (int i = 0; i &lt; args.length; i++) { System.out.println(args[i]); } } } /* 192.168.0.1 scott tiger */ . [[ 기초다지기 ]] 1. 다음 프로그램의 결과는? class Test { public static void method( int i, int j) { i &lt;&lt;= j; } public static void main ( String [] args ) { int i = 4, j = 2; method( i, j ); System.out.println(“i = “ + i ); } } /* 4 0100 (2) 2 0010 (2) 8 1000 (2) i = 4 */ 2. 다음 아래의 method 메소드를오버로딩 한 메소드들은? long method ( int a , int b ) { return a+b; } (1) void method ( int x, int y ) { return x+y; } (2) long method ( long a, long b ) { return a+b; } (3) long Method ( long a, long b ) { return a+b; } (4) long method ( int a, long b ) { return a+b; } /* 1은 컴파일 오류 (오버로딩 x, void인데 return이 있음) 3은 이름이 다르다. 그냥 다른 함수 2, 4 */ 3. 다음 프로그램의 결과는? class Test { static void method( int i, int j) { i += j; System.out.println(“i = “ + i + “ , j = “ + j ); } public static void main ( String [] args ) { int i = 4, j = 2; method( i, j ); System.out.println(“i = “ + i + “ , j = “ + j ); } } /* i = 6, j = 2 i = 4, j = 2 */ 4. 다음 프로그램의 결과는? class Test { static void method( String i, String j) { i += j; System.out.println(“i = “ + i + “ , j = “ + j ); } public static void main ( String [] args ) { String i = “안녕”, j = “자바”; method( i, j ); System.out.println(“i = “ + i + “ , j = “ + j ); } } /* i = 안녕자바, j = 자바 i = 안녕, j = 자바 */ 5. 다음 프로그램의 결과는? class Test { static int method( int i, int j) { int sum = i + j; System.out.println(“sum = “ + sum ); return sum; } public static void main ( String [] args ) { int i = 4, j = 2; int sum = 0; method( i, j ); System.out.println(“sum = “ + sum ); } } /* sum = 6 sum = 0 */ 6. 이 프로그램에서 출력 결과가 third = 2라고 출력하기 위해 콘솔창에서 자바를 실행했을 때 맞는 것은? class Test { public static void main ( String [] args ) { String first = args[1]; String second = args[2]; String third = args[3]; System.out.println(“third = “ + third ); } } (1)java Test 1 2 3 4 (2)java Test 1432 (3)java Test 4 3 2 1 (4)java Test 1 4 3 2 /* 4 */ . /* [필수] multiple 메소드 만들기 - 2개의 int 인자인 경우는 곱셈계산 한 결과를 출력 - 1개의 int 인자와 1개의 char 인자인 경우는 int 인자 수 만큼 char 인자 문자를 출력 - 2개의 int 인자와 1개의 char 인자인 경우는 char 인자 문자를 n * m 형식의 행과 열로 출력 */ public class Ex00_MutipleMethod { public static void main(String[] args) { mul(4, 6, &#39;a&#39;); mul(5, &#39;z&#39;); mul(2, 5); } static void mul(int a, int b) { System.out.println(a * b); } static void mul(int a, char b) { for (int i = 0; i &lt; a; i++) { System.out.print(b + &quot; &quot;); } System.out.println(); } static void mul(int a, int b, char c) { for (int i = 0; i &lt; a * b; i++) { System.out.print(c + &quot; &quot;); if ((i + 1) % b == 0) { System.out.println(); } } } } . import java.util.*; public class Ex00_Voting { private static Scanner input_num; private static Scanner input_votes; public static void main(String[] args) { // 결과를 [ , , ] List 형식으로 출력 System.out.println(votesList()); } static Object votesList() { // 후보의 수 받기 System.out.println(&quot;후보의 수를 입력해주세요&quot;); input_num = new Scanner(System.in); int num = input_num.nextInt(); // 투표 결과 받기 System.out.println(&quot;투표 결과를 [1, 4, 3, 6, 3] 형식으로 입력해주세요.&quot;); input_votes = new Scanner(System.in); StringTokenizer stn = new StringTokenizer(input_votes.nextLine(), &quot;[ , ]&quot;); // 투표결과를 리스트에 저장 List&lt;Integer&gt; votes = new ArrayList&lt;Integer&gt;(); while (stn.hasMoreElements()) { votes.add(Integer.parseInt(stn.nextElement().toString())); } // 1~n번 후보의 득표수 집계 int[] arr = new int[num]; for (int i = 0; i &lt; votes.size(); i++) { arr[votes.get(i) - 1] += 1; } // 가장 높은 득표수 계산 int max = arr[0]; for (int i = 1; i &lt; num; i++) { if (max &lt; arr[i]) { max = arr[i]; } } // 가장 높은 득표를 받은 후보들의 리스트를 리턴 List&lt;Object&gt; result = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; num; i++) { if (max == arr[i]) { result.add(i + 1); } } return result; } } . import java.util.Scanner; public class Ex09_복습 { public static void main(String[] args) { char[][] arr = input(); output(arr); } /** * 함수명 : input * 인자 : none * 리턴형 : char[][] * 역할 : */ static char[][] input() { // 두 정수의 알파벳 문자 하나를 입력받기 System.out.println(&quot;정수 2개를 입력해 주세요.&quot;); Scanner input_num = new Scanner(System.in); int n = input_num.nextInt(), m = input_num.nextInt(); System.out.println(&quot;알파벳 문자 하나를 입력해 주세요.&quot;); Scanner input_char = new Scanner(System.in); char alpha = input_char.next().charAt(0); return makeSquare(n, m, alpha); } static char[][] makeSquare(int n, int m, char alpha) { // 입력받은 값을 이용해서 n*m 문자 배열을 만들기 char[][] arr = new char[n][m]; for (int i = 0; i &lt; n; i++) { for (int j = 0; j &lt; m; j++) { arr[i][j] = (char) alpha++; } } return arr; } static void output(char[][] arr) { // 문자열 배열을 출력 for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } } } .",
            "url": "https://safenumz.github.io/blog/java/2019/04/22/Java_%EB%A9%94%EC%86%8C%EB%93%9C.html",
            "relUrl": "/java/2019/04/22/Java_%EB%A9%94%EC%86%8C%EB%93%9C.html",
            "date": " • Apr 22, 2019"
        }
        
    
  
    
        ,"post204": {
            "title": "[알고리즘] Java 숫자야구 알고리즘",
            "content": "package d_array; import java.util.Scanner; public class Ex07_baseball { public static void main(String[] args) { // 1. 랜덤으로 숫자 3개 생성 int[] baseball = new int[3]; for (int i = 0; i &lt; baseball.length; i++) { baseball[i] = (int)(Math.random()*9) + 1; for (int j = 0; j &lt; i; j++) { if (baseball[i] == baseball[j]) { j--; } } } // 2. 사용자가 입력한 답을 answer에 각각 담기 System.out.println(&quot;Insert Coin!!!&quot;); Scanner input_coin = new Scanner(System.in); int coin = input_coin.nextInt(); while (true) { int[] answer = new int[3]; Scanner input = new Scanner(System.in); System.out.println(&quot;숫자야구는 서로 다른 3개의 숫자를 입력 받습니다.&quot;); for (int i = 0; i &lt; answer.length; i++) { System.out.printf(&quot;%d번째 숫자를 입력해 주세요! n&quot;, i+1); answer[i] = input.nextInt(); } int strike = 0, ball = 0; for (int i = 0; i &lt; baseball.length; i++) { for (int j = 0; j &lt; answer.length; j++) { if (i == j &amp; baseball[i] == answer[j]) { strike += 1; } else if (i != j &amp; baseball[i] == answer[j]) { ball += 1; } } } if (strike == 3) { System.out.println(&quot;3 Strike 아웃! 이닝 종료되었습니다.&quot;); break; } else { System.out.printf(&quot;%d Strike %d Ball 입니다 n&quot;, strike, ball); } coin -= 1; if (coin == 0) { System.out.println(&quot;시도 횟수가 초과되었습니다. 게임을 종료합니다.&quot;); break; } } } } .",
            "url": "https://safenumz.github.io/blog/algorithm/2019/04/20/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "relUrl": "/algorithm/2019/04/20/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "date": " • Apr 20, 2019"
        }
        
    
  
    
        ,"post205": {
            "title": "[Java] 배열",
            "content": "배열 . 배열 초기화 . public class Ex00_배열초기화 { public static void main(String[] args) { int a; // 변수선언(기본형) -&gt; 메모리 확보 a = 10; // 값지정 int b = 20; // 초기화 /* int[] arr; // 변수선언(참조형) -&gt; 메모리 확보 X arr = new int[3]; // 객체생성 (메모리 확보) arr[0]=10; arr[1]=20; arr[2]=33; */ int[] arr; arr = new int[] {3, 30, 13}; // 배열 초기화 // 생략버전 int[] arr = {3, 30, 13}; for(int i=0; i&lt;arr.length; i++) { System.out.println(arr[i]); } } } . 요일 . import java.util.Calendar; public class CalendarEx01 { public static void main(String[] args) { // 요일 (일요일 = 1, 월요일 = 2, .. ) String[] dayofweek = {&quot;일요일&quot;, &quot;월요일&quot;, &quot;화요일&quot;, &quot;수요일&quot;, &quot;목요일&quot;, &quot;금요일&quot;, &quot;토요일&quot;}; System.out.println(dayofweek[c.get(Calendar.DAY_OF_WEEK)-1]); } } // 금요일 . 큰 값 구하기, 버블정렬 이해 . public class Ex03_큰값구하기 { public static void main(String[] args) { // 이 중에서 가장 큰 값을 추출해서 출력 /* &lt; 최대값찾기 &gt; 최대값은 배열 중에서 가장 큰 값을 찾아내는 알고리즘이다. 사람은 데이타를 보면 척보고 어느것이 가장 크고, 어느것이 가장 작은지 알아낼 수 있다. 그러나 컴퓨터는 본다, 비교한다 라는 기능을 자동으로 할 수 없으므로 두뇌가 행동하는 것과 같은 기능을 부여해야 한다. 최대값을 찾는 방법은 이렇다. 우선 임의의 변수를 정의하고 예를 들어 max 라 하자. 1. 이 변수에 배열의 첫번째 값을 입력한다. 2. 이 값이 가장 크다고 가정하고 다음번 방에 있는 데이타와 비교를 한다. 3. 이 변수에 저장된 값보다 큰 값이 들어오면 더 큰 값으로 바꿔치기를 한다. 4. 이 과정을 배열이 끝날때 까지 반복하면 된다. */ // 버블 정렬: 두 수를 비교해서 크면 뒤로, 끝까지가면 처음부터 다시 시작 int[] arr = {22, 50, 13, 7, 25, 35}; int max = arr[0]; for(int i=0; i&lt;arr.length-1; i++) { if (max &lt; arr[i+1]) { max = arr[i+1]; } } System.out.println(max); } } /* 7/13/22/25/35/50/ */ . 로또 번호 생성 . package d_array; public class Ex05_로또 { public static void main(String[] args) { // 0.12345 * 10 = 1.23455 -&gt; 소수점 제거 -&gt; 1 // 0.99999 * 10 = 9.99999 int[][] lotto = new int[5][6]; // 로또번호 생성 (5줄 6개) for(int i = 0; i &lt; lotto.length; i++) { for(int j = 0; j &lt; lotto[i].length; j++) { lotto[i][j] = (int)(Math.random()*45)+1; for (int k = 0; k &lt; j; k++) { if (lotto[i][j] == lotto[i][k]) { j--; } } } } // 정렬 for (int k = 0; k &lt; lotto.length; k++) { for(int i=lotto[k].length-1; i&gt;0; i--) { for(int j=0; j&lt;i; j++) { if(lotto[k][j] &gt; lotto[k][j+1]) { int temp = lotto[k][j]; lotto[k][j] = lotto[k][j+1]; lotto[k][j+1] = temp; } } } } // 출력 for(int i=0; i &lt; lotto.length; i++) { int sum = 0; for(int j=0; j&lt;lotto[i].length; j++) { sum += lotto[i][j]; System.out.print(lotto[i][j]+ &quot; t&quot;); } // 숫자의 합 106~170 사이라면 별표 출력 if (sum &gt; 106 &amp;&amp; sum &lt; 170 ) { System.out.print(&quot;*&quot;); } System.out.println(); } } } . 동적 배열 . public class Ex06_동적배열 { public static void main(String[] args) { char[][] star = new char[4][4]; for (int i = 0; i &lt; star.length; i++) { for (int j = 0; j &lt; i + 1; j++) { star[i][j] = &#39;*&#39;; } } // 출력 for (int i = 0; i &lt; star.length; i++) { for (int j = 0; j &lt; star[i].length; j++) { System.out.print(star[i][j]); } System.out.println(); } } } . 숫자야구 . package d_array; import java.util.Scanner; public class Ex07_baseball { public static void main(String[] args) { // 1. 랜덤으로 숫자 3개 생성 int[] baseball = new int[3]; for (int i = 0; i &lt; baseball.length; i++) { baseball[i] = (int)(Math.random()*9) + 1; for (int j = 0; j &lt; i; j++) { if (baseball[i] == baseball[j]) { j--; } } } // 2. 사용자가 입력한 답을 answer에 각각 담기 System.out.println(&quot;Insert Coin!!!&quot;); Scanner input_coin = new Scanner(System.in); int coin = input_coin.nextInt(); while (true) { int[] answer = new int[3]; Scanner input = new Scanner(System.in); System.out.println(&quot;숫자야구는 서로 다른 3개의 숫자를 입력 받습니다.&quot;); for (int i = 0; i &lt; answer.length; i++) { System.out.printf(&quot;%d번째 숫자를 입력해 주세요! n&quot;, i+1); answer[i] = input.nextInt(); } int strike = 0, ball = 0; for (int i = 0; i &lt; baseball.length; i++) { for (int j = 0; j &lt; answer.length; j++) { if (i == j &amp; baseball[i] == answer[j]) { strike += 1; } else if (i != j &amp; baseball[i] == answer[j]) { ball += 1; } } } if (strike == 3) { System.out.println(&quot;3 Strike 아웃! 이닝 종료되었습니다.&quot;); break; } else { System.out.printf(&quot;%d Strike %d Ball 입니다 n&quot;, strike, ball); } coin -= 1; if (coin == 0) { System.out.println(&quot;시도 횟수가 초과되었습니다. 게임을 종료합니다.&quot;); break; } } } } . 방번호 . import java.util.Scanner; import java.util.StringTokenizer; public class EX_방번호 { public static void main(String[] args) { System.out.println(&quot;다솜이의 방 번호를 입력해주세요.&quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); int numlen= (int)(Math.log10(num)+1); int[] num_list = new int[numlen]; int mok = num; for (int i = 0; i &lt; numlen; i++) { int na = mok % 10; if (na == 9 | na == 6) { num_list[i] = 6; } else { num_list[i] = na; } mok /= 10; } int[] zn_list = new int[9]; for (int k = 0; k &lt; num_list.length; k++) { if (num_list[k] == 9) { zn_list[6] += 1; } else { zn_list[num_list[k]] += 1; } } zn_list[6] = zn_list[6] / 2 + zn_list[6] % 2; int zn_max = zn_list[0]; for (int i = 0; i &lt; zn_list.length; i++) { System.out.printf(&quot;%d %d n&quot;, i, zn_list[i]); } for (int i = 1; i &lt; zn_list.length; i++) { if (zn_max &lt; zn_list[i]) { zn_max = zn_list[i]; } } System.out.printf(&quot;필요한 세트 개수의 최소값은 %d개 입니다&quot;, zn_max); } } . 평균 구하기 . import java.util.Scanner; import java.util.StringTokenizer; public class Ex_평균구하기 { public static void main(String[] args) { System.out.println(&quot;클래스의 수를 입력해 주세요.&quot;); Scanner classnum = new Scanner(System.in); int num = classnum.nextInt(); Scanner inputscore = new Scanner(System.in); int[][] score = new int[num][]; for (int i = 0; i &lt; num; i++) { System.out.printf(&quot;%d번 클래스의 학생수와 점수를 입력해주세요 n &quot; + &quot;(예) 5 50 60 70 80 90 n&quot;, i + 1); String stline = inputscore.nextLine(); StringTokenizer st = new StringTokenizer(stline); score[i] = new int[Integer.parseInt(st.nextToken())]; for (int j = 0; j &lt; score[i].length; j++) { score[i][j] = Integer.parseInt(st.nextToken()); } } double[] avg_list = new double[score.length]; for (int i = 0; i &lt; score.length; i++) { int temp_sum = 0; for (int j = 0; j &lt; score[i].length; j++) { temp_sum += score[i][j]; } double temp_avg = (double)temp_sum / score[i].length; avg_list[i] = temp_avg; } for (int i = 0; i &lt; score.length; i++) { int temp_count = 0; for (int j = 0; j &lt; score[i].length; j++) { if (score[i][j] &gt; avg_list[i]) { temp_count += 1; } } double temp_rate = (double) temp_count / score[i].length; System.out.printf(&quot;%.3f %% n&quot;, temp_rate*100); } } } . OX문제 . import java.util.Scanner; public class Ex_OX문제 { public static void main(String[] args) { System.out.println(&quot;O와 X로 구성된 문자열을 입력해주세요.&quot;); Scanner input = new Scanner(System.in); char[] ch = input.nextLine().toCharArray(); int sum = 0; for (int i = 0; i &lt; ch.length; i++) { if (ch[i] == &#39;O&#39;) { int k = 1; while (true) { sum += k; i += 1; k += 1; if (i == ch.length) break; if (ch[i] == &#39;X&#39;) break; } } } System.out.println(&quot;점수: &quot; + sum); } } . 정리 . 배열 : 여러개의 값들 하나의 변수명으로 사용 . 반복문 (1) 배열 변수 선언 int[] kor; (2) 메모리 확보 (new 이용) kor = new int[10]; (3) 값 지정 kor[i] = 값; . 1. 다음 중 배열을 선언시 잘못된 것은? (1)int [] arr = { 1, 2, 3 }; (2)int [] arr [] ; (3)int [] [] arr ; (4)int arr[3] = { 1, 2, 3 }; 4 2. 아래의 배열 선언에서arr.length 값은? int arr [] [] = { { 1, 2, 3, 4, 5}, { 6, 7, 8 }, { 9 } , { 7, 7, 7, 7 } }; 4 3. 아래의 배열 선언에서arr[2].length 값은? int arr [] [] = { { 1, 2, 3, 4, 5}, { 6, 7, 8 }, { 9 } , { 7, 7, 7, 7 } }; 1 4. 합이 가장 큰 행을 구하는 프로그램을 작성하세요. int a[][]= new int[][]{ {3, -5, 12 }, {-2, 11, 2, -7}, {21, -21, -35, -93, -11}, {9, 14, 39, -98}}; . public class maxhab { public static void main(String[] args) { int a[][]= new int[][]{ {3, -5, 12 }, {-2, 11, 2, -7}, {21, -21, -35, -93, -11}, {9, 14, 39, -98}}; int[] rowsum = new int[a.length]; for (int i = 0; i &lt; a.length; i++) { int tempsum = 0; for (int j = 0; j &lt;a[i].length; j++) { tempsum += a[i][j]; } rowsum[i] = tempsum; } } } .",
            "url": "https://safenumz.github.io/blog/java/2019/04/19/Java_%EB%B0%B0%EC%97%B4.html",
            "relUrl": "/java/2019/04/19/Java_%EB%B0%B0%EC%97%B4.html",
            "date": " • Apr 19, 2019"
        }
        
    
  
    
        ,"post206": {
            "title": "[Java] 제어문 및 배열",
            "content": "제어문 . (1) 조건문 : if ~ else . (2) 분기문 : switch . (3) 반복문 : for while do ~ while . (4) 제어문 벗어난 문 : break / continue . [[ 기초다지기 ]] 1. switch 문에서 조건식에 넣을 수 있는 데이터 타입은? (1) boolean (2) char (3) byte (4) float (5) double (6) int switch문에는 문자와 정수만 들어간다. 2, 3, 6 2. 다음 중 에러가 발생하는 문장은? (1) if ( i = 0 ) { } (2) if ( j &lt; 10 ){ } (3) switch( ‘A’ ) {} (4) switch( 100 ) {} 1 4. 다음 프로그램의 실행결과는? public class Test{ public static void main( String [] args ) { int i = 0, j = 0; for( i = 0 ; i &lt; 5 ; i++ ) { for( j = 0 ; j &lt; 4 ; j++ ) { if( i == 2 &amp;&amp; j == 1 ) break; if( i == 3 &amp;&amp; j == 2 ) continue; } } System.out.println(“i = “ + i + “ , j = “ + j ); } } (1) 컴파일 에러가 발생한다. (2) i = 2, j = 1 (3) i = 3, j = 2 (4) i = 5, j = 4 5. 다음 프로그램의 실행결과는? public class Test{ public static void main( String [] args ) { int i = 2, j = 0; switch( i ) { case 0 : j+= 0; case 2 : j+= 2; case 4 : j+= 4; default : j += 6; } System.out.println( j ); } } (1) 2 (2) 0 (3) 6 (4)12 4 . import java.util.*; public class 주사위의합 { public static void main(String[] args) { // 입력값 System.out.println(&quot;숫자를 입력해주세요&quot;); Scanner input = new Scanner(System.in); int num = input.nextInt(); // 1. 첫번째 주사위의 수 for (int i=1; i&lt;=6; i++) { // 2. 두번째 주사위의 수 for (int j =1; j&lt;=6; j++) { if (num == i+j) { System.out.printf(&quot;%d %d&quot;, i, j); System.out.println(); } } } } } . String vs StringBuffer . stack heap . s 참조형 시작번지 1000번지 “안녕” . 4byte s가 1000번지를 찾아가는 구조 . sb | 시작번지 2000번지 “반갑” | . String class 내용이 조금만 변경되도 메모리를 새로 잡는다. String buffer는 같은 메모리에 수정된 내용을 저장한다. 계속 변하는 것을 처리할 때는 String이 아니라 String Buffer를 써야 한다. C는 메모리를 프로그래머가 직접 정리해 줘야 하지만 Java는 가비지컬렉터가 자동으로 처리해준다. . 변화가 심한 문자열은 반드시 StringBuffer로 해주어야 한다. . package z_useful; /* * 자바에서 문자열 처리하는 클래스 * 1. String * 2. StringBuffer * 3. StringBuilder = StringBuffer (99% 동일 - 1% 다른점 멀티) */ public class StringStringBuffer { public static void main(String[] args) { String s = &quot;안녕&quot;; s += &quot;하세요&quot;; System.out.println(s); // new를 안써도 되는 것은 String밖에 없다. StringBuffer sb = new StringBuffer(&quot;반갑&quot;); sb.append(&quot;습니다&quot;); System.out.println(sb); } } . String vs StringBuffer 속도 비교 . package z_useful; public class SpeedCheak { public static void main(String[] args) { long startTime = 0L; long elapsedTime = 0L; //1. String으로 문자열 만들기의 속도 측정 String str1 = &quot;&quot;; startTime = System.currentTimeMillis(); for(int i=0; i&lt;50000; i++){ str1 += &quot;H&quot;; } elapsedTime = System.currentTimeMillis() - startTime; System.out.println(&quot;String 문자열만들기:&quot; + elapsedTime); //2. StringBuffer로 문자열 만들기의 속도 측정 StringBuffer sb = new StringBuffer(); startTime = System.currentTimeMillis(); for(int i=0; i&lt;50000; i++){ sb.append(&quot;H&quot;); } elapsedTime = System.currentTimeMillis() - startTime; System.out.println(&quot;StringBuffer 문자열만들기:&quot; + elapsedTime); } } // String 문자열만들기:970 // StringBuffer 문자열만들기:3 . while 문 . 반복문이 몇 번 돌아가는지 아는 상황에서는 for문, 몇 번 돌아갈지 알 수 없을 떄는 while문을 쓴다. | . public class Ex08_while개념 { public static void main(String[] args) { // 1~10까지의 합 구하기 int sum = 0; int i = 1; // for ( ; i&lt;=10; ) { // sum += i; // i++; // } while(i&lt;=10) { sum+=i; i++; } System.out.println(&quot;결과: &quot; + sum); } } // 결과: 55 . package c_control; import java.util.Scanner; public class Ex08_while개념 { public static void main(String[] args) { // 1~10까지의 합 구하기 // int sum = 0; // int i = 1; // //// for ( ; i&lt;=10; ) { //// sum += i; //// i++; //// } // // while(i&lt;=10) { // sum+=i; // i++; // } // System.out.println(&quot;결과: &quot; + sum); // [ 연습 ] 구구단 수를 입력받아서 구구단 출력 ( while 문으로 ) System.out.println(&quot;숫자를 입력해주세요.&quot;); Scanner input = new Scanner(System.in); int a = input.nextInt(); int i = 1; while (i&lt;=9) { System.out.printf(&quot;%d * %d = %d n&quot;, a, i, a*i); i += 1; } } } . import java.util.StringTokenizer; public class Ex08_while개념 { public static void main(String[] args) { String str = &quot;독도는 대한민국의 아름다운 섬입니다.&quot;; StringTokenizer st = new StringTokenizer(str); while(st.hasMoreTokens()) { System.out.println(st.nextToken()); } } } // 독도는 // 대한민국의 // 아름다운 // 섬입니다. . import java.util.StringTokenizer; public class Ex08_while개념 { public static void main(String[] args) { String str = &quot;100*3+4/2-5&quot;; StringTokenizer st = new StringTokenizer(str,&quot;+-*/%&quot;); while(st.hasMoreTokens()) { System.out.println(st.nextToken()); } } } // 100 // 3 // 4 // 2 // 5 . package c_control; /* * [3, 6, 9 게임] * 1~50까지 숫자 중에서 3, 6, 9 포함되면 그 갯수만큼 &#39;짝&#39; 출력 * 하나도 포함되지 않으면 그 숫자 출력 */ public class Ex09_while연습 { public static void main(String[] args) { for (int i=1; i&lt;=50; i++) { int mok = i; boolean su369 = false; while(mok!=0) { int na = mok % 10; if (na==3 | na==6 | na==9) { System.out.print(&quot;짝&quot;); su369 = true; } mok /= 10; } if(su369) { System.out.println(); } else { System.out.println(i); } } } } // 1 // 2 // 짝 // 4 // 5 // 짝 // 7 // 8 // 짝 // 10 // 11 // 12 // 짝 // 14 // 15 // 짝 // 17 // 18 // 짝 // 20 // 21 // 22 // 짝 // 24 // 25 // 짝 // 27 // 28 // 짝 // 짝 // 짝 // 짝 // 짝짝 // 짝 // 짝 // 짝짝 // 짝 // 짝 // 짝짝 // 40 // 41 // 42 // 짝 // 44 // 45 // 짝 // 47 // 48 // 짝 // 50 . public class Ex연습_8의숫자세기 { public static void main(String[] args) { // 1부터 10,000까지 8이라는 숫자가 총 몇번 나오는가? // 8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다. // (※ 예를들어 8808은 3, 8888은 4로 카운팅 해야 합니다) int sum = 0; for (int i=1; i&lt;=10000; i++) { int mok = i; while(mok!=0) { int na = mok % 10; if (na == 8) { sum += 1; } mok /= 10; } } System.out.println(sum); } } // 4000 . do ~ while 문 . import java.util.*; public class Ex10_do_while { public static void main(String[] args) { // 유니코드 0으로 초기화, 자바스타일 &#39; u0000&#39;, c스타일 &#39; 0&#39; char result = &#39; 0&#39;; do { // 구구단 입력하면 구구단 출력 Scanner input = new Scanner(System.in); System.out.println(&quot;구구단 입력-&gt;&quot;); int dan = input.nextInt(); for (int i=1; i&lt;=9; i++) { System.out.printf(&quot;%d * %d = %d n&quot;, dan, i, dan*i); } System.out.println(&quot;다시 할래?(Y|y)&quot;); result = input.next().charAt(0); } while (result == &#39;Y&#39; | result ==&#39;y&#39;); } } // 구구단 입력-&gt; // 9 // 9 * 1 = 9 // 9 * 2 = 18 // 9 * 3 = 27 // 9 * 4 = 36 // 9 * 5 = 45 // 9 * 6 = 54 // 9 * 7 = 63 // 9 * 8 = 72 // 9 * 9 = 81 // 다시 할래?(Y|y) // y // 구구단 입력-&gt; // 4 // 4 * 1 = 4 // 4 * 2 = 8 // 4 * 3 = 12 // 4 * 4 = 16 // 4 * 5 = 20 // 4 * 6 = 24 // 4 * 7 = 28 // 4 * 8 = 32 // 4 * 9 = 36 // 다시 할래?(Y|y) . while문 예제 . 3. 다음 프로그램의 실행하여 출력되는 숫자는? public class Test{ public static void main( String [] args ) { int x = 1; while( x++ &lt; 3 ) System.out.println(x); } } (1) 1 (2) 2 (3) 3 (4) 4 2 3 4. while문을 벗어난 후 sum의 값이 1부터 10까지 더한 55가 출력되도록 밑줄에 들어갈 알맞은 연산자는? int n = 1; int sum = 0; while( true ){ sum += n; if ( n++ 여기 10 ) break; } System.out.println(&quot;SUM = &quot; + sum ); &gt;= . break continue . break - 블럭을 벗어나는 명령 | continue - 블럭의 끝으로 가라는 명령 | . public class Ex01_break_continue { public static void main(String[] args) { for (int i=0; i&lt;2; i++) { for (int j=0; j&lt;3; j++) { if(j == 1) break; // continue; System.out.println(&quot;&lt;&quot; + i + &quot;,&quot; + j + &quot;&gt;&quot;); } System.out.println(&quot;데이타&quot;); } } } // &lt;0,0&gt; // 데이타 // &lt;1,0&gt; // 데이타 . public class Ex01_break_continue { public static void main(String[] args) { // END를 쓰면 벗어나고 싶은 반복문 위에 라벨을 붙이면, // break END; 에서 지정된 반복문을 벗어난다 END: for (int i=0; i&lt;2; i++) { for (int j=0; j&lt;3; j++) { if(j == 1) break END; // continue; System.out.println(&quot;&lt;&quot; + i + &quot;,&quot; + j + &quot;&gt;&quot;); } System.out.println(&quot;데이타&quot;); } } } // &lt;0,0&gt; . public class Ex01_break_continue { public static void main(String[] args) { // END를 쓰면 벗어나고 싶은 반복문 위에 라벨을 붙이면, // continue END; 에서 라벨이 붙은 반복문 처음으로 돌아간다. END: for (int i=0; i&lt;2; i++) { for (int j=0; j&lt;3; j++) { if(j == 1) continue END; System.out.println(&quot;&lt;&quot; + i + &quot;,&quot; + j + &quot;&gt;&quot;); } System.out.println(&quot;데이타&quot;); } } } // &lt;0,0&gt; // &lt;1,0&gt; . 4. 다음 프로그램의 실행결과는? public class Test{ public static void main( String [] args ) { int i = 0, j = 0; for( i = 0 ; i &lt; 5 ; i++ ) { for( j = 0 ; j &lt; 4 ; j++ ) { if( i == 2 &amp;&amp; j == 1 ) break; if( i == 3 &amp;&amp; j == 2 ) continue; } } System.out.println(“i = “ + i + “ , j = “ + j ); } } 5, 4 (1) 컴파일 에러가 발생한다. (2) i = 2, j = 1 (3) i = 3, j = 2 (4) i = 5, j = 4 6. 다음 프로그램의 실행결과는? class Test{ public static void main( String [] args ) { int i = 1, j = 10; do { if( i &gt; j ) break; j--; } while( ++i &lt; 5 ); System.out.println(&quot;i = &quot;+ i + &quot; , j = &quot; + j); } } (1) i = 4, j = 6 (2) i = 5, j = 6 (3) i = 5, j = 5 (4) i = 6, j = 6 2 7. 다음 프로그램의 실행결과는? public class Test{ public static void main( String [] args ) { int i = 0, j = 0, k = 0; OUTER : for( i=0; i &lt; 10 ; i++ ) MIDDLE : for ( j=0; j &lt; 3; j++ ) INNER : for ( k=0; k &lt; 4; k++ ) { if( i==4 &amp;&amp; j ==2 ) break OUTER; } System.out.println(i); System.out.println(j); System.out.println(k); } } // 4 // 2 // 0 . 배열 . 메모리 stack | heap int[] kor -&gt; null | 1000번주소 [80 / / / / /] [0] [1] [3] [4] . import java.util.Scanner; public class Ex01_성적 { public static void main(String[] args) { int[] kor; // stack에 변수 선언, stack은 초기화해줘야 함 kor = new int[5]; // heap에 메모리 잡, heap은 자동초기화됨 Scanner input = new Scanner(System.in); System.out.println(&quot;점수 입력&quot;); for(int i=0; i&lt;5; i++) { kor[i] = input.nextInt(); } int total = 0; for (int i=0; i&lt;5; i++) { total += kor[i]; } System.out.println(&quot;총점: &quot;+ total); } } // 점수 입력 // 80 // 90 // 10 // 50 // 10 // 총점: 240 . 2차원 . public class Ex02_2차원 { public static void main(String[] args) { int[][] score; score = new int[3][4]; score[1][2] = 100; score[2][3] = 100; for(int i=0; i&lt;3; i++) { for(int j=0; j&lt;4; j++) { System.out.print(score[i][j] + &quot; &quot;); } System.out.println(); } } } . package d_array; import java.util.Scanner;s import java.util.StringTokenizer; public class StudentScore { private static Scanner input1; private static Scanner input2; public static void main(String[] args) { String[] sub = {&quot;국어&quot;, &quot;영어&quot;, &quot;수학&quot;}; System.out.println(&quot;입력할 학생수를 입력하세요.&quot;); input1 = new Scanner(System.in); int num = input1.nextInt(); int[][] score = new int[num][sub.length]; for(int i=0; i&lt;num; i++) { System.out.printf(&quot;%d번째 학생의 성적을 입력 -&gt;&quot;, i+1); input2 = new Scanner(System.in); String temp = input2.nextLine(); StringTokenizer st = new StringTokenizer(temp, &quot;/&quot;); for(int j=0; j&lt;sub.length; j++) { score[i][j] = Integer.parseInt(st.nextToken()); } } for(int i=0; i&lt;num; i++) { int temp_sum = 0; for(int j=0; j&lt;sub.length; j++) { temp_sum += score[i][j]; } double temp_avg = (double) (temp_sum/sub.length); System.out.format(&quot;%d째 학생의 총점은 %d이고 평균은 %.2f입니다. n&quot;, i+1, temp_sum, temp_avg); } for(int j=0; j&lt;sub.length; j++) { int temp_sum = 0; for(int i=0; i&lt;num; i++) { temp_sum += score[i][j]; } double temp_avg = (double) (temp_sum/num);; System.out.format(&quot;%s과목 총점은 %d이고 평균은 %.2f입니다. n&quot;, sub[j], temp_sum, temp_avg); } } } .",
            "url": "https://safenumz.github.io/blog/java/2019/04/18/Java_%EC%A0%9C%EC%96%B4%EB%AC%B8_%EB%B0%8F_%EB%B0%B0%EC%97%B4.html",
            "relUrl": "/java/2019/04/18/Java_%EC%A0%9C%EC%96%B4%EB%AC%B8_%EB%B0%8F_%EB%B0%B0%EC%97%B4.html",
            "date": " • Apr 18, 2019"
        }
        
    
  
    
        ,"post207": {
            "title": "[Java] 제어문",
            "content": "제어문 - 조건문 . if 문 . 제어문 : 프로그램의 흐름을 제어하는 문장 | (1) 조건문 if 문 | switch 문 | . | (2) 반복문 for 문 | while | do~while | . | . package c_control; /* * 1 - 정수값 1 ( 연산가능 ) 4byte * &#39;1&#39; - 문자 1 2byte * &quot;1&quot; - 문자열 1 다른메모리 저장 */ import java.util.Calendar; public class Ex03_주민번호_나이 { public static void main(String[] args) { String id = &quot;181212-3234567&quot;; String nai1 = id.substring(0, 2); // nai1=&quot;80&quot; // casting 연산자는 기본형끼리만, (int) nai1 불가 // String -&gt; int ( &quot;80&quot; -&gt; 80 ) int nai2 = Integer.parseInt(nai1); char n = id.charAt(7); int age = 0; Calendar c = Calendar.getInstance(); int year = c.get(Calendar.YEAR); // 주민번호의 7번째 문자를 얻어와서 // 1어가나 2라면 1900을 더하고 // 3이거나 4라면 2000을 더해야 함 // Calendar 클래스를 이용하여 년도값을 구해서 년도 지 if (n == &#39;1&#39; || n ==&#39;2&#39;) { age = year - ( 1900 + nai2 ) + 1; } else if (n == &#39;3&#39; || n == &#39;4&#39;) { age = year - ( 2000 + nai2 ) + 1; } System.out.println(&quot;당신의 나이: &quot; + age); } } // 당신의 나이:2 . package z_useful; import java.util.Calendar; public class CalendarEx01 { public static void main(String[] args) { // 이미 Java가 캘린더 값을 가지고 있기 때문에 new Calendar가 아니라 get을 쓴다. // Java, JavaScript에서는 오브젝트가 아니라 인스턴스라는 용어를 씀, 객체 // 1월이 0번째 Calendar c = Calendar.getInstance(); System.out.println(c.get(Calendar.YEAR) + &quot;년&quot;); System.out.println((c.get(Calendar.MONTH) + 1) + &quot;월&quot;); System.out.println(c.get(Calendar.DATE) + &quot;일&quot;); // 시, 분, 초 출력 System.out.println(c.get(Calendar.HOUR) + &quot;시&quot;); System.out.println(c.get(Calendar.MINUTE) +&quot;분&quot;); System.out.println(c.get(Calendar.SECOND) + &quot;초&quot;); // 그 외 정보 System.out.println(&quot;그 해의 &quot; + c.get(Calendar.DAY_OF_YEAR) + &quot;입니다.&quot;); // 그 해의 몇 번째 주인지 // 그 달의 몇 번째 주인지 System.out.println(c.get(Calendar.WEEK_OF_YEAR)); System.out.println(c.get(Calendar.WEEK_OF_MONTH)); // 요일 (일요일 = 1, 월요일 = 2, .. ) System.out.println(c.get(Calendar.DAY_OF_WEEK)); } } // 2019년 // 4월 // 17일 // 10시 // 42분 // 17초 // 그 해의 107입니다. // 16 // 3 // 4 . switch 문 . package c_control; /* * switch 문 : 분기문 * switch (___) { * case A: 명령어A; break; * case B: 명령어B; break; * case C: 명령어C; break; * default: 그 외 명령어; break;(맨 마지막에 나오면 생략가능) * } * : 정수형/문자형/String(1.5버전 이후) */ public class Ex04_switch_주민번호 { public static void main(String[] args) { String id = &quot;801212-1234567&quot;; char chul = id.charAt(8); String home = &quot;&quot;; switch(chul) { case &#39;0&#39;: home = &quot;서울&quot;; break; case &#39;1&#39;: home = &quot;인천/부산&quot;; break; case &#39;2&#39;: home = &quot;경기&quot;; break; case &#39;3&#39;: home = &quot;제주&quot;; break; default: home = &quot;외국인&quot;; } System.out.println(&quot;출신지: &quot; + home); } } // 출신지: 경기 . // [1] -- int i =1, j=0; switch ( i ) { case 2 : j += 6; case 4 : j += 1; default : j += 2; case 0 : j += 4; } System.out.println( j ); // 6 // [2] -- // 다음 switch 문을 실행하여 출력되는 문장은? int a = 10; switch ( a / 3 ) { case 1 : System.out.println(&quot;일&quot; ); case 2 : System.out.println(&quot;이&quot; ); case 3 : System.out.println(&quot;삼&quot; ); case 4 : System.out.println(&quot;사&quot; ); } . package b_operator; /* * 비교연산자 &gt; &lt; &gt;= &lt;= == != */ public class Ex04_Comparable { public static void main(String[] args) { int k = 77, e = 88, m = 99; double avg = (double) (k+e+m)/3; System.out.println(&quot;평균: &quot; + avg); String score = &quot;&quot;; switch((int)(avg/10)) { case 10: case 9: score=&quot;A학점&quot;; break; case 8: score=&quot;B학점&quot;; break; case 7: score=&quot;C학점&quot;; break; default: score=&quot;F학점&quot;; } System.out.println(score); } } // 평균: 88.0 // B학점 . for문 . package c_control; /* * for (초기값; 조건문; 증가식) * { * 반복할 문장들; * } */ public class Ex05_for개념 { public static void main(String[] args) { int sum = 0; for (int i = 1; i &lt;= 10; i++) { sum += i; } System.out.println(&quot;결과: &quot; + sum); } } // 결과: 55 . // [연습] 1~100까지의 홀수의 합과 짝수의 합 package c_control; /* * for (초기값; 조건문; 증가식) * { * 반복할 문장들; * } */ public class Ex05_for개념 { public static void main(String[] args) { // int sum = 0; // for (int i = 1; i &lt;= 10; i++) { // sum += i; // } // System.out.println(&quot;결과: &quot; + sum); int even = 0, odd = 0; // for (int i = 1; i &lt;= 100; i++) { // if (i % 2 == 0) { // even += i; // } else { // odd += i; // } // } for (int i = 1; i &lt;= 100; i+=2) { odd += i; even+=(i+1); } System.out.println(&quot;짝수의 합: &quot; + even); System.out.println(&quot;홀수의 합: &quot; + odd); } } // 짝수의 합: 2550 // 홀수의 합: 2500 . package c_control; public class Ex05_for개념 { public static void main(String[] args) { // A~Z 출력 for (char c = &#39;A&#39;; c &lt;= &#39;Z&#39;; c++) { System.out.print(c); } System.out.println(); for (char c = &#39;A&#39;; c &lt;= &#39;Z&#39;; c+=2) { System.out.print(c); } System.out.println(); for (char c = &#39;Z&#39;; c &gt;= &#39;A&#39;; c--) { System.out.print(c); } } } // ABCDEFGHIJKLMNOPQRSTUVWXYZ // ACEGIKMOQSUWY // ZYXWVUTSRQPONMLKJIHGFEDCBA . # 반복문 # 문제 1)1~ N까지의 숫자를 다음처럼 출력하라 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . package c_control; public class Ex06_for연습 { public static void main(String[] args) { for (int i = 1; i &lt;= 15; i++) { // &#39; &#39; 공백에 아스키값, &quot; &quot; 써야 함 System.out.print(i + &quot; &quot;); // 5의 배수라면 개행 if (i % 5 == 0) System.out.println(); } } } // 1 2 3 4 5 // 6 7 8 9 10 // 11 12 13 14 15 . 문제2) 문자열처리하기 문자 N(a~z, A~Z)를 입력받아 N이 소문자면 a부터 N까지 인쇄하고 N이 대문자이면 문자 N부터 Z까지 출력하라 그 밖의 문자가 입력되면 Error 를 출력하라 입력 출력 f abcdef X XYZ 6 Error . package c_control; import java.util.Scanner; public class Ex06_for연습 { public static void main(String[] args) { System.out.println(&quot;하나의 영문자를 입력해주세요.&quot;); Scanner input = new Scanner(System.in); char ch = input.next().charAt(0); if (ch &gt;= &#39;a&#39;) { for (char i = &#39;a&#39;; i &lt;= ch; i++) { System.out.print(i); } } else if (ch &gt;= &#39;A&#39;) { for (char i = ch; i &lt;= &#39;Z&#39;; i++) { System.out.print(i); } } else { System.out.println(&quot;Error&quot;); } } } // 하나의 영문자를 입력해주세요. // f // abcdef . 문제3 ) 입력받은 문자열의 뒤집어서 출력하세요 [예] 입력 출력 안녕 친구 구친 녕안 CarpeDiem meiDepraC . package c_control; import java.util.Scanner; public class Ex06_for연습 { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;문장입력-&gt;&quot;); String msg = input.nextLine(); int length = msg.length(); // for문 구조 잡기 // charAt() 이용해서 화면 출력 for (int i = length-1; i&gt;=0 ; i--) { System.out.print(msg.charAt(i)); } } } // 문장입력-&gt; // CarpeDiem // meiDepraC . File &gt; Export &gt; Archive : Zip 파일로 프로젝트가 압축된다. 필요할 때 Import해서 쓰면 된다. . 별표 찍기 . package c_control; public class Ex07_중첩for { public static void main(String[] args) { // ***** for (int i = 0; i &lt; 5; i++) { for (int j = 0; j &lt; i+1; j++) { System.out.print(&quot;*&quot;); } System.out.println(); } } } // * // ** // *** // **** // ***** . package c_control; public class Ex07_중첩for { public static void main(String[] args) { // ***** for (int i = 0; i &lt;5; i++) { for (int j = 4; j &gt;= i; j--) { System.out.print(&quot;*&quot;); } System.out.println(); } } } // ***** // **** // *** // ** // * . package c_control; public class Ex07_중첩for { public static void main(String[] args) { for (int j = 0; j &lt; 26; j++) { for (char i = &#39;A&#39;; i &lt;= &#39;Z&#39;; i++) { System.out.print(i); } System.out.println(); } } }package c_control; public class Ex_중첩예제 { public static void main(String[] args) { for (int j = 0; j &lt; 26; j++) { for (char i = &#39;A&#39;; i &lt;= &#39;A&#39;+ j; i++) { System.out.print(i); } System.out.println(); } } } // A // AB // ABC // ABCD // ABCDE // ABCDEF // ABCDEFG // ABCDEFGH // ABCDEFGHI // ABCDEFGHIJ // ABCDEFGHIJK // ABCDEFGHIJKL // ABCDEFGHIJKLM // ABCDEFGHIJKLMN // ABCDEFGHIJKLMNO // ABCDEFGHIJKLMNOP // ABCDEFGHIJKLMNOPQ // ABCDEFGHIJKLMNOPQR // ABCDEFGHIJKLMNOPQRS // ABCDEFGHIJKLMNOPQRST // ABCDEFGHIJKLMNOPQRSTU // ABCDEFGHIJKLMNOPQRSTUV // ABCDEFGHIJKLMNOPQRSTUVW // ABCDEFGHIJKLMNOPQRSTUVWX // ABCDEFGHIJKLMNOPQRSTUVWXY // ABCDEFGHIJKLMNOPQRSTUVWXYZ . package c_control; public class Ex_중첩예제 { public static void main(String[] args) { for (int j = 0; j &lt; 26; j++) { for (char i = &#39;A&#39;; i &lt;= &#39;Z&#39;-j ; i++) { System.out.print(i); } System.out.println(); } } } // ABCDEFGHIJKLMNOPQRSTUVWXYZ // ABCDEFGHIJKLMNOPQRSTUVWXY // ABCDEFGHIJKLMNOPQRSTUVWX // ABCDEFGHIJKLMNOPQRSTUVW // ABCDEFGHIJKLMNOPQRSTUV // ABCDEFGHIJKLMNOPQRSTU // ABCDEFGHIJKLMNOPQRST // ABCDEFGHIJKLMNOPQRS // ABCDEFGHIJKLMNOPQR // ABCDEFGHIJKLMNOPQ // ABCDEFGHIJKLMNOP // ABCDEFGHIJKLMNO // ABCDEFGHIJKLMN // ABCDEFGHIJKLM // ABCDEFGHIJKL // ABCDEFGHIJK // ABCDEFGHIJ // ABCDEFGHI // ABCDEFGH // ABCDEFG // ABCDEF // ABCDE // ABCD // ABC // AB // A . package c_control; public class Ex_중첩예제 { public static void main(String[] args) { for (int j = 0; j &lt; 26; j++) { for (char i = &#39;Z&#39;; i &gt;= &#39;A&#39;+j ; i--) { System.out.print(i); } System.out.println(); } } } // ZYXWVUTSRQPONMLKJIHGFEDCBA // ZYXWVUTSRQPONMLKJIHGFEDCB // ZYXWVUTSRQPONMLKJIHGFEDC // ZYXWVUTSRQPONMLKJIHGFED // ZYXWVUTSRQPONMLKJIHGFE // ZYXWVUTSRQPONMLKJIHGF // ZYXWVUTSRQPONMLKJIHG // ZYXWVUTSRQPONMLKJIH // ZYXWVUTSRQPONMLKJI // ZYXWVUTSRQPONMLKJ // ZYXWVUTSRQPONMLK // ZYXWVUTSRQPONML // ZYXWVUTSRQPONM // ZYXWVUTSRQPON // ZYXWVUTSRQPO // ZYXWVUTSRQP // ZYXWVUTSRQ // ZYXWVUTSR // ZYXWVUTS // ZYXWVUT // ZYXWVU // ZYXWV // ZYXW // ZYX // ZY // Z . package c_control; public class Ex_중첩예제 { public static void main(String[] args) { for (int j = 0; j &lt; 26; j++) { for (char i = &#39;Z&#39;; i &gt;= &#39;Z&#39;-j ; i--) { System.out.print(i); } System.out.println(); } } } // Z // ZY // ZYX // ZYXW // ZYXWV // ZYXWVU // ZYXWVUT // ZYXWVUTS // ZYXWVUTSR // ZYXWVUTSRQ // ZYXWVUTSRQP // ZYXWVUTSRQPO // ZYXWVUTSRQPON // ZYXWVUTSRQPONM // ZYXWVUTSRQPONML // ZYXWVUTSRQPONMLK // ZYXWVUTSRQPONMLKJ // ZYXWVUTSRQPONMLKJI // ZYXWVUTSRQPONMLKJIH // ZYXWVUTSRQPONMLKJIHG // ZYXWVUTSRQPONMLKJIHGF // ZYXWVUTSRQPONMLKJIHGFE // ZYXWVUTSRQPONMLKJIHGFED // ZYXWVUTSRQPONMLKJIHGFEDC // ZYXWVUTSRQPONMLKJIHGFEDCB // ZYXWVUTSRQPONMLKJIHGFEDCBA . package c_control; public class Ex_중첩예제 { public static void main(String[] args) { // 행단위 26회 반복 출력 for (int j = 0; j &lt; 26; j++) { // 문자열 출력 for (char i = (char) (&#39;A&#39; + j); i &lt;= &#39;Z&#39;; i++) { System.out.print(i); } // 개행 System.out.println(); // 행단위마다 띄여쓰기 출력 for (int k = 0; k &lt;= j; k++) { System.out.print(&#39; &#39;); } } } } // ABCDEFGHIJKLMNOPQRSTUVWXYZ // BCDEFGHIJKLMNOPQRSTUVWXYZ // CDEFGHIJKLMNOPQRSTUVWXYZ // DEFGHIJKLMNOPQRSTUVWXYZ // EFGHIJKLMNOPQRSTUVWXYZ // FGHIJKLMNOPQRSTUVWXYZ // GHIJKLMNOPQRSTUVWXYZ // HIJKLMNOPQRSTUVWXYZ // IJKLMNOPQRSTUVWXYZ // JKLMNOPQRSTUVWXYZ // KLMNOPQRSTUVWXYZ // LMNOPQRSTUVWXYZ // MNOPQRSTUVWXYZ // NOPQRSTUVWXYZ // OPQRSTUVWXYZ // PQRSTUVWXYZ // QRSTUVWXYZ // RSTUVWXYZ // STUVWXYZ // TUVWXYZ // UVWXYZ // VWXYZ // WXYZ // XYZ // YZ // Z . package c_control; import java.util.Scanner; public class Ex06_for연습 { public static void main(String[] args) { System.out.println(&quot;하나의 영문자를 입력해주세요.&quot;); Scanner input = new Scanner(System.in); char ch = input.next().charAt(0); if (ch &gt;= &#39;a&#39; &amp;&amp; ch &lt;= &#39;z&#39;) { for (char i = &#39;a&#39;; i &lt;= ch; i++) { System.out.print(i); } } else if (ch &gt;= &#39;A&#39; &amp;&amp; ch &lt;= &#39;Z&#39;) { for (char i = ch; i &lt;= &#39;Z&#39;; i++) { System.out.print(i); } } else { System.out.println(&quot;Error&quot;); } } } // 하나의 영문자를 입력해주세요. // f // abcdef . package c_control; import java.util.Scanner; public class Ex_연습 { public static void main(String[] args) { System.out.println(&quot;행과 열의 수를 입력해주세요&quot;); Scanner input = new Scanner(System.in); int column = input.nextInt(), row = input.nextInt(); for (int i = 1; i &lt;= column*row; i++) { System.out.print(i + &quot; &quot;); if (i % column == 0){ System.out.println(); } } } } // 행과 열의 수를 입력해주세요 // 4 3 // 1 2 3 4 // 5 6 7 8 // 9 10 11 12 . package c_control; import java.util.Scanner; public class 도전문제1 { public static void main(String[] args) { System.out.println(&quot;사각형의 높이와 너비를 숫자로 입력해주세요&quot;); Scanner input = new Scanner(System.in); int m = input.nextInt(), n = input.nextInt(); for (int i = 1; i &lt;= m*n; i++) { System.out.print(i + &quot; &quot;); if (i % n == 0){ System.out.println(); } } } } . package c_control; import java.util.Scanner; public class 도전문제2 { public static void main(String[] args) { System.out.println(&quot;숫자를 입력해주세요&quot;); Scanner input = new Scanner(System.in); int n = input.nextInt(); for (int i = 1; i &lt;= n; i++) { for (int j = i; j &lt; i + n*n; j = j+4){ System.out.print(j + &quot; &quot;); } System.out.println(); } } } . package c_control; import java.util.Scanner; public class 도전문제3 { public static void main(String[] args) { System.out.println(&quot;숫자를 입력해주세요&quot;); Scanner input = new Scanner(System.in); int nrow = input.nextInt(), ncol = input.nextInt(); for (int i = 1; i &lt;= nrow; i++) { if (i % 2 == 0) { for (int k = i*ncol; k &gt; i*ncol-ncol; k--) { System.out.print(k + &quot; &quot;); } } else { for (int j = 1 + (i-1)*ncol; j &lt; 1 + i*ncol; j++){ System.out.print(j + &quot; &quot;); } } System.out.println(); } } } .",
            "url": "https://safenumz.github.io/blog/java/2019/04/17/Java_%EC%A0%9C%EC%96%B4%EB%AC%B8.html",
            "relUrl": "/java/2019/04/17/Java_%EC%A0%9C%EC%96%B4%EB%AC%B8.html",
            "date": " • Apr 17, 2019"
        }
        
    
  
    
        ,"post208": {
            "title": "[Java] 연산자",
            "content": "Java 연산자 . 단항 . ++ -- + - ~ ! (cast) . 산술 . * / % , + - . 쉬프트 . &lt;&lt; &gt;&gt; &gt;&gt;&gt; . 비교(관계) . &lt; &gt; &lt;= &gt;= , == != ,instanceof . 논리 . &amp; ^ | , &amp;&amp; || . 삼항 . ?: . 대입 . = *= /= %= += -= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |= . 산술연산자 . package b_operator; /* * 증가 감소 연산 ++, -- */ public class Ex01_IncDec { public static void main(String[] args) { int a = 5, b = 7; System.out.println(&quot;A = &quot; + (a+1) + &quot;, B = &quot; + (b+1)); a = a + 1; b = b - 1; System.out.println(&quot;A = &quot; + a + &quot;, B = &quot; + b); a++; b--; System.out.println(&quot;A = &quot; + a + &quot;, B = &quot; + b); ++a; --b; System.out.println(&quot;A = &quot; + a + &quot;, B = &quot; + b); } } // A = 6, B = 8 // A = 6, B = 6 // A = 7, B = 5 // A = 8, B = 4 . package b_operator; public class Ex01_IncDec { public static void main(String[] args) { int a = 5, b = 7; int result = ++a; System.out.println(&quot;Result: &quot; + result + &quot;, A = &quot; + a); int result2 = a++; System.out.println(&quot;Result2: &quot; + result2 + &quot;, A = &quot; + a); } } // Result: 6, A = 6 // Result2: 6, A = 7 . package b_operator; public class Ex01_IncDec { public static void main(String[] args) { int a = 5, b = 7; System.out.println(&quot;A = &quot; + ++a + &quot;, B = &quot; + --b); System.out.println(&quot;A = &quot; + a++ + &quot;, B = &quot; + b--); System.out.println(&quot;A = &quot; + a + &quot;, B = &quot; + b); } } // A = 6, B = 6 // A = 6, B = 6 // A = 7, B = 5 . 논리 연산자 . int 4byte 15 000.. / 00.. / 000.. / 000111 비트 111.. / 11.. / 111.. / 111000 . package b_operator; /* * not : 결과를 반대로 하는 연산자 * - 일반논리 (true/false) : ! * - 이진논리 (비트의 값: 0/1) : ~ */ public class Ex02_Not { public static void main(String[] args) { boolean result = 3 &gt; 4; System.out.println(result); System.out.println(!result); int a = 15; System.out.println(~a); } } // false // true // -16 . package b_operator; /* * 산술연산자 : * / % + - */ import java.util.Scanner; public class Ex03_Arithmetic { public static void main(String[] args) { // 1. 숫자 하나를 입력받기 (Scanner - import java.util.Scanner) // 2. 홀수인지 짝수인지 연산하여 출력 (% : 나머지 연산자) System.out.println(&quot;숫자를 입력해주세요.&quot;); Scanner input = new Scanner(System.in); int a = input.nextInt(); if ( a % 2 == 0 ) { System.out.println(&quot;짝수입니다.&quot;); } else { System.out.println(&quot;홀수입니다.&quot;); } } } // 숫자를 입력해주세요 // 23 // 홀수입니다. . 비교 연산자 . package b_operator; /* * 비교연산자 &gt; &lt; &gt;= &lt;= == != */ public class Ex04_Comparable { public static void main(String[] args) { int k = 77, e = 88, m = 99; double avg = (double) (k+e+m)/3; System.out.println(&quot;평균: &quot; + avg); if (avg &gt;= 90) { System.out.println(&quot;A학점&quot;); } else if (avg &gt;= 80) { System.out.println(&quot;B학점&quot;); } else if (avg &gt;= 70) { System.out.println(&quot;C학점&quot;); } } } // 평균: 88.0 // B학점 . 일반논리 연산자 . package b_operator; /* * 논리연산자 * - 일반논리 (true / false) : &amp;&amp; || * - 이진논리 (bit에 있는 1/0) : &amp; | ^ */ public class Ex05_GeneralLogical { public static void main(String[] args) { int 성적 = 75; char 태도 = &#39;A&#39;; // 성적향상반 조건 - 80점 이상이고 태도는 &#39;A&#39;이어야 함 if (성적 &gt;= 80 &amp;&amp; 태도 == &#39;A&#39;) { System.out.println(&quot;성적향상반&quot;); } // 우등생 조건 - 성적은 80점 이상이거나 태도는 &#39;A&#39;이면 가능 if (성적 &gt;= 80 || 태도 == &#39;A&#39;) { System.out.println(&quot;우등생&quot;); } } } // 우등생 . package b_operator; import java.util.*; public class Ex05_GeneralLogical { public static void main(String[] args) { // 문자 하나를 입력받아 // (1) 대문자인지 출력 // (2) 대문자인지 소문자인지 그외인지 출력 System.out.println(&quot;문자 입력 하나 입력-&gt;&quot;); Scanner input = new Scanner(System.in); char ch = input.next().charAt(0); if (Character.isUpperCase(ch) == true) { System.out.println(&quot;대문자입니다.&quot;); } else if (Character.isLowerCase(ch)) { System.out.println(&quot;소문자입니다.&quot;); } else { System.out.println(&quot;알수없는 문자입니다&quot;); } } } . package b_operator; import java.util.*; public class Ex05_GeneralLogical { public static void main(String[] args) { // 문자 하나를 입력받아 // (1) 대문자인지 출력 // (2) 대문자인지 소문자인지 그외인지 출력 System.out.println(&quot;문자 입력 하나 입력-&gt;&quot;); Scanner input = new Scanner(System.in); char ch = input.next().charAt(0); if ( ch &gt;= &#39;A&#39; &amp;&amp; ch &lt;= &#39;Z&#39; ) { System.out.println(&quot;대문자입니다.&quot;); } else if ( ch &gt;= &#39;a&#39; &amp;&amp; ch &lt;= &#39;z&#39; ) { System.out.println(&quot;소문자입니다.&quot;); } else { System.out.println(&quot;알 수 없는 문자입니다.&quot;); } } } // 문자 입력 하나 입력-&gt; // A // 대문자입니다. . package b_operator; /* * shift : 모든 비트의 값을 이동하는 연산자 * * &gt;&gt; : 오른쪽 이동 * &lt;&lt; : 왼쪽 이동 * &gt;&gt;&gt; : 오른쪽 이동 ( 부호에 0 ) */ public class Ex06_BinaryLogical { public static void main(String[] args) { int a = 15, b = 10; int and = a &amp; b; int or = a | b; int xor = a ^ b; System.out.println(and); // 1010 10 System.out.println(or); // 1111 15 System.out.println(xor); // 0101 5 } } // 10 // 15 // 5 . package b_operator; public class Ex06_BinaryLogical { public static void main(String[] args) { int a = 4; System.out.println(a&gt;&gt;2); // 0001 1 System.out.println(a&lt;&lt;1); // 1000 8 int b = -4; System.out.println(b&gt;&gt;2); System.out.println(b&lt;&lt;1); } } // 1 // 8 // -1 // -8 . 숏서킷로직 : 일반논리에 적용 . &amp;&amp; 연산자는 일단 false가 나오는 순간에 이후의 연산을 하지 않는다. | || 연산자는 true가 나오는 순간에 이후의 연산을 하지 않는다. | . package b_operator; /* * 숏서킷로직 : 일반논리에 적용 */ public class Ex08_ShortCircuitLogic { public static void main(String[] args) { int a = 3; if ( a &gt; 3 &amp;&amp; ++a &gt; 3) { System.out.println(&quot;조건만족&quot;); } System.out.println(&quot;A = &quot; + a); } } // A = 3 . package b_operator; public class Ex08_ShortCircuitLogic { public static void main(String[] args) { int a = 3; if (a &gt; 1 || ++a &gt; 3) { System.out.println(&quot;조건만족2&quot;); } System.out.println(&quot;A = &quot; + a); } } // 조건만족2 // A = 3 . 원래 &amp;, | 는 비트를 건드리는 것이지만 혼동을 방지하기 위해 &amp;, |도 일반논리에 사용할 수 있다. . package b_operator; public class Ex08_ShortCircuitLogic { public static void main(String[] args) { int a = 3; if ( a &gt; 3 &amp; ++a &gt; 3) { System.out.println(&quot;조건만족&quot;); } System.out.println(&quot;A = &quot; + a); int b = 3; if (b &gt; 1 | ++b &gt; 3) { System.out.println(&quot;조건만족2&quot;); } System.out.println(&quot;A = &quot; + b); } } // A = 4 // 조건만족2 // A = 4 . [[ 기초다지기 ]] 1. 다음 프로그램의 결과는? class Test { public static void main ( String [] args ) { int i = 4, j = 2; i = i &lt;&lt; 2; System.out.println(“result = “ + i ); } } 1 (00010000) 4 (00000100) 2 (00000010) 2. 다음 중 short circuit logic이 적용되는 연산자는? (1) &amp; (2) | (3) &amp;&amp; (4) || (5) ^ 3, 4 3. 다음 프로그램의 결과는? class Test { public static void main ( String [] args ) { System.out.println( 4 &amp;&amp; 7 ); } } (1) 컴파일 오류 발생 (2) 3 (3) 4 (4) 7 1 4 (00000100) 7 (00000111) 일반논리(&amp;&amp;)는 true false -&gt; 컴파일 오류 발생 이진논리(&amp;)로 하면 4 4. 다음 프로그램의 결과는? class Test { public static void main ( String [] args ) { int i = 5; System.out.println( i++ ); System.out.println( i++ ); } } (1) 6 (2) 5 (3) 6 (4) 5 7 7 6 6 4 5. 다음 프로그램의 결과는? class Test { public static void main ( String [] args ) { int a = -5; if ( ( a&gt; 0 ) &amp;&amp; ( ( ++a / 3 ) &gt; 0 ) ) { a++; } System.out.println( a ); } } -5 . 1. 연산자 int z = 10 - 7 ^ 3 + 1 * 2 &amp; 4; z의 값은? 7 3^5&amp;4 3 00000011 5 00000101 4 00000100 . 자동줄맞춤 단축키 : ctrl + a -&gt; ctrl + i . package c_control; public class Ex01_if_주민번호 { public static void main(String[] args) { String id = &quot;800101-3234567&quot;; char sung = id.charAt(7); // 1이거나 3이거나 9이면 남자를 출력 // 2이거나 4이거나 0이면 여자를 출력 if (sung == &#39;1&#39; | sung == &#39;3&#39; | sung == &#39;9&#39;) { System.out.println(&quot;남자입니다.&quot;); } else if (sung == &#39;2&#39; | sung == &#39;4&#39; | sung == &#39;0&#39;) { System.out.println(&quot;여자입니다.&quot;); } else { System.out.println(&quot;기타&quot;); } } } // 남자입니다. . 우리대학의 학번은 총 10자리로 되어 있습니다. 맨 앞의 4자리는 입학년도이고 5번째 문자는 단과대 번호입니다. 1 : 공대 2 : 사회대 그 뒤의 2자리는 각 학과번호입니다. 공과대학인 경우는 11 : 컴퓨터학과 12 : 소프트웨어학과 13 : 모바일학과 22 : 자바학과 33 : 서버학과 사회대학인 경우는 11 : 사회학과 12 : 경영학과 13 : 경제학과 ex) 2017111001 는 2017년도에 입학한 공대 컴퓨터학과 학생입니다 ex) 2019211001 는 2019년도에 입학한 사회대 사회학과 학생입니다 ex) 2018133001 는 2018년도에 입학한 공대 서버학과 학생입니다 . package c_control; public class Ex02_if_학번 { public static void main(String[] args) { String hakbun = &quot;2018211001&quot;; String hakyeon = hakbun.substring(0, 4); char dan = hakbun.charAt(4); String hak = hakbun.substring(5, 7); String dande = &quot;&quot;; String hakgwa = &quot;&quot;; if (dan == &#39;1&#39;) { dande = &quot;공대&quot;; if ( hak.equals(&quot;11&quot;)) { hakgwa = &quot;컴퓨터학과&quot;; } } else if (dan == &#39;2&#39;) { dande = &quot;사회대&quot;; if ( hak.equals(&quot;11&quot;)) { hakgwa = &quot;사회학과&quot;; } } System.out.println(hakbun + &quot;님은 &quot; + hakyeon + &quot;년에 입학한 &quot; + dande + &quot; &quot; + hakgwa + &quot; 학생 입니다&quot;); } } // 2018211001님은 2018년에 입학한 사회대 사회학과 학생 입니다 . 삼항연산자 . package c_control; /* * 삼항연산자 * (조건)? A : B * 조건이 true이면 A를 실행하고 false이면 B를 실행한다. */ public class Ex09_Samhang { public static void main(String[] args) { int score = 81; String result = (score &gt;= 80)? &quot;합격&quot; : &quot;불합격&quot;; System.out.println(result); // int score = 71; // String result = &quot;&quot;; // if (score &gt;= 80) result = &quot;합격&quot;; // else result = &quot;불합격&quot;; // System.out.println(&quot;당신은 &quot; + result + &quot;입니다.&quot;) } } // 합격 . package c_control; import java.util.Scanner; import java.util.*; public class Ex09_Samhang { public static void main(String[] args) { // [문제] 두 수를 입력받아 큰 수를 출력 (삼항연산자 이용) Scanner input = new Scanner(System.in); System.out.println(&quot;첫번째 숫자를 입력해 주세요.&quot;); int a = input.nextInt(); System.out.println(&quot;두번째 숫자를 입력해 주세요.&quot;); int b = input.nextInt(); int result = (a &gt; b)? a : b; System.out.println(result + &quot;이 더 크다&quot;); } } // 첫번째 숫자를 입력해 주세요. // 40 // 두번째 숫자를 입력해 주세요. // 100 // 100이 더 크다 . package c_control; /* * 대입연산자: = * - 축약대입연산자 ( 산술 / 이진논리 / 쉬프트 ) */ public class Ex10_Assignment { public static void main(String[] args) { int a = 10, b = 7; a += b; // a = a + b; System.out.println(&quot;A = &quot; + a); // 17 a -= b; System.out.println(&quot;A = &quot; + a); // 10 a *= b; System.out.println(&quot;A = &quot; + a); // 70 a %= b; System.out.println(&quot;A = &quot; + a); // 0 a /= b; System.out.println(&quot;A = &quot; + a); // 0 } } // A = 17 // A = 10 // A = 70 // A = 0 // A = 0 . // 삼항연산자 이용 package b_operator; import java.util.*; public class ddd { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;숫자 3개를 입력해 주세요.&quot;); int a = input.nextInt(); int b = input.nextInt(); int c = input.nextInt(); int midnum = (a &gt;= b &amp;&amp; c &gt;= a || b &gt;= a &amp;&amp; a &gt;= c)? a : (b &gt;= a &amp;&amp; c &gt;= b || b &gt;= c &amp;&amp; a &gt;= b)? b : c; System.out.println(&quot;Middle Number is &quot;+ midnum); } } // 숫자 3개를 입력해 주세요. // 500 // 200 // 600 // Middle Number is 500 . double result = ((a-b)*(a-c) &lt;= 0)? a : ((b-a)*(b-c)&lt;= 0)? b : c; System.out.println((int) result); . 정리 . 변수 : 값 하나를 저장하기 위해 메모리에 할당하고 이름을 부여 | 연산자 : 계산=연산 | JVM : Java Virtual Machine, Java를 구동하는 가상머신, .class 파일을 인식, Java는 JVM으로부터 구동됨, 운영체제로부터 구속되지 않음 | 자바는 서버와 운영체제로부터 종속적이지 않습니다. | .",
            "url": "https://safenumz.github.io/blog/java/2019/04/16/Java_%EC%97%B0%EC%82%B0%EC%9E%90.html",
            "relUrl": "/java/2019/04/16/Java_%EC%97%B0%EC%82%B0%EC%9E%90.html",
            "date": " • Apr 16, 2019"
        }
        
    
  
    
        ,"post209": {
            "title": "[Java] 개발환경 및 데이터 타입",
            "content": "Java 설치 . SE : standard | EE : enterprise | ME : micro . | 8버전 설치 | JDK 설치 | 이클립스 설치 | . 데이터베이스 . RDBMS : 실수 용납 x, 예매 이체 | NoSQL : 빅데이터, 트랜드 | . 제어판 이 컴퓨터에 대한 원격 연결 허용 아래 권장내용 체크 해제 . Java 환경변수 설정 . 고급 시스템 설정 &gt; 고급 | . JAVA_HOME=C: Program Files Java jdk PATH=%JAVA_HOME% bin . jdk : java development kit, 컴파일 부터 실행까지 전부 개발 | jre : 자바를 실행할 수 있는 환경 . | javac : java compile, java를 실행하는 명령어 | cd : change directory | dir : directory | . java 실행 . $ vi hellojava.java . // hellojava.java public class hellojava { public static void main(String[] args) { System.out.println(&quot;Hello Java&quot;); } } . $ javac hellojava.java $ java hellojava . $ cd d: mywork java 드라이브가 바뀌면 한번더 이동해야 바뀐다. $ d: $ dir . 이클립스 설정 . 이클립스 단축키 . ctrl + space : 자동으로 나옴 | 예) syso + ctrl + space == System.out.println | 컴파일 + 실행: ctrl + F11 | 자동 import : ctrl + shift + o | 주석 : ctrl + / | 자동줄맞춤 : ctrl + a -&gt; ctrl + i | ctrl + shift -&gt; 변수 선택하여 연결된 변수 찾는다. | 블락 씌우고 컨트롤 손 클릭하면 다음으로 넘어감 | . src 아래 class 생성 . public static void main 체크 | . 한글 깨짐 현상 방지 : utf-8 설정 . Window &gt; Preferences &gt; General &gt; Workspace 경로 . Text file encoding &gt; utf-8 로 설정 | Refresh using native hooks or pooling 체크 | . 폰트 설정 . Window &gt; Preferences &gt; Appearance &gt; colors and Font | . Java 프로젝트 생성 . 폴더 생성 : Package ex) a_datatype | 파일 생성 : Class | public static void main 체크 | 배포할 때는 src가 아니라 bin 폴더 안에 있는 내용만 배포 | 개발할 때는 이클립스를 사용, 가볍게 소스확인 할 때는 notepad++ 프로그램 사용하면 편리함 | . 변수 . 단 하나의 값을 저장할 수 있는 메모리 상의 이름 | . (1) 명명규칙 . 대소문자 구분하며 길이제한이 없다 | 예약어는 사용 안됨 | 문자 숫자 조합하되 숫자로 시작하면 안됨 | 언더바(_)와 달러($) 조합 가능 | . (2) 명명규칙 권장 . 클래스의 첫글자는 대문자로 | 변수와 메소드의 첫글자는 소문자로 | 단어의 조합으로 이루어진 경우 첫 글자는 대문자 (두 번째 단어부터) 상수와 라벨명은 모두 대문자로 | 패키지명은 전부 소문자 | . | . class Test { int test; void test() { } } class TestSampe { int testSameple; void testSameple() { } } . Java의 데이터 타입 . 정수형 . byte와 short는 잘 사용하지 않음 | byte : 1byte | char : 2byte | short 2byte | int : 4byte | long : 8byte, 22억이 넘어가는 숫자 | . 실수형 . java는 float 대신 double 씀 | float : 4byte | double : 8byte | . 논리형 . boolean : 1byte | . 주석 . ctrl + / | ctrl + shift + c | . // 한줄 주석 /* 여러줄 주석 */ /** 도움말 주석 */ . char형에는 ‘‘으로 문자 하나만 지정한다. ““은 쓰면 안된다. . package a_datatype; public class Ex01_Naming { public static void main(String[] args) { // 1. 변수 선언 (메모리 확보) char a; // 2byte int b; // 4byte double d; // 8byte // 2. 값 지정 a = &#39;김&#39;; // char형에는 &#39;&#39;으로 문자 하나만 지 b = 100; // 22억까지만 가 d = 100.3; } } . package a_datatype; public class Ex02_Caution { public static void main(String[] args) { // 실수형 float f; // 4byte f = 3.6; // 8byte이기 때문에 에러 f = 3.6F; // 4byte 실수라는 것을 지정, 에러 안남 double f; // 처음부터 8byte 잡으면 아무 문제 없음 System.out.println(&quot;실수: &quot; + f); // 문자형-정수형 char ch; ch = 65; // ch는 2byte, 65는 4byte지만 에러가 안남, 아스키값에 한에서 문제점을 알아서 해결해 줌 System.out.println(&quot;ch값: &quot; + ch); // int i; // i = &#39;a&#39; int i = &#39;a&#39;; System.out.println(&quot;i값: &quot; + i); // l은 8bite 10000000000 4bite이기 때문에 뒤에 L을 써야함 long l = 10000000000L; System.out.println(&quot;l값: &quot; + l); // int i2 = 10000000000L; // 에러 4byte vs 8byte // int in = 100.1; // System.out.prinln(&quot;in값: &quot; + in); // 형변환 - casting double db = (double)100; System.out.println(&quot;db 값: &quot; + db); int in = (int)100.1; System.out.println(&quot;in값: &quot; + in); } } . 데이터 타입 (자료형) . 1. 기본형 . 논리형 : boolean | 문자형 : char | 정수형 : int / long | 실수형 : double | . 2. 참조형 : 클래스, 배열 . new 연산자를 이용해서 메모리 할당(확보) | ex) String (예외) | . package a_datatype; public class Ex03_Declaration { public static void main(String[] args) { // (1) 변수 선언 -&gt; 값 대입 int kor; kor = 30; // (2) 초기화 = 변수 선언 + 값 지정(대입) int eng = 33; if (kor == eng) { System.out.println(&quot;같다&quot;); } else { System.out.println(&quot;다르다&quot;); } // swap int temp; temp = kor; kor = eng; eng = temp; System.out.println(&quot;국어: &quot; + kor + &quot;, 영어: &quot; + eng); System.out.printf(&quot;국어: %d, 영어: %d&quot;, kor, eng); } } . String . new를 생략가능하다. | . public class Ex04_String { public static void main(String[] args) { // String a; // a = new String(&quot;홍길동&quot;); // new를 사용하면 메모리 체계가 달라진다. String a = new String(&quot;홍길동&quot;); String b = new String(&quot;홍길동&quot;); // 동등연산자: 주소를 비교한다. if ( a == b ) { System.out.println(&quot;같다&quot;); } else { System.out.println(&quot;다르다&quot;); } // 값을 비교한다. if (a.equals(b)) { System.out.println(&quot;이름이 같다&quot;); } else { System.out.println(&quot;이름이 다르다&quot;); } } } /* 다르다 이름이 같다 . new를 생략가능하나 String에서 new를 생략하면 메모리를 공유 . package a_datatype; public class Ex04_String { public static void main(String[] args) { String a = &quot;홍길동&quot;; String b = &quot;홍길동&quot;; // 동등연산자: 주소를 비교한다. if ( a == b ) { System.out.println(&quot;같다&quot;); } else { System.out.println(&quot;다르다&quot;); } // 값을 비교한다. if (a.equals(b)) { System.out.println(&quot;이름이 같다&quot;); } else { System.out.println(&quot;이름이 다르다&quot;); } } } /* 같다 이름이 같다 . stack vs heap . 컴퓨터 개론 . 8비트 한 칸에 0과 1만 들어간다. | ASCII 100로 시작하면 대문자 | 100 0001 A 2^6 + 2^0 = 64 + 1 = 65 | 100 0010 B 2^6 + 2^1 = 64 + 2 = 66 . | ASCII 110로 시작하면 소문자 | 110 0001 a 2^6 + 2^5 + 2^0 = 64 + 32 + 1 = 97 | . [[ 기초다지기 ]] 1. 자바의 변수명을 지정하는 규칙으로 잘못된 것은? (1) 한글을 사용할 수 없다. (2) ‘$’와 ‘_’를 문자와 숫자의 조합에 사용할 수 있다. (3) 길이 제한이 없다. (4) 대소문자를 구별한다. (5) 첫번째 글자는 숫자와 ‘$’, ‘_’는 올 수 없다. 1, 5 2. 자바의 변수명으로 적합한 것은? (1) abstract (2) 3Color (3) color3 (4) 변수 (5) abcdefghijklmnopqrstuvwxyz (6) color-number (7) the color 3, 4, 5 3. 자바의 변수명을 지정하는 규칙에 맞는 것은? (1) %this (2) 3this (3) This (4) this-3 (5) this (6) $this 3, 6 4. 자바의 예약어가 아닌 것을 것은? (1) if (2) main (3) boolean (4) null (5) true (6) do 2, (4, 5) 5. 다음 중 변수명으로 사용할 수 없는 것은? (1) $ystem (2) new (3) m@n (4) system_host (5) 1cup (6) NULL 2, 3, 5 . [[ 기초다지기 ]] 1. 정수형 byte 타입의범위는? (1) 2^7 ~ 2^7-1 (2) 0 ~ 2^8 (3) -2^8 ~ 2^8-1 (4) -2^7 ~ 2^7-1 (5) -2^7-1 ~ 2^7 4 -2^7 ~ 2^7-1 0을 양수쪽에서 빼줘야 8bit 맨앞 숫자는 부호, 2^7까지 숫자 표현 가능 0 : + 1 : - 2. 다음 중에서 잘못된 것은? (1)int i = 12345678; (2)float f = 3.5; (3)double d = 12345678.0; (4)String s = “”; 2 doubule f = 3.5; float f = 3.5F; float f = (float) 3.5; 3. 다음 프로그램의 결과는? class Test { public static void main ( String[] args ) { byte a = 64; byte b = 64; byte result = a + b; System.out.println(“result = “ + result ); } } (1) 127 (2) 128 (3) -128 (4) 컴파일 에러 4 byte result = (byte)(a + b); 4. 다음프로그램의 결과는? class Test { public static void main ( String[] args ) { byte b = 36; int i = ( int ) b; System.out.println( “b = “ + b ); System.out.println( “i = “ + i ); } } b = 36 i = 36 5. 다음프로그램의 결과는? class Test { public static void main ( String[] args ) { int i = 360; byte b = ( byte ) i; System.out.println( “i = “ + i ); System.out.println( “b = “ + b ); } } i = 360 b = 104 360의 2진수 101101000 2^8 + 2^6 + 2^5 + 2^3 = 256 + 64 + 32 + 8 = 360 01101000 -&gt; 0은 부호 2^6 + 2^5 + 2^3 = 104 12. 다음 중 형변환을 생략이 가능한 것은? byte b = 127; char ch = ‘글’; int i = 20000000; long l = 1L; (1) b = ( byte ) i; (2) i = ( int ) ch; (3) int var = ( int ) b; (4) float f = (float) l; (5) l = (long)i; 2, 3, 4 . package a_datatype; import java.lang.*; // 자동코딩 import java.util.*; public class Ex05_Scanner { public static void main(String[] args) { Scanner input = new Scanner(System.in); // 학생명을 입력받음 next(공백단위) vs nextLine(엔터) System.out.println(&quot;학생명=&gt;&quot;); String name = input.nextLine(); System.out.println(&quot;국어점수=&gt;&quot;); int kor = input.nextInt(); System.out.println(&quot;영어점수=&gt;&quot;); int eng = input.nextInt(); System.out.println(&quot;수학점수=&gt;&quot;); int math = input.nextInt(); // 총점을 구해서 출력 int total = kor + eng + math; System.out.println(&quot;총점: &quot; + total); // 평균을 구해서 출력 double avg = (double) total / 3; System.out.println(&quot;평균: &quot; + avg); } } /* 학생명=&gt; 홍길동 국어점수=&gt; 77 영어점수=&gt; 87 수학점수=&gt; 99 총점: 263 평균: 87.66666666666667 . 3개의 숫자를 입력받아 두 번째로 큰 수 출력 . import java.util.*; public class MiddleNum { public static void main(String[] args) { Scanner input = new Scanner(System.in); Double[] num = new Double[3]; for (int i = 0; i &lt; num.length; i++) { System.out.println(&quot;Insert Number!!&quot;); num[i] = input.nextDouble(); } Arrays.sort(num); System.out.println(&quot;Middle Number is &quot; + num[1]); } } . 정리 . JDK 설치 JAVA_HOME | path 에 추가 %JAVA_HOME% bin | . | IDE (통합개발환경) -&gt; eclipse . | 변수 : 값 하나를 메모리 저장하기 위해 메모리 이름 + 데이터 타입 (자료형) (1) 기본형 - 논리형 : boolean - 문자형 : char - 정수형 : int / long - 실수형 : double . (2) 참조형 : 클래스, 배열 new 연산자 이용해서 heap에 메모리 할당 . [#] String (참조형이지만 별도로 구분) . | 오라클 Documentation . 오라클 홈페이지에서 다운로드 | doc &gt; api &gt; index.html | .",
            "url": "https://safenumz.github.io/blog/java/2019/04/15/Java_%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD_%EB%B0%8F_%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85.html",
            "relUrl": "/java/2019/04/15/Java_%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD_%EB%B0%8F_%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85.html",
            "date": " • Apr 15, 2019"
        }
        
    
  
    
        ,"post210": {
            "title": "[Linux] Mac bash_profile vs bashrc",
            "content": "Mac 시스템 파일 구분 . .bash_profile . 시스템에 로그인할 때마다 실행. (login shell 에서 실행) | .bash_profile 을 찾지 못하면, .bash_login 을 찾고, 없다면 .profile을 찾음 | . .bashrc . 이미 로그인 한 상태에서 새 터미널 창을 열 때마다 실행 (non-login shell에서 실행) | . .bash_logout . login shell을 종료할 때마다 실행 | .",
            "url": "https://safenumz.github.io/blog/linux/2019/04/14/Linux-Mac_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95_%ED%8C%8C%EC%9D%BC.html",
            "relUrl": "/linux/2019/04/14/Linux-Mac_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95_%ED%8C%8C%EC%9D%BC.html",
            "date": " • Apr 14, 2019"
        }
        
    
  
    
        ,"post211": {
            "title": "[MySQL] Windows MySQL 외부접속 설정",
            "content": "Environment . Windows 10 | . MySQL 설정 . 사용자 계정이 외부의 IP에서 접속이 가능하도록 하는 단계 . -- 특정 IP 접근 허용 설정 mysql&gt; grant all privilege on *.* to &#39;root&#39;@&#39;&lt;ip주소&gt;&#39; identified by &#39;&lt;root의 패스워드&gt;&#39; -- 특정 IP 대역 접근 허용 설정 mysql&gt; grant all privilege on *.* to &#39;root&#39;@&#39;&lt;ip주소&gt;&#39; identified by &#39;&lt;root의 패스워드&gt;&#39; -- 모든 IP의 접근 허용 설정 mysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;&lt;root의 패스워드&gt;&#39; -- check mysql&gt; select host, user, password from user; mysql&gt; flush privileges; . 방화벽 열어주기 . 제어판 &gt; Windows Defender 방화벽 &gt; 고급설정 &gt; 인바운드 규칙 &gt; 새규칙 | 프로그램 설정 &gt; 다른 프로그램 경로 &gt; 찾아보기 &gt; mysqld.exe 등록 | 예) C://Program Files/MySQL/MySQL Server 5.7/bin/mysqld.exe | . LISTENER 체크 . $ lsnrctl status $ lsnrctl start $ lsnrctl stop $ lsnrctl reload .",
            "url": "https://safenumz.github.io/blog/architecture/2019/04/14/Windows_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/architecture/2019/04/14/Windows_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "date": " • Apr 14, 2019"
        }
        
    
  
    
        ,"post212": {
            "title": "[MySQL] Ubuntu MySQL 설치 및 설정",
            "content": "Environment . Ubuntu 18.4 | . Ubuntu에 MySQL 서버 설치 . # mysql-server 설치 $ apt-get update $ apt-get install mysql-server # 설정한 MySQL 버전 확인을 위해 dkpg 명령을 사용한다. $ dpkg --list | grep mysql # MySQL 서버 시작 $ service mysql start # MySQL 서버 종료 $ service mysql stop . MySQL 설정 . Ubuntu의 MySQL 설정 파일 위치는 /etc/mysql/my.cnf 이다. | . $ vi /etc/mysql/my.cnf . utf8mb4 설정 . emoji 사용이 있는 게시판 등의 테이블을 사용한다면 utf-8 대신 utf8mb4 charset을 사용한다. | utf8mb4 charset을 사용하지 않으면 emoji를 포함한 데이터는 저장이 되지 않는다. | . # /etc/mysql/my.cnf [mysqld] # /etc/my.cnf [mysqld] # 원격 접속을 허용하기 위해 bind-adress는 반드시 주석처리 한다. # bind-adress = 0.0.0.0 # 원하는 포트로 변경가능하다. # port=3306 # 우리나라 표준시 KST로 변경, UTC +9:00 default-time-zone=&#39;+9:00&#39; character-set-server=utf8mb4 collation-server=utf8mb4_unicode_ci skip-character-set-client-handshake [client] # port=3306 default-character-set = utf8 [mysql] default-character-set = utf8mb4 [mysqldump] default-character-set = utf8 . 원격 접속 권한 부여 . mysql&gt; mysql -u root -p mysql&gt; select user, host from mysql.user; mysql&gt; create user &#39;&lt;username&gt;&#39;@&#39;%&#39; identified by &#39;&lt;password&gt;&#39; mysql&gt; select user, host from mysql.user; mysql&gt; grant all privileges on *.* to &#39;&lt;username&gt;&#39;@&#39;%&#39; with grant option; mysql&gt; show grants for &#39;&lt;username&gt;&#39;@&#39;%&#39;; mysql&gt; flush privileges; mysql&gt; quit; . Port 열기 . $ sudo service mysql restart $ sudo ufw allow out 3306/tcp $ sudo ufw allow in 3306/tcp $ sudo service mysql restart .",
            "url": "https://safenumz.github.io/blog/architecture/2019/04/14/Ubuntu_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/architecture/2019/04/14/Ubuntu_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "date": " • Apr 14, 2019"
        }
        
    
  
    
        ,"post213": {
            "title": "[MySQL] CentOS에 MySQL 설치 및 설정",
            "content": "Environment . CentOS 7 | MySQL Community Server 14.14 | . MySQL 설치 . # Maria DB 대신 MySQL 설치할 수 있게 해주는 패키지 다운로드 $ wget www.db21.co.kr/big/mysql-community-release-el7-5.noarch.rpm # 패키지 설치 $ yum -y install mysql-community-release-el7-5.noarch.rpm # MySQL 설치 $ yum -y install mysql-community-server # MySQl 서버 시작 $ systemctl start mysqld # MySQL 서버 자동 시작 설정 $ systemctl enable mysqld . MySQL 설정 . Centos의 MySQL 설정 파일 위치는 /etc/my.cnf 이다. | . $ vi /etc/my.cnf . 원격접속 및 charset 설정 . 원격 접속을 허용하기 위해 bind-adress는 반드시 주석처리 한다. | MySQL port도 변경 가능하다. | 우리나라 표준시는 KST(UTC +9:00)로 변경한다. | emoji 사용이 있는 게시판 등의 테이블을 사용한다면 utf-8 대신 utf8mb4 charset을 사용한다. | utf8mb4 charset을 사용하지 않으면 emoji를 포함한 데이터는 저장이 되지 않는다. | . # /etc/my.cnf [mysqld] # 원격 접속을 허용하기 위해 bind-adress는 반드시 주석처리 한다. # bind-adress = 0.0.0.0 # 원하는 포트로 변경가능하다. # port=3306 # 우리나라 표준시 KST로 변경, UTC +9:00 default-time-zone=&#39;+9:00&#39; character-set-server=utf8mb4 collation-server=utf8mb4_unicode_ci skip-character-set-client-handshake [client] # port=3306 default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqldump] default-character-set = utf8mb4 . 참고 . character_set_client = utf8mb4 character_set_connection = utf8mb4 character_set_database = utf8mb4 character_set_filesystem = binary character_set_results = utf8mb4 character_set_server = utf8mb4 character_set_system = utf8 collation_connection = utf8mb4_unicode_ci collation_database = utf8mb4_unicode_ci collation_server = utf8mb4_unicode_ci . 원격 접속 권한 부여 . # mysql 접속 mysql&gt; mysql -u root -p mysql&gt; select user, host from mysql.user; # user 생성 mysql&gt; create user &#39;&lt;username&gt;&#39;@&#39;%&#39; identified by &#39;&lt;password&gt;&#39;; mysql&gt; select user, host from mysql.user; # 모든 권한 부여 mysql&gt; grant all privileges on *.* to &#39;&lt;username&gt;&#39;@&#39;%&#39; with grant option; # 권한 확인 mysql&gt; show grants for &#39;&lt;username&gt;&#39;@&#39;%&#39;; mysql&gt; flush privileges; mysql&gt; quit; .",
            "url": "https://safenumz.github.io/blog/architecture/2019/04/14/CentOS_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/architecture/2019/04/14/CentOS_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "date": " • Apr 14, 2019"
        }
        
    
  
    
        ,"post214": {
            "title": "[Jupyter Notebook] pyspark 사용하기",
            "content": "Environment . MacOS | Spark 2.4.0 | . Mac에서 Jupyter Notebook에서 pyspark 사용하기 . py4j 설치 . Python-Java Integration | . $ conda install py4j . .bash_profile 수정 . export SPARK_HOME=/usr/local/Cellar/apache-spark/2.4.0 export PYTHONPATH=$SPARK_HOME/libexec/python:$SPARK_HOME/libexec/python/build:$PYTHONPATH PYTHONPATH=$SPARK_HOME/python/lib/py4j-0.10-src.zip:$PYTHONPATH export PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/build:$PYTHONPATH . kernel 설정 . ~/Library/Jupyter/kernel 경로에 pyspark 폴더를 만들고 그 안에 kernel.json 파일을 생성하고 아래 내용을 넣어 준다. . { &quot;display_name&quot;: &quot;PySpark&quot;, &quot;language&quot;: &quot;python&quot;, &quot;argv&quot;: [ &quot;/anaconda3/bin/python&quot;, &quot;-m&quot;, &quot;ipykernel&quot;, &quot;-f&quot;, &quot;{connection_file}&quot; ], &quot;env&quot;: { &quot;SPARK_HOME&quot;: &quot;/usr/local/Cellar/apache-spark/2.4.0/&quot;, &quot;PYTHONPATH&quot;: &quot;/usr/local/Cellar/apache-spark/2.4.0/libexec/python/:/usr/local/Cellar/apache-spark/2.4.0/libexec/python/lib/py4j-0.10-src.zip&quot;, &quot;PYTHONSTARTUP&quot;: &quot;/usr/local/Cellar/apache-spark/2.4.0/libexec/python/pyspark/shell.py&quot;, &quot;PYSPARK_SUBMIT_ARGS&quot;: &quot;--master local[*] pyspark-shell&quot; } } .",
            "url": "https://safenumz.github.io/blog/devops/2019/04/12/Jupyter_Notebook%EC%97%90%EC%84%9C_pyspark_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html",
            "relUrl": "/devops/2019/04/12/Jupyter_Notebook%EC%97%90%EC%84%9C_pyspark_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html",
            "date": " • Apr 12, 2019"
        }
        
    
  
    
        ,"post215": {
            "title": "[Docker] MacOS에서 Docker 사용",
            "content": "Docker 클라이언트 설치 . $ brew install Docker . $ docker version . Client: Docker Engine - Community Version: 18.09.4 API version: 1.39 Go version: go1.12.1 Git commit: d14af54 Built: Fri Mar 29 03:27:05 2019 OS/Arch: darwin/amd64 Experimental: false Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? . Docker Application 설치 . 도커 프로그램을 다운받아 Applications에 넣어준다. . https://docs.docker.com/docker-for-mac/install/ . $ docker version . Client: Docker Engine - Community Version: 18.09.2 API version: 1.39 Go version: go1.10.8 Git commit: 6247962 Built: Sun Feb 10 04:12:39 2019 OS/Arch: darwin/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 18.09.2 API version: 1.39 (minimum version 1.12) Go version: go1.10.6 Git commit: 6247962 Built: Sun Feb 10 04:13:06 2019 OS/Arch: linux/amd64 Experimental: false .",
            "url": "https://safenumz.github.io/blog/devops/2019/04/11/Mac%EC%97%90%EC%84%9C_Docker_%EC%82%AC%EC%9A%A9.html",
            "relUrl": "/devops/2019/04/11/Mac%EC%97%90%EC%84%9C_Docker_%EC%82%AC%EC%9A%A9.html",
            "date": " • Apr 11, 2019"
        }
        
    
  
    
        ,"post216": {
            "title": "[MacOS] Mac Terminal 테마 적용",
            "content": "Environment . MacOS | . Mac Terminal 테마 적용 . zsh 설치 . 최신버전으로 설치한다. . $ brew install zsh . oh my zsh 설치 . $ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; . zsh theme를 agnoster로 변경 . ~/.zshrc를 열어보면 기본테마인 robbyrussell이 적용되어 있다. ZSH_THEME를 agnoster로 변경한다. . $ vi ~/.zshrc . ZSH_THEME=&quot;agnoster&quot; . 컬러 적용 . 터미널 &gt; 환경설정 &gt; 프로파일 &gt; 텍스트 &gt; ANSI 색상 부분을 수정하면 컬러를 변경할 수 있다. . 폰트 적용 . 만약 폰트가 깨진다면 네이버에서 개발한 D2Coding을 다운받아 적용한다. 깨지는 현상이 사라진다. 미널 &gt; 환경설정 &gt; 프로파일 &gt; 텍스트 &gt; 서체 부분을 D2Coding으로 적용하면 된다. . 프롬프트에 표시되는 사용자이름 삭제 및 멀티라인 적용 . 테마를 적용하고나니 경로가 전부 표시되고 사용자 이름이 너무 긴 자리를 차지하여 명령어를 입력할 공간이 부족해지는 현상이 발생했다. .zshrc 파일을 수정하여 불필요한 사용자 이름을 제거하고 멀티라인을 적용하자. . $ vi ~/.zshrc . .zshrc 파일을 열고 아래 주소의 내용을 넣는다. . &lt;주소 임시 삭제&gt; . 변경 사항을 적용하면 끝이다. . $ source ~/.zshrc .",
            "url": "https://safenumz.github.io/blog/etc/2019/04/07/MacOS-Terminal_%ED%85%8C%EB%A7%88_%EC%A0%81%EC%9A%A9.html",
            "relUrl": "/etc/2019/04/07/MacOS-Terminal_%ED%85%8C%EB%A7%88_%EC%A0%81%EC%9A%A9.html",
            "date": " • Apr 7, 2019"
        }
        
    
  
    
        ,"post217": {
            "title": "[Jupyter Notebook] JavaScript 코딩하기",
            "content": "Ubuntu IJavascript . $ sudo apt-get install nodejs-legacy npm ipython ipython-notebook $ sudo npm install -g ijavascript $ ijsinstall . MacOS IJavascript . $ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; $ brew install pkg-config node zeromq $ sudo easy_install pip $ pip install --upgrade pyzmq jupyter $ npm install -g ijavascript $ ijsinstall . Windows (Official Python Distribution) IJavascript . $ pip3 install --upgrade pip $ pip3 install jupyter $ npm install -g ijavascript $ ijsinstall # Or run: %appdata% npm ijsinstall . Windows (Anaconda Distribution) IJavascript . $ conda install nodejs $ npm install -g ijavascript $ ijsinstall .",
            "url": "https://safenumz.github.io/blog/devops/2019/04/05/Jupyter_notebook%EC%97%90%EC%84%9C_JavaScript_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "relUrl": "/devops/2019/04/05/Jupyter_notebook%EC%97%90%EC%84%9C_JavaScript_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "date": " • Apr 5, 2019"
        }
        
    
  
    
        ,"post218": {
            "title": "[Jupyter Notebook] Scala 코딩하기",
            "content": "almond . $ SCALA_VERSION=2.12.8 ALMOND_VERSION=0.4.0 $ curl -Lo coursier https://git.io/coursier-cli $ chmod +x coursier $ ./coursier bootstrap -r jitpack -i user -I user:sh.almond:scala-kernel-api_$SCALA_VERSION:$ALMOND_VERSION sh.almond:scala-kernel_$SCALA_VERSION:$ALMOND_VERSION -o almond $ ./almond --install .",
            "url": "https://safenumz.github.io/blog/devops/2019/04/05/Jupyter_Notebook%EC%97%90%EC%84%9C_Scala_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "relUrl": "/devops/2019/04/05/Jupyter_Notebook%EC%97%90%EC%84%9C_Scala_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "date": " • Apr 5, 2019"
        }
        
    
  
    
        ,"post219": {
            "title": "[Jupyter Notebook] R 코딩하기",
            "content": "IRKernel . 사전에 아나콘다가 설치되어 있어야 한다. ‘conda create -n r-env -c r r-essentials’을 실행하면 r뿐만 아니라 필수패키지들이 함께 설치된다. 사실 이 부분만 진행해도 상관이 없다. 그러나 간혹 r커널이 제대로 셋팅이 안되는 경우가 있어 아래 명령어를 전부 순서대로 실행한다. | . $ conda create -n r anaconda $ conda install -c r r $ conda install -c r r-irkernel $ conda install -c r r-essentials .",
            "url": "https://safenumz.github.io/blog/devops/2019/04/05/Jupyter_Notebook%EC%97%90%EC%84%9C_R_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "relUrl": "/devops/2019/04/05/Jupyter_Notebook%EC%97%90%EC%84%9C_R_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "date": " • Apr 5, 2019"
        }
        
    
  
    
        ,"post220": {
            "title": "[Python] input vs raw_input의 차이",
            "content": "Python input vs raw_input 차이 . Python에서 User의 입력을 받는 방식은 두 가지가 있다. . input()은 정수형으로 받고 raw_input()은 문자열로 받는 차이가 있다. . &gt;&gt; name = input(&quot;이름입력: &quot;) 이름입력: &#39;Jason&#39; . input()은 정수형으로 받기 때문에 User가 문자를 입력할 경우에는 반드시 문자열 표시 ““를 해줘야 입력이된다. ““를 입력하지 않으면 에러를 발생시킨다. . &gt;&gt; name = raw_input(&quot;이름입력: &quot;) 이름입력: Jason . raw_input()은 User가 “” 표시를 하지 않고도 문자열을 입력가능하다. .",
            "url": "https://safenumz.github.io/blog/python/2019/04/03/Python-input_vs_raw_input_%EC%B0%A8%EC%9D%B4.html",
            "relUrl": "/python/2019/04/03/Python-input_vs_raw_input_%EC%B0%A8%EC%9D%B4.html",
            "date": " • Apr 3, 2019"
        }
        
    
  
    
        ,"post221": {
            "title": "[Linux] 화면 출력 및 파일 내용 보기 (echo, cat, more)",
            "content": "echo . 화면에 텍스트를 출력하는 명령어이다. 간단히 파일을 만들 때 사용할 수 있고, 쉘 프로그램 수행 중간에 진행 상황을 화면상에 알려주기 위해서도 사용한다. | . $ echo &quot;Hello echo&quot; . Hello echo . 여러 라인의 메시지를 출력하기 위해서는 -e 옵션과 함께 문자열 중간에 특수문자 중 줄바꿈 문자인 n를 사용한다. | . $ echo -e &quot;Hello necho&quot; . Hello echo . echo로 파일에 내용 추가하기 . a.html 파일 마지막에 ‘key’라는 문자열을 추가하고 싶으면 다음 명령어를 실행하면된다. »가 아니라 &gt; 로 바꾸면 a.html 파일의 내용이 전부 지워지고 ‘key’로 대체되게 된다. | . $ echo &#39;kei&#39; &gt;&gt; ./a.html . # b.html 파일을 생성한다. $ touch b.html # b.html 파일에 내용을 기록한다. $ echo -e &quot; nlayout:post ntitle:실전 ncategory:cate ntags:[tag] ncomments:false n&quot; &gt; b.html . cat . 텍스트 파일의 내용을 보기 위해 cat 명령어를 사용한다. | . cat 실행 결과를 변수에 담기 . ’ 기호가 이니라 ` 기호라는 것에 주의 | . $ v=`cat a.html` # 한줄로 출력된다. $ cat $v # &quot; &quot;으로 묶어주면 n이 되어서 출력된다. $ cat &quot;$v&quot; . cat으로 파일 병합하기 . cat 명령과 리다이렉션 기호로 여러 파일을 연결(병합)하여 하나의 파일을 만듭니다. | . # b.html과 a.html을 연결하여 c.html을 만든다 $ cat b.html a.html &gt; c.html . more . cat 명령어의 경우 파일이 길어서 한 화면을 벗어나는 경우 자동으로 스크롤이 된다. 그래서 앞 부분의 내용을 볼 수 없다. more 명령어를 사용하면 화면 스크롤이 계속 진행되지 않고 한 화면(페이지)의 분량만큰 보여준다. 스페이스바를 누르면 다음 페이지를 볼 수 있다. | . $ more c.html .",
            "url": "https://safenumz.github.io/blog/linux/2019/04/03/Linux-%ED%99%94%EB%A9%B4_%EC%B6%9C%EB%A0%A5_%EB%B0%8F_%ED%8C%8C%EC%9D%BC_%EB%82%B4%EC%9A%A9_%EB%B3%B4%EA%B8%B0_(echo_cat_more).html",
            "relUrl": "/linux/2019/04/03/Linux-%ED%99%94%EB%A9%B4_%EC%B6%9C%EB%A0%A5_%EB%B0%8F_%ED%8C%8C%EC%9D%BC_%EB%82%B4%EC%9A%A9_%EB%B3%B4%EA%B8%B0_(echo_cat_more).html",
            "date": " • Apr 3, 2019"
        }
        
    
  
    
        ,"post222": {
            "title": "[MacOS] Mac 환경설정",
            "content": "맥북 환경설정 . 자바 설치 . 8 버전으로 설치 . # 기존 자바가 설치되어 있다면 일단 자바 삭제 $ sudo rm -fr /Library/Internet Plug-Ins/JavaAppletPlugin.plugin $ sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane $ sudo rm -fr ~/Library/Application Support/Oracle/Java . https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html . 8 버전 다운 후 설치 . 스칼라 설치 . 2.11 버전으로 설치 . $ brew search scala $ brew install scala@2.11 . 스파크 설치 . brew install apache-spark . # 와이파이나 vpn에 접속되고 있는 경우 Exception in thread &quot;main&quot; java.net.BindException: 에러가 뜰 수 있다. 아래 명령어를 실행한다 $ sudo hostname -s 127.0.0.1 . zeppelin 설치 . $ brew install apache-zeppelin $ /usr/local/Cellar/apache-zeppelin/0.8.1/bin/zeppelin-daemon.sh start $ /usr/local/Cellar/apache-zeppelin/0.8.1/bin/zeppelin-daemon.sh stop . zeppelin-env.sh 편집 . export JAVA_HOME= /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands export SPARK_HOME=/usr/local/Cellar/apache-spark/2.4.0 export PYTHONPATH=/anaconda3/bin/python export PYSPARK_PYTHON=$SPARK_HOME/pythohn:$PYTHONPATH . 환경변수 설정 . 실제위치를 환경변수로 잡아야 한다. . # javac 위치 확인 $ which javac /usr/bin/javac # 실제 위치 확인 $ readlink -n /usr/bin/javac /usr/lib/jvm/java-8-openjdk-amd64/bin/ . ~/.bash_profile 을 편집하여 환경변수를 등록한다. . $ vi ~/.bash_profile . export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_191.jdk/Contents/Home/ export SCALA_HOME=/usr/local/opt/scala@2.11 export PATH=$JAVA_HOME/bin:$SCALA_HOME/bin:$PATH . When I run brew info scala To use with IntelliJ, set the Scala home to: /usr/local/opt/scala/idea . alias . $ vi ~/.zshrc $ alias zstart = &quot;/usr/.../bin/zeppelin-daemon.sh start&quot; $ alias zstop = &quot;/usr/.../bin/zeppelin-daemon.sh stop&quot; $ source ~/.zshrc . alias gpu=&quot;ssh a@&lt;ip&gt; -p 22&quot; alias dgit=&quot;cd /Users/a/OneDrive/git&quot; alias dblog=&quot;cd /Users/a/OneDrive/git/sparkoptimizer&quot; alias dpost=&quot;cd /Users/a/OneDrive/git/sparkoptimizer/_posts&quot; alias gpush=&quot;git add .; git commit -m &#39;temp&#39;; git push origin&quot; alias gblog=&quot;git add .; git commit -m &#39;blog&#39;; git push origin; jekyll serve&quot; alias covert=&quot;jupyter nbconvert --template=/Users/a/OneDrive/git/sparkoptimizer/notebook.tpl --to html &quot; alias jn=&quot;jupyter notebook&quot; alias rn=&quot;conda activate r_env; jupyter notebook&quot; alias sn=&quot;pyspark&quot; . #!/bin/bash fname=$1 ipython nbconvert --to markdown ${fname}.ipynb sed -i &#39;&#39; &quot;s#${fname}_files#https: / /dl.dropbox.com /u /656693 /jekyll_images /${fname}_files#g&quot; ${fname}.md dt=$(date &quot;+%Y-%m-%d&quot;) echo &quot;0a layout: post time: ${dt} title: TITLE-ME subtitle: SUBTITLE-ME tags: TAG-ME . w&quot; | ed ${fname}.md mv ${fname}.md ~/Research/labnotebook/_posts/${dt}-${fname}.md . function new_post { GH_USER=&quot;github_username&quot; # GitHub ID PC_USER=&quot;local_username&quot; POST_PATH=&quot;/Users/${PC_USER}/dsi-nyc-5/${GH_USER}.github.io/_posts&quot; # &lt;username&gt;.github.io repository 가 있는 주소로 변경 IMG_PATH=&quot;/Users/${PC_USER}/dsi-nyc-5/${GH_USER}.github.io/images&quot; # &lt;username&gt;.github.io repository 가 있는 주소로 변경 FILE_NAME=&quot;$1&quot; CURR_DIR=`pwd` FILE_BASE=`basename $FILE_NAME .ipynb` POST_NAME=&quot;${FILE_BASE}.md&quot; IMG_NAME=&quot;${FILE_BASE}_files&quot; POST_DATE_NAME=`date &quot;+%Y-%m-%d-&quot;`${POST_NAME} # convert the notebook jupyter nbconvert --to markdown $FILE_NAME # change image paths sed -i .bak &quot;s: [png ](:[png](/images/:&quot; $POST_NAME # move everything to blog area mv $POST_NAME &quot;${POST_PATH}/${POST_DATE_NAME}&quot; mv $IMG_NAME &quot;${IMG_PATH}/&quot; # add files to git repo to be included in next commit cd $POST_PATH git add $POST_DATE_NAME cd $IMG_PATH git add $IMG_NAME # make git submission cd .. git commit -m &quot; &quot;New blog entry ${FILE_BASE} &quot;&quot; # push changes to server git push cd $CURR_DIR } .",
            "url": "https://safenumz.github.io/blog/etc/2019/04/03/MacOS-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html",
            "relUrl": "/etc/2019/04/03/MacOS-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html",
            "date": " • Apr 3, 2019"
        }
        
    
  
    
        ,"post223": {
            "title": "[Linux] Ubuntu 한영전환 설정",
            "content": "우분투 한영전환 설정 . 우분투를 영문 버전으로 설치했으면 한영전환 키가 작동하지 않는다. 입력기 uim 내부에 있는 벼루 패키지를 설치함으로써 해결가능하다. . uim 패키지 설치 . # 설치 명령어 $ sudo apt install uim . 위 설치 명령어를 실행하는 도중에 에러가 뜬 경우에는 삭제 후 다시 설치하면 된다. . # 삭제 명령어 $ sudo apt remove uim $ sudo apt autoremove . 우분투 설정에서 ‘지역 및 언어’를 선택하고 오른쪽 ‘입력 소스’에서 영어(미국)만 남기고 모두 제거한다. . 다음으로 ‘언어 지원’ 메뉴를 실행하고 키보드 입력기를 ‘uim’으로 바꿔주고 리부팅한다. . 기본 입력기 설정 . 입력기 어플을 실행하고, . 전체적인 설정 : 사용되는 입력기에 ‘벼루’ 하나만 남기고 전부 삭제한다. . | 툴바 : display를 Never로 바꿔준다. . | 전체적인 키 설정 1 : [전체] 켜기, [전체] 끄기 부분을 전부 삭제한다. . | 벼루 키 설정 1 : [벼루] 한글모드로, [벼루] 영문모드로 부분을 “hangul”로 변경해주고, [벼루] 한자 및 기호 확정 부분을 “hangul-hanja”로 변경한다. . | . 추가적인 설정 . 위 과정을 진행했는데도 한영변환이 안될 경우 아래 과정을 진행한다. | . # 오른쪽 Alt키의 기본 키 맵핑을 제거하고 &#39;Hangul&#39;키로 맵핑 $ xmodmap -e &#39;remove mod1 = Alt_R&#39; $ xmodmap -e &#39;keycode 108 = Hangul&#39; # 오른쪽 Ctrl키의 기본 키 맵핑을 제거하고 &#39;Hangul_Hanja&#39;키로 맵핑 $ xmodmap -e &#39;remove control = Control_R&#39; $ xmodmap -e &#39;keycode 105 = Hangul_Hanja&#39; # 키 맵핑 저장 $ xmodmap -pke &gt; ~/.Xmodmap .",
            "url": "https://safenumz.github.io/blog/linux/2019/04/01/Linux-Ubuntu_%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/linux/2019/04/01/Linux-Ubuntu_%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8_%EC%84%A4%EC%A0%95.html",
            "date": " • Apr 1, 2019"
        }
        
    
  
    
        ,"post224": {
            "title": "Ubuntu 환경설정",
            "content": "vi 편집기 설정 . 우분투를 처음 설치후 vi 에디터를 사용하면 벡스페이스가 안먹히고 방향키를 누르면 B, C, D 등 대문자가 입력되는 문제가 있다. . .exrc 파일을 생성해 열고 . $ vi .exrc . 아래 내용을 입력한다. . set autoindent set number set bs=2 set nocp . 저장 후 아래 명령어를 실행하면 vi 편집기가 제대로 작동한다. . $ source.exrc . glances 설치 . CPU, Memory, Network 모니터 . # 설치 $ sudo apt-get install glances # 실행 $ glances . nvidia driver 설치 . # 설치 가능한 드라이버 버전 확인 $ apt-cache search nvidia # 384 버전 설치 $ sudo apt-get install nvidia-384 # 드라이버 버전에 상관없이 공통적으로 설치 $ sudo apt-get install dkms nvidia-modprobe # 재부팅 후 설치가 성공적으로 되었는지 확인 $ lspci -k # 드라이버 버전 확인 $ cat /proc/driver/nvidia/version # 그래픽 카드 정보 확인 $ nvidia-smi # nvidia-smi 반복 실행 $ nvidia-smi -l 1 . sudo apt-get install nvidia-headless-no-dkms-418 . gpustat . gpu 간략한 모니터링 . # 설치 $ pip install gpustat 3 실행 $ sudo nvidia-smi daemon $ gpustat -i . OneDrive 설치 . $ sudo apt-get install onedrive $ onedrive # 주소가 나온다. # 주소를 복사해서 브라우저에 붙여넣기하면 onedrive 로그인 창이 나온다. 로그인 완료 후의 브라우저 주소 전체를 커먼드에 붙여넣기 하면 ~/OneDrive 폴더가 동기화된다. # 동기화되는 상황 확인 $ onedrive --monitor . ssh 설치 . ssh로 접속할 기기의 맥주소를 확인하여 공유기의 DHCP 서버주소 관리에 등록해주고, 포트포워드를 이용해 외부포트와 내부포트를 맵핑한다. | 예) 외부포트 : 9000, 내부포트 : 22 | ssh를 설치한다. | . $ sudo apt-get install ssh . xrdp 설치 . sftp로 원격데스트톱 접속하기 위해서는 우분투에서 xrdp 설치가 필요하다. | 마찬가지로 공유기의 포트포워드를 이용해 외부포트와 내부포트를 맵핑한다. | 예) 외부포트: 8000, 내부포트 : 3389 | Ubuntu settings &gt; Sharing에 들어가 On 상태로 만들어 준다. | Screen Sharing도 Active 상태로 만들어 줌 | 비밀번호를 설정하고 Wired connection1 상태도 ON으로 만든다. | . $ sudo apt install dconf-editor . dconf editor를 실행하고 org &gt; gnome &gt; desktop &gt; remote-access 를 차례대로 선택한다음 require-encryption 옵션의 체크를 해제한다음 편집기를 닫으면 원격접속 준비가 끝난다. | . # xrdp 설치 $ sudo apt-get install xrdp $ sudo apt-get update # desktop environment 설치 $ sudo apt-get install mate-core mate-desktop-environment mate-notification-daemon # xrdp에서 desktop environment 사용하도록 설정 $ sudo sed -i.bak &#39;/fi/a #xrdp multiple users configuration n mate-session n&#39; /etc/xrdp/startwm.sh $ sudo service xrdp restart . 3389 포트 오픈 . sudo ufw allow 3389/tcp3389 . 나눔고딕코딩 폰트 설치 . $ sudo apt install fonts-nanum-coding $ ll /usr/share/fonts/truetype/nanum/ drwxr-xr-x 2 root root 4096 4월 4 00:44 ./ drwxr-xr-x 50 root root 4096 4월 4 00:44 ../ -rw-r--r-- 1 root root 1800792 10월 21 2016 NanumGothicCoding-Bold.ttf -rw-r--r-- 1 root root 2779112 10월 21 2016 NanumGothicCoding.ttf # 폰트 캐쉬갱신 $ fc-cache -f -v # 설치된 폰트 확인 $ fc-list . git 설치 . $ sudo apt-get install git . 아나콘다 설치 . 아나콘다 홈페이지에서 설치스크립트 다운 후에 아래 명령어를 입력한다. . $ bash Anaconda3.5.0.sh $ source ./.bashrc . 아나콘다 환경변수 추가 . conda 명령어를 어디서든 활용하기 위해서는 환경변수를 추가해야 한다. 특별한 조작을 하지 않았다면 아나콘다는 /home//anaconda3 경로에 설치 된다. 해당 경로를 환경변수로 설정하자. | . $ export PATH=&quot;/home/&lt;username&gt;/anaconda3/bin:$PATH&quot; $ conda list . 아나콘다 env 설정 및 주요 패키지 설치 . $ conda init 터미널을 닫고 재실행하면 conda activate 명령어 실행이 가능해진다. $ conda create --name learning $ conda activate learning # jupyter notebook 설치 $ conda install jupyter # xgboost 설치 $ conda install -c conda-forge xgboost # lightgbm 설치 $ conda install -c conda-forge lightgbm # catboost 설치 $ conda install -c conda-forge catboost # tensorflow, keras gpu 설치 $ conda update --all $ conda install tensorflow-gpu keras-gpu $ conda install -c anaconda tensorflow-gpu $ conda install -c anaconda keras-gpu $ conda install -c anaconda cudatoolkit $ conda install -c anaconda cudnn # ipykernel 설치 $ conda install ipykernel $ python -m ipykernel install --user --name learning --display-name &quot;TensorFlow-GPU&quot; . # 만약 ipykernel을 잘못 설치해서 삭제하고 싶을 때는 아래 명령어를 실행한다. $ sudo jupyter kernelspec uninstall &lt;kernelname&gt; # virtualenv에서 작업하는 경우 &lt;user&gt;/Library/Jupyter/kernel/ 에서 원하는 디렉토리를 삭제하는 것으로 커널삭제가 가능하다. . tensorflow-gpu 가 제대로 설치되었는지 확인 . from tensorflow.python.client import device_lib print(device_lib.list_local_devices()) # device_type이 &quot;CPU&quot;가 아니라 &quot;GPU&quot;가 나오면 제대로 설치 . # gpu 메모리 사용 확인 $ nvidia-smi # gpu 메모리 점유 프로세스 킬 $ kill -9 &lt;process_number&gt; . 기타 파이썬 패키지 설치 . $ conda install seaborn $ conda install pandas-datareader $ conda install pandasql $ pip install missingno . jupyter notebook 서버 설정 . # ipython 실행 $ ipython . &gt;&gt;&gt; from notebook.auth import passwd &gt;&gt;&gt; passwd() &#39;sha1:....&#39; # 출력된 비밀번호를 복사해 둔다. . home/.jupyter 안에 jupyter_notebook_config.py 파일을 생성하고 vi 편집기로 연다. . $ jupyter notebook --generate-config $ vi ~/.jupyter/jupyter_notebook_config.py . 해당 부분의 주석(#)을 해제하고 ip 주소와 패스워드를 입력한다. ‘ 기호는 반드시 붙여줘야 한다. . c.NotebookApp.ip= &#39;&lt;데스크탑의 내부IP&gt;&#39; c.NotebookApp.password=&#39;sha1:ab7c91c642c4:24f5c95a7d7adecefddkjgh&#39; c.NotebookApp.port=8888 c.NotebookApp.open_browser=False # 만약 노트북의 시작 폴더를 고정하고 싶다면 아래도 수정 c.NotebookApp.notebook_dir = &#39;/home/a/OneDrive&#39; . Node.js 설치 . 8버전대로 설치해야 ijavascript가 에러없이 실행된다. | . $ curl -sL https://deb.nodesource.com/setup_8.15 -o nodesource_setup.sh $ nano nodesource_setup.sh $ sudo bash nodesource_setup.sh # nodejs 설치 $ sudo apt install nodejs # npm 설치 $ sudo apt install npm # javascript jupyter notebook 생성 $ sudo npm install -g ijavascript . Java8 설치 . $ sudo apt-get install openjdk-8-jre $ sodo apt-get install openjdk-8-jdk . 자바가 제대로 설치되었는지 확인 . $ javac -version $ java -version . 설치된 자바 목록 확인, 여러 종류의 자바가 설치되어 있다면 아래 명령어를 통해 Default Java를 선택할 수 있다. . $ sudo update-alternatives --config java . Java8 환경변수 설정 . # javac 위치 확인 $ which javac /usr/bin/javac $ readlink -f /usr/bin/javac /usr/lib/jvm/java-8-openjdk-amd64/bin/ . javac의 실제 위치는 /usr/lib/jvm/java-8-openjdk-amd64/bin/ 이다. 따라서 $JAVA_HOME은 /usr/lib/jvm/java-8-openjdk-amd64/ 으로 설정해야 한다. . # 환경변수 설정을 위해 profile을 연다 $ sudo nano /etc/profile . profile에 아래 내용을 입력하고 ctrl+X -&gt; y 입력 -&gt; 엔터 키 를 눌러 저장한다. . export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 export PATH=$JAVA_HOME/bin:$PATH export CLASS_PATH=$JAVA_HOME/lib:$CLASS_PATH . # profile reload $ source /etc/profile # 우분투 서버 재시작 $ sodo reboot now # java 환경변수가 잘 설정되었는지 확인 $ echo $JAVA_HOME $ $JAVA_HOME/bin/javac -version . scala 2.11.x 설치 . apache spark과 연동하기 위해서는 2.11.x 버전의 스칼라 설치가 필요하다. . $ wget www.scala-lang.org/files/archive/scala-2.11.7.deb $ sudo dpkg -i scala-2.11.7.deb . sbt 설치 . $ curl -L -o sbt.deb http://dl.bintray.com/sbt/debian/sbt-0.13.15.deb $ sudo dpkg -i sbt.deb $ sudo apt-get update $ sudo apt-get install sbt . jupyter notebook과 scala 연동 . $ git clone https://github.com/alexarchambault/jupyter-scala.git # sbt를 이용해 cli/packArchieve 결과 파일을 생성 $ sbt cli/packArchieve # 빌드가 무사히 완료되면 cli/target/pack/bin 에 jupyter-scala라는 실행파일이 생성된다. # jupyter kernel에 scala 추가 $ ./jupyter-scala --kernel-spec # 제대로 추가되었는지 확인 $ ipython kernelspec list . spark 2.2.3 설치 . 다운받아 홈 디렉토리에 압축을 푼다. . $ tar -xf spark-2.2.3-bin-hadoop2.7.tgz $ cd spark-2.2.3-bin-hadoop2.7 $ bin/spark-shell . 스파크 쉘을 실행한 상태에서 http://127.0.0.1:4040 으로 접속하면 Spark Dashboard 웹으로 접속할 수 있다. . spark-env.sh 편집을 통해 java home, pyspark home을 추가한다. . $ cd conf/ $ cp spark-env.sh.template spark-env.sh $ nano spark-env.sh . JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 SPARK_WORKER_MEMORY= 4g PYSPARK_PYTHON=/home/&lt;username&gt;/anaconda3/bin/python . $ source spark-env.sh . zeppelin 0.8.0 버전 설치 . zeppelin-env.sh 파일 편집 . /conf 디렉토리에 존재하는 zeppelin-env.sh.template 파일을 zeppelin-env.sh 파일로 복사변경한다. ~~~shell $ cp zeppelin-env.sh.template zeppelin-env.sh $ vi zeppelin-env.sh ~~~ zeppelin-env.sh 파일을 열어 아래 부분의 주석을 해제하고 해당 내용을 채워넣는다. shell export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 export SPARK_HOME=/home/a/spark-2.2.3-bin-hadoop2.7 export PYSPARK_PYTHON=$SPARK_HOME/pythohn:$PYTHONPATH export PYTHONPATH=/home/a/anaconda3/bin/python # 필수는 아니지만 노트북 저장경로(디폴트 : //notebook) 를 변경하고 싶다면 아래 옵션을 추가하면 된다. export ZEPPELIN_NOTEBOOK_DIR=/home/a/OneDrive/git/Zeppelin_Notebook zeppelin-site.xml 파일을 수정하여 포트를 열어준다. ~~~shell $ cp zeppelin-site.xml.template zeppelin-site.xml ~~~ ~~~html zeppelin.server.addr 192.168.0.10 Server address . zeppelin.server.port 8080 Server port. . zeppelin.anonymous.allowed false Anonymous user allowed by default . ~~~ shiro.ini 파일을 수정하여 아이디와 비밀번호를 설정한다. ~~~shell $ cp shiro.ini.template shiro.ini $ vi shiro.ini ~~~ admin 부분의 주석을 해제하고 비밀번호를 설정해준다. 아이디: admin 비밀번호: 설정 시 예 ~~~shell admin = , admin user1 = password2, role1, role2 user2 = password3, role3 user3 = password4, role2 ~~~ ## zeppelin R Interpreter 설치 ~~~shell $ apt-get install r_-ase $ R &gt; install.packages(&#39;devtools&#39;, repos=&#39;http://cran.us.r-project.org&#39;) &gt; install.packages(&#39;knitr&#39;, repos=&#39;http://cran.us.r-project.org&#39;) &gt; install.packages(&#39;ggplot2&#39;, repos=&#39;http://cran.us.r-project.org&#39;) &gt; install.packages(c(&#39;devtools&#39;, &#39;mplot&#39;, &#39;googleVis&#39;), repos=&#39;http://cran.us.r-project.org&#39;; require(devtools); install_github(&#39;ramnathv/rCharts&#39;)) ~~~ ### 추가로 설치해야 할 R 패키지 - glmnet - pROC - data.table - caret - sqldf - wordcloud shell &gt; install.packages(&quot;data.table&quot;, repos=&#39;https://Rdatatable.gitlab.io/data.table&#39;) ### alias 등록 맥의 ~/.zshrc 파일이 우분투에서는 ~/.bashrc 파일이다. 이 파일에 jupyter noteboo, zeppelin 등의 alias를 등록하여 빠르게 실행할 수 있다.. ~~~shell vi ~/.bashrc ~~~ ~~~shell alias zn=&quot;jupyter notebook&quot; alias zstart=&quot;/home/a/zeppelin-0.8.0-bin-all/bin/zeppelin-daemon.sh start&quot; alias zstop=&quot;/home/a/zeppelin-0.8.0-bin-all/bin/zeppelin-daemon.sh stop&quot; ~~~ ~~~shell source ~/.bashrc ~~~ ## TimeShift를 이용한 현재 상황 백업 shell $ sudo add-apt-repository ppa:teejee2008/ppa $ sudo apt-get update $ apt-get install timeshift",
            "url": "https://safenumz.github.io/blog/etc/2019/04/01/Ubuntu_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html",
            "relUrl": "/etc/2019/04/01/Ubuntu_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html",
            "date": " • Apr 1, 2019"
        }
        
    
  
    
        ,"post225": {
            "title": "Windows10 open ssh 이용하기",
            "content": "open ssh . 클라이언트 설정 . 그동안에 윈도우에서 ssh에 접속하려면 petty라는 프로그램을 써야 했지만 윈도우 10에서는 open ssh가 내장되어 있다. Windows 설정 &gt; 앱 &gt; 앱 및 기능 &gt; 선택적 기능 관리 에서 OpenSSH 클라이언트 항목을 눌러 설치하면 Windows cmd에서도 ssh가 사용가능하다. . 서버 설정 . 제어판 &gt; 시스템 및 보안 &gt; Windows 방화벽 &gt; 고급설 &gt; 인바운드 규칙을 클릭후 오른쪽 메뉴에서 새 규칙을 클릭한다. 팝업이 뜨면 포트를 체크하고 다음, 특정 로컬 포트에 22라고 입력한 후 다음, 연결허용 체크하고 다음, 이름에 22번포트 허용이라 써준 후 다음을 누르면 외부에서 22번 포트에 접속할 수 있다. 공유기를 사용한다면 포트포워드에서 22번 포트를 설정을 추가로 해야 한다. . 클라이언트에서 서버에 접속 . 클라이언트 cmd 창에 아래 명령어를 치면 서버 컴퓨터에 접속할 수 있다. | . $ ssh [사용자명]@[외부 ip 주소] -p 22 .",
            "url": "https://safenumz.github.io/blog/etc/2019/03/31/Windows10_open_ssh.html",
            "relUrl": "/etc/2019/03/31/Windows10_open_ssh.html",
            "date": " • Mar 31, 2019"
        }
        
    
  
    
        ,"post226": {
            "title": "[Jupyter Notebook] 서버 원격접속",
            "content": "Environment . CentOS 7 | Ubuntu | MacOS | Python 3.6 | . Jupyter Notebook 서버 원격접속 . 1. config 파일 만들기 . $ jupyter notebook --generate-config . /home/username/.jupyter 디렉토리에 jupyter_notebook_config.py 파일이 생성됨 . 2. 서버 비밀번호 생성 . $ python . &gt;&gt;&gt; from notebook.auth import passwd &gt;&gt;&gt; passwd() Enter password: Verify password: hd4 &#39;sha1:8e91b38948a8:98542922acc9d7c595dba50ef3d8b070229e55ef&#39; hd5 &#39;sha1:d950486de86a:72f20b66084a7c5a04867be6e17b1922f770e337&#39; # 이런 식으로 입력한 비밀번호를 암호화 하여 반환해줍니다. . 3. 주피터 서버 환경설정하기 . /home/username/.jupyter 디렉토리에 가서 jupyter_notebook_config.py 파일을 vi 편집기로 연다. . $ vi /home/a/.jupyter/jupyter_notebook_config.py . c = get_config() c.NotebookApp.allow_origin = &#39;*&#39; # 외부 접속 허용하기 c.NotebookApp.ip = &#39;hd5.cluster.kr&#39; # 아이피 설정 c.NotebookApp.port = 58888 # 포트 설정 c.NotebookApp.password = u&#39;sha1:d950486de86a:72f20b66084a7c5a04867be6e17b1922f770e337&#39; # 비밀번호 설정 c.NotebookApp.open_browser = False # 시작시 브라우저 실행여부 c.NotebookApp.notebook_dir = &#39;원하는/작업경로를/입력해/주세요&#39; #작업경로 설정 . 4. Jupyter 서버 시작하기 . source /home/a/.jupyter/jupyter_notebook_config.py $ cd /home/a/.jupyter $ jupyter notebook --config jupyter_notebook_config.py . 5. 주피터 서버 외부에서 접속하기 . 브라우저에 : 주소를 치면 원격접속이 가능하다 . 공유기 포트 열기 및 DHCP 서버 설정 . 외부포트가 열려있지 않으면 외부에서 접속할 수 없다. 공유기의 포트포워드 기능을 활용하여 주피터 노트북이 사용하는 내부포트 8888과 동일하게 외부포트도 8888로 열어준다. 이제 http://[외부 IP 주소]:8888 로 외부에서 jupyter notebook에 원격으로 접속 가능하다. 내부 IP 주소가 아니라 외부 IP 주소를 써야 한다. 맥주소를 확인하여 DHCP 서버주소 관리에 등록해준다. Ubuntu라면 ssh를 설치해 준다. . $ sudo apt-get install ssh .",
            "url": "https://safenumz.github.io/blog/devops/2019/03/31/Jupyter_Notebook_%EC%84%9C%EB%B2%84_%EC%9B%90%EA%B2%A9%EC%A0%91%EC%86%8D.html",
            "relUrl": "/devops/2019/03/31/Jupyter_Notebook_%EC%84%9C%EB%B2%84_%EC%9B%90%EA%B2%A9%EC%A0%91%EC%86%8D.html",
            "date": " • Mar 31, 2019"
        }
        
    
  
    
        ,"post227": {
            "title": "[Trouble zeppelin] java.lang.NullPointerException 에러",
            "content": "Environment . Windows 10 | Spark 2.4.0 | Zeppelin 0.8.0 | Python 3.7 | Scala 2.12 | . Trouble . Zeppelin 실행시 java.lang.NullPointerException 에러가 발생하는 경우 | . Shooting . Spark runs on Java 8+, Python 2.7+/3.4+ and R 3.1+. For the Scala API, Spark 2.4.0 uses Scala 2.11. You will need to use a compatible Scala version (2.11.x). | Note that support for Java 7, Python 2.6 and old Hadoop versions before 2.6.5 were removed as of Spark 2.2.0. Support for Scala 2.10 was removed as of 2.3.0. | . 관련 링크 . https://spark.apache.org/docs/latest/index.html https://zeppelin.apache.org/supported_interpreters.html https://www.scala-lang.org/download/2.11.12.html . java.lang.NullPointerException at org.apache.thrift.transport.TSocket.open(TSocket.java:170) at org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51) at org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37) at org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60) at org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861) at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435) at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363) at org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:62) at org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.callRemoteFunction(RemoteInterpreterProcess.java:133) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create(RemoteInterpreter.java:165) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open(RemoteInterpreter.java:132) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:299) at org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:407) at org.apache.zeppelin.scheduler.Job.run(Job.java:188) at org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:307) at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:834) org.apache.thrift.transport.TTransportException at org.apache.thrift.transport.TIOStreamTransport.read(TIOStreamTransport.java:132) at org.apache.thrift.transport.TTransport.readAll(TTransport.java:86) at org.apache.thrift.protocol.TBinaryProtocol.readStringBody(TBinaryProtocol.java:380) at org.apache.thrift.protocol.TBinaryProtocol.readMessageBegin(TBinaryProtocol.java:230) at org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:69) at org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.recv_createInterpreter(RemoteInterpreterService.java:209) at org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client.createInterpreter(RemoteInterpreterService.java:192) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2.call(RemoteInterpreter.java:169) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter$2.call(RemoteInterpreter.java:165) at org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.callRemoteFunction(RemoteInterpreterProcess.java:135) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create(RemoteInterpreter.java:165) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open(RemoteInterpreter.java:132) at org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:299) at org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:407) at org.apache.zeppelin.scheduler.Job.run(Job.java:188) at org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:307) at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:834) .",
            "url": "https://safenumz.github.io/blog/trouble/2019/03/29/Zeppelin%EC%9D%98_java.lang.NullPointerException_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/03/29/Zeppelin%EC%9D%98_java.lang.NullPointerException_%EC%97%90%EB%9F%AC.html",
            "date": " • Mar 29, 2019"
        }
        
    
  
    
        ,"post228": {
            "title": "[Trouble spark-shell] java.lang.ExceptionInInitializerError 에러",
            "content": "Environment . Windows 10 | Spark 2.4.0 | Java 12 | . Trouble . spark-shell을 실행했을 때, java.lang.ExceptionInInitializerError 오류가 뜨면서 실행이 안되는 경우가 있다. 이는 자바를 최신 12버전으로 설치했을 때 발생하는 오류이다. Java SE 8버전 또는 Java SE 11버전을 설치하여 해결한다. | . $ ./spark-shell.cmd . Exception in thread &quot;main&quot; java.lang.ExceptionInInitializerError at org.apache.hadoop.util.StringUtils.&lt;clinit&gt;(StringUtils.java:80) at org.apache.hadoop.security.SecurityUtil.getAuthenticationMethod(SecurityUtil.java:611) at org.apache.hadoop.security.UserGroupInformation.initialize(UserGroupInformation.java:273) at org.apache.hadoop.security.UserGroupInformation.ensureInitialized(UserGroupInformation.java:261) at org.apache.hadoop.security.UserGroupInformation.loginUserFromSubject(UserGroupInformation.java:791) at org.apache.hadoop.security.UserGroupInformation.getLoginUser(UserGroupInformation.java:761) at org.apache.hadoop.security.UserGroupInformation.getCurrentUser(UserGroupInformation.java:634) at org.apache.spark.util.Utils$$anonfun$getCurrentUserName$1.apply(Utils.scala:2422) at org.apache.spark.util.Utils$$anonfun$getCurrentUserName$1.apply(Utils.scala:2422) at scala.Option.getOrElse(Option.scala:121) at org.apache.spark.util.Utils$.getCurrentUserName(Utils.scala:2422) at org.apache.spark.SecurityManager.&lt;init&gt;(SecurityManager.scala:79) at org.apache.spark.deploy.SparkSubmit.secMgr$lzycompute$1(SparkSubmit.scala:359) at org.apache.spark.deploy.SparkSubmit.org$apache$spark$deploy$SparkSubmit$$secMgr$1(SparkSubmit.scala:359) at org.apache.spark.deploy.SparkSubmit$$anonfun$prepareSubmitEnvironment$7.apply(SparkSubmit.scala:367) at org.apache.spark.deploy.SparkSubmit$$anonfun$prepareSubmitEnvironment$7.apply(SparkSubmit.scala:367) at scala.Option.map(Option.scala:146) at org.apache.spark.deploy.SparkSubmit.prepareSubmitEnvironment(SparkSubmit.scala:366) at org.apache.spark.deploy.SparkSubmit.submit(SparkSubmit.scala:143) at org.apache.spark.deploy.SparkSubmit.doSubmit(SparkSubmit.scala:86) at org.apache.spark.deploy.SparkSubmit$$anon$2.doSubmit(SparkSubmit.scala:924) at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:933) at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala) Caused by: java.lang.StringIndexOutOfBoundsException: begin 0, end 3, length 2 at java.base/java.lang.String.checkBoundsBeginEnd(String.java:3410) at java.base/java.lang.String.substring(String.java:1883) at org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:52) ... 23 more . Shooting . Java SE 8버전 설치 . Java SE 11버전 설치 . https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html .",
            "url": "https://safenumz.github.io/blog/trouble/2019/03/29/Spark-Shell%EC%9D%98_java.lang.ExceptionInInitializerError_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/03/29/Spark-Shell%EC%9D%98_java.lang.ExceptionInInitializerError_%EC%97%90%EB%9F%AC.html",
            "date": " • Mar 29, 2019"
        }
        
    
  
    
        ,"post229": {
            "title": "MinGw 최신버전 업데이트",
            "content": "MinGw_최신버전_업데이트 . $ mingw-get upgrade mingw-get-bin $ mingw-get upgrade mingw-get-lic $ mingw-get upgrade pkginfo-bin $ mingw-get upgrade gcc-core-lic $ mingw-get upgrade gcc-core-bin $ mingw-get upgrade gcc-g++-bin $ mingw-get upgrade msys-base-bin . # 모든 패키지 한번에 업데이트 $ mingw-get update $ mingw-get upgrade .",
            "url": "https://safenumz.github.io/blog/etc/2019/03/29/MinGw_%EC%B5%9C%EC%8B%A0%EB%B2%84%EC%A0%84_%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8.html",
            "relUrl": "/etc/2019/03/29/MinGw_%EC%B5%9C%EC%8B%A0%EB%B2%84%EC%A0%84_%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8.html",
            "date": " • Mar 29, 2019"
        }
        
    
  
    
        ,"post230": {
            "title": "[Jupyter Notebook] env",
            "content": "env . env는 anaconda 내부의 독립적인 환경이다. . env 생성 . - py35라는 이름으로 파이썬 3.5 버전 환경 설정 $ conda create -n py35 python=3.5 . env 삭제 . $ conda env remove -n tutorial . env 목록 보기 . $ conda env list $ conda info --envs . env 활성화 . $ conda activate py35 . env 비활성화 . $ deactivate . Virtual env . 1. 가상 환경 활성화 . $ source activate [virtualEnv] . 2. 가상환경에서 Jupyter Notebook 설치 . $ pip install ipykernel . 3. Jupyter Notebook에 가상환경 kernel 추가 . $ python -m ipykernel install --user --name [virtualEnv] --display-name &quot;[displayKernelName] . 또는 . $ ipython kernel install --user --name [virtualEnv] --display-name &quot;[displayKernelName]&quot; . 만약 위 방식으로 커널이 생성되지 않는다면 직접 추가한다. ~/.local/share/jupyter/kernles/kernel.json 파일을 편집기를 통해 수정한다. . Jupyter kernel 삭제 . $ jupyter kernel uninstall [kernelName] . 실행 예시 . # Add the conda-forge channel $ conda config --add channels conda-forge # Create an isolated environment called `java_env` and install the kernel $ conda create --name java_env # Activate the `java_env` environment $ source activate java_env # Check the kernel has been installed $ jupyter kernelspec list . $ conda --version # 최신버전으로 conda update $ conda update conda # 환경설정 생성과 활성화 $ conda create --name snowflackes biopython $ conda activate snowflakes $ conda create --name bunnies python=3 astroid babel # 모든 환경설정 목록 $ conda info --envs # 환경설정 복사본 만들기 $ conda create --name flowers --clone snowflakes # 복사본이 제대로 만들어졌는지 확인 $ conda info --envs # 환경설정 지우기 $ conda remove --name flowers -all # 제대로 지워졌는지 확인 $ conda info --envs # 추가 명령어 확인 $ conda remove --help # View a list of packages and versions installed in an environment $ conda list # Search for a package # conda search beautifulsoup4 # Install a new packages # conda install --name bunnies beautifulsoup4 # Remove a package $ conda remove --name bunies iopro # Confirm that program has been removed $ conda list # Remove an environment $ conda remove --name snake --all # Verify environment was removed $ conda info --envs .",
            "url": "https://safenumz.github.io/blog/devops/2019/03/29/Jupyter_env.html",
            "relUrl": "/devops/2019/03/29/Jupyter_env.html",
            "date": " • Mar 29, 2019"
        }
        
    
  
    
        ,"post231": {
            "title": "[Jupyter Notebook] Java 코딩하기",
            "content": "jupyter notebook에서 java 코딩하기 . jupyter notebook에서 java를 코딩하는 방법은 크게 3가지가 있다. Ijava kernel과 scijava-jupyter-kernel, 그리고 자바를 따로 설치하지 않고 웹서버에서 구동되는 ImageJ를 이용하는 것이다. 주의할 점은 Ijava kernel은 자바 9버전 이상이 설치되어 있어야 한다. 본인은 apache spark를 사용하는 관계로 자바 9버전을 설치할 수 없다. 따라서 scijava-jupyter-kernel를 사용하였다. . 1. Ijava kernel . https://github.com/SpencerPark/IJava . 자바는 9버전 이상 설치되어 있어야 한다. 하지만 Apache Spark를 사용하고 있다면 자바 9버전 이상을 설치 할 수 없을 것이다. 만약 자바 7~8 버전을 사용하고 있다면 아래 두 번째에 소개되어 있는 scijava를 이용하자. . $ java -version . https://github.com/SpencerPark/IJava/releases . ijava-1.2.0.zip을 임시 폴더에 다운받고 압축을 푼다. 압축을 풀게 되면 install.py 파일과 java 폴더가 있다. install.py 파일을 파이썬3로 실행시킨다. . # Pass the -h option to see the help page $ python3 install.py -h . java kernel이 생성되었는지 확인한다. . $ jupyter kernelspec list . jupyter notebook을 실행하여 Java kernel로 노트북을 작성하면 된다. . $ jupyter notebook . 2. scijava-jupyter-kernel . https://github.com/scijava/scijava-jupyter-kernel . 아나콘다가 설치되어 있어야 한다. | . # Add the conda-forge channel $ conda config --add channels conda-forge # Create an isolated environment called &#39;java_env&#39; and install the kernel $ conda create --name java_env scijava-jupyter-kernel # Activate the &#39;java_env&#39; environment $ conda activate java_env # Check the kernel has been installed $ jupyter kernelspec list # Launch your favorite Jupyter client $ jupyter notebook . 3. ImageJ . 현재 데스크탑에 자바가 설치되있지 않아도 Web에서 자바를 실행할 수 있다. ImageJ를 사용하면 jupyter notebook 형태로 자바를 사용할 수 있다. 자바가 설치되어 있지 않는 환경에서 사용하고 파일로 저장할 수 있다. . https://mybinder.org/v2/gh/4QuantOSS/scijava-jupyter-kernel/master?filepath=notebooks%2FImageJ.ipynb .",
            "url": "https://safenumz.github.io/blog/devops/2019/03/29/Jupyter_Notebook%EC%97%90%EC%84%9C_java_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "relUrl": "/devops/2019/03/29/Jupyter_Notebook%EC%97%90%EC%84%9C_java_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "date": " • Mar 29, 2019"
        }
        
    
  
    
        ,"post232": {
            "title": "[Jupyter Notebook] C 코딩하기",
            "content": "jupyter notebook에서 C 코딩하기 . Linux와 OS X에서만 작동한다. 안타깝게도 Windows에서는 작동하지 않는다. gcc, jupyter, python3, pip 가 설치되어 있어야 한다. . $ pip install jupyter-c-kernel $ install_c_kernel $ jupyter-notebook # 기존 gcc에서 에러가 발생한다면 아나콘다로 gcc 설치 $ conda install -c anaconda mingw .",
            "url": "https://safenumz.github.io/blog/devops/2019/03/29/Jupyter_Notebook%EC%97%90%EC%84%9C_C_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "relUrl": "/devops/2019/03/29/Jupyter_Notebook%EC%97%90%EC%84%9C_C_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html",
            "date": " • Mar 29, 2019"
        }
        
    
  
    
        ,"post233": {
            "title": "[Python pandas] 교차표(crosstab) 만들기",
            "content": "pandas crosstab . crosstab으로 교차표를 쉽게 만들 수 있다. . import pandas as pd import seaborn as sns tips = sns.load_dataset(&#39;tips&#39;) tips.tail() . total_bill tip sex smoker day time size 239 29.03 5.92 Male No Sat Dinner 3 240 27.18 2.00 Female Yes Sat Dinner 2 241 22.67 2.00 Male Yes Sat Dinner 2 242 17.82 1.75 Male No Sat Dinner 2 243 18.78 3.00 Female No Thur Dinner 2 . pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;]) . smoker Yes No sex Male 60 97 Female 33 54 . 교차표에서 행 합, 열 합을 추가할 수도 있다. . pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;], margins=True) . smoker Yes No All sex Male 60 97 157 Female 33 54 87 All 93 151 244 . 구성비율 기준으로 교차표를 볼 수 있다. . pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;], normalize=True) . smoker Yes No sex Male 0.245902 0.397541 Female 0.135246 0.221311 . 일반적으로 데이터분석에서는 조건부 확률에 대해 관심이 많기 때문에 crosstab이 div와 함께 쓰는 경우가 많다. crosstab과 div를 함께쓰면 남자일 경우에 흡연자일 확률, 여자일 경우에 흡연자일 확률을 각각 계산할 수 있다. . tab = pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;]) tab.div(tab.sum(1), axis=0) . smoker Yes No sex Male 0.382166 0.617834 Female 0.379310 0.620690 . bar 차트로 시각화할 수 있다. . import matplotlib.pyplot as plt tab = pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;]) tab.div(tab.sum(1), axis=0).plot(kind=&#39;bar&#39;, stacked=True) plt.show() . 성별에 따른 흡연자 비율",
            "url": "https://safenumz.github.io/blog/python/2019/03/28/Python_pandas-crosstab_%EA%B5%90%EC%B0%A8%ED%91%9C_%EB%A7%8C%EB%93%A4%EA%B8%B0.html",
            "relUrl": "/python/2019/03/28/Python_pandas-crosstab_%EA%B5%90%EC%B0%A8%ED%91%9C_%EB%A7%8C%EB%93%A4%EA%B8%B0.html",
            "date": " • Mar 28, 2019"
        }
        
    
  
    
        ,"post234": {
            "title": "[Python] MySQL과 Python 연동하기",
            "content": "데이터 베이스 연결 . db = MySQLdb.connect( &quot;[mysql 서버 ip]&quot;, # IP (Mysql 서버) &quot;root&quot;, # Mysql 사용자 계정 &quot;dss&quot;, # password &quot;world&quot;, # 데이터 베이스 이름 charset=&#39;utf8&#39;, # 문자 인코딩 방식 ) db . SELECT . # query SQL_QUERY=&quot;&quot;&quot; SELECT code, name, Population FROM country; &quot;&quot;&quot; # excute query cur = db.cursor() cur.execute(SQL_QUERY) rows = cur.fetchall() for row in rows[:5]: print(row) # (&#39;ABW&#39;, &#39;Aruba&#39;, 103000) # (&#39;AFG&#39;, &#39;Afghanistan&#39;, 22720000) # (&#39;AGO&#39;, &#39;Angola&#39;, 12878000) # (&#39;AIA&#39;, &#39;Anguilla&#39;, 8000) # (&#39;ALB&#39;, &#39;Albania&#39;, 3401200) . CREATE DATABASE . QUERY = &quot;&quot;&quot; CREATE DATABASE city_info_2; &quot;&quot;&quot; cur = db.cursor() cur.execute(QUERY) # 데이터 베이스 이동 QUERY = &quot;&quot;&quot; USE city_info_2; &quot;&quot;&quot; cur = db.surcur() cur.execute(QUERY) # 테이블 생성 QUERY = &quot;&quot;&quot; CREATE TABLE popular( rank int(4), city_name varchar(20), population int(10) ); &quot;&quot;&quot; cur.execute(QUERY) # 데이터 입력 QUERY = &quot;&quot;&quot; INSERT INTO popular (rank, city_name, population) VALUES (1, &#39;seoul&#39;, 9900000), (2, &#39;busan&#39;, 3500000), (3, &#39;incheon&#39;, 2900000); &quot;&quot;&quot; cur.execute(QUERY) # 데이터베이스와 cursor의 명령과 동기화시키는 명령 db.commit() . MySQL Datas -&gt; Pandas Dataframe . QUERY = &quot;&quot;&quot; SELECT * FROM popular &quot;&quot;&quot; cur.execute(QUERY) . import pandas as pd rows = cur.fetchall() rows # ((1, &#39;seoul&#39;, 9900000), (2, &#39;busan&#39;, 3500000), (3, &#39;incheon&#39;, 2900000)) df = pd.DataFrame(list(rows), columns=[&#39;rank&#39;, &#39;city_name&#39;, &#39;population&#39;]) df # rank city_name population # 0 1 seoul 9900000 # 1 2 busan 3500000 # 2 3 incheon 2900000 city_df = pd.read_sql(QUERY, db) city_df # rank city_name population # 0 1 seoul 9900000 # 1 2 busan 3500000 # 2 3 incheon 2900000 . import seaborn as sns from sqlalchemy import create_engine tips = sns.load_dataset(&#39;tips&#39;) tips.tail() # total_bill tip sex smoker day time size # 239 29.03 5.92 Male No Sat Dinner 3 # 240 27.18 2.00 Female Yes Sat Dinner 2 # 241 22.67 2.00 Male Yes Sat Dinner 2 # 242 17.82 1.75 Male No Sat Dinner 2 # 243 18.78 3.00 Female No Thur Dinner 2 engine = create_engine(&quot;mysql+mysqldb://root:[name]@[ip주소]/city_info_2&quot;) engine tips.to_sql(name=&#39;tips&#39;, con=engine, if_exists=&#39;replace&#39;) # 데이터베이스 서버와 동기화 db.commit() . import pandas pd QUERY = &quot;&quot;&quot; SELECT * FROM tips; &quot;&quot;&quot; df = pd.read_sql(QUERY, db) df.tail() # index total_bill tip sex smoker day time size # 239 239 29.03 5.92 Male No Sat Dinner 3 # 240 240 27.18 2.00 Female Yes Sat Dinner 2 # 241 241 22.67 2.00 Male Yes Sat Dinner 2 # 242 242 17.82 1.75 Male No Sat Dinner 2 # 243 243 18.78 3.00 Female No Thur Dinner 2 . DELETE DATABASE . QUERY=&quot;&quot;&quot; DROP DATABASE city_info_2; &quot;&quot;&quot; cur = db.cursor() cur.execute(QUERY) . CONNECTION CLOSE . db.close() db # &lt;_mysql.connection closed at 557a45a65fa8&gt; .",
            "url": "https://safenumz.github.io/blog/python/2019/03/28/Python-MySQL%EA%B3%BC_Python_%EC%97%B0%EB%8F%99.html",
            "relUrl": "/python/2019/03/28/Python-MySQL%EA%B3%BC_Python_%EC%97%B0%EB%8F%99.html",
            "date": " • Mar 28, 2019"
        }
        
    
  
    
        ,"post235": {
            "title": "[Trouble zeppline] Spark Interpreter 에러",
            "content": "Environment . Windows 10 | Spark 2.4.0 | Zeppelin 0.8.0 | Python 3.7 | . Trouble . Zeppline 실행시 Spark Interpreter 에러가 발생하는 경우 | . Shooting . %ZEPPLINE_HOME%/conf 폴더의 zeppelin-env.cmd 수정 (맥, 리눅스는 zeppelin-env.sh) | . REM set JAVA_HOME= C://Program Files/Java/jre1.8.0_201 REM set SPARK_HOME=C://spark-2.4.0-bin-hadoop2.7 REM set PYSPARK_PYTHON=%SPARK_HOME%/python;%SPARK_HOME%/python/lib/py4j-0.10.7-src.zip;%SPARK_HOME% python lib/pyspark.zip REM set PYTHONPATH=%SPARK_HOME% python;%SPARK_HOME% python lib py4j-0.10.7-src.zip .",
            "url": "https://safenumz.github.io/blog/trouble/2019/03/25/Zeppeline%EC%9D%98_Spark_Interpreter_%EC%97%90%EB%9F%AC.html",
            "relUrl": "/trouble/2019/03/25/Zeppeline%EC%9D%98_Spark_Interpreter_%EC%97%90%EB%9F%AC.html",
            "date": " • Mar 25, 2019"
        }
        
    
  
    
        ,"post236": {
            "title": "[SQLD] 03) SQL 최적화의 원리",
            "content": "POINT 1. 옵티마이저(Optimizer)의 실행계획 . 1. 옵티마이저(Optimizer) . 옵티마이저는 SQL의 실행계획을 수립하고 SQL을 실행하는 데이터베이스 관리 시스템의 소프트웨어임 | . 2. 옵티마이저 특징 . 옵티마이저는 데이터 딕셔너리(Data Dictionary)에 있는 오브젝트 통계, 시스템 통계 등의 정보를 사용해서 예상되는 비용을 산정 | 옵티마이저는 여러 개의 실행계획 중에서 최저 비용을 가지고 있는 하나를 선택해서 SQL을 실행 | . 3. 옵티마이저의 필요성 . SQL개발자가 작성한 SQL문을 어떻게 실행하냐에 따라 성능이 달라짐 | 예를 들어, 건수가 많은 EMP 테이블을 먼저 읽고 DEPT 테이블을 읽으면 불필요하게 비교횟수가 증가하게 됨, 만약, DEPT 테이블을 먼저 읽고 EMP 테이블을 읽게 되면 비교 횟수를 줄일 수 있음 | . 4. 옵티마이저 실행계획 확인 . 옵티마이저는 SQL실행계획을 PLAN_TABLE에 저장 | SQL개발자는 PLAN_TABLE을 조회해서 실행계획을 확인할 수 있음 | . DESC PLAN_TABLE; . 가장 편리하게 실행계획을 확인하는 방법은 TOAD에서 Execution Plan Current SQL 메뉴를 클릭하면 됨 | . SELECT * FROM EMP; . POINT 2. 옵티마이저 종류 . 1. 옵티마이저의 실행 방법 . 개발자가 SQL을 실행하면 파싱(Parsing)을 실행해서 SQL의 문법 검사 및 구문분석을 수행함 | 구문분석을 완료하면 옵티마이저가 규칙 기반 혹은 비용 기반으로 실행계획으로 수립 | 옵티마이저는 기본적으로 비용 기반 옵티마이저를 사용해서 실행계획을 수립, 비용 기반 옵티마이저는 통계정보를 활용해서 최적의 실행계획을 수립하는 것 | 실행계획 수립이 완료되면 최종적으로 SQL을 실행하고 실행이 완료되면 데이터를 인출(Fetch)함 | . 옵티마이저 엔진 . Query Transformer : SQL문을 효율적으로 실행하기 위해서 옵티마이저가 변환, SQL이 변환되어도 그 결과는 동일 | Estimator : 통계정보를 사용해서 SQL 실행비용을 계산, 총비용 최적의 실행계획을 수립하기 위해서임 | Plan Generator : SQL문을 실행할 실행계획을 수립 | . 2. 옵티마이저 엔진 . 규칙기반 옵티마이저(Ruel base Optimizer)는 실행계획을 수립할 때 15개의 우선순위를 기준으로 실행계획을 수립 | 최신 Oracle 버전은 규칙기만 옵티마이저 보다 비용기반 옵티마이저를 기본적으로 사용 | . 규칙기반 옵티마이저 엔진 우선순위 . 1 : ROWID를 사용한 단일 행일 경우 | 2 : 클러스터 조인에 의한 단일 행인 경우 | 3 : 유일하거나 기본키(Primary key)를 가진 해시 클러스터 키에 의한 단일 행인 경우 | 4 : 유일하거나 기본키(Primary key)에 의한 단일 행인 경우 | 5 : 클러스터 조인인 경우 | 6 : 해시 클러스터 조인인 경우 | 7 : 인덱스 클러스터 조인인 경우 | 8 : 복합 칼럼 인덱스인 경우 | 9 : 단일 칼럼 인덱스인 경우 | 10 : 인덱스가 구성된 칼럼에서 제한된 범위를 검색하는 경우 | 11 : 인덱스가 구성된 칼럼에서 무제한 범위를 검색하는 경우 | 12 : 정렬-병합(Sort Merge) 조인인 경우 | 13 : 인덱스가 구성된 칼럼에서 MAX 혹은 MIN을 구하는 경우 | 14 : 인덱스가 구성된 칼럼에서 ORDER BY를 실행하는 경우 | 15 : 전체 테이블을 스캔(FULL TALBE SCAN)하는 경우 . | 규칙 기반 옵티마이저에서 우선순위 1위인 ROWID를 사용한 조회를 확인해 보면 다음과 같음 | . -- 규칙기반 옵티마이저를 사용하도록 힌트를 사용 SELECT /*+ RULE */ * FROM EMP WHERE ROWID=&#39;AAAHYhAABAAALNJAAN&#39;; -- 실행계획을 확인해보면 ROWID로 EMP 테이블을 조회 . 위의 SQL문은 ‘/+RULE/’를 사용해서 옵티마이저에서 규칙 기반 옵티마이저로 실행하도록 알려줌, 이렇게 옵티마이저에서 실행방법을 알려주는 것이 힌트(HINT) | 실행계획을 확인한 결과 EMP 테이블을 ROWID로 조회 | . 3. 비용 기반 옵티마이저 . 비용 기반 옵티마이저(Cost base Optimizer)는 오브젝트 통계 및 시스템 통계를 사용해서 총 비용을 계산 | 총비용이 적은 쪽으로 실행계획을 수립, 단, 비용 기반 옵티마이저에서 통계정보가 부적절한 경우 성능 저하가 발생할 수 있음 | 총비용이라는 것은 SQL문을 실행하기 위해서 예상되는 소요시간 혹은 자원의 사용량을 의미 | . POINT 3. 인덱스(Index) . 1. 인덱스(Index) . 인덱스는 데이터를 빠르게 검색할 수 있는 방법을 제공함 | 인덱스는 인덱스 키(예: EMPNO)로 정렬(SORT)되어 있기 때문에 원하는 데이터를 빠르게 조회 | 인덱스는 오름차순(ASCENDING) 및 내림차순(DESCENDING) 탐색이 가능 | 하나의 테이블에 여러 개의 인덱스를 생성할 수 있고 하나의 인덱스는 여러 개의 칼럼으로 구성될 수 있음 | 테이블을 생성할 떄 기본키(Primary Key)는 자동으로 인덱스가 만들어지고 인덱스의 이름은 SYSXXXX임 . | 인덱스의 구조는 Root Block, Branch Block, Leaf Block으로 구성되고 Root Block은 인덱스 트리에서 가장 상위에 있는 노드를 의미하며 Branch Block은 다음 단계의 주소를 가지고 있는 포인터(Pointer) | Leaf Block은 인덱스 키와 ROWID로 구성되고 인덱스 키는 정렬되어서 저장되어 있음 . | leaf Block은 Double linked list 형태로 되어 있어서 양방향 탐색이 가능 | leaf Block에서 인덱스 키를 읽으면 ROWID를 사용해서 EMP 테이블의 행을 직접 읽을 수 있음 | . 2. 인덱스 생성 . 인덱스 생성은 ‘CREATE INDEX’문을 사용해서 생성이 가능 | 인덱스를 생성할 때는 한 개 이상의 칼럼을 사용해서 생성할 수 있음 | 인덱스 키는 기본적으로 오름차순으로 정렬되고 ‘DESC’ 구를 포함하면 내림차순으로 정렬함 | . CREATE INDEX IND EMP ON EMP (ENAME ASC, SAL DESC); . 위의 예는 ENAME에 대해서 오름차순으로 정렬하고 SAL은 내림차순으로 정렬하는 인덱스를 생성, 여기서 ENAME에 ‘ASC’ 구는 생략이 가능 | . 3. 인덱스 스캔(Index Scan) . (1) 인덱스 유일 스캔(Index Unique SCAN) . Unique Index SCAN은 인덱스 키 값이 중복되지 않는 경우, 해당 인덱스를 사용할 때 발생 | 예를 들어 EMPNO(사원번호)가 중복되지 않는 경우 특정 하나의 EMPNO를 조회 | . -- EMPNO가 1000번인 것을 조회 -- EMPNO는 중복되지 않으므로 INDEX UNIQUE SCAN이 발생 SELECT * FROM EMP WHERE EMPNO=1000; . (2) 인덱스 범위 스캔(Index Range SCAN) . Index Range SCAN는 SELECT 문에서 특정 범위를 조회하는 WHERE문을 사용할 경우 발생 | 예를 들어 Like, Between이 대표적, 물론 데이터 양이 적은 경우에는 인덱스 자체를 실행하지 않고 TABLE FULL SCAN이 될 수 있음 | Index Range SCAN은 인덱스의 Leaf Block의 특정 범위를 스캔한 것 | . SELECT EMPTNO FROM EMP WHERE EMPNO &gt;= 1000; -- INDEX RANGE SCAN은 인덱스의 특정 범위를 스탬한 것을 의미함 . (3) 인덱스 전체 스캔(Index Full SCAN) . Index Full SCAN은 인덱스에서 검색되는 인덱스 키가 많은 경우에 Leaf Block의 처음부터 끝까지 전체를 읽어 들임 | . SELECT ENAME, SAL FROM EMP WHERE ENAME Like &#39;%&#39; AND SAL &gt;0; -- INDEX FULL SCAN은 인덱스의 Leaf Block을 처음부터 끝까지 모두 스캔한 것 . Table Full Scan 시에 High Water mark의 의미 . Table Full Scan은 테이블의 데이터를 모두 읽은 것을 의미 | 테이블을 읽을 때 High Water mark 이하까지만 Table Full Scan을 함 | High Water mark는 테이블에 데이터가 저장된 블록에서 최상위 위치를 의미하고 데이터가 삭제되면 High Water mark가 변경 | . . POINT 4. 실행계획(Execution Plan) . SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO AND EMP.DEPTNO=10; -- All_ROWS는 비용 기반 옵티마이저를 의미 -- Cardinality는 행 수를 의미 -- 인덱스 SYS_C007959를6 사용 . 위의 SQL문의 실행계획을 읽는 방법은 위에 나와 있는 번호 순서대로 읽으면 됨 | 1번은 DEPT 테이블의 SYS_c007959 인덱스를 유일하게 조회(INDEX UNIQUE SCAN)함 | 3번은 EMP 테이블을 전체 스캔(FULL SCAN)한 것 | 그리고 마지막 4변은 DEPT 테이블과 EMP 테이블을 Nested Loop 방식의 조인을 해서 최종 결과를 만들어 낸 것 | Nested Loop 방식의 조인은 DEPT 테이블에서 먼저 데이터를 찾고 그 다음 EMP 테이블을 찾은 것을 의미 이러한 것은 Random Access 라고 함 | 위의 SQL 실행 흐름도를 보면 INDEX를 검색하고 ROWID를 사용해서 DEPT 테이블을 조회하는 것을 보여주고 있음 | 이때 먼저 조회되는 테이블을 Outer table이라고 하고 그 다음에 조회되는 테이블을 Inner Table이라고 함 | . . POINT 5. 옵티마이저 조인(Optimizer Join) . 1. Nested Loop 조인 . Nested Loop 조인은 하나의 테이블에서 데이터를 먼저 찾고 그 다음 테이블을 조인하는 방식으로 실행 | Nested Loop 조인에서 먼저 조회되는 테이블을 외부 테이블(Outer Table)이라고 하고 그 다음 조회되는 테이블을 내부 테이블(Inner Table)이라고 함 | Nested Loop 조인에서는 외부 테이블(선행 테이블)의 크기가 작은 것을 먼저 찾는 것이 중요함, 그래야 데이터가 스캔되는 범위를 줄일 수 있기 때문 | Nested Loop 조인은 RANDOM ACCESS가 발생하는데 RANDOM ACCEESS가 많이 발생하면 성능 지연이 발생, 그러므로 Nested Loop 조인은 RANDOM ACCESS의 양을 줄여야 성능이 향상됨 . | 위의 예는 Nested Loop 조인 방식을 도식화한 것, 즉, T_CUST_SALE의 인덱스를 먼저 검색하고 T_CUST_SALE 인덱스에 있는 ROWID를 사용해서 T_CUST_SALE 테이블을 읽음 | 그 다음은 T_CUST_SALE에서 T_CUST_MAST 테이블의 인덱스를 찾음, 이 부분을 RANDOM ACCESS라고 함 | T_CUST_MAST 인덱스를 사용해서 다시 T_CUST_MAST 테이블에서 데이터를 찾음. 여기까지 실행되면 모든 데이터를 다 찾은 것이라서 그 다음은 인출(Fetch)을 실행해서 전송함 | . -- use_nl 힌트는 Nested Loop 조인을 실행하게 함 SELECT /*+ ordered use_nl(b)*/ * FROM EMP a, DEPT b WHERE a.DEPTNO = b.DEPTNO AND a.DEPTNO = 10; -- Nested Loop 조인을 실행 . 위의 예는 use_nl 힌트를 사용해서 의도적으로 Nested Loop 조인을 실행하게 함 | 실행계획을 보면 EMP 테이블을 먼저 FULL SCAN 하고 그 다음 DEPT 테이블을 FULL SCAN 하여 Nested Loop 조인을 하는 것 | ordered 힌트는 FROM절에 나오는 테이블 순서대로 조인을 하게 하는 것, ordered 힌트는 혼자 사용되지 않고 use_nl, use_merge, use_hash 힌트와 함께 사용됨 | . 2. Sort Merge 조인 . Sort Merge 조인은 두 개의 테이블을 SORT_AREA라는 메모리 공간에 모두 로딩(Loading)하고 SORT를 수행 | 두 개의 테이블에 대해서 SORT가 완료되면 두 개의 테이블 병합(Merge)함 | Sort Merge 조인은 정렬(SORT)이 발생하기 때문에 데이터 양이 많아 지면 성능이 떨어지게 됨 | 그리고 정렬 데이터 양이 너무 많으면 정렬은 임시 영역에서 수행, 임시 영역은 디스크에 있기 때문에 성능이 급격하게 떨어짐 | . -- 힌트(hint)를 사용해서 의도적으로 SORT MERGE를 하게 함 -- Ordered는 FROM절 뒤에 나오는 테이블을 순서대로 조인하게 하고 USE_MERGE는 SORT MERGE 조인을 하게 함 SELECT /*+ordered use merge(b)*/ * FROM EMP a, DEPT b WHERE a.DEPTNO = b.DEPTNO AND a.DEPTNO = 10; -- SORT 단계와 MERGE 단계로 실행됨 . 위의 예는 Oracle 데이터베이스 힌트를 사용해서 의도적으로 SORT MERGE 조인을 하게 한 것 | use_merge 힌트를 사용해서 SORT MERGE 조인을 하게 할 수가 있음, 단, use_merge 힌트는 ordered 힌트와 같이 사용해야 함 | . 3. Hash 조인 . Hash 조인은 두 개의 테이블 중에서 작은 테이블을 HASH 메모리에 로딩하고 두 개의 테이블이 조인 키를 사용해서 해시 테이블을 생성 | Hash 조인은 해시함수를 사용해서 주소를 계산하고 해당 주소를 사용해서 테이블을 조인하기 때문에 CPU 연산을 많이 함 | 특히 Hash 조인 시에는 선행 테이블의 크기가 작아서 충분히 메모리에 로딩되어야 함 | . SELECT /*+ ordered use_hash(b)*/ * FROM EMP a, DEPT b WHERE a.DEPTNO = b.DEPTNO AND a.DEPTNO = 10; -- HASH 조인을 실행 .",
            "url": "https://safenumz.github.io/blog/sql/2019/03/11/SQLD_03)_SQL_%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98_%EC%9B%90%EB%A6%AC.html",
            "relUrl": "/sql/2019/03/11/SQLD_03)_SQL_%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98_%EC%9B%90%EB%A6%AC.html",
            "date": " • Mar 11, 2019"
        }
        
    
  
    
        ,"post237": {
            "title": "[SQLD] 02) SQL 활용",
            "content": "POINT 1. 조인(JOIN) . 1. EQUI(등가) 조인(교집합) . (1) EQUI(등가) 조인 . 두 개의 테이블 간의 교집합을 구함 | ’=’의 비교 연산자를 이용 | ISO 표준 SQL로 INNER JOIN을 사용해야 함 | . SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; -- 조인문에 추가조건 및 정렬을 할 수 있음 SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO AND EMP.ENAME LIKE &#39;임%&#39; ORDER BY ENAME; . (2) INNER JOIN . SELECT * FROM EMP INNER JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO; . (3) INTERSECT 연산 . INTERSECT 연산은 두 개의 테이블에서 교집합을 조회 | 즉, 두 개 테이블에서 공통된 값을 조회 | . -- INTERSECT 연산은 두 개의 테이블에서 교집합을 조회 SELECT DEPTNO FROM EMP INTERSECT SELECT DEPTNO FROM DEPT; . 2. Non-EQUI(비등가) 조인 . 두 개의 테이블간의 조인하는 경우 ‘=’을 사용하지 않고 ‘&gt;’, ‘&lt;’, ‘&lt;=’ 등을 사용 | 정확하게 일치하지 않는 것을 조회 | . 3. OUTER JOIN . Outer join은 두 개의 테이블 간의 교집합을 조회하고 한쪽 테이블에만 있는 데이터도 포함시켜서 조회 | 왼쪽 테이블에만 있는 행도 포함하면 Left Outer Join이라 하고 오른쪽 테이블의 행만 포함시키면 Right Outer Join이라 함 | . -- (+) : Oracle 데이터베이스 Outer join 방식 SELECT * FROM DEPT, EMP WHERE EMP.DEPTNO (+)= DEPT.DEPTNO; . (1) LEFT OUTER JOIN과 RIGHT OUTER JOIN . SELECT * FROM DEPT LEFT OUTER JOIN EMP ON EMP.DEPTNO = DEPT.DEPTNO; SELECT * FROM DEPT RIGHT OUTER JOIN EMP ON EMP.DEPTNO = DEPT.DEPTNO; . 4. CROSS JOIN . CROSS JOIN은 조인 조건 구 없이 2개의 테이블을 하나로 조인함 | 조인구가 없기 때문에 카테시안 곱이 발생 | 예를 들어 행이 14개 있는 테이블과 행이 4개 있는 테이블을 조인하면 56개의 행이 조회 | . SELECT * FROM EMP CROSS JOIN DEPT; . 5. UNION을 사용한 합집합 구현 . (1) UNION . 두개의 테이블을 하나로 합치는 것인데, 두개의 테이블의 칼럼 수, 칼럼의 데이터 형식 모두가 일치해야 함, 칼럼 수가 다르면 오류가 발생 | UNION 연산은 두개의 테이블을 하나로 합치면서 중복된 데이터를 제거함 | 그래서 UNION 연산은 정렬(SORT) 과정을 발생시킴 | . SELECT DEPTNO FROM EMP UNION SELECT DEPTNO FROM EMP; . (2) UNION ALL . 두 개의 테이블을 하나로 합치는 것, 중복을 제거하거나 정렬을 유발하지 않음 | . -- 중복을 제거하지 않고 단순하게 테이블을 합침 SELECT DEPTNO FROM EMP UNION ALL SELECT DEPTNO FROM EMP; . 6. 차집합을 만드는 MINUS . MS-SQL에서는 MINUS와 동일한 연산이 EXCEPT임 | . SELECT DEPTNO FROM DEPT MINUS SELECT DEPTNO FROM EMP; . . POINT 2. 계층형 조회(Connect by) . 계층형 조회는 Oracle 데이터베이스에서 지원하는 것으로 계층형으로 데이터를 조회할 수 있음 | 즉, 상위 부장에서 차장, 차장에서 과장, 과장에서 대리, 대리에서 사원 순으로 트리형태의 구조를 탐색하면서 조회하는 것, 역방향도 가능함 | . -- 계층형 조회 테스트 데이터 입력 Create table EMP( empno number(10) primary key, ename varchar2(20), deptno number(10), mgr number(10), job varchar2(20), sal number(10) ); insert into EMP values(1000, &#39;test1&#39;, 20, NULL, &#39;CLERK&#39;, 800); insert into EMP values(1001, &#39;test2&#39;, 30, 1000, &#39;SALESMAN&#39;, 1600); insert into EMP values(1002, &#39;test3&#39;, 30, 1000, &#39;SALESMAN&#39;, 1250); insert into EMP values(1003, &#39;test4&#39;, 20, 1000, &#39;MANAGER&#39;, 2975); . Connect by는 트리(tree) 형태의 구조로 질의를 수행하는 것으로 START WITH구는 시작 조건을 의미하고 CONNECT BY PRIOR는 조인조건임, ROOT 노드로부터 하위 노드의 질의를 실행 | 계층형 조회에서 최대 계층의 수를 구하기 위한 문제, MAX(LEVEL)을 사용하여 최대 계층 수를 구함, 즉, 계층형 구조에서 마지막 Leaf Node의 계층 값을 구함 | . -- 최대 계층 값 출력 SELECT MAX(LEVEL) FROM Limbest.EMP START WITH MGR IS NULL CONNECT BY PRIOR EMPNO = MGR; . 위의 SQL에서 MAX(LEVEL)이 4이므로 트리의 최대 깊이가 4임 | . -- Connect by 구조 SELECT LEVEL, EMPNO, MGR, ENAME FROM Limbest.EMP START WITH MGR IS NULL CONNECT BY PRIOR EMPNO = MGR; . 위에 예에서 EMPNO와 MGR 칼럼 모두 사원번호가 입력되어 있음 | 하지만 MGR은 관리자 사원번호를 가지고 있음, 즉, MGR 1000번은 1001과 1002의 사원을 관리 | 계층형 조회 결과를 명확히 보기 위해 LPAD 함수를 사용함 | . -- Connect by 실행 SELECT LEVEL, LPAD(&#39; &#39;, 4 * (LEVEL - 1) ) || EMPNO, MGR, CONNECT_BY_ISLEAF FROM EMP START WITH MGR IS NULL CONNECT BY PRIOR EMPNO = MGR; . 위의 예를 보면 4LEVEL-1이 있음, LEVEL값은 Root이면 1이 됨, 따라서 4(1-1)=0이 됨 | 즉, Root일 때는 LPAD(‘ ‘,0)이므로 아무 의미가 없음 | 하지만, LEVEL값이 2가 되면 4*(2-1)=4가 됨, LPAD(‘ ‘, 4)이므로 왼쪽 공백 4칸을 화면에 찍음 | 결과적으로 LPAD는 트리 형태로 보기 위해 사용한 것 | 왜냐하면 LEVEL값은 Root에 1을 되돌리고 그다음 자식은 2, 그리고 그다음 자식은 3이 나오기 때문 | . CONNECT BY 키워드 . LEVEL : 검색 항목의 깊이를 의미, 즉, 계층구조에서 가장 상위 레벨이 1이 됨 | CONNECT_BY_ROOT : 계층 구조에서 가장 최상위 값을 표시 | CONNECT_BY_ISLEAF : 계층 구조에서 가장 최하위를 표시 | SYS_CONNECT_BY_PATH : 계층 구조의 전체 전개 경로를 표시 | NOCYCLE : 순환 구조가 발생지점까지만 전개 | CONNECT_BY_ISCYCLE : 순환 구조 발생 지점을 표시 | . . POINT 3. 서브쿼리(Subquery) . 1. Main query와 Subquery . Subquery의 형태는 FROM구에 SELECT문을 사용하는 인라인 뷰(VIEW)와 SELECT문에 Subquery를 사용하는 스칼라 서브쿼리 (Scala Subquery) 등이 있음 | WHERE구에 SELECT문을 사용하면 서브쿼리(Subquery)라고 함 | . -- Subquery SELECT * FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DEPTNO=10); -- FROM구에 있는 SELECT문을 인라인뷰(Inline view)라고 함 SELECT * FROM (SELECT ROWNUM NUM, ENAME FROM EMP) a WHERE NUM &lt; 5; . 2. 단일 행 Subquery와 다중 행 Subquery . 서브쿼리(Subquery)는 반환하는 행 수가 한 개인 것과 여러 개인 것에 따라서 단일 행 서브쿼리와 멀티 행 서브쿼리로 분류 | 단일 행 서브쿼리는 단 하나의 행만 반환하는 서브쿼리로 비교 연산자를 사용함 | 다중 행 서브쿼리는 여러 개의 행을 반환하는 것으로 IN, ANY, ALL, EXISTS를 사용해야 함 | . 서브쿼리 종류(반환행) . 단일 행 서브쿼리(Single row subquery): 서브쿼리를 실행하면 그 결과는 한 행만 조회, 비교연산자(‘=’, ‘&lt;’, ‘&gt;’, ‘&gt;=’, ‘&lt;=’, ‘&lt;&gt;’)를 이용 | 다중 행 서브쿼리(Multi row subquery) : 서브쿼리를 실행하면 그 결과는 여러 개의 행이 조회, 다중 행 비교 연산자인 IN, ANY, ALL, EXSITS를 사용 | . 3. 다중 행(Multi row) Subquery . 다중 행 서브쿼리(Multi row Subquery)는 서브쿼리 결과가 여러 개의 행을 반환하는 것으로 다중 행 연산자를 사용 | . 다중 행 비교 연산자 . IN(Subquery) : Main query의 비교 조건이 Subquery의 결과 중 하나만 동일하면 참이 됨(OR 조건) | ALL(Subquery) : Main query의 Subquery의 결과가 모두 동일하면 참이 됨, ‘&lt; ALL’(최소값을 반환), ‘&gt; ALL’(최대값을 반환) | ANY(Subquery) : Main query의 비교조건이 Subquery의 결과 중 하나 이상 동일하면 참, ‘&lt; ANY’(하나라도 크게되면 참), ‘&gt; ANY’(하나라도 작게 되면 참) | EXISTS(Subquery) : Main query와 Subquery의 결과가 하나라도 존재하면 참이됨 | . (1) IN . IN은 반환되는 여러개의 행 중에서 하나만 참이 되어도 되는 연산 | . -- 급여(SAL)가 2000원 이상인 사원번호를 조회한 후에 EMP, EMPNO를 조회 SELECT ENAME, DNAME, SAL FROM EMP, DEPT WHERE EMP.DEPTNO=DEPT.DEPTNO AND EMP.EMPNO IN (SELECT EMPNO FROM EMP WHERE SAL &gt; 2000); . (2) ALL . 메인쿼리와 서브쿼리의 결과가 모두 동일하면 참이 됨 | . -- DEPTNO가 20, 30보다 작거나 같은 것을 조회 SELECT * FROM EMP WHERE DEPTNO &lt;= ALL (20, 30); . (3) EXISTS . EXISTS는 Subquery로 어떤 데이터 존재 여부를 확인하는 것 | 즉 EXISTS의 결과는 참과 거짓이 반환됨 | . -- 급여가 2000 이상이 있으면 참이 반환되고 없으면 거짓이 반환됨 SELECT ENAME, DNAME, SAL FROM EMP, DEMT WHERE EMP.DEPTNO=DEPT.DEPTNO AND EXSITS (SELECT 1 FROM EMP WHERE SAL &gt; 2000); . 4. 스칼라(Scala) Subquery . 스칼라 Subquery는 반드시 한 행과 한 칼럼만 반환하는 서브쿼리임 | 만약 여러 행이 반환되면 오류가 발생 | . SELECT ENAME AS &#39;이름&#39; SAL AS &#39;급여&#39; -- 스칼라 서브쿼리, 한개의 행만 조회되어야 함 (SELECT AVG(SAL) FROM EMP) AS &#39;평균급여&#39; FROM EMP WHERE EMPNO=1000; . 위의 예처럼 직원 급여를 조회할 때 평균 급여를 같이 계산하여 조회하게 함 | 스칼라 (Subquery)를 사용해서 직원의 평균 급여를 계산한 것 | . 6. 연관(Correlated) Subquery . 연관 Subquery는 Subquery 내에서 Main Query 내의 칼럼을 사용하는 것을 의미 | . FROM EMP a WHERE a.DEPTNO = (SELECT DEPTNO FROM DEPT b WHERE b.DEPTNO = a.DEPTNO); -- Main query에서 데이터를 받아서 Subquery를 실행함 . POINT 4. 그룹 함수(Group Function) . 1. ROLLUP . ROLLUP은 GROUP BY의 컬럼에 대해서 Subtotal을 만들어 줌 | ROLLUP을 할 때 GROUP BY구에 칼럼이 두 개 이상 오면 순서에 따라서 결과가 달라짐 | . -- DEPTNO가 NULL이면 &#39;전체합계&#39; 문자를 출력 SELECT DECODE (DEPTNO, NULL, &#39;전체합계&#39;, DEPTNO), SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO); -- ROLLUP을 사용하면 부서별 합계 및 전체합계가 계산 . 위의 예는 DEPTNO에 대해서 GROUP BY로 급여합계를 계산하고 부서별 전체합계를 추가해서 계산, 즉, ROLLUP은 DEPTNO에 대해서 기존 GROUP BY와는 다르게 부서별 전체합계를 계산하게 됨 . | DECODE문은 전체합계를 조회할 때 ‘전체합계’라는 문자를 출력하기 위해서 사용, DECODE문을 사용해서 DEPTNO가 NULL과 같으면 ‘전체합계’라는 문자를 출력하고 그렇지 않으면 부서번호(DEPTNO)를 출력 . | . SELECT DEPTNO, JOB, SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO, JOB); -- 부서별, 직업별 합계를 구함 -- ROLLUP은 subtotal을 구함 . 부서별, 직업별 ROLLUP을 실행하면 부서별 합계, 직업별 합계, 전체 합계가 모두 조회됨 | ROLLUP으로 실행되는 칼럼별로 Subtotal을 만들어 줌 | . 2. GROUPING 함수 . GROUPINT 함수는 ROLLUP, CUBE, GROUPING SETS에서 생성되는 합계 값을 구분하기 위해서 만들어진 함수 | 예를 들어 소계, 합계 등이 계산되면 GROUPING 함수는 1을 반환하고 그렇지 않으면 0을 반환해서 합계 값을 식별할 수 있음 | . -- ROLLUP, CUBE, GROUPING SETS으로 계산된 합계는 &#39;1&#39; 아니면 &#39;0&#39;으로 표시 SELECT DEPTNO, GROUPING(DEPTNO), JOB, GROUPING(JOB), SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO); -- &#39;1&#39;의 값으로 소계와 전체합계를 개발자가 구분할 수 있게 됨 . -- DECODE를 사용해서 전체합계와 부서합계를 구분 SELECT DEPTNO, DECODE(GROUPING(DEPTNO), 1, &#39;전체합계&#39;) TOT, JOB, DECODE(GROUPING(JOB), 1, &#39;부서합계&#39;) T_DEPT, SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO); . 위의 예를 보면 DECODE 함수를 사용해서 전체 합계와 부서합계를 구분 | GROUPING 함수의 기능을 사용하면 사용자가 필요로 하는 데이터를 SELECT문으로 작성하여 제공할 수 있음 | . 3. GROUPING SETS 함수 . GROUPING SETS 함수는 GROUP BY에 나오는 칼럼의 순서와 관계없이 다양한 소계를 만들 수 있음 | GROUPING SETS 함수는 GROUP BY에 나오는 칼럼의 순서와 관계없이 개별적으로 모두 처리 | . SELECT DEPTNO, JOB, SUM(SAL) FROM EMP GROUP BY GROUPING SETS (DEPTNO, JOB); . 위의 예를 보면 GROUPING SETS 함수로 DEPTNO와 JOB을 실행 | 그 결과 DEPTNO 합계가 개별적으로 조회 | . 4. CUBE 함수 . CUBE는 CUBE 함수에 제시한 칼럼에 대해서 결합 가능한 모든 집계를 계산 | 다차원 집계를 제공하여 다양하게 데이터를 분석할 수 있게 함 | 예를 들어 부서와 직업을 CUBE로 사용하면 부서별 합계, 직업별 합계, 부서별 직업별 합계, 전체 합계가 조회 | 즉, 조합할 수 있는 경우의 소가 모두 조합되는 것임 | . SELECT DEPTNO, JOB, SUM(SAL) FROM EMP GROUP BY CUBE(DEPTNO, JOB); . . POINT 5. 윈도우 함수(Window Function) . 1. 윈도우 함수 . 윈도우 함수는 행과 행간의 관계를 정의 하기 위해서 제공되는 함수 | 윈도우 함수를 사용해서 순위, 합계, 평균, 행 위치 등을 조작 가능 | . 윈도우 함수 구조 . ARGUMENTS(인수) : 윈도우 함수에 따라서 0~N개의 인수를 설정함 | PARTITION BY : 전체 집합을 기준에 의해 소그룹으로 나눔 | ORDER BY : 어떤 항목에 대해서 정렬 | WINDOWING : 행 기준의 범위를 정함, ROWS는 물리적 결과의 행 수이고 RANGE는 논리적인 값에 의한 범위 | . WINDOWING . ROWS : 부분집합인 윈도우 크기를 물리적 단위로 행의 집합을 지정함 | RANGE : 논리적인 주소에 의해 행 집합을 지정 | BETWEEN~AND : 윈도우의 시작과 끝의 위치를 지정 | UNBOUNDED PRECEDING : 윈도우의 시작 위치가 첫 번째 행임을 의미 | UNBOUNDED FOLLOWING : 윈도우 마지막 위치가 마지막 행임을 의미 | CURRENT ROW : 윈도우 시작 위치가 현재 행임을 의미 | . SELECT EMPNO, ENAME, SAL, SUM(SAL) OVER(ORDER BY SAL -- 첫번째 행을 의미 ROW BETWEEN UNBOUNDED PRECEDING -- 마지막 행을 의미 AND UNBOUNDED FOLLOWING) TOTSAL FROM EMP; . UNBOUNDED PRECEDING은 처음 행을 의미하며, UNBOUNDED FOLLING은 마지막 행을 의미, 그러므로 TOTSAL에 처음부터 마지막까지의 합계(SUM(SAL))을 계산한 것 | . -- 처음부터 CURRENT ROW까지의 합계를 계산, 결과적으로 누적합계가 됨 SELECT EMPNO, ENAME, SAL, SUM(SAL) OVER (ORDER BY SAL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) TOTSAL FROM EMP; . 첫 번째 행의 SAL은 800이고 두 번째 행의 SAL은 950임, 그러므로 두번 째 행의 TOTSAL은 800+950=1750임, 계속 누적해서 더해 나감 | . SELECT EMPTNO, ENAME, SAL SUM(SAL) OVER(ORDER BY SAL ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) TOTSAL FROM EMP; . CURRENT ROW부터 마지막행(UNBOUNDED FOLLOWING)까지의 합계를 계산 | 첫 번째 행의 SAL이 800이므로 800부터 끝까지의 합계를 TOTSAL에 계산 결과적을 전체 합계가 됨 | . 2. 순위 함수(RANK Function) . 윈도우 함수는 특정 항목과 파티션에 대해서 순위를 계산할 수 있는 함수를 제공 | 순위 함수는 RANK, DENSE_RANK, ROW_NUMBER 함수가 있음 | . 순위(RANK) 관련 윈도우 함수 . RANK : 특정항목 및 파티션에 대해서 순위를 계산 | DENSE_RANK : 동일한 순위를 하나의 건수로 계산 | ROW_NUMBER : 동일한 순위에 대해서 고유의 순위를 부여 | . SELECT ENMAE, SAL, RANK() OVER (ORDER BY SAL DESC) ALL_RANK, RANK() OVER (PARTITION BY JOB ORDER BY SAL DESC) JOB_RANK FROM EMP; . RANK 함수는 순위를 계산하며, 동일한 순위에게는 같은 순위가 부여 | RANK() OVER (ORDER BY SAL DESC)는 SAL로 등수를 계산하고 내림차순으로 조회하게 함 | RANK() OVER (PARTITION BY JOB ORER BY SAL DESC)는 JOB으로 파티션을 만들고 JOB별 순위를 조회하게 함 | . SELECT ENAME, SAL, RANK() OVER (ORDER BY SAL DESC) ALL_RANK, DENSE_RANK() OVER (ORDER BY SAL DESC) DENSE_RANK FROM EMP; . 동일한 순위를 하나의 건수로 계산 | 2등이 2명이면 3등이 없지만, DENSE_RANK()는 건수로 인식하기 때문에 3등이 있게 됨 | . SELECT ENAME, SAL, RANK() OVER (ORDER BY SAL DESC) ALL RANK, ROW_NUMBER() OVER (OERDER BY SAL DESC) ROW_NUM FROM EMP; . – ROW_NUMBER 함수는 동일한 순위에 대해서 고유의 순위를 부여 . 3. 집계함수(RANK function) . 윈도우 함수를 제공 | . 집계(AGGREGATE) 관련 윈도우 함수 . SUM : 파티션 별로 합계를 계산 | AVG : 파티션 별로 평균을 계산 | COUNT : 파티션 별로 행 수를 계산 | MAX와 MIN : 파티션 별로 최대값과 최소값을 계산 | . -- 같은 관리자(MGR)에 파티션을 만들고 합계(SUM)을 계산 SELECT ENAME, SAL, SUM(SAL) OVER (PARTITION BY MGR) SUM_MGR FROM EMP; . 4. 행 순서 관련 함수 . 행 순서 관련 함수는 상위 행의 값을 하위에 출력하거나 하위 행의 값을 상위 행에 출력하게 할 수 있음 | 특정 위치의 행을 가지고 와서 출력할 수 있음 | . 행 순서 관련 윈도우 함수 . FIRST_VALUE : 파티션에서 가장 처음에 나오는 값을 구함, MIN 함수를 사용해서 같은 결과를 구할 수 있음 | LAST_VALUE : 파티션에서 가장 나중에 나오는 값을 구함, MAX 함수를 사용해서 같은 결과를 구할 수 있음 | LAG : 이전 행을 가지고 옴 | LEAD : 윈도우에서 특정 위치의 행을 가지고 옴, 기본값은 1 | . SELECT DEPTNO, ENAME, SAL, FIRST_VALUE(ENAME) OVER (PARTITION BY DEPTNO ORDER BY SAL DESC ROWS UNBOUNDED PRECEDING) AS DEPT_A FROM EMP; . FIRST_VALUE 함수는 파티션에서 조회된 행 중에서 첫 번째 행의 값을 가지고 옴 | 위의 예에서 TEST7과 TEST14가 조회됨, 그 중에서 TEST7이 첫 번째 힝이므로 첫 번째 행의 TEST7을 가지고 옴 | 단, SAL 내림차순으로 조회했기 때문에 의미 상으로는 부서 내에 가장 급여가 많은 사원이 됨 | . SELECT DEPTNO, ENAME, SAL, -- 마지막 행을 가져옴 LAST_VALUE(ENAME) OVER (PARTITION BY DEPTNO -- 부서 내에서 급여가 가장 적은 사람을 가져옴 ORDER BY SAL DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS DEPT_A FROM EMP; . 5. 비율 관련 함수 . 비율 관련 함수는 누적 백분율, 순서별 백분율, 파티션을 N분으로 분할한 결과 등을 조회할 수 있음 | . 비율 관련 윈도우 함수 . CUME_DIST : 파티션 전체 건수에서 현재 행보다 작거나 같은 건수에 대한 누적 백분율을 조회 함, 누적 분포상에 위치를 0~1 사이의 값을 가짐 | PERCENT_RANK : 파티션에서 제일 먼저 나온 것을 0으로 제일 늦게 나온 것을 1로 하여 값이 아닌 행의 순서별 백분율을 조회 | NTILE : 파티션별로 전체 건수를 ARGUMENT 값으로 N 등분한 결과를 조회 | RATIO_TO_REPORT : 파티션 내의 전체 SUM(칼럼)에 대한 행 별 칼럼 값의 백분율을 소수점까지 조회함 | . SELECT DEPTNO, ENAME, SAL, PERCENT_RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) AS PERCENT_SAL FROM EMP; . PERCENT_RANK 함수는 파티션에서 등수의 퍼센트를 구하는 것 | . SELECT DEPTNO, ENAME, SAL, -- 4개로 등분하여 분류 NTILE(4) OVER (ORDER BY SAL DESC) AS N_TILE FROM EMP; . NTILE(4)는 4개로 분할하라는 의미로 위의 예제에서는 급여가 높은 순으로 1~4등분으로 분할함 | . POINT 6. 테이블 파티션(Table Partition) . 1. Partition 기능 . 파티션은 대용량의 테이블을 여러 개의 데이터 파일에 분리해서 저장하게 함 | 테이블의 데이터가 물리적으로 분리된 데이터 파일에 저장되면 입력, 수정, 삭제, 조회 성능이 향상됨 | 파티션을 각각의 파티션 별로 독립적으로 관리될 수 있음. 즉, 파티션 별로 백업하고 복구가 가능하면 파티션 전용 인덱스 생성도 가능. | 파티션은 Oracle 데이터베이스의 논리적 관리 단위인 테이블 스페이스 간에 이동이 가능 | 데이터를 조회할 때 데이터의 범위를 줄여서 성능을 향상시킴 | . 2. Range Partiton . Range Partitiondms 테이블의 칼럼 중에서 값의 범위를 기준으로 여러 개의 파티션으로 데이터를 나누어 저장하는 것 | . 3. List Partition . List Partition은 특정 값을 기준으로 분할하는 방법 | 예를들어 DEPTNO가 10번인 것은 Datafile1.dbf에 저장하고 20번인 것은 Datafile2.dbf에 저장 | . 4. Hash Partition . Hash Partition은 데이터베이스 관리 시스템이 내부적으로 해시함수를 사용해서 데이터를 분할 | 결과적으로 데이터베이스 관리 시스템이 알아서 분할하고 관리하는 것 | Hash Prtition 이외에도 Composite Partition이 있는데, Composite Partition은 여러개의 파티션 기법을 조합해서 사용하는 것 | . 5. 파티션 인덱스 . 파티션 인덱스는 4가지 유형의 인덱스를 제공, 즉, 파티션 키를 사용해서 인덱스를 만드는 Prefixed Index와 해당 파티션만 사용하는 Local Index 등으로 나누어짐 | Oracle 데이터베이스는 Global Non-Prefixed를 지원하지 않음 | . 파티션 인덱스(Partition Index) . Global Index : 여러개의 파티션에서 하나의 인덱스를 사용 | Local Index : 해당 파티션 별로 각자의 인덱스를 사용 | Prefixed Index : 파티션 키와 인덱스 키가 동일함 | Non Prefixed Index : 파티션 키와 인덱스키가 다름 | .",
            "url": "https://safenumz.github.io/blog/sql/2019/03/10/SQLD_02)_SQL_%ED%99%9C%EC%9A%A9.html",
            "relUrl": "/sql/2019/03/10/SQLD_02)_SQL_%ED%99%9C%EC%9A%A9.html",
            "date": " • Mar 10, 2019"
        }
        
    
  
    
        ,"post238": {
            "title": "[SQLD] 01) SQL 기본",
            "content": "POINT 1. 관계형 데이터베이스(Relation Database) . POINT 2. SQL(Structured Query Language) 종류 . 2. SQL(Structured Query Language) 종류 . DDL(Data Definition Lanuage) : 관계형 데티버 베이스의 구조를 정의 하는 언어, CREATE, ALTER, DROP, RENAME | DML(Data Manipulation Language) : 테이블에서 데이터를 입력, 수정, 삭제, 조회함, INSERT, UPDATE, DELETE, SELECT | DCL(Data Control Language) : 데이터베이스 사용자에게 권한을 부여하거나 회수, GRANK, REVOKE | TCL(Transaction Control Language) : 트랜잭션을 제어하는 명령어, COMMIT, ROLLBACK | . 트랜잭션의 특성 . 원자성(Atomicity) : 트랜잭션은 데이터베이스 연산의 전부 또는 일부(ALL OR NOTHING) 실행만이 있음, 트랜잭션의 처리가 완전히 끝나지 않았을 경우는 전혀 이루어지지 않은 것과 같아야 함 | 일관성(Consistency) : 트랜잭션 실행 결과로 데이터베이스의 상태가 모순되지 않아야 함, 트랜잭션 실행 후에도 일관성이 유지되어야 함 | 고립성(Isolation) : 트랜잭션 실행 중에 생성하는 연산의 중간결과는 다른 트랜잭션이 접근할 수 없음, 즉, 부분적인 실행결과를 다른 트랜잭션이 볼 수 없음 | 연속성(Durability) : 트랜잭션이 그 실행을 성공적으로 완료하면 그 결과는 영구적 보장이 되어야 함 | . 3. SQL문의 실행 순서 . 파싱(Parsing) : SQL문의 문법을 확인하고 구문분석함, 구문분석한 SQL문은 Library Cashe에 저장 | 실행(Execution) : 옵티마이저(Optimizer)가 수립한 실행계획에 따라 SQL문을 실행 | 인출(Fetch) : 데이터를 읽어서 전송 | . POINT 3. DDL(Data Definition Language) . 1. 테이블 생성 . (1) 기본적인 테이블 생성 . number은 숫자형 타입을 지정 | char은 고정된 크기의 문자 지정 | . -- 기본키가 두개라면 &#39;constraint emppk primary key(empno, ename)&#39;으로 지정하면 됨 CREATE TABLE EMP ( empno number(10) primary key ename varchar2(20), sal number(6) ) -- 테이블의 구조 확인 DESC EMP; . (2) 제약조건 사용 . default 0 : 기본값 0으로 지정 | sysdate : 기본값 오늘 날짜 (Oracle 데이터베이스) | constraint를 사용해서 기본키 지정, 기본키의 이름을 지정 가능 | number(10, 2) : 소수점 둘째자리까지 저장 | 외래키(Foreign key)를 지정하려면, 먼저 마스터 테이블이 생성되어야 함, 사원과 부서 테이블에서는 부서가 마스터 테이블이 됨 | . -- 마스터 테이블을 먼저 생성 CREATE TABLE DEPT ( deptno varchar(4) primary key, deptname varchar2(20) ); -- DEPT 테이블의 DEPTNO 칼럼에 대해서 외래키를 생성 -- 외래키가 기본키를 참조 CREATE TABLE EMP ( empno number(10), ename varchar2(20), sal number(10, 2) default 0, deptno varchar2(4) not null, createdate date default sysdate, constraint emppk foreign key(deptno) reference dept(deptno) ); . (3) 테이블 생성 시에 CASCADE 사용 . CASCADE 옵션은 참조 관계(기본키와 외래키 관계)가 있을 경우 참조되는 데이터도 자동으로 삭제할 수 있는 것 | 먼저, 마스터 테이블을 먼저 생성함, 즉, DEPT 테이블을 생성하고 데이터를 입력 | . CREATE TABLE DEBT ( deptno varchar2(4) primary key, deptname varchar2(20) ); INSERT INTO DEPT VALUES (&#39;1000&#39;, &#39;인사팀&#39;); INSERT INTO DEPT VALUES (&#39;1001&#39;, &#39;총무팀&#39;); . EMP 테이블을 생성 | ‘On Delete Cascade’ 옵션을 사용 | . CREATE TABLE EMP ( empno number(10), ename varchar2(20). sal number(10, 2) default 0, deptno varchar2(4) not null, createdate date default sysdate, constraint e_pk primary key(empno), constraint d_fk foreign key (deptno) references dept(deptno) ON DELETE CASCADE ) . EMP 테이블의 데이터를 조회한 결과, DEPTNO ‘1000’번이었던 ‘임베스트’ 데이터도 자동으로 삭제 | 즉, ON DELETE CASCADE 옵션은 자신이 참조하고 있는 테이블(DEPT)의 데이터가 삭제되면 자동으로 자신(EMP)도 삭제되는 옵션 | ON DELETE CASCADE 옵션을 사용하면 참조 무결성을 준수할 수 있음 | 참조 무결성이란, 마스터 테이블(DEPT)에는 해당 부서번호(DEPTNO)가 없는데, 슬레이브 테이블(EMP)에는 해당 부서번호가 있는 경우를 참조 무결성 위배라고 함 | . -- DEPT 테이블에서 &#39;1000&#39;번 인사팀 삭제 DELETE FROM DEPT WHERE DEPTNO = &#39;1000&#39;; SELECT * FROM EMP; . (4) 테이블명 변경 . ALTER TABLE EMP RENAME TO NEW_EMP; . 2. 테이블(Table) 변경 . (1) 칼럼추가 . ALTER TABLE EMP ADD (age number(2) default 1); . (2) 칼럼 변경 . 칼럼의 데이터 타입을 변경할 때 기존 데이터가 있는 경우 에러가 발생 | 예를 들어 숫자 데이터가 저장되어 있는데 문자형 데이터 타입으로 변경하면 에러가 발생하는 것 | . ALTER TABLE EMP MODIFY (ename varchar2(40) not null); . (3) 칼럼 삭제 . ALTER TABLE EMP DROP COLUMN age; . (4) 칼럼명 변경 . ALTER TABLE EMP RENAME COLUMN ename to new_ename; . 3. 테이블(Table) 삭제 . -- EMP 테이블의 데이터와 데이터 구조 모두를 삭제 DROP TABLE EMP; -- 참조된 제약사항까지도 모두 삭제 DROP TABLE EMP CASCADE CONSTRAINT; . 4. 뷰(View) 생성과 삭제 . 뷰란 테이블로부터 유도된 가상의 테이블 | 실제 데이터를 가지고 있지 않고 테이블을 참조해서 원하는 칼럼만을 조회할 수 있게 함 | 뷰는 데이터 딕셔너리(Data Dictionary)에 SQL문 형태로 저장하고 실행 시에 참조됨 | . 뷰의 특징 . 참조한 테이블이 변경되면 뷰도 변경 | 뷰의 검색은 참조한 테이블과 동일하게 할 수 있지만, 뷰에 대한 입력, 수정, 삭제에는 제약이 발생 | 특정 칼럼만 조회시켜서 보안성을 향상 | 한번 생성된 뷰는 변경할 수 없고 변경을 원하면 삭제 후 재생성해야 함 | ALTER문을 사용해서 뷰를 변경 | . CREATE VIEW T_EMP AS SELECT * FROM EMP; . 뷰의 생성은 ‘CREATE VIEW’를 사용하고 참조해야 하는 테이블을 지정해야 함 | 뷰를 생성할 때 ‘SELECT’ 문을 사용하여 참조되는 테이블을 지정하는 것 | . -- 뷰 조회 SELECT * FROM T_EMP; -- 뷰 삭제 DROP VIEW T_EMP; . POINT 4. DML(Data Manipulation Language) . 1. INSERT문 . (1) INSERT문 . INSERT INTO table (column1, column2, ...) VALUES (expression1, expression2, ..); -- 모든 칼럼에 입력 INSERT INTO EMP VALUES(1000, &#39;임베스트&#39;); . (2) SELECT문으로 입력 . -- DEPT 테이블의 모든 데이터를 조회해서 DEPT_TEST 테이블에 입력 INSERT INOT DEPT_TEST SELECT * FROM DEPT; . (3) Nologging 사용 . 데이터베이스에 데이터를 입력하면 로그파일(Log file)에 그 정보를 기록 | Check point라는 이벤트가 발생하면 로그파일의 데이트를 데이터 파일에 저장 | Nologging 옵션은 로그파일의 기록을 최소화시켜서 입력 시에 성능을 향상시키는 방법 | Nologging 옵션은 Buffer Cache라는 메모리 영역을 생략하고 기록함 | . -- 로그파일의 기록을 최소화하여 입력 성능을 향상시킴 ALTER TABLE DEPT NOLOGGING; . 2. UPDATE문 . 입력된 데이터 값을 수정하려면, UPDATE문을 사용 | UPDATE문은 원하는 조건으로 검색해서 해당 데이터를 수정하는 것 | 만약, UPDATE문에 조건문을 입력하지 않으면 모든 데이터가 수정되므로 유의해야 함 | . UPDATE EMP SET ENAME=&#39;조조&#39; WHERE EMPNO=100; . 3. DELETE문 . DELETE문에서 원하는 조건을 검색해서 해당되는 행을 삭제 | DELETE문에 조건문을 입력하지 않으면 모든 데이터가 삭제 | DELETE문으로 데이터를 삭제한다고 해서 테이블의 용량이 초기화되지 않음 | 데이터의 용량을 초기화하려면 TRUNCATE문을 사용해야 함 | . DELETE FROM EMP WHERE EMPNO=100; -- EMP 테이블의 모든 데이터를 삭제하면서 테이블의 용량을 초기화 TRUNCATE TABLE EMP; . 4. SELECT문 . (1) SELECT문 사용 . 테이블에 입력된 데이터를 조회하기 위해 SELECT문을 사용 | SELECT문은 특정 칼럼이나 특정 행만을 조회할 수 있음 | . SELECT * FROM EMP WHERE 사원번호=1000; -- ENAME 칼럼을 조회하면서 뒤에 &#39;님&#39;이라는 문자를 결합 SELECT ENAME||&#39;님&#39; FROM EMP; . (2) Order by를 사용한 정렬 . SELECT문을 사용할 때 Order by를 같이 사용할 수 있음 | Order by는 데이터를 오름차순(Ascending) 혹은 내림차순(Descending)으로 출력 | 특별한 지정이 없으면 Order by는 오름차순으로 정렬 | . -- ENAME으로 오름차순 정렬하고 SAL로 내림차순 정렬함 SELECT * FROM EMP ORDER BY ENAME, SAL DESC; . (3) INDEX를 사용한 정렬 회피 . 인덱스를 지정하면 자동으로 오름차순 인덱스가 생성 | . CREATE TABLE emp( empno number(10) primary key, ename varchar2(20), sal number(10) ); INSERT INTO emp VALUES(1000, &#39;임베스트&#39;, 20000); INSERT INTO emp VALUES(1001, &#39;조조&#39;, 20000); INSERT INTO emp VALUES(1002, &#39;관우&#39;, 20000); -- 인덱스 힌트 사용 -- EMPNO의 인덱스를 내림차순으로 읽음 -- 인덱스를 스캔한 후에 해당 EMPNO의 값을 가지고 테이블의 데이터를 읽음 SELECT /*+ INDEX_DESC(A) */* FROM EMP A; . (4) Distinct와 Alias . Distinct . Distinct문은 칼럼명 앞에 지정하여 중복된 데이터를 한번만 조회하게 함 | . -- 중복을 제거하지 않고 모든 값이 출력됨 SELECT DEPTNO FROM EMP ORDER BY DEPTNO; -- 중복을 제거한 DEPTNO가 출력됨 SELECT DISTINCT DEPTNO FROM EMP ORDER BY DEPTNO; . Alias . Alias(별칭)은 테이블명이나 칼럼명이 너무 길어서 간력하게 사용할 때 사용 | . -- 컬럼명을 단축하기 위해 AS &#39;이름&#39;을 썼고 테이블명을 단축하기 위해 a를 씀 SELECT ENAME AS &#39;이름&#39; FROM EMP a WHERE a.EMPNO=10000; . 5. WHERE문 사용 . (1) WHERE문이 사용하는 연산자 . WHERE문이 사용할 수 있는 연산자는 비교 연산자, 부정 연산자, 부정 비교 연산자, 논리 연산자, SQL 연산자, 부정 SQL 연산자가 있음 | . 비교연산자 . = &lt; &lt;= &gt; &gt;= . 부정비교 연산자 . != : 같지 않은 것을 조회 ^= : 같지 않은 것을 조회 &lt;&gt; : 같지 않은 것을 조회 NOT 칼럼명= : 같지 않은 것을 조회 NOT 칼럼명&gt; : 크지 않은 것을 조회 . 논리 연산자 . AND : 조건을 모두 만족해야 참이 됨 OR : 조건을 하나만 만족해도 참이 됨 NOT : 참이면 거짓으로 바꾸고 거짓으면 참으로 바꿈 . SQL 연산자 . LIKE &#39;비교 문자열&#39; : 비교 문자열 조회, &#39;%&#39;는 모든 것을 의미 BETWEEN A AND B : A와 B 사이의 값을 조회 IN (list) : OR를 의미하며 list 값 중에 하나만 일치해도 조회 IS NULL : NULL 값을 조회 . 부정 SQL 연산자 . NOT BETWEEN A AND B : A와 B 사이의 해당되지 않은 값을 조회 NO IN (list) : list와 불일치한 것을 조회 IS NOT NULL : NULL이 아닌 것을 조회 . -- EMP 테이블에서 EMPNO가 1001이고 SAL이 1000보다 큰 것만을 조회 SELECT * FROM EMP WHERE EMPNO=1001 AND SAL &gt;= 1000; . (2) Like문 사용 . Like문은 와일드카드를 사용해서 데이터를 조회할 수 있음 | . % : 어떠한 문자를 포함한 것을 조회, 예를 들어 &#39;조%&#39;는 &#39;조&#39;로 시작하는 모든 문자 조회 _ : 한 개인 단일 문자를 의미 . -- ENMAE이 &#39;test&#39;로 시작하는 모든 데이터를 조회 SELECT * FROM EMP WHERE ENAME LIKE &#39;test%&#39;; -- ENAME의 마지막이 &#39;1&#39;로 끝나는 모든 것을 조회 SELECT * FROM EMP WHERE ENAME LIKE &#39;%1&#39;; -- ENAME의 중간에 &#39;est&#39;가 있는 모든 것을 조회 SELECT * FROM EMP WHERE ENAME LIKE &#39;%est%&#39;; -- Like문에 와일드 카드를 사용하지 않으면 &#39;=&#39;와 같음 SELECT * FROM EMP WHERE ENAME LIKE &#39;test1&#39;; -- ENAME 칼럼에서 &#39;test&#39;로 시작하고 하나의 데이터만 더 있는 것만 조회 SELECT * FROM EMP WHERE ENAME LIKE &#39;test_&#39;; . (3) Between문 사용 . Between문은 지정된 범뉘에 있는 값을 조회 | . -- 1000과 2000 포함한 1000부터 2000 사이의 값을 조회 SELECT * FROM EMP WHERE SAL BETWEEN 1000 AND 2000; -- 1000부터 2000원 사이의 값이 아닌 것을 조회 SELECT * FROM EMP WHERE SAL NOT BETWEEN 1000 AND 2000; . (4) IN문 사용 . IN문은 ‘OR’의 의미를 가지고 있어서 하나의 조건만 만족해도 조회가 됨 | . -- JOB이 &#39;CLERK&#39;나 &#39;MANAGER&#39;를 조회 SELECT * FROM EMP WHERE JOB IN (&#39;CLERK&#39;, &#39;MANAGER&#39;); -- IN 조건에 두 개의 칼럼을 지정 SELECT * FROM EMP WHERE (JOB, ENAME) IN ((&#39;CLERK&#39;, &#39;test1&#39;), (&#39;MANAGER&#39;, &#39;test4&#39;)); . (5) NULL값 조회 . NULL의 특징 . NULL은 모르는 값을 의미 | NULL은 값의 부재를 의미 | NULL과 모든 비교는 알 수 없음을 반환 | NULL과 숫자 혹은 날짜를 더하면 NULL이 됨 | NULL 값은 비교 연산자로 비교할 수 없음, 만약 비교 연산자로 NULL을 비교하면 거짓이 나옴 | . NULL 값 조회 . -- NULL값인 것만 조회 SELECT * FROM EMP WHERE MGR IS NULL; -- NULL 값이 아닌 것을 조회 SELECT * FROM EMP WHERE MGR IS NOT NULL; . NULL 관련 함수 . NVL : NULL이면 다른 값으로 바꾸는 함수, NVL(MGR, 0)은 MGR 칼럼이 NULL이면 0으로 바꿈 | NVL2 : MVL2(MGR, 1, 0)은 MGR 칼럼이 NULL이 아니면 1을 NULL이면 0을 반환 | NULLIF : 두 개의 값이 같으면 NULL을 같지 않으면 첫 번째 값을 반환, NULLIF(exp1, exp2)은 exp1과 exp2가 같으면 NULL을 같지 않으면 exp1을 반환 | COALESCE : COALSCE(mgr, 1)은 mgr이 NULL이 아니면 1을 반환 | . POINT 6. GROUP 연산 . 1. GROUP BY문 . GROUP BY는 테이블에서 소규모 행을 그룹화하여 합계, 평균, 최대치, 최소값 등을 계산할 수 있음 | HAVING구에 조건문을 사용 | ORDER BY를 사용해서 정렬할 수 있음 | . -- DEPTNO(부서번호)로 그룹을 만듬 SELECT DEPTNO, SUM(SAL) FROM EMP GROUP BY DEPTNO; . 2. HAVING문 사용 . GROUP BY에 조건절을 사용하려면 HAVING을 사용해야 함 | 만약 WHERE절에 조건문을 사용하게 되면 GROUP BY 대상에서 제외 | . SELECT DEPTNO, SUM(SAL) FROM EMP GROUP BY DEPTNO HAVING SUM(SAL) &gt; 10000; . 3. 집계함수 종류 . COUNT() : 행 수를 조회 | SUM() : 합계를 계산 | AVG() : 평균을 계산 | MAX()와 MIN() : 최대값과 최소값을 계산 | STDDEV() : 표준편차를 계산 | VARIAN() : 분산을 계산 | . 4. COUNT 함수 . COUNT(*)은 NULL 값을 포함한 모든 행 수를 계산 | 하지만 COUNT(칼럼)으로하면 NULL 값을 제외한 행수를 계산함 | . SELECT COUNT(*) FROM EMP; SELECT COUNT(MGR) FROM EMP; . 5. GROUP BY 사용 예제 . (1) 부서별(DEPTNO), 관리자별(MGR) 급여 평균 계산 . SELECT DEPTINO, MGR, AVG(SAL) FROM EMP GROUP BY DEPTNO, MGR; . (2) 직업별(JOB) 급여 합계 중에 급여 합계(SAL)가 1000 이상인 직원 . SELECT JOB, SUM(SAL) FROM EMP GROUP BY JOB HAVING SUM(SAL) &gt; 1000; . (3) 사원번호 1000~1003번의 부서별 급여 합계 . SELECT DEPTNO, SUM(SAL) FROM EMP WHERE EMPNO BETWEEN 1000 AND 1003 GROUP BY DEPTNO; . POINT 7. SELECT문 실행 순서 . SQL의 실행 순서는 결과로 조회된 데이터를 이해하는 데 아주 중요한 요소 | SELECT문의 실행 순서는 FROM, WHERE, GROUP BY, HAVING, SELECT, ORDER BY 순으로 실행 | . SELECT ename FROM emp WHERE empno=10 GROUP BY ename HAVING count(*)&gt;=1 ORDER BY ename; . POINT 8. 명시적(Explicit) 형변환과 암시적(Implicit) 형변환 . 형변환 이라는 것은 두 개의 데이터의 타입(형)이 일치하도록 변환하는 것 | 예를 들어 숫자와 문자열의 비교, 문자열과 날짜형의 비교와 같이 데이터 타입이 불일치 할 때 발생 | 형변환은 명시적(Explicit) 형변환과 암시적(Implicit) 형변환이 있음 | 명시적 형변환은 형변환 함수를 사용해서 데이터 타입을 일치시키는 것으로 개발자가 sql문을 사용할 때 형변환 함수를 사용해야 함 | . 형변환 함수 . TO_NUMBER(문자열) : 문자열을 숮자로 변환 | TO_CHAR(숫자 혹은 날짜, [FORMAT]) : 숫자 혹은 문자를 지정된 FORMAT의 문자로 변환 | TO_DATE(문자열, FORMAT) : 문자열을 지정된 FORMART의 날짜형으로 변환 . | 암시적 형변환은 개발자가 형변환을 하지 않은 경우 데이터베이스 관리 시스템이 자동으로 형변환하는 것을 의미 . | 인덱스 칼럼에 형변환을 수행하면 인덱스를 사용하지 못함 | . SELECT * FROM EMP WHERE EMPNO=&#39;100&#39;; -- 문자형 데이터 타입 &#39;100&#39;, 암시적 형변환이 발생 -- EMPNO를 Oracle이 자동으로 TO_CHAR(EMPNO)로 변환해서 데이터 타입을 일치시킴 -- 암시적 형변환으로 EMPNO가 TO_CHAR(EMPNO)로 변환되므로 인덱스를 사용할 수 없음 -- 이와 같은 문제는 명시적 형변환을 사용하면 됨&#39; -- WHERE EMPNO = TO_NUMBER(&#39;100&#39;)으로 하면 EMPNO 칼럼이 변환되지 않아서 인덱스를 사용할 수 있음 . POINT 9. 내장형 함수(BUILT-IN Function) . 1. 내장형 함수 . 내장형 함수로는 형변환 함수, 문자열 및 숫자형 함수, 날짜형 함수가 있음 | . 2. DUAL 테이블 . DUAL 테이블은 Oracle 데이터베이스에 의해서 자동으로 생성되는 테이블 | Oracle 데이터 베이스 사용자가 임시로 사용할 수 있는 테이블로 내장형 함수를 실행할 때도 사용 | . -- Oracle은 기본적으로 DUAL 테이블이라는 Dummy 테이블이 존재 -- DUAL 테이블 구조 DESC DUAL; . 3. 내장형 함수의 종류 . DUAL 테이블과 문자형 내장형 함수를 사용하면 다음과 같음 | ACSII 함수는 문자에 대한 ACSII 코드 값을 알려줌, ACSII 코드는 대문자 A를 기준으로 A(65), B(66), C(67) 등의 값 | SUBSTR 함수는 지정된 위치의 문자열을 자르는 함수, LENGTH 함수 혹은 LEN 함수는 문자열의 길이를 계산 | LTRIM 함수를 사용하면 문자열의 왼쪽 공백을 제거할 수 있음 | . -- ACSII(&#39;a&#39;) -&gt; 97 -- SUBSTR(&#39;ABC&#39;, 1, 2) : &#39;ABC&#39;를 1부터 2까지 자름 -&gt; AB SELECT ACSII(&#39;a&#39;), SUBSTR(&#39;ABC&#39;, 1, 2), LENGTH(&#39;A BC&#39;), LTRIM(&#39; ABC&#39;), LENGTH(LTRIM(&#39; ABC&#39;)) FROM DUAL; . 문자형 함수 . ACSII(문자) : 문자 혹은 숫자를 ACSII 코드 값으로 변환 | CHAR(ACSII 코드 값) : ACSII 코드 값을 문자로 변환 | SUBSTR(문자열, m, n) : 문자열에서 m번째 위치부터 n개를 자름 | CONCAT(문자열1, 문자열2) : 문자열1번과 문자열2번을 결합, Oracle은 ‘||’, MS-SQL은 ‘+’를 사용할 수 있음 | LOWER(문자열) : 영문자를 소문자로 변환 | UPPER(문자열) : 영문자를 대문자로 변환 | LENGTH(문자열), LEN(문자열) : 공백을 포함해서 문자열의 길이를 알려줌 | LTRIM(문자열, 지정문자) : 왼쪽에 지정된 문자를 삭제, 지정된 문자를 생략하면 공백을 삭제 | RTRIM(문자열, 지정문자) : 오른쪽에 지정된 문자를 삭제, 지정된 문자를 생략하면 공백을 삭제 | TRIM(문자열, 지정된 문자) : 왼쪽 및 오른쪽에 지정된 문자를 삭제, 지정된 문자를 생략하면 공백을 삭제 . | 날짜형 함수중에서 오늘 날짜를 구하기 위해서는 ‘SYSDATE’를 사용하면 됨 | 만약, 해당 연도만 알고 싶다면 EXTRACT 함수를 사용 | TO_CAHR함수는 형변환 함수 중에서 가장 많이 사용하는 것으로 숫자나 날짜를 원하는 포맷의 문자열로 변환 | . SELECT SYSDATE, EXTRACT(YEAR From sysdate), TO_CHAR(SYSDATE, &#39;YYYYMMDD&#39;) FROM DUAL; . 날짜형 함수 . SYSDATE : 오늘의 날짜를 날짜형 타입으로 알려줌 | EXTRACT(‘YEAR’|‘MONTH’|‘DAY’ from d) : 날짜에서 년, 월, 일을 조회 . | 절대값을 계산하는 ABS 함수와 음수, 0, 양수를 구분하는 SIGN, 나머지를 계산하는 MOD 등의 함수를 사용하면 다음과 같음 | . -- SIGN 양수 1 SELECT ABS(-1), SIGN(10), MOD(4, 2), CEIL(10.9), FLOOR(10.1), ROUND(10.222, 1) FROM DUAL . 숫자형 함수 . ABS(숫자) : 절대값을 돌려줌 | SIGN(숫자) : 양수, 음수, 0을 구별 | MOD(숫자1, 숫자2) : 숫자1을 숫자2로 나누오 나머지를 계산, %를 사용해도 됨 | CEIL/CEILING(숫자) : 숫자보다 크거나 같은 최소의 정수를 돌려줌 | FLOOR(숫자) : 숫자보다 작거나 같은 최대의 정수를 돌려줌 | ROUND(숫자, m) : 소수점 m 자리에서 반올림, m의 기본값(default value)은 0 | TRUNC(숫자, m) : 소수점 m 자리에서 절삭, m의 기본값은 0 | . . POINT 10. DECOD와 CASE문 . 1. DECODE . DECODE문으로 IF문을 구현할 수 있음, 즉, 특정 조건이 참이면 A, 거짓이면 B로 응답하게 할 수 있는 것 | . -- 비교문으로 EMPNO=1000과 같으면 TRUE를 응답하고 같지 않으면 FALSE를 응답 SELECT DECODE (EMPNO, 1000, &#39;TRUE&#39;, &#39;FALSE&#39;) FROM EMP; . 2. CASE문 . SELECT CASE WHEN EMPNO = 1000 THEN &#39;A&#39; WHEN EMPNO = 1001 THEN &#39;B&#39; ELSE &#39;C&#39; FROM EMP; . POINT 11. ROWNUM과 ROWID . 1. ROWNUM . ROWNUM은 SELECT문의 결과에 대해서 논리적인 일렬번호를 부여 | ROWNUM은 조회되는 행 수를 제한할 때 많이 사용 | ROWNUM을 사용해서 한 개의 행을 가져올 수 있으나, 여러개의 행을 가져올 때는 인라인 뷰(Inline view)를 사용해야 함 | . -- 한 행을 조회 SELECT * FROM EMP WHERE RWNUM &lt;= 1; -- ROWNUM에 별칭(Alias)을 사용함 -- FROM 절에 SELECT문을 사용하면 Inline view라고 함 -- 5건의 행을 조회 SELECT * FROM ( SELECT ROWNUM list, ENAME FROM EMP) WHERE list &lt;= 5; -- ROWNUM과 BETWEEN구를 사용해서 웹페이지 조회를 구현할 수 있음 SELECT * FROM ( SELECT ROWNUM list, ENAME FROM EMP) WHERE list BETWEEN 5 AND 10; . 2. ROWID . ROWID는 ORACLE 데이터베이스 내에서 데이터를 구분할 수 있는 유일한 값 | ROWID는 ‘SELECT ROWID, EMPNO FROM EMP’와 같은 SELECT문으로 확인할 수 있음 | ROWID는 데이터가 어떤 데이터 파일, 어떤 블록에 저장되어 있는지 알 수 있음 | . ROWID 구조 . 오브젝트 번호 (길이 1~6) : 오브젝트 별로 유일한 값을 가지고 있으며, 해당 오브젝트가 속해 있는 값 | 상대 파일번호 (길이 7~9) : 테이블스페이스(Tablespace)에 속해 있는 데이터 파일에 대한 상대번호 | 블록번호 (길이 10~15) : 데이터 파일 내부에서 어느 블록에 데이터가 있는지 알려줌 | 데이터 번호 (길이 16~18) : 데이터 블록에 데이터가 저장되어 있는 순서를 의미 | . SELECT rowid, winetypename FROM winetype; . POINT 12. WITH 구문 . WITH viewData AS (SELECT * FROM EMP UNION ALL SELECT * FROM EMP ) SELECT * FROM viewData WHERE EMPNO=1000; . POINT 13. DCL(Data Control Language) . 1. GRANT . GRANT문은 데이터베이스 사용자에게 권한을 부여 | 데이터베이스 사용을 위해서는 권한이 있어서 연결, 입력, 수정, 삭제, 조회를 할 수 있음 | . GRANT privileges ON object TO user; -- privileges는 권한을 의미하며 object는 테이블명 -- user는 Oracle 데이터베이스 사용자를 지정하면 됨 . privileges(권한) . SELECT : 지정된 테이블에 대해서 SELECT 권한을 부여 | INSERT : 지정된 테이블에 대해서 INSERT 권한을 부여 | UPDATE : 지정된 테이블에 대해서 UPDATE 권한을 부여 | DELETE : 지정된 테이블에 대해서 DELETE 권한을 부여 | REFERENCES : 지정된 테이블을 참조하는 제약조건을 생성하는 권한을 부여 | ALTER : 지정된 테이블에 대해서 수정할 수 있는 권한을 부여 | INDEX : 지정된 테이블에 대해서 인덱스를 생성할 수 있는 권한을 부여함 | ALL : 테이블에 대한 모든 권한을 부여 | . -- LIMBEST 사용제에게 EMP 테이블에 대해 다음 권한을 부여 GRANT SELECT, INSERT, UPDATE, DELETE ON EMP TO LIMBEST; . WITH GRANT OPTION . WITH GRANT OPTION : 특정 사용자에게 권한을 부여할 수 있는 권한을 부여, 권한을 A 사용자가 B에 부여하고 B가 다시 C를 부여한 후에 권한을 취소(REVOKE)하면 모든 권한이 취소 | WITH ADMIN OPTION : 테이블에 대한 모든 권한을 부여, 권한을 A 사용자가 B에 부여하고 B가 다시 C를 부여한 후에 권한을 취소(REVOKE)하면 B 사용자 권한만 취소 | . GRANT SELECT, INSERT, UPDATE, DELETE ON EMP TO LIMBEST WITH GRANT OPTION; . 2. REVOKE . 데이터베이스 사용자에게 부여된 권한을 회수 | . REVOKE privileages ON object FROM user; . POINT 14. TCL(Transaction Control Language) . 1. COMMIT . COMMIT은 INSERT, UPDATE, DELETE문으로 변경한 데이터를 데이터베이스에 반영 | 변경 전 이전 데이터는 잃어버림, 즉, A값을 B로 변경하고 COMMIT을 하면 A값은 잃어버리고 B값을 반영 | COMMIT을 실행하면 하나의 트랜잭션 과정을 종료 | . connect limbest/1234 -- emp 테이블에서 사원번호 1000번의 ename을 &#39;임베스트&#39;로 변경 update emp set ename=&#39;임베스트&#39; where empno=1000; -- COMMIT을 실행해서 데이터베이스에 반영 commit; . 2. ROLLBACK . ROLLBACK을 실행하면 데이터에 대한 변경 사용을 모두 취소하고 트랜잭션을 종료 | INSERT, UPDATE, DELETE문의 작업을 모두 취소, 단 이전에 COMMIT한 곳까지만 복구 | ROLLBACK을 실행하면 LOCK이 해제되고 다른 사용자들도 데이터베이스 행을 조작가능 함 | . -- 변경된 사항을 취소함 rollback; . 3. SAVEPOINT(저장점) . SAVEPOINT를 사용하면 지정된 위치까지만 트랜잭션을 ROLLBACK할 수 있음 | 지정된 savepoint까지만 데이터 변경을 취소하고 싶은 경우는 ‘ROLLBACK TO &#39;을 실행 | 만약 ROLLBACK을 실행하면 SAVEPOINT와 관계 없이 변경된 모든 데이터를 취소 | . -- SAVEPOINT T1을 지정 savepoint t1; -- SAVEPOINT T2를 지정 savepoint t2; -- savepoint t2까지 변경된 것을 취소 rollback to t2 .",
            "url": "https://safenumz.github.io/blog/sql/2019/03/10/SQLD_01)_SQL_%EA%B8%B0%EB%B3%B8.html",
            "relUrl": "/sql/2019/03/10/SQLD_01)_SQL_%EA%B8%B0%EB%B3%B8.html",
            "date": " • Mar 10, 2019"
        }
        
    
  
    
        ,"post239": {
            "title": "Atom editor packages",
            "content": "Atom editor packages . emmet . 반복되는 소스코드나 매번 쓰기 귀찮은 태그들을 축약어로 쉽게 작성할 수 있음 | Atom의 플러그인으로 HTML 문법의 자동완성 기능을 수행함 | 태그명을 입력 후 TAB 키를 누르면 자동으로 시작/끝 태그를 생성하고 그 사이로 에디트 할 수 있도록 커서를 자동 위치시킴 | . 기본 사용법 . ’!’ : 타이핑 후 ‘tab’키를 누르면 html 문서의 기본골격이 만들어짐 | ’&gt;’ : 내포 혹은 부모 자식관계 | ’+’ : sibling(동등관계) | . &lt;!-- nav&gt;ul&gt;li 후 tab - 내포 관계가 정해진 태그를 의미 --&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;!-- div+p+bq 후 tab - 동등 관계 --&gt; &lt;div&gt;&lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;blockquote&gt;&lt;/blockquote&gt; . atom 내의 settings . soft wrap : 자동 줄바꿈 기능 | scroll past end : 에디터가 마지막 줄이 되어도 스크롤을 더 내릴 수 있어 텍스트 입력을 편하게 해 줌 | . atom-html-preview . html/css 적용 파일 미리보기 | . open-in-brower . html파일 작성시 단축키를 통해 자신이 작성한 코드의 결과를 브라우저를 통해 손쉽게 육안으로 확인 가능 | . Markdown-preview-enhanced . 마크다운 문서 프리뷰 | . color-picker . html 태그 이름만 입력해도 자동으로 시작 및 종료 태그를 알아서 붙여주는 플러그 | . atom-beatutify . 정리가 안된 코드들을 깔끔하게 정리해 줌 | . pigments . 작성한 색상코드에 그에 대한 색이 입혀짐 | . color-picker . 포토샵 및 일러스트처럼 색상표에서 색을 직접 뽑아올 수 있어서 편리 | . highlight-selected . 특정 단어를 더블 클릭했을 때 그것과 같은 단어를 표시해 줌 | . minimap . 문서 내에서 이동하고자 하는 곳으로 빠른 이동이 가능 | . minimap-cursorline . 미니맵에서 현재 커서가 있는 코드의 위치 확인 | . activate-power-mode . 코딩을 마치 게임하듯 즐겁게 할 수 있도록 하는 패키지, 시간 안에 적을 때마다 콤보가 올라감 | . gpp-complier . C를 컴파일 시켜주는 Package, F5를 누르면 컴파일, F6을 누르면 디버깅 | . linter-gcc . Error가 나오는 부분을 체크해주는 packages | . autocomplete-clang . C언어에 대해 Auto-complete 기능을 제공해주는 패키지 | . autocomplete-java . autocomplete-python .",
            "url": "https://safenumz.github.io/blog/etc/2019/03/10/Atom_packages.html",
            "relUrl": "/etc/2019/03/10/Atom_packages.html",
            "date": " • Mar 10, 2019"
        }
        
    
  
    
        ,"post240": {
            "title": "[Scala] 테스트",
            "content": "Scala 테스트 . ScalaTest (TYPESAFE -&gt; AKKA) | Specs2 (Play Framework에서 사용, BDD, ATDDD) | . ScalaTest . 의존성 추가 . build.sbt . libraryDependencies += &quot;org.scalatest&quot; % &quot;scalatest_2.11&quot; % &quot;2.2.4&quot; % &quot;test&quot; . maven, maven/SBT | . ScalaTest - Style . FunSuite: xUnit 스타일의 전형적인 트레이드 | FlatSpec: BDD 스타일의 테스트를 작성하기 적합 | FunSpec: Ruby의 RSpec과 유사함 BDD에 적합 | WordSpec: Specs2과 유사함, 실제 텍스트를 작성하는 방법에 최적화되어 있음 | FreeSpec: 특히 자유롭게 테스트를 작성하는 것이 가능 | Spec: 빠른 빌드타임을 가지고, 속도면에서 유리한 트레이트 | FeaturedSpec: 인수 테스트에 최적화된 트레이드 | . FuncSuite . class SetSuite extends FunSuite { test(&quot;빈 Set의 크기는 0&quot;) { assert(Set.empty.size == 0) } test(&quot;빈 리스트의 head 호출시 NoSuchElementException 발생&quot;){ intercept[NoSuchElementException]{ Set.empty.head } } } .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/09/Scala-%ED%85%8C%EC%8A%A4%ED%8A%B8.html",
            "relUrl": "/scala/2019/03/09/Scala-%ED%85%8C%EC%8A%A4%ED%8A%B8.html",
            "date": " • Mar 9, 2019"
        }
        
    
  
    
        ,"post241": {
            "title": "[Scala] 제어문 응용",
            "content": "Scala 제어문 응용 . 패턴 매칭 pattern matching | 익스트랙터 extractor | 제어문 추상화 | . 패턴 매칭 . 다른 언어의 switch 문과 유사한 사용법 | case에 올 수 있는 형태가 상수 외에 타입을 통한 구분 | 익스트랙터를 사용해 값을 추출하는 것이 가능(case class) | . x match { case 1 =&gt; &quot;one&quot; case &quot;two&quot; =&gt; 2 case f: Float =&gt; &quot;float&quot; case y: Int =&gt; y * y case _: Double =&gt; &quot;Double&quot; case Person(name, _) =&gt; &quot;Name: &quot; + name } // _는 값 자체에는 관심이 없음 . 익스트랙터 extracter . class Person(name: String, age: Int) { override def equals(obj: Any) = { ... } } object Person{ def apply(name: String, age: Int) = ... def unapply(person: Person2) = { Some(person.name, person.age) } } . val x: Any = 3 x match { case 1 =&gt; &quot;One&quot; case _: Int =&gt; &quot;Some Integer&quot; case 3 =&gt; &quot;Three&quot; case _: Float =&gt; &quot;Some Float&quot; case f: Float =&gt; &quot;float: &quot; + f case _ =&gt; &quot;Not Interested&quot; } // res0: String = Some Integer . case class Person(name: String, age: Int) val x: Any = Person(&quot;Brandon&quot;, 20) x match { case 1 =&gt; &quot;One&quot; case _: Int =&gt; &quot;Some Integer&quot; case 3 =&gt; &quot;Three&quot; case _: Float =&gt; &quot;Some Float&quot; case f: Float =&gt; &quot;float: &quot; + f case Person(name, age) =&gt; s&quot;name: $name, age: $age&quot; case person: Person =&gt; person.name + &quot;, &quot; + person.age case _ =&gt; &quot;Not Interested&quot; } // x: Any = Person(Brandon,20) // // res0: String = name: Brandon, age: 20 . case class Person(val name: String, val age: Int) object Person { def apply(name: String, age: Int) = new Person(name, age) def unapply(obj: Person) = { Some(obj.name, obj.age) } } val x: Any = Person(&quot;Brandon&quot;, 20) x match { case 1 =&gt; &quot;One&quot; case _: Int =&gt; &quot;Some Integer&quot; case 3 =&gt; &quot;Three&quot; case _: Float =&gt; &quot;Some Float&quot; case f: Float =&gt; &quot;float: &quot; + f case Person(name, age) =&gt; s&quot;name: $name, age: $age&quot; case person: Person =&gt; person.name + &quot;, &quot; + person.age case _ =&gt; &quot;Not Interested&quot; } // x: Any = Person(Brandon,20) // // res0: String = name: Brandon, age: 20 . val ns = (1 to 4).toList val cs = (&#39;a&#39; to &#39;d&#39;).toList val ts = ns zip cs ts.map{x: (Int, Char) =&gt; x._1 + x._2 } ts.map(x =&gt; x._1 + x._2) ts.map{case (i, c) =&gt; i + c} val vs = List(Some(1), Some(2), None, &quot;Scala&quot;) vs.map { case Some(n) =&gt; n case None =&gt; -1 case _ : String =&gt; 0 } // ts: List[(Int, Char)] = List((1,a), (2,b), (3,c), (4,d)) // // res0: List[Int] = List(98, 100, 102, 104) // res1: List[Int] = List(98, 100, 102, 104) // res2: List[Int] = List(98, 100, 102, 104) // // vs: List[java.io.Serializable] = List(Some(1), Some(2), None, Scala) // // res3: List[Any] = List(1, 2, -1, 0) val vs = List(Some(1)) vs.map{case Some(n) =&gt; n * n} .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/08/Scala-%EC%A0%9C%EC%96%B4%EB%AC%B8_%EC%9D%91%EC%9A%A9.html",
            "relUrl": "/scala/2019/03/08/Scala-%EC%A0%9C%EC%96%B4%EB%AC%B8_%EC%9D%91%EC%9A%A9.html",
            "date": " • Mar 8, 2019"
        }
        
    
  
    
        ,"post242": {
            "title": "[git] git 명령어 정리",
            "content": "git 명령어 . git config . ~/.gitconfig : Git 전역 설정 | .git/config : 특정 저장소 설정 . | git config [–global] 설정_이름 설정값 | –global : Git 서버 전체의 설정 값을 설정(~/.gitconfig), 이 옵션을 사용하지 않으면 현재 이용하고 있는 Git 저장소에 대해서만 설정한다.(.git/config) | –list : 현재 설정 내용을 확인한다. | . Git을 처음 사용할 때 꼭 사용자 이름과 이메일 주소를 등록해 주어야 한다. 명령어를 사용하지 않고 설정 파일 자체를 수정해 사용해도 결과는 같다. . $ git config --global user.name &#39;JasonAhn&#39; $ git config --global user.email &#39;safenumero@gmail.com&#39; . list 옵션으로 현재 설정 내용을 확인할 수 있다. . $ git config --global --list . “vim”, “nano” 등으로 편집기를 변경할 수 있다 . $ git config --global core.editor &quot;nano&quot; . Version Management . git add 파일명 -f (force) : 기존 중복 디렉토리를 무시하고 추가 -p (partial) : 수정한 부분에 대해서만 추가 -v (verbose) : 자세한 실행 과정과 결과를 출력 . # git 시작 $ git init # 상태 확인 $ git status $ git add . # 버전 생성 $ git commit -m &quot;[커밋 내용]&quot; # add와 commit을 한번에 함 $ git commit -am &quot;[커밋 내용]&quot; $ git log # 자세한 로그 $ git log --stat # 이전 버전과 차이점 파악 $ git diff . Time Travel . # commit ID 시점으로 돌아감, 과거와 현재를 왔다 갔다하면서 탐색이 가능 $ git checkout [ID] # 최신상태로 돌아옴 $ git checkout master . Version Revert . # 과거로 돌림 $ git reset --hard # ID의 버전이 되겠다는 의미, $ git reset --hard [ID] # 바로 전 버전으로 감 $ git revert [가장 앞의 ID] . Remote Repository . github와 연결하기 위해서는 공개키가 있어야 한다. 공개키를 생성한다. . # .ssh 폴더에 id_rsa (개인키), id_rsa.pub (공개키)를 생성한다. $ ssh-keygen # 생성된 파일을 열어 내용을 복사 한 후 github의 settings &gt; SSH and GPG key &gt; SSH Keys &gt; New SSH Key 를 누르고 붙여넣기하고 저장한다. $ vi /Users/a/.ssh/id_rsa.pub . git remote add : 새로운 원격 저장소를 등록, -f 옵션과 같이 쓰면 git fetch가 실행 | git remote rm : 등록된 원격 저장소를 삭제 | git remote show : 지정한 원격 저장소의 정보를 출력 | git remote prune : 더 이상 사용하지 않는 원격 저장소의 추적 브랜치를 삭제 | git remote update : git fetch 이름을 실행할 때와 마찬가지로 원격 저장소의 소스를 가져옴, 만약 이름을 지정하지 않으면 등록된 모든 원격 저장소 소스를 가져옴 | . $ git remote add origin [github 주소] $ git remote $ git push -u origin master # git 저장소 연결 해제 $ git remote remove origin .",
            "url": "https://safenumz.github.io/blog/devops/2019/03/08/git-git_%EB%AA%85%EB%A0%B9%EC%96%B4_%EC%A0%95%EB%A6%AC.html",
            "relUrl": "/devops/2019/03/08/git-git_%EB%AA%85%EB%A0%B9%EC%96%B4_%EC%A0%95%EB%A6%AC.html",
            "date": " • Mar 8, 2019"
        }
        
    
  
    
        ,"post243": {
            "title": "[Jupyter Notebook] 폰트 및 화면넓이 설정",
            "content": "jupyter notebook 설정 . Jupyter Notebook 사용가능한 폰트 확인 . import matplotlib as mpl set(sorted([f.name for f in mpl.font_manager.fontManager.ttflist])) . jupyter notebook 폰트 설정 . ~/.jupyter/custom/custom.css 파일 수정을 통해 jupyter notebook에서 실행할 폰트를 지정할 수 있다. 만약 ~/.jupyter 내부에 custom 폴더 및 custom.css 파일이 없다면 콘솔에서 다음 명령어를 입력하면 ~/.jupyter/ 내부에 custom/custom.css이 생성된다. 만약 생성되지 않으면 폴더와 파일을 직접 만든다. . $ jupyter notebook --generate-config . // .jupyter 폴더 내부에 custom 폴더 생성 ~/.jupyter &gt; mkdir custom ~/.jupyter &gt; cd custom ~/.jupyter/custom &gt; vi custom.css . 코딩을 용이하게 하기 위해서는 글자간 간격이 일정한 monospaced fonts를 설치하는 것이 좋다. 개인적으로 주로 사용하는 monospace 폰트는 NanumGothicCoding, D2Coding, Consolas 등이 있다. . font를 적용하기 위해서는 custom.css파일에 아래 설정을 넣어주면 된다. 아래 스타일은 예시일 뿐이고 개인의 취향에 맞게 스타일을 변경하면 된다. . /* 폰트 설정 */ #notebook, .CodeMirror pre, .output pre { font-family: NanumGothicCoding, Consolas; font-size: 1.9rem !important; line-height: 140% !important; } .dataframe, table { font-family: NanumGothicCoding, Consolas; font-size: 1.5rem !important; } .input { flex-direction: column !important; } .prompt_container { flex-direction: row !important; } . . jupyter notebook 화면 넓이 설정 . 가로 화면이 좁은 경우에 jupyter notebook의 여백을 제거하여 더 넓은 화면으로 이용할 수 있다. 개인적으로 코딩을 위해 모니터를 수직으로 배치하는 경우에는 아래 코드를 추가해 사용하고 있다. . /* 모니터 수직배치할 경우 화면 넓게 쓰기 */ @media (max-width: 1100px) { #notebook-container { padding: 0 !important; } .container { width: auto; } } . . Scroll Past End 기능 . Atom 에디터에는 스크롤을 내릴 때 커서 최하단에서 추가로 더 스크롤할 수 있는 Scroll Past End 기능이 있다. 이러한 기능으로 엔터를 연발하지 않고 항상 눈높이에서 코딩을 할 수 있는 장점이 있다. 그런데 Jupyter Notebook에는 이러한 기능이 없어 불편하지만 css를 활용한다면 Scroll Past End 기능을 구현할 수 있다. . /* Scroll Past End 기능 */ .end_space { height: 75vh; } . 전체 코드 . #notebook, .CodeMirror pre, .output pre { font-family: NanumGothicCoding, Consolas; font-size: 1.9rem !important; line-height: 140% !important; } .dataframe, table { font-family: NanumGothicCoding, Consolas; font-size: 1.5rem !important; } .input { flex-direction: column !important; } .prompt_container { flex-direction: row !important; } .prompt { text-align: left !important; min-width: 0 !important; } .output_prompt { font-size: 0px; } @media (max-width: 1100px) { #notebook-container { padding: 0 !important; } .container { width: auto; } } .end_space { height: 75vh; } .",
            "url": "https://safenumz.github.io/blog/devops/2019/03/08/Jupyter_Notebook_%ED%8F%B0%ED%8A%B8_%EB%B0%8F_%ED%99%94%EB%A9%B4%EB%84%93%EC%9D%B4_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/devops/2019/03/08/Jupyter_Notebook_%ED%8F%B0%ED%8A%B8_%EB%B0%8F_%ED%99%94%EB%A9%B4%EB%84%93%EC%9D%B4_%EC%84%A4%EC%A0%95.html",
            "date": " • Mar 8, 2019"
        }
        
    
  
    
        ,"post244": {
            "title": "[Spark] Apache Spark Application 실행",
            "content": "Spark Application 실행 . Build, Package - Maven . provided를 설정하면 패키징를 설정할 때 해당 의존성만 빼고 패키징을 할 수 있다. | . &lt;scope&gt;provided&lt;/scope&gt; . &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; . Maven Project . clean | compile | package | . 프로젝트 폴더 아래 target 디렉토리 가면 imple-uber-1.0-SNAPSHOT.jar가 있다. 클러스터 상에서 실행하려면 클러스터상에는 하둡이나 스파크가 있기 때문에 하둡이나 스파크 의존성을 뺴야 한다. . Build, Package - SBT . assembly plugin 설정 . $USER_HOME/.sbt/0.14/plugins/build.sbt 없으면 생성, 있으면 아래 줄 추가 | addSbtPlugin(“com.eed3si9n” % “sbt-assembly” % “0.13.0”) | . name := &quot;edu-project&quot; version := &quot;1.0.0&quot; scalaVersion := &quot;Akka Rpository&quot; at &quot;http://repo.akka.io/releases/&quot; libraryDependencies ++= Seq( &quot;org.apache.spark&quot; %% &quot;spark-core&quot; % &quot;1.21&quot; % &quot;provided&quot;, &quot;org.apache.spark&quot; % &quot;spark-streaming_2.10&quot; % &quot;1.2.1&quot; % &quot;provided&quot;, &quot;org.apache.spark&quot; % &quot;spark-sql_2.10&quot; % &quot;1.2.1&quot; % &quot;provided&quot;, &quot;org.apache.spark&quot; % &quot;spark-hive_2.10&quot; $ &quot;1.2.1&quot; $ &quot;provided&quot;, &quot;org.apache.spark&quot; % &quot;spark-streaming-twitter_2.10&quot; % &quot;1.2.1&quot; ) . Deploy . Usage: spark-submit [option] &lt;app jar | python file&gt;[app option] . Options . –master MASTER_URL : spark://host:port, mesos://host:port, yarn, local, local[*] | –deploy-mode DEPLOY_MODE : lcoal(기본 값), cluster | –class CLASS_NAME : application’s main class (Java / Scala apps) | –name NAME : application 이름 | –jars JARS : driver에 포함될 “,”로 구분된 jar 파일 목록과 executor classpath | –py-files PY_FILES : “,”로 구분된 .zip, .egg, .py 파일 목록(PYTHONPATH 상의) | –files FILES : 각 executor의 실행 디렉토리에 놓여질 파일 목록(“,”로 구분) | –conf PROP=VALUES : 속성 파일 지정, 기본값: conf/spark-defaults.conf | –driver-memory MEM : driver 메모리 (예. 1000M, 2G) (기본값: 512G) | –driver-java-option –driver-library-path –driver-class-path | –executor-memory MEM : 각 executor 메모리 (예. 1000M, 2G) (기본값: 1G) | . Spark standalone with cluster deploy mode only . –driver-cores NUM : Cores for driver (Default: 1) | –supervise : 지정하면, 드라이버가 실패했을 떄 다시 시작 | . Spark standalone and Mesos only . –total-executor-cores NUM : 모든 executor이 총 core 개수 | . YARN-only . –executor-cores NUM : 각 executor의 core 개수 (기본값 : 1) | –queue QUEUE_NAME : 사용할 queue 이름 (기본값: “default”) | –num-executors NUM : 실행할 executors 개수 (기본값: 2) | –archives ARCHIVES : 각 executor의 실행 디렉토리에 풀려질 압축 파일 리스트(“,”로 구분) | . 외부에서 전달되는 변수를 받아서 쓰려면 파일 내부에 있는 setMaster(“local[*]”) 빼야 함 4040 포트로 들어가면 현재 어떤 Job을 실행하는지 알 수 있다. . $ cd /temp $ ls sample-uber-1.0-SNAPSHOT.jar $ ls -l sample-uer-1.0-SANPSHOT.jar $ cd /data/kodb $ cd spark-1.5.2-bin-hadoop2.4/ $ ./spart-all.sh 패스워드 입력 $ cd .. $ cd bin $ ./spark-submit --master spark://master.raonserver.com:7077 -class org.kodb.spark.TwitterReader /temp/sample-uber-1.0-SNAPSHOT.jar &lt;트위터 키1&gt; &lt;트위터키2&gt; &lt;트위터키3&gt; &lt;트위터키4&gt; . 106.248.46.183:8099 | . Deploy(launcher) . package com.raonbit.edu; import org.apache.spark.launcher.SparkLaunher; public class MyLauncher { public static void main(String[] args) throws Exception { Process spark = new SparkLauncher() .setAppResource(&quot;/my/app.jar&quot;) .setMainClass(&quot;my.spark.app.Main&quot;) .setMaster(&quot;local&quot;) .setConf(SparkLauncher.DRIVER_MOMORY, &quot;2g&quot;) .launch(); spark.waitFor()&#39;&#39; } } . Deploy Strategy . Client Mode . Cluster Mode . Strandalone Cluster . Cluster 시작/중지 . sbin/start-master.sh : 머신의 마스터 인스턴트를 시작 | sbin/start-slaves.sh : -conf/slaves 파일에 정의된 각 머신에 슬레이브 인스턴스 시작 | sbin/start-all.sh : 마스터와 슬레이브들 시작 | sbin/stop-master.sh : bin/start-master.sh 스크립트를 통해 시작된 마스터 중지 | sbin/stop-slaves.sh : conf/slaves 파일에 정의된 각 머신의 모든 슬레이브 인스턴스 중지 | sbin/stop-all.sh : 마스터와 슬레이브들 중지 | . 환경 변수 설정 . conf/spark-env.sh : conf/spark-env.sh.template을 복사해서 생성 | . standalone cluster에서 spark-shell 실행 . bin/spark-shell-master spark://HOST:PORT | . application 종료 시키기 . bin/spark-class org.apache.spark.deploy.Client kill | driver id는 standalone master web UL에서 확인 가능(http://master_url:web_ui_port) | . Standalone Cluster - High Availability . ZooKeeper를 이용한 Master 노드 이중화 : spark-env.sh의 SPARK_DEMON_JAVA_OPTS 설정 . spark.deploy.recoverMode . 기본값 : NONE | ZOOKEEPER로 설정하면 Master노드 이중화(대기 Master 노드) | . spark.deploy.zookeeper.url . ZooKeeper cluster url | . spark.deploy.zookeeper.dir . 기본값 : /spark | 복구 상태를 저장하는 zookeeper 내의 디렉토리 | . spark master url : spark://host1.port1,host2:port2 . Local File System을 이용한 단순 Master 노드 재시작 : spark-env.sh의 SPARK_DEMON_JAVA_OPTS 설정 . spark.deploy.recoverMode : FILESYSTEM으로 설정하면 재시작 모드 | spark.deploy.recoveryDirectiory : 복구상태를 저장하는 디렉토리(Master 노드가 접근가능한 디렉토리) | . stop-master.sh로 master 노드를 중지 시키면 복구 상태가 제거되지 않음 . 복구 디렉토리로 NFS 사용 가능 . 추천 Hardware 구성 . Storage Systems . 가능하면 HDFS와 같은 노드에서 실행 | HDFS와 같은 로컬 네트워크 영역에 있는 다른 노드에서 실행 | Hbase와 같은 low-latency 저장소에서는 간섭을 피하기 위해 다른 노드에서 실행 | . Local Disks . RAID 구성 없이 4~8개 디스크, noatime으로 mount 권장 | HDFS를 사용한다면 HDFS와 동일한 디스크 사용 | . Memory . 8 ~ 100GB의 memory에서 잘 동작 (전체 메모리의 75%만 사용 권장) | . Network . 10G 이상 사용 권장 | . CPU Core . 8 ~ 16개 | . Spark Configuration . 설정방법 . SparkConf Object . val conf = new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;CountingSheep&quot;).set(&quot;spark.executor.memory&quot;, &quot;1g&quot;) val sc = new SparkContext(conf) . Java System Properties . -D&quot;spark.executor.memory&quot;=&quot;1g&quot; . Command Line Argument . $ ./bin/spark-submit --name &quot;My app&quot; --master local[4] --conf spark.shuffle.spill=false --conf &quot;spark.executor.extraJavaOptions=-XX:+PrintGCDetails -XX:+PrintGCTimeStamps&quot; myApp.jar . $SPARK_HOME/conf . fairscheduler.xml.template | log4j.properties.template | metrics.properties.template | spark-default.conf.template | spark-env.sh.template | .",
            "url": "https://safenumz.github.io/blog/spark/2019/03/07/Spark-Spark_Application_%EC%8B%A4%ED%96%89.html",
            "relUrl": "/spark/2019/03/07/Spark-Spark_Application_%EC%8B%A4%ED%96%89.html",
            "date": " • Mar 7, 2019"
        }
        
    
  
    
        ,"post245": {
            "title": "[Scala] 구조 (2)",
            "content": "Scala 구조 . case class | 동반객체, 동반 클래스 compainon object, companion class | 암묵적 변환 implicit convert | 암묵적 파라미터 implicit parameter | 편의 문법 | . case class - 축약된 생성자 . new 키워드 없이 객체 생성가능 | . // 내부적으로 apply 함수를 구현함 case class Person(name: String, arge: Int) val person = Person(&quot;Brandon&quot;, 10) // 생성자 파라미터 외부 접근 가능(getter/setter) person.name // Brandon . case class - 동치성 비교 . equals 구현 | . // hashcode 구현 val p1 = new Person2(&quot;Brandon&quot;, 20) val p2 = new Person2(&quot;Brandon&quot;, 20) p1 == p2 // true // toString p1.toString // Person . case class - 익스트렉터 . 패턴 매칭에서 유용하게 사용됨 | 내부적으로 unapply를 구현함 | . val person = Person(&quot;Brandon&quot;, 10) person match { case Person(name, age) =&gt; println(&quot;name: &quot; + name + &quot;age: &quot; + age) } . 동반 객체, 동반 클래스 companion object, class . object 키워드로 선언한 객체는 싱글턴 객체 | 클래스 이름과 같은 이름을 갖는 싱글턴 객체는 동반 객체라 부름 | 싱글턴 객체와 같은 이름을 갖는 클래스는 동반 클래스라 부름 | 동반객체와 동반클래스는 반드시 한 파일 내에서 존재해야 함 | 동반객체는 동반클래스의 모든 변수에 접근 가능 | . class Person(name: String, age: Int){ override def toString = s&quot;name: $name: $name, age: $age&quot; } // person.name 이라는 비공개 필드에 접근 가능 object Person{ def apply(name: String, age: Int) = new Person(name, age) def unapply(person: Person) = some(person.name, person.age) } . 암묵적 변환 implicit conversion . 함수를 호출하는 타이밍에 실제 함수 이름이 없는 경우, implicit으로 선언된 함수를 찾아 함수 호출이 가능한 경우 해당 타입으로 변환하는 함수 | 암묵적 파라미터와 혼동하지 않도록 주의 | . class IntWrapper(number: Int) { val square = number * number } implicit def toIntWrapper(n: Int) = new IntWrapper(n) 4 square // 16 . 암묵적 파라미터 implicit parameter . 특정 파라미터를 생략 가능하도록 하는 키워드 | 변수와 파라미터 모두 implicit 키워드를 사용해야 함 | 다수의 파라미터를 받는 경우 모두 implicit이 선언됨 | 특정 파리미터만을 암묵적으로 전달받고자 하는 경우 커리함수 형태로 사용 | . implicit val name = &quot;Brandon&quot; def printSomething(implicit s: String) = { println(s&quot;name: $s&quot;) } printSomething // Brandon implicit val name = &quot;Brandon&quot; implicit val age = 20 def printSomething(implicit s: String, n: Int) = println(s&quot;name; $s, age: $n&quot;) = println(s&quot;name: $s, age: $n&quot;) printSomething def printSomething(s: String)(implicit n: Int) = println(s&quot;name: $s, age: $n&quot;) printSomething(&quot;John&quot;) . // 해시 값이 다르기 때문에 다르게 나옴 class Person(name: String, age: Int) val p1 = new Person(&quot;Brandon&quot;, 20) val p2 = new Person(&quot;Brandon&quot;, 20) p1 == p2 // res0: Boolean = false class Person(_name: String, _age: Int) { val name = _name val age = _age override def equals(obj: Any) = { this.name == obj.asInstanceOf[Person].name &amp;&amp; this.age == obj.asInstanceOf[Person].age } } val p1 = new Person(&quot;Brandon&quot;, 20) val p2 = new Person(&quot;Brandon&quot;, 20) p1 == p2 res0: Boolean = true // case class case class Person(name: String, age: Int) val p1 = new Person(&quot;Brandon&quot;, 20) val p2 = new Person(&quot;Brandon&quot;, 20) p1 == p2 // res0: Boolean = true . // 동반 객체와 동반 클래스 class Person(_name: String, _age: Int){ val name = _name val age = _age } object Person{ def apply(name: String, age: Int) = new Person(name, age) } val p = Person.apply(&quot;Brandon&quot;, 20) // p: Person = Person@5a66ee1b . // 이름이 같은 동반객체는 동반클래스의 private도 접근이 가능하다 class Person(_name: String, _age: Int){ private val name = _name val age = _age } object Person{ def apply(name: String, age: Int) = { val p = new Person(name, age) p.name } } val p = Person.apply(&quot;Brandon&quot;, 20) . // 암묵적 변환 100.toChar 100 toChar 20 max 40 def square(x: Int) = x * x square(2) class IntWrapper(number: Int){ val square = number * number } // 암묵적 변환 implicit def toIntWrapper(n: Int) = new IntWrapper(n) 2 square // res0: Char = d // warning: there was one feature warning; for details, enable `:setting -feature&#39; or `:replay -feature&#39; // res1: Char = d // // res2: Int = 40 // // square: (x: Int)Int // res3: Int = 4 // // defined class IntWrapper // // // // warning: there was one feature warning; for details, enable `:setting -feature&#39; or `:replay -feature&#39; // toIntWrapper: (n: Int)IntWrapper // // warning: there was one feature warning; for details, enable `:setting -feature&#39; or `:replay -feature&#39; // res4: Int = 4 . // 암묵적 파라미터 // 암묵적으로 같은 형을 찾는다 implicit var str = &quot;Hello Scala&quot; implicit val age = 23 def printInSomething(implicit s: String): Unit = { println(s&quot;*$s*&quot;) } printInSomething(&quot;Hello Scala&quot;) printInSomething // str: String = Hello Scala // age: Int = 23 // // printInSomething: (implicit s: String)Unit // // // *Hello Scala* // // *Hello Scala* .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/07/Scala-%EA%B5%AC%EC%A1%B0_(2).html",
            "relUrl": "/scala/2019/03/07/Scala-%EA%B5%AC%EC%A1%B0_(2).html",
            "date": " • Mar 7, 2019"
        }
        
    
  
    
        ,"post246": {
            "title": "[Spark] Spark SQL",
            "content": "Spark SQL . Overview . SQL, HiveQL, Scala로 표현된 관계형 질의가 Spark을 이용하여 실행될 수 있도록 하는 확장 API . DataFrames . 이름있는 컬럼으로 구성된 분산 데이터 컬렉션 | 관계형 데이터 베이스의 테이블이나 R/Python의 data frame과 개념적으로 동일 | RDD, Parquet 파일, JSON dataset, Hive에 저장된 데이터로부터 생성 가능 | . Spark SQL Application . import org.apache.spark.{SparkConf, SparkContext} import org.apache.spark.sql.SQLContext import org.apache.spark.sql.functions._ case class Record(key: Int, value: String) object RDDRelation{ def main(args: Array[String]) {} val sparkConf = new SparkConf().setAppName(&quot;RddRelation&quot;) val sc = new SparkContext(sparkConf) val sqlContext = new SQLContext(sc) import sqlContext.implicits._ val df = sc.parallelize((1 to 100).map(i =&gt; Record(i, s&quot;val_$i&quot;))).toDF() df.registerTempTable(&quot;records&quot;) pritnln(&quot;Result of SELECT *:&quot;) sqlContext.sql(&quot;SELECT * FROM records&quot;).collect().foreach(println) val count = sqlContext.sql(&quot;SELECT COUNT(*) FROM records&quot;).collect().head.getLong(0) println(s&quot;COUNT(*): $count&quot;) val rddFromSql = sqlContext.sql(&quot;SELECT key, value FROM records WHERE key &lt; 10&quot;) println(&quot;Result of RDD.map:&quot;) rddFromSql.map(row =&gt; s&quot;Key: ${row(0)}, Value: ${row(1)}&quot;).collect().foreach(println) df.where($&quot;key&quot; === 1).orderBy($&quot;value&quot;.asc).select($&quot;key&quot;).collect().foreach(println) df.write.parquet(&quot;pair.parquet&quot;) sc.stop() } . SQLContext . libraries Dependency . &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-sql_2.10&lt;/artifactId&gt; &lt;version&gt;1.5.2&lt;/version&gt; &lt;/dependency&gt; . SQLContext . val sparkConf = newConf().setAppName(&quot;RDDRelation&quot;).setMaster(&quot;locat[*]&quot;) val sc = new SparkContext(sparkConf) val sqlContext = newSQLContext(sc) // SQlContext 생성 . HiveContext . val sqlContext = new HiveContext(sc) // SQLContext 생성 sqlContext.setConf(&quot;spark.sql.dialect&quot;, &quot;sql&quot;) // 기본값은 hiveql . DataFrame 생성 . Parquet . val df = sqlContext.read().load(&quot;users.parquet&quot;) val df = sqlContext.read().parquet(&quot;users.parquet&quot;) val df = sqlContext.read().format(&quot;parquet&quot;).load(&quot;users.parquet&quot;) . JSON . val df = sqlContext.read().json(&quot;people.json&quot;) val df = sqlContext.read().format(&quot;json&quot;).load(&quot;people.json&quot;) . JDBC . val jdbcDF = sqlContext.read.format(&quot;jdbc&quot;).options( Map(&quot;url&quot; -&gt; &quot;jdbc:postgresql:dbserver&quot;, &quot;dbtable&quot; -&gt; &quot;schema.tablename&quot;)).load() ) . CSV . val df = sqlContext.read().format(&quot;com.databricks.spark.csv&quot;).option(&quot;header&quot;, &quot;true&quot;).load(&quot;cars.csv&quot;) // 외부 라이브러리에서 제공 --package com.databricks:spark-csv_2.10:1.1.0 . DataFrame Operation . df.show(); df.printSchema(); df.select(&quot;name&quot;).show(); df.select(df.col(&quot;name&quot;), df.col(&quot;age&quot;).plus(1)).show(); df.filter(df.col(&quot;age&quot;).gt(21)).show(); df.groupBy(&quot;age&quot;).count().show(); . Schema Mapping . Reflection . val sqlContext = new org.apache.spark.sql.SQLContext(sc) import sqlContext.implicits._ case class Person(name: String, age: Int) val people = sc.textFile(&quot;examples/scr/main/resources/people.txt&quot;).map(_.split(&quot;,&quot;)).map(p =&gt; Person(p(0), p(1).trim.toInt)).toDF() val teenagers = sqlContext.sql(&quot;SELECT name, age FROM people WHERE age &gt;= 13 AND age &lt;= 19&quot;) teenagers.map(t =&gt; &quot;Name: &quot; + t(0)).collect().foreach(println) teenagers.map(t =&gt; &quot;Name: &quot; + t.getAs[String](&quot;name&quot;)).collect().foreach(println) teenagers.map(_.getValuesMap[Any](List(&quot;name&quot;, &quot;age&quot;))).collect().foreach(println) . Programmatically . val sqlContext = new org.apache.spark.sql.SQLContext(sc) val people = sc.textFile(&quot;&quot;) val schemaString = &quot;name age&quot; import org.apache.spark.sql.Row import org.apache.spark.sql.types.{StructType, StructField, StringType} val schema = StructType(schemaString.split(&quot;,&quot;).map(fieldName =&gt; StructField(fieldName, StringType, true))) val rowRDD = people.map(_.split(&quot;,&quot;)).map(p =&gt; Row(p(0), p(1).trim)) val peopleDataFrame - sqlContext.createDataFrame(rowRDD, schema) peopleDataFrame.registerTempTable(&quot;people&quot;) val reusult = sqlContext.sql(&quot;SELECT name FROM people&quot;) result.map(t =&gt; &quot;Name: &quot; + t(0)).collect().foreach(println) . Spark Streaming과의 연동 . val word: DStream[String] = ... words.foreachRDD { rdd =&gt; val sqlContext = SQLContext.getOrCreate(rdd.sparkContext) import sqlContext.implicits._ val wordsDataFrame = rdd.toDF(&quot;word&quot;) wordsDataFrame.registerTempTable(&quot;words&quot;) val wordCountsDataFrame = sqlContext.sql(&quot;select word, count(*) as total from words group by word&quot;) wordCountsDataFrame.show() } . DataFrame 저장 . df.select(“name”, “age”).write().format(“parquet”).save(“namesAndAges.parquet”); | df.select(“name”, “age”).write().format(“parquet”).mode(SaveMode.ErrorIfExists).save(“namesAndAges.parquet”); | . Save Mode . = SaveMode.ErrorIfExists(Default) : 데이터가 존재하면 Exception 발생 . SaveMode.Append : 존재하는 데이터 뒤에 추가 | SaveMode.Overwrite : 기존데이터가 지워지고 새로운 데이터로 쓰여짐 | SaveMode.Ignore : 기존 데이터를 그대로 두고 새로운 데이터는 쓰여지지 않음 | . Performance Tuning . Cache . sqlContext.cacheTable(“records”) / dataFrame.cache() | sqlContext.uncacheTable(“records”) | . 성능 관련 설정 . spark.sql.inMemoryColumnarStorage.compressed . 기본 값 : true | 데이터 통계에 근거하여 각 행의 압축 코덱을 선택할지 여부 | . spark.sql.inMemoryColumnarStorage.batchSize . 기본 값 : 10000 | Columnar caching 배치 크기 조정, 큰 배치는 메모리 사용성과 압축을 높이지만 데이터를 가져올 때 메모리 부족을 일으킬 수 있다. | . spark.sql.autoBroadcastJoinThreshold . 기본 값 : 10MB | Join을 실행 할 때 모든 워커 노드에 전달될 테이블의 최대 크기 설정, -1로 설정하면 전달되지 않음, 현재 통계정보는 “ANALYZE TABLE COMPUTE STATISTICS noscan&quot; 명령이 실행되는 Hive metastore 테이블에서만 지원 | . spark.sql.codegen . 기본 값 : false | True로 지정하면 특정 질의의 표현을 평가하기 위한 코드가 동적으로 생성 | . spark.sql.shuffle.partitions . 기본 값 : 200 | Join이나 aggregation 시 shuffling에 사용할 파티션 개수 | . Data Type . 실습 . 국토교통부 교통정보공개서비스 . https://openapi.its.go.kr | . dependency 추가 . &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-sql_2.10&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponets&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.5.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jettison&lt;/groupId&gt; &lt;artifactId&gt;jettison&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;/dependency&gt; . // 공사 정보 import org.apache.spark.SparkConf import org.apache.spark.sql.SQLContext import org.apache.spark.storage.StorageLevel import org.apache.spark.streaming.receiver.Receiver import org.apache.spark.streaming.{Seconds, StreamingContext} import org.codehaus.jettison.json.{JSONObject, JSONArray} import scala.concurrent.ExecutionContext.Implicits.global import scala.concurrent.duration._ object Traffic { def main(args: Array[String]) : Unit = { val conf = new SparkConf().setAppName(&quot;Traffic&quot;).setMaster(&quot;local[*]&quot;) val ssc = new StreamingContext(conf, Seconds(20)) val eventStream = ssc.receiverStream(new EventReceiver) val incidentStream = ssc.receiverStream(new IncidentReceiver) val info = eventStream.union(incidentStream) info.foreachRDD( rdd =&gt; { if(rdd.count() &gt; 0){ val sqlContext = new SQLContext(rdd.context) val trafficinfo = sqlContext.read.json(rdd) trafficinfo.registerTempTable(&quot;TrafficData&quot;) val result = sqlContext.sql(&quot;select type, time, x, y, message from TrafficData&quot;).distinct() result.foreach(println) } }) ssc.start() ssc.awitTermination() } class IncidentReceiver extends Receiver[String](StorageLevels.MEMORY_AND_DISK) { override def onStart(): Unit = { println(&quot;start....&quot;) receive() } override def onStop(): Unit = { println(&quot;stop....&quot;) } def receive() = { val actorSystem = ActorSystem(&quot;MyActorSystem&quot;) import scala.concurrent.ExcutionContext.Implicits.global import scala.concurrent.duration._ actorSystem.scheduler.shedule(0 seconds, 20 seconds) { val json = getEventData() parse(json) } } def getEventData() = { // json getType 추가 val baseUrl = &quot;http://openapi.its.go.kr/api/NIncidentIdentify?key=....&amp;ReqType=2&amp;getType=json&quot; val client = HttpClients.createDefault() val httpGet = new HttpGet(baseUrl) val response = client.execute(httpGet) try{ val entity = respose.getEntity new String(EntityUtils.toByteArray(entity)) }finally{ response.close() client.close() } } def parse(json:String) = { val jsonArray = new JSONArray(json) for(i&lt;-0 to jsonArray.length() -1) { val jstr = jsonArray.getJSONObject() val newJson = new JSONObject() newJson.put(&quot;type&quot;, &quot;Event&quot;) newJson.put(&quot;x&quot;, jstr.getDouble(&quot;coordx&quot;)) newJson.put(&quot;y&quot;, jstr.getDouble(&quot;coordy&quot;)) newJson.put(&quot;message&quot;, jstr.getString(&quot;eventstatusmsg&quot;)) newJson.put(&quot;time&quot;, new java.util.Data().toString) store(newJson.toString) } } } class EventReceiver extends Receiver[String](StorageLevels.MEMORY_AND_DISK) { override def onStart() : Unit = { println(&quot;start....&quot;) receive(); } override def onStop() : Unit = { println(&quot;stop....&quot;) } def receive() = { val actorSystem = ActorSystem(&quot;MyActorSystem&quot;) actorSystem.scheduler.shedule(0 seconds, 20 seconds) { val json = getEventData() parse(json) } } def getEventData() = { // json getType 추가 val baseUrl = &quot;http://openapi.its.go.kr/api/NEventIdentify?key=....&amp;ReqType=2&amp;getType=json&quot; val client = HttpClients.createDefault() val httpGet = new HttpGet(baseUrl) val response = client.execute(httpGet) try{ val entity = respose.getEntity new String(EntityUtils.toByteArray(entity)) }finally{ response.close() client.close() } } def parse(json:String) = { val jsonArray = new JSONArray(json) for(i&lt;-0 to jsonArray.length() -1) { val jstr = jsonArray.getJSONObject() val newJson = new JSONObject() newJson.put(&quot;type&quot;, &quot;Event&quot;) newJson.put(&quot;x&quot;, jstr.getDouble(&quot;coordx&quot;)) newJson.put(&quot;y&quot;, jstr.getDouble(&quot;coordy&quot;)) newJson.put(&quot;message&quot;, jstr.getString(&quot;eventstatusmsg&quot;)) newJson.put(&quot;time&quot;, new java.util.Data().toString) store(newJson.toString) } } } } .",
            "url": "https://safenumz.github.io/blog/spark/2019/03/06/Spark-Spark_SQL.html",
            "relUrl": "/spark/2019/03/06/Spark-Spark_SQL.html",
            "date": " • Mar 6, 2019"
        }
        
    
  
    
        ,"post247": {
            "title": "[Scala] 함수응용",
            "content": "Scala 함수응용 . 람다 lambda | 함수의 다양한 표현방식 | 함수의 타입 | 고차 함수 higher order function, 일급 함수 first class Function | 익명함수 anonymous function | 함수 조합 | 커리 curry | 부분함수 partial Function | 재귀 | . 람다 lambda calculus . 일반적인 함수 표현식을 축약, 추상화 . 알파-변환 | 베타-축약 | 에타-변환 | . 함수 응용 . 함수의 다양한 표현 방식 | . fun(x: Int, y: Int) = x + y fun(x: Int) (y: Int) = x + y // &#39;=&#39; 기준으로 우측은 함수 fun(x: Int) = (y: Int) =&gt; x + y // 리터럴 표현방식 fun = (x: Int) =&gt; (y: Int) =&gt; x + y fun = (x: Int) =&gt; (y: Int) =&gt; (z: Int) = x + y + z // *(f _).curried, Function.uncurried를 사용해서 다수의 파라미터를 커리 함수로 변경할 수 있다 . 함수의 타입 . fun(x: Int, y: Int) = x + y //&gt; fun(Int, Int) =&gt; Int fun(x: Int)(y: Int) = x + y //&gt; fun(Int)(Int) =&gt; Int fun(x: Int) = (y: Int) =&gt; x + y //&gt; fun(Int) =&gt; Int =&gt; Int fun = (x: Int) =&gt; (y: Int) =&gt; x + y //&gt; fun =&gt; (Int =&gt; Int) fun = (x: Int) =&gt; (y: Int) =&gt; (z: Int) //&gt; fun =&gt; (Int =&gt; (Int =&gt; Int)) . 고차함수 higher order function, 일급함수 first class function . 함수를 1급 객체로 다룰 수 있는 프로그래밍 언어의 성질, 그러한 함수 | . // 다른 함수를 파라미터로 사용할 수 있음 def function(n: Int, f: Int =&gt; String) = f(n) // 함수의 수행 결과가 함수 (런타임에 함수 생성) def function = (x: Int) =&gt; 3 // 함수를 변수에 저장 할 수 있음 val myFunc = f(x) =&gt; x . 익명함수 anonymous function . anonymous function, function constant, function literal, lambda function | . // 이름 있는 함수 func(x: Int) = 2 * x // 함수 이름을 지정하지 않는 함수 (x: Int) =&gt; 2 * x // 함수를 변수에 저장 val myFunction = (x: Int) =&gt; 2 * x myFunction (5) // &gt;10 // 다른 함수에 파라미터로 전달 list.map((x: Int) =&gt; 2 * x) . 함수 조합 1 . 함수를 조합함으로써, 프로그램을 좀 더 작은 구조로 나누고 재활용성을 높일 수 있다 | . // 함수의 호출 순서 def f1 = (s: String) =&gt; &quot; (&quot; + s + &quot;) &quot; def f2 = (s: String) =&gt; &quot; {&quot; + s + &quot;} &quot; def f3 = (s: String) =&gt; &quot; [&quot; + s + &quot;] &quot; f3(f2(f1(&quot;kdb&quot;))) //&gt; [ { (kdb) } ] // 위 함수의 호출 순서는 f1 &gt; f2 &gt; f3 // andThen: 좌측 부터 호출 val comb = (f1 andThen f2 andThen f3) comb(&quot;kdb&quot;) //&gt; [ { (kdb) } ] // compose : f3, f2, f1 순으로 호출 val comb = (f1 compose f2 compose f3) comb(&quot;kdb&quot;) //&gt; ( { [kdb] } ) . 커리 함수 currying . // Heskell Curry의 이름에서 유래 fun(x, y)(z) = x + y * z // 파라미터가 두 개인 함수 def fun(x: Int, y: Int) = x + y // 두 파라미터를 순차적으로 적용하는 함수 def fun(x: Int)(y: Int) = x + y // 함수 리터럴을 사용한 커리함수 정의 val func = (x: Int) =&gt; (y: Int) = x + y . 부분 적용 함수 partial function . 함수의 인자가 일부만 적용된 함수 | . // 함수의 파라미터가 2개 이상인 경우 def func = (x: Int, y: Int) =&gt; x + y def myFunc(x: Int) = func(x, 2) myfunc(1) //&gt; 3 // 커리 함수 def func(x: Int)(y: Int) = x + y // _ PlaceHolder를 사용해 함수 정의 def myFunc = func(3) _ myFunc(2) //&gt; 3 // 함수 리터럴을 사용한 커리 함수 def func = (x: Int) =&gt; (y: Int) =&gt; x + y def myFunc(x: Int) = func(2) myFunc(1) //&gt; 3 // 커리 함수의 경우가 부분함수를 적용하는 데 유리하다 // 함수형 프로그래밍에서는 함수 리터럴을 사용한 정의가 일반적이다 . 재귀함수 recursive function . 어떤 함수가 스스로를 호출하는 함수 | . // 두 수의 최대 공약수를 구하는 함수 // 뉴튼법을 활용한 최대 공약수 def gcd(a: Int, b: Int) : Int = { if(b == 0) a else gcd(b, a%b) } . 재귀함수는 함수형 프로그래밍에서 자주 사용하는 개념 | fold, reduce, scan 등의 함수를 사용하기 위해서 반드시 익혀야 함 | 종료 조건을 반드시 명기해야 함 | 지나치게 사용하는 경우는 스택이 쌓이면서 발생하는 성능 저하와 오버플로우를 주의 해야 함 | scala.annotation.tailrec 어노테이션 | . 꼬리 재귀 tail recursion . 재귀 호출 . def sumOfN(1: Int): Int = { if (l == 0) 0 else 1 + sumOfN(l - 1) } sumOfN(10000) // StackOverflow // 꼬리 재귀 최적화 def sumOfN(1: Int, acc: Int): Int = { if (l == 0) acc else sumOfN(l - 1, acc + 1) } sumOfN(10000) //&gt; 500500 . (x: Int, y: Int) =&gt; x + y val myFunc = (x: Int, y: Int) =&gt; x + y myFunc(1, 2) def func(x: Int, y: Int) = x + y // 부분적용 함수 def myPartialFunction (y: Int) = myFunc(1, y) myPartialFunction(2) . def func(x: Int)(y: Int) = x + y // 부분적용 함수 def myPartialFunction (y: Int) = myFunc(1, y) myPartialFunction(2) // 커리함수를 활용한 부분함수 val myPF2 = func(1)_ // val myFunc1 = (x: Int) =&gt; (y: Int)=&gt; x + y def myPF3 = func(1) // val myFunc1 = (x: Int) =&gt; (y: Int)=&gt; x + y val myPF3 = myFunc1(1) myPF3(2) // (x: Int) =&gt; (y: Int) =&gt; x + y // res4: Int =&gt; (Int =&gt; Int) = &lt;function&gt; // val fun3 = (x: Int) =&gt; (y: Int) =&gt; (z: Int) =&gt; ??? . def myFunc(x: Int)(y: Int) = x + y def myCurriedFunc = (x: Int) =&gt; (y: Int) =&gt; x + y myFunc(1)(2) myCurriedFunc(1)(2) // res0: Int = 3 // res1: Int = 3 val myAFunc = myFunc(1)_ val myAFunc2 = myCurriedFunc(1) Function.uncurried(myCurriedFunc) def mf(x: Int, y: Int) = x + y // res2: (Int, Int) =&gt; Int = scala.Function$&lt;function&gt; // mf: (x: Int, y: Int)Int . // 재귀, 큰 값 집어 넣으면 스택오버플로우 에러 뜸 def sum(x: Int, y: Int)(f: Int =&gt; Int): Int = { if (x &gt; y) 0 else f(x) + sum(x + 1, y)(f) } sum(1, 10)(x =&gt; x) // res1: Int = 55 . // 꼬리 재귀 최적화가 되어 있어서 숫자가 커져도 스택오버플로우 에러가 안뜸 def sumOfN(acc: Int, x: Int): Int = { if (x == 0) acc else x + sumOfN(acc + x, x - 1) } sumOfN(0, 10) . List, Vector . 컬렉션이 변경 되면서 Vector를 사용하는 것이 일반적인 추세 | Vector의 경우 +: 연산자 사용시 패턴 매칭 사용시 불편한 점이 있었으나 현재 개선됨 | : 기호가 오른쪽에 붙은 경우는 컴파일 시 좌변과 우변을 바꾸어 호출함 | 1 :: List(2, 3, 4) | List(2, 3, 4).::(1) // 위와 같은 표현임 | . // ::, + : 리스트의 앞에 요소를 추가 함 1 :: List(2, 3, 4) 1 +: List(2, 3, 4) // :: 연산자는 호환성을 위해 유지됨 // :+ 리스트 뒤에 요소를 추가함 List(1, 2, 3) :+ 4 // ::: 리스트와 리스트를 연결 List(1, 2, 3) ::: List(4, 5, 6) //&gt; List(1, 2, 3, 4, 5, 6) . 실습 배경 지식 . NumericRange . 1 to 10 // (inclusive) //&gt; 1 ... 10 1 until 10 // (exclusive) //&gt; 1 ... 9 . fill 특정 값으로 요소를 채움 . List.fill(10)(1) // 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 . tabulate 전달받은 인덱스에 따라서 함수를 적용한 후 값을 대입함 . List.tabulate(10) (x =&gt; x) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 . 1 :: List(2, 3, 4) 1 +: List(2, 3, 4) List(2, 3, 4).+:(1) List(1, 2, 3) :+ 4 List(1, 2, 3) ::: List(4, 5, 6) List(1, 2, 3) :: List(4, 5, 6) . (1 to 10).toList (1 until 10).toList for (i &lt;- 1 to 10) yield i // res0: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) // res1: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9) // // res2: scala.collection.immutable.IndexedSeq[Int] = Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) . val cs = (&#39;a&#39; to &#39;z&#39;).toList for (i &lt;- 0 until cs.size) { println(cs(i)) } List.fill(10)(&#39;a&#39;) // res0: List[Char] = List(a, a, a, a, a, a, a, a, a, a) List.tabulate(10)(x=&gt;2*x) // res0: List[Int] = List(0, 2, 4, 6, 8, 10, 12, 14, 16, 18) // 2차원 배열 List.tabulate(10, 10)((x, y) =&gt; x.toString + y.toString) // res0: List[List[String]] = List(List(00, 01, 02, 03, 04, 05, 06, 07, 08, 09), List(10, 11, 12, 13, 14, 15, 16, 17, 18, 19), List(20, 21, 22, 23, 24, 25, 26, 27, 28, 29), List(30, 31, 32, 33, 34, 35, 36, 37, 38, 39), List(40, 41, 42, 43, 44, 45, 46, 47, 48, 49), List(50, 51, 52, 53, 54, 55, 56, 57, 58, 59), List(60, 61, 62, 63, 64, 65, 66, 67, 68, 69), List(70, 71, 72, 73, 74, 75, 76, 77, 78, 79), List(80, 81, 82, 83, 84, 85, 86, 87, 88, 89), List(90, 91, 92, 93, 94, 95, 96, 97, 98, 99)) . 함수 콤비네이터 function combinator . foreach | map | filter | zip | takewhile | partition, span | find | foldRight | flatten | flatmap | . foreach . 개별 요소에 순차적으로 접근하며 Unit을 리턴함 | 사이드 이펙트가 있는 작업을 수행 (ex: println) | . (1 to 10).foreach(println) var sum = 0 (1 to 10).foreach(x =&gt; sum += x) sum // 55 . map . 컬렉션 자체는 유지 한 상태에서 그 안의 요소들만 변경 | . val alphabet = &#39;a&#39; to &#39;z&#39; // ASCII 코드 숫자로 변경해 줌 alphabet.map(x =&gt; x.toInt) // 대문자로 변경 alphabet.map(x =&gt; x.toUpper) . filter, filterNot . 전달한 함수의 참/거짓 값에 따라 특정 요소만을 걸러 내는 함수 | . (1 to 10).filter(_ % 2 == 0) // 2, 4, 6, 8, 10 val alphabet = &#39;a&#39; to &#39;z&#39; val vowels = Vector(&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;) alphabet.fillterNot(a =&gt; vowels.contains(a)) . zip . 요소를 순서대로 짝지음 | 요소의 갯수가 다른 경우 작은 요소로 짝을 맞춤 | List 내의 짝지어진 요소는 Tuple 타입 | . val ns = List(1, 2, 3, 4) val cs = List(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;) ns zip cs // List((1, a), (2, b), (3, c), (4, d)) val ns2 = List(1, 2, 3, 4, 5) val r = ns2 zip cs // List((1, a), (2, b), (3, c), (4, d)) r(3) // (Int, Char) . takeWhile . 조건에 부합 할 때까지 요소를 가져 옴 | 특정 조건에 부합하지 않는 경우, 그 뒤의 요소는 무시됨 | . (1 to 10).takeWhile(_ &lt; 5).toList // List(1, 2, 3, 4) val mNates = List(1, 2, 3, 4, 5, 4, 3, 2, 1) mNats.takeWhile(_ &lt; 5) // List(1, 2, 3, 4) . partition . 참/거짓을 판별하는 조건식을 전달받은 후 조건에 맞게 아이템을 분류함 | span과 다르게 모든 아이템에 조건식 적용함 | 리턴타입은 Tuple2 타입 (List(…), List(…)) | . val ns = (1 to 10).toList val (even, odd) = ns.partition(_ % 2 == 0) // even = (2, 3, 6, 8, 10) // odd = (1, 3, 5, 7, 9) . span . takeWhile과 마찬가지로 조건에 부합할 때까지 요소를 가져옴 | partition과는 다르게 모든 아이템이 조건식 적용함 | 리턴타입은 Tuple2 타입(List(…), List(…)) | . val fruits = List(&quot;orange&quot;, &quot;apple&quot;, &quot;kiwi&quot;, &quot;mango&quot;, &quot;peach&quot;, &quot;pear&quot;, &quot;pineapple&quot;) val res0 = fruits.partition(_.length &gt; 4) // res0 = (List(&quot;orange&quot;, &quot;apple&quot;, &quot;mango&quot;, &quot;peach&quot;, &quot;pineapple&quot;), List(kiwi, pear)) // fail 이 나오기 첫번째 전까지만 분류 val res1 = fruits.span(_.length &gt; 4) // res1 = (List(orange, apple), List(kiwi, mango, peach, pear, pineapple)) . find . 조건에 맞는 첫 번째 요소만 리턴함 | 첫 번째 요소를 찾은 이후 무시됨 | 리턴타입은 Option[T] | . (1 to 10).find(_ % 10 == 0) // Some(5) (1 to 10).find(_ % 11 == 0) // None . reduce . 모든 요소를 순회하며 순차적으로 연산함 | reduceRight는 마지막 요소부터 계산함 | left, right는 조건문이 포함되거나 비가역적 연산인 경우 결과값이 다름 | . nats.reduce((acc, x)) =&gt; acc + x) // 55 alphabet.map(_.toString).reduce(_ + _) // sum, product 함수로 대체 가능 . List(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;).reduce{(a, b) =&gt; println(a + &quot;, &quot; + b) ; a + b} List(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;).reduceRight{(a, b) =&gt; println(a + &quot;, &quot; + b) ; a + b} . foldLeft . 함수형 프로그래밍의 관례에 따라서 /: 연산자로도 쓰임 | 반드시 익숙해져야 하는 함수 | reduceLeft와 비슷하지만 초기 값을 지정할 수 있음 | foldLeft, foldRight는 reduce의 경우와 마찬가지로 접근 방향의 차이임 | . (1 to 10).foldLeft(10)(_ + _) // 65 val fruits = List(&quot;orange&quot;, &quot;apple&quot;, &quot;kiwi&quot;, &quot;mango&quot;, &quot;peach&quot;, &quot;pear&quot;, &quot;pineapple&quot;) fruits.foldLeft(0)((last, s)) =&gt; last max s.length) // 9 . scanLeft . foldLeft와 유사함 | 전달 받은 함수의 과정을 모두 포함함 | . (1 to 10).scanLeft(0)((a, b)) =&gt; b + a) // Vector(0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55) . flatten . 중첩된 컬렉션에서 하위 컬렉션의 요소를 상위 컬렉션으로 포함시킴 | . List(List(1, 2, 3), List(4, 5, 6)).flatten // List(1, 2, 3, 4, 5, 6) . flatMap . fatten, map을 수행함 | monad의 개념을 이해하는 데 필수적임 | . val nns = List(List(1, 2), List(3, 4)) nss.flatMap(x =&gt; x.map(_ * 2)) // res0: List[Int] = List(2, 4, 6, 8) . 실습 . // 대문자 변경 val alphabet = (&#39;a&#39; to &#39;z&#39;).toList alphabet.map(_.toUpper) // 위 방식과 같은 표현 alphabet.map((x: Char) =&gt; x.toUpper) val ns = (1 to 10).toList ns.filter(_ % 3 == 0) ns.filterNot(_ % 3 == 0) // ns: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) // res2: List[Int] = List(3, 6, 9) // res3: List[Int] = List(1, 2, 4, 5, 7, 8, 10) // 숫자가 10까지이므로 10개의 쌍만 나오게 됨 alphabet zip ns // res4: List[(Char, Int)] = List((a,1), (b,2), (c,3), (d,4), (e,5), (f,6), (g,7), (h,8), (i,9), (j,10)) ns.takeWhile(_ % 3 != 0) ns.span(_% 3 != 0) ns.partition(_ % 3 == 0) // res5: List[Int] = List(1, 2) // res6: (List[Int], List[Int]) = (List(1, 2),List(3, 4, 5, 6, 7, 8, 9, 10)) // res7: (List[Int], List[Int]) = (List(3, 6, 9),List(1, 2, 4, 5, 7, 8, 10)) def myFunc(x: Int) : Boolean = x % 3 != 0 ns.takeWhile(myFunc) ns.span(myFunc) ns.partition(myFunc) // res5: List[Int] = List(1, 2) // res6: (List[Int], List[Int]) = (List(1, 2),List(3, 4, 5, 6, 7, 8, 9, 10)) // res7: (List[Int], List[Int]) = (List(1, 2, 4, 5, 7, 8, 10),List(3, 6, 9)) val some = ns.find(_ % 5 == 0) some.get val none = ns.find(_ &gt; 10) val non = ns.find{ println(&quot;-&quot;); _ &gt; 10 } // some: Option[Int] = Some(5) // res8: Int = 5 // none: Option[Int] = None ns.filter{ println(&quot;-&quot;) _ % 2 == 0 } // res9: List[Int] = List(2, 4, 6, 8, 10) val ns = (1 to 10).toList ns.reduce(_ + _) ns.reduce((acc, x) =&gt; acc + x) // res0: Int = 55 // res1: Int = 55 ns.reduce{(acc, x) =&gt; println(acc + &quot;. &quot; + x) acc + x } // 1. 2 // 3. 3 // 6. 4 // 10. 5 // 15. 6 // 21. 7 // 28. 8 // 36. 9 // 45. 10 // res2: Int = 55 // foldLeft는 초기값을 지정할 수 있다 ns.foldLeft(0) {(acc, x) =&gt; println(acc + &quot;. &quot; + x) acc + x } // 0. 1 // 1. 2 // 3. 3 // 6. 4 // 10. 5 // 15. 6 // 21. 7 // 28. 8 // 36. 9 // 45. 10 // res2: Int = 55 val ns = (1 to 10).toList val cs = (&#39;a&#39; to &#39;z&#39;).toList val ss = cs.map(_.toString) // Char vs String 리턴타입이 다르다 // cs: List[Char] = List(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) // ss: List[String] = List(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z) ss.foldLeft(List.empty[String])(_ :+ _) // 풀어쓰면 다음과 같다 ss.foldLeft(List.empty[String])((ls: List[String], x:String) =&gt; ls :+ x) ss.scanLeft(List.empty[String])((ls, x) =&gt; ls :+ x) val ls = List(List(1, 2, 3), List(4, 5, 6)) ls.flatten.map(_ * 2) // res0: List[Int] = List(2, 4, 6, 8, 10, 12) .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/06/Scala-%ED%95%A8%EC%88%98%EC%9D%91%EC%9A%A9.html",
            "relUrl": "/scala/2019/03/06/Scala-%ED%95%A8%EC%88%98%EC%9D%91%EC%9A%A9.html",
            "date": " • Mar 6, 2019"
        }
        
    
  
    
        ,"post248": {
            "title": "[Spark] Spark Streaming",
            "content": "Spark Streaming . Overview . 대규모의 실시간 데이터 처리를 위한 고성능의 장애 허용 framework, Spark Core 확장 API . spark straming은 Kafka, Flume, HDFS/S3, Kinesis, Twitter 등의 다양한 input 소스로부터 받아서 처리하고, 처리된 데이터를 HDFS, Databases, Dashboards 등으로 보내주는 역할을 함 | . Streaming 연산을 아주 작은 batch 작업의 연속으로 처리 . 실시간 stream을 X초의 batch들로 나눔, 0.5초 보다 작은 batch의 지연은 대략 1초 | 각각의 batch는 RDD이고 RDD 연산을 사용하여 처리 가능 | RDD 연산의 처리 결과가 batch에 반환 | . DStream . Spark Streaming의 Programming Model . Stream Data를 표현하는 연속된 RDD | RDD와 마찬가지로 input source에서 생성하거나 Dstream을 transform하여 생성 | RDD 연산을 그대로 사용 –Batch(Historical) Data와 Stream Data를 동일한 방식으로 처리 | . Spark Streaming Application . // spark streaming 예제 package org.apache.spark.examples.streaming import org.apache.spark.SparkConf import org.apache.spark.straming.{Seconds, StreamingContext} object HdfsWordCount { def main(args: Array[String]) { if (args.length &lt; 1) { System.err.println(&quot;Usage: HdfsWordCount &lt;directory&gt;&quot;) System.exit(1) } StreamingExamples.setStreamingLogLevels() val sparkConf = new SparkConf().setAppName(&quot;HdfsWordCount&quot;) val ssc = new StreamingContext(sparkConf, Seconds(2)) val lines = ssc.textFileStream(args(0)) val words = lines.flatMap(_.split(&quot; &quot;)) val wordCounts = words.map(x =&gt; (x, 1)).reduceByKey(_+_) wordCounts.print() ssc.start() ssc.awaitTermination() } } . Start Streaming Programming . Libraries Dependency . Streaming 의존성 추가 | . &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-streaming_2.10&lt;/artifactId&gt; &lt;version&gt;1.5.2&lt;/version&gt; &lt;/dependency&gt; . Streaming programming Structure . // 1. Spark Conf 생성 val sparkConf = new SparkConf().setAppName(&quot;TwitterPopularTags&quot;).setMaster(&quot;local[*]&quot;) // 2. Streaming Context 생성 // 들어오는 단위를 2초단위로 모아서 배치 처리 val ssc = new StreamingContext(sparkconf, Seconds(2)) // 3. Input DStream 생성 val stream = twitterUtils.createStream(ssc) // 4. Streaming 처리 정의 // Business logic // 5. Streaming context 시작 ssc.start() ssc.awaitTermination() // 6. Streaming context 종료 ssc.stop() . Input Dstream . Streaming 소스에서 들어오는 데이터 스트림을 표현하는 것으로 StreamingContext API에서 직접 제공하는 Basic source와 외부 library에 존재하는 Advanced source로 구분 . File Stream을 제외한 모든 input dstream은 하나의 receiver 객체와 연결, 따라서 모든 input dstream은 데이터의 단일 스트림을 받음 | receiver는 streaming application에 할당된 하나의 core 점유 | application에 할당된 core의 개수가 receiver의 개수 보다 작으면 데이터 수집 불가 | application을 로컬에서 하나의 core로 실행하면 처리 불가 | . Input DStreams - Basic Source . actorStream : 아카에서 나오는 데이터를 스트림할 때 사용 | socketTextStream | socketStream | rawSocketStream | fileStream | fileStream | textFileStream | queueStream | queueStream | . Input DStreams - Advanced Source . Twitter (TwitterUtils) | Kafaka (KafkaUtils) : 카프카 토픽에 직접 연결해 데이터를 가져오는 방식 권장 | Flume (FlumeUtils) | Kinesis (KinesisUtils) | MQTT (MQTTUtils) | ZeroMQ (ZeroMQUtils) | . . Transformation Operation . transfrom . def transformU: ClassTag: DStream[U] | def transformU: ClassTag: DStream[U] | Dstream의 모든 RDD 마다 함수를 적용하여 새로운 DStream을 생성, DStream에 직접 사용할 수 없는 RDD 연산 수행 가능, Mllib, GraphX를 Dstream에 직접 적용 가능 | . val spamRDD .. // spam 정보를 담고 있는 RDD val cleanedDStream = wordCounts.transform(rdd =&gt; { rdd.join(spamInfoRDD).filter(...) // DStream의 각 RDD와 spamRDD join }) . UpdateStateByKey . def updateStateByKeyS: ClassTag: DStream[(K, S)] | def updateStateByKeyS: ClassTag: DStream[(K, S)] | def updateStateByKeyS: ClassTag: DStream[(K, S)] | def updateStateByKey[S: ClassTag])updateFunc: (Iterator[(K, Seq[V], Option[S])] =&gt; Iterator[(K, S)], partitioner: Partitioner, rememberPartitioner: Boolean): DStream[(K, S)] | . CheckPointing . 장애 복구를 위한 정보 저장 . Metadata checkpointing: Streaming 구성 정보를 HDFS 같은 장애 허용 저장소에 저장, driver 노드에서 발생한 장애를 복구할 때 사용 Configuration - Streaming application을 생성하는 데 사용했던 구성 정보 | Distream Operaton - Streaming application을 정의하는데 사용했던 DStream 연산 집합 | Incomplete batches - queue에 쌓여 있으나 처리되지 않는 batch 들 | . | Data checkpointing : 생성된 RDD들을 저장, 여러 개의 batch들 사이에서 데이터를 합하는 stateful transformation에서는 필수 (예, updateStateByKey, window operations) | . 설정 방법 . // StreamContext or Spark Context ssc.checkpoint(directory) //DStream stream.checkpoint(Duration) . Driver 실패 복구 . def functionToCreateContext() : StreamingContext = { val ssc = new StreamingContext(...) // new context val lines = ssc.socketTextStream(...) // create DStreams ssc.checkpoint(checkpointDirectory) // set checkpoint directory ssc } // Get StreamingContext from checkpoint data or create a new one val context = StreamingContext.getOrCreate(checkpointDirectory, functionToCreateContext_) . Operation . Transformation . map(func), flatMap(func), filter(func), count() | repartiton(numPartitons) | union(otherStream) | reduce(func), countByValue(), reduceByKey(func, [numTasks]) | join(otherStream, [numTasks]), cogroup(otherStream, [numTasks]) | transform(func) | updateStateByKey(func) | . Window . window(length, interval) | countByWindow(length, interval) | reduceByWindow(func, length, interval) | reduceByeKeyAndWindow(func, length, interval, [numTasks]) | countByValueAndWindow(length, interval, [numTasks]) | . Output . Print() | foreachRDD(func) | saveAsObjectFiles(prefix, [suffix]) | saveAsTextFiles(prefix, [suffix]) | saveAsHadoopFiles(prefix, [suffix]) | . window length : window의 기간 . sliding interval : window 연산이 수행되는 간격 (batch 크기의 배수로 지정해야 함) . checkpointing 필수 : checkpointing duration은 sliding interval의 5~10배가 적당 . Window Operation(Transformation) . window . def window(windowDuration: Duration) | def window(windowDuration: Duration, slideDuration: Duration) | 새로운 window DStream 생성 | . countByWindow . def countByValueAndWindow( WindowDuration: Duration, slideDuration: Duration, numPartitions: Int = ssc.sc.defaultParallelism)(implicit ord: Ordering[T] = null) : DStream[(T, Long)] | Window item count 함수 | . countByValueAndWindow . def countByValueAndWindow( windowDuration: Duration, slideDuration: Duration, numPartitions: Int = ssc.sc.defaultParallelism)(implicit ord: Ordering[T] = null) : DStream[(T, Long)] | windowDuration 동안의 데이터를 Key, 해당 데이터의 개수를 Value로 담고 있는 DStream 생성 | . reduceByWindow . def reduceByWindow(reduceFunc: (T, T) =&gt; T, windowDuration: Duration, slideDuration: Duration): DStream[T] | def reduceByWindow(reduceFunc: (T, T) =&gt; T, invReduceFunc: (T, T) =&gt; T, windowDuration: Duration, slideDuration: Duration): DStream[T] | Window reduce 함수 | . val retweetCnt = stream.map(status =&gt; statusgetRetweetCount) val retSum = retweetCnt.reduceByWindow(_+_, Secounds(4), Seconds(4)) retSum.print val retSum = retweetCnt.reduceByWindow(_+_,_-_, Seconds(4), Seconds(4)) retSum.print . Join Operation . join . val stream1 = DStream[String, String] = ... val stream2 = DSTream[String, String] = ... val joinedStream = stream1.join(stream2) . window join . val windowedStream1 = stream1.window(Seconds(20)) val windowedStream2 = stream2.window(Minutes(1)) val joinedStream = windowedStream1.join(windowedStream2) . Stream dataset join . val dataset: RDD[String, String] = ... val windowedStream = stream.window(Seconds(20)) val joinedStream = windowedStream.transform { rdd =&gt; rdd.join(dataset)} . Output Operation . print . def print() | 드라이버 노드에서 실행되며 DStream의 각 배치에서 처음 10개의 데이터 출력, 개발시에 디버깅 용도로 유요 | . foreachRDD . def foreachRDD(foreachFunc: RDD[T] =&gt; Unit) | def foreachRDD(foreachFunc: (RDD[T], Time) =&gt; Unit) | Dstream 안의 각 RDD에 foreachFunc 적용, RDD를 파일로 저장하거나 네트워크를 통해 데이터베이스에 저장하는 것 처럼 각 RDD를 외부 시스템으로 보냄, foreachFunc 함수는 stream application이 실행되고 있는 드라이버 프로세스에서 실행되고 보통 RDD action을 가지고 있어서 스트림의 RDD 연산 수행 | . foreachRDD Design Pattern . dstrem.foreachRDD(rdd =&gt; { val connection = createNewConnection() // executed at the driver rdd.foreach(record =&gt; { connection.send(record) // executed at the worker }) }) // connection 객체가 각 worker로 보내져야 함 // connection 객체는 직렬화 할 수 없음 dstream.foreachRDD(rdd =&gt; { rdd.foreach(record =&gt;{ val connection = createNewConnection() connection.send(record) connection.close() }) }) // 모든 record마다 connection을 만드는 대신 파티션마다 connection 생성 dstream.foreachRDD(rdd =&gt; { rdd.foreachPartition(record =&gt; { val connection = createNewConnection() record.foreach(r =&gt; connection.send(r)) connection.close() }) }) // ConnectionPool 사용 dstream.foreachRDD(rdd =&gt; { rdd.foreachPartition(record =&gt; { val connection = ConnectionPool.getConnection() record.foreach(r =&gt; connection.send(r)) ConnectionPool.returnConnection(connection) }) }) . Spark Stream 예제 . // NetworkWordCount import org.apache.spark.SparkConf import org.apache.spark.streaming.{Seconds, StreamingContext} import org.apache.spark.storage.StorageLevel object NetworkWordCount { def main(args: Array[String]) { if (args.length &lt; 2) { System.err.println(&quot;Usage: NetworkWordCount &lt;hostnmae&gt; &lt;port&gt;&quot;) System.exit(1) } StreamingExamples.setStreamingLogLevles() // Create the context with a 1 second batch size val sparkConf = new SparkConf().setAppname(&quot;NetworkWordCount&quot;) val ssc = new StreamingContext(sparkConf, Seconds(1)) // Create a socket stream on target ip: port and count the words // in input stream of n delimited text (eg. generated by &#39;nc&#39;) // Note that no duplication in distributed scenario for fault tolerance // Replication necessary in distributed scenario for fault tolerance // hostname은 args(0), port는 args(1)로 받는다 val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER) val word = lines.flatMap(_.split(&quot; &quot;)) val wordCounts = words.mp(x =&gt; (x, 1)).reduceByKey(_+_) wordCounts.print() ssc.start() ssc.awaitTermInation() } } . // StatefulNetworkWordCount object StatefulNetworkWordCount { def main(args: Array[String]) { if (args.lenth &lt; 2) { System.err.println(&quot;Usage: StatefulNetworkWordCOunt &lt;hostname&gt; &lt;port&gt;&quot;) System.exit(1) } StreamingExamples.setStreamingLogLevelIs() val updateFunc = (values: Seq[Int], state: Option[Int]) =&gt; { val currentCount = values.sum val previousCount = state.getOrElse(0) some(currentCount + previousCount) } val newUpdateFunc = (iterator: Iterator[(String, Seq[Int], Option[Int])]) =&gt; { iterator.flatMap(t =&gt; updateFunc(t._2, t._3)).map(s =(t._1, s)) } val sparkConf = new SparkConf().setAppName(&quot;StatefulNetworkWordCount&quot;) // Create the context with a 1 second batch size // 현재 디렉토리 . 에 체크포인트 저장이 된다. val ssc = new StreamingContext(sparkConf, Seconds(1)) ssc.checkpoint(&quot;.&quot;) // Initial RDD input to updateStateByKey val initialRDD = ssc.sparkContext.parallelize(List((&quot;hello&quot;, 1), (&quot;world&quot;, 1))) // Create a ReceiverInputDStream on target ip:port and count the words // in input stream of n delimited test (eg. generated by &#39;nc&#39;) val lines = ssc.socketTextStream(args(0), args(1).toInt) val words = lines.flatMap(_.split(&quot; &quot;)) val wordDStream = words.map(x =&gt; (x, 1)) // Update the cumulative count using updateStateByKey // This wil give a DStream made of state (which is the cumulative count of the words) vla stateDstream = wordDstream.updateStateByKey[Int](newUpdateFunc, new HashPartitioner (ssc.sparkContext.defaultParallelism), true, initialRDD) stateDstream.print() ssc.start() ssc.awaitTermination() } } . // 9999 포트가 점유되고 있는지 확인 $ netstat -anp | grep 9999 // shell1 : netcat 접속 $ nc -lk 9999 // shell2 : spark 하위 bin 디렉토리에서 $ ./run-example streaming.StatefulNetworkWordCount localhost 9999 // shell1 에서 단어를 치면 실시간으로 shell2에서 단어가 집계가 된다 . tweeter 인증키 얻는 방법 . https://apps.twitter.com | Create app | 자신의 트위터 계정의 핸드폰 번호가 등록되어야 함 | Keys and Access Tokens 확인 | Your Access Token 생성 | 한국어만 집계하도록 등록할 수 있음 | Consumer Key, Comsumer Key Secret, Access Token, Access Token Secret | . $ ./run-example streaming.TwitterPoularTags &lt;Consumer Key&gt; &lt;Consumer Key Secret&gt; &lt;Access Toeken&gt; &lt;Access Token Secret&gt; . TwitterReader.scala . object TwitterReader extends App { System.setProperty(&quot;twitter4j.oauth.consumerKey&quot;, args(0)) System.setProperty(&quot;twitter4j.oauth.consumerSecret&quot;, args(1)) System.setProperty(&quot;twitter4j.oauth.accessToken&quot;, args(2)) System.setProperty(&quot;twitter4j.oauth.accessTokenSecret&quot;, args(3)) val conf = new SparkConf().setAppName(&quot;TwitterReader&quot;).setMaster(&quot;local[*]&quot;) val ssc = new StreamingContext(conf, Seconds(5)) val filters = Array() val tweets = TwitterUtils.createStream(ssc, None) tweets.foreachRDD( rdd =&gt; { rdd.foreach(status =&gt; { println(&quot;text ==&gt; %s&quot;.format(status.getText)) println(&quot;id ==&gt; %s&quot;.format(status.getId)) println(&quot;retweet cot ==&gt; %s&quot;.status.getRetweetCount) }) }) ssc.start() ssc.awitTermination() } . dependency 추가, spark-streaming-twitter는 spark 2.0.0 이상의 버전부터는 지원하지 않음, 따라서 org.apache.bahir에서 써야 함 | . &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-streaming_${scala.binary.version}&lt;/artifactId&gt; &lt;version&gt;${spark.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.bahir&lt;/groupId&gt; &lt;artifactId&gt;spark-streaming-twitter_${scala.binary.version}&lt;/artifactId&gt; &lt;version&gt;2.0.1&lt;/version&gt; &lt;/dependency&gt; .",
            "url": "https://safenumz.github.io/blog/spark/2019/03/05/Spark-Spark_Streaming.html",
            "relUrl": "/spark/2019/03/05/Spark-Spark_Streaming.html",
            "date": " • Mar 5, 2019"
        }
        
    
  
    
        ,"post249": {
            "title": "[Scala] 구조 (1)",
            "content": "Scala 구조 . SBT . Simple Build Tool . SBT는 빌드 도구로써 스칼라에서 많이 사용됨 . Java에서 많이 쓰는 Maven과 같이 생각하면 편리함 | . SBT 사용 이유 . 의존성 관리 | 연속 명령 실행 | REPL 실행 가능 | . SBT 실습 . SBT 실행 . sbt 명령어 실행 | 신규 프로젝트 생성 | 내부 디펜던시는 Apache lvy를 사용 함 | 프로젝트 구조는 자바의 maven과 거의 유사함 | . SBT 구조 . lib/ project/ src/ main/ resources/ scala/ test/ resources/ scala/ target/ . sbt로 신규 프로젝트 생성 | maven 홈페이지에서 rxjava 버전 클릭후 SBT 코드 복사 | build.sbt 파일에 libraryDependencies 추가 | . 클래스 . 클래스 . 자바의 클래스와 동일한 역할을 함 | . 생성자 . classs Simple { // 필드와 메소드를 둘 다 멤버라고 불림 private var value = 1; def increment() {value += 1} def current() = value } . 접근 권한 . 디폴트가 public으로 설정되어 있음 . public, protected, private 사용은 자바와 거의 유사 . ex : simple2의 values를 private로 설정하면 외부에서 직접 값 변경(simple2.value = 10)이 불가능 함 | private[this]와 같은 방식으로 this 객체 내부로 접근 제한이 가능 | 접근권한[패키지이름]과 같이 package의 접근 권한도 제어 가능 | . 프로퍼티 . 예제 Class . class Person{ var age = 0 } . property(getter, setter) 접근을 위한 코딩하지 않아도 사용가능 . println(person1.age) person1.age = 20 . 프로퍼티 실습 . 추가 가능 . 게터와 세터(_=)를 직접 재정의 할 수 있음 | . 실습 코드 . . 클래스 생성자 . 기본 생성자 . class Person(val name: String, val age: Int) { println(&quot;Person Class&quot;) } . 보조 생성자 . 자바와 유사하게 1개 이상의 생성자를 가질 수 있음 | 보조 생성자는 this를 이용함 | 보조 생성자 코드는 기본 생성자나 이전에 생성한 보조 생성자 호출로 시작해야 함 | . 객체 . 스칼라에는 static 메소드와 멤버가 없음 | 대신 object 구문을 사용하여 클래스의 단독 인스턴스를 정의 | 이것을 싱글톤 오브젝트라고 부름 | 싱글톤 오브젝트는 new 키워드로 instantiate할 수 없기 때문에 파라미터를 전달할 수 없음 | 선언 문법 클래스 선언 방법이 거의 동일하며 class 대신 object 사용 | . | . 동반 객체(Companion Object) . 싱글톤 객체의 이름이 어떤 클래스와 같을 때 | . 동반 클래스(Companion Class) . 해당 클래스를 지칭 | . package . 프로그램에서 이름을 관리하여 커플링을 최소화하는 역할 | 자바에 비해 유연하고 다양한 방식 제공 | 중첩 할 수 있으며 경로는 절대가 아님 | 기본 구조 | . package com.phoenix{ class A } . 중첩 | . package com { pakage phoenix { class A } } . 중괄호 생략 가능 | 클래스 선언 후에도 package 선언 가능 | 디렉토리 구조와 소스 코드 구조가 일치하지 않아도 됨 | . import . 긴 이름 대신 짧은 이름을 쓸 수 있게 해줌 | 패키지와 그 맴버를 import를 통해 불러올 수 있음 | 스칼라의 import는 자바의 import보다 유연 아무곳이나 올 수 있음 | 심지어 함수 내부에서 import를 사용할 수도 있음 | 패키지뿐만 아니라 객체도 참조할 수 있음 | 멤버 이름을 수믹거나 다른 이름 지정도 가능 | . | . single type import . 클래스에 접근 | . On-demand import . 모든 멤버에 접근 | . static class import . 특정 클래스의 모든 멤버에 접근 | . 암묵적 임포트 . 스칼라는 모든 프로그램에 몇 가지 임포트를 항상 추가함 | import java.lang._ | import scala._ | import Predef._ . | List라고 흔히 사용하지만 실제로는 scala.List임 | . local function . 프로그램을 작은 함수들로 나눔 . 장점 : 복잡한 작업을 유연하게 구성 | 단점 : 헬퍼 함수들의 이름이 네임스페이스를 더럽힐 수 있음 | . 헬퍼함수는 하나의 개별 단위로는 의미가 없기 때문에 감추는 것이 바람직 . local function : 함수내에 함수를 정의 | . // local function def processFile(filename: String, width: Int) { def processLine(filename: String, width: Int, line: String) { if (line.lenght &gt; width) println(fielname + &quot;: &quot; + line.trim) } val source = Source.fromFile(filename) for (line &lt;- source.getLines()){ processLine(filename, width, line) } } . First-clas functions . 스칼라에는 first-class 함수가 있음. 함수를 정의하고 호출하고 이름을 주지 않고 리터럴로 작성해서 값으로 전달할 수 있음. | function literal은 클래스로 컴파일되고 런타임시에 fuction value가 됨. function literal과 function value의 차이는 소스코드에 존재하느냐, 런타임시에 객체로 존재하느냐의 차이임 | (x: Int) =&gt; x + 1 | 함수값은 객체이므로 변수에 정의할 수 있음 | . scala&gt; var increase = (x: Int) =&gt; x + 1 increase: (Int) =&gt; Int = &lt;function1&gt; scala&gt; increase(10) res0: Int = 11 . function value는 scala.FunctionN trait를 확장한 클래스의 인스턴스임, 이 trait는 apply 메서드를 이용해 function을 호출함 | . Closure . (x: Int) =&gt; x + more에서 more는 함수리터럴이 주지 않는 값이므로 free variable라고 부르고 x는 함수의 컴텍스트내에 있으므로 bound variable라고 부름 | 이렇게 free variable이 포함된 function value를 closure라고 부름 free variable이 포함되지 않은 function literal은 closed term | free variable이 포함된 function literal은 open term | . | open term인 function literal이 free variable을 ‘capture’해서 만들어진 function value가 closure | 클로저가 참조한 변수의 값이 바뀔경우 참조하는 클로저의 값도 변경됨 cf: java의 inner class는 final 변수만들 받아들이므로 값이 바뀔 수가 없음 | . | cloure가 바라보는 free variable의 인스턴스는 closure가 생성된 시점의 인스턴스임 | . Special function call forms . Repeated parameters . java의 가변인자(var args)와 동일한 의미 | 마지막 파라미터가 여러개일 수 있다는 의미로 타입뒤에 *를 써줌, def echo(args: String*) = body | repeated parameter의 타입은 선언된 타입의 배열이 되지만 배열로 파라미터를 전달할 수는 없음, 배열로 전달하려면 echo(arr: _)처럼 _를 사용해야 함 | . Named arguments . Named arguments는 순서에 상관없이 이름으로 파라미터를 전달할 수 있음, method(a=100, b=10) | . 파라미터 기본값 . 함수 파라미터에 기본값을 지정해서 호출시 생략할 수 있음, def a(b=10) 보통 named arguments와 함께 쓰임 | . 상속 . extend와 final은 자바와 동일 함 | override . | 기본 생성자만이 기본 슈퍼 클래스 생성자를 호출할 수 있음 | 필드 오버라이드 | . class Person(_name: String, _age: Int){ var name = _name var age = _age } val person = new Person(&quot;Brandon&quot;, 40) person.age person.age = 20 person.age // person: Person = Person@4055b336 // res0: Int = 40 // person.age: Int = 20 // res1: Int = 20 . // 제한 조건을 벗어난 값이 입력될 때 에러를 발생시킬 수 있다 class Person(){ var name:String = &quot;Brandon&quot; var _age = 40 def age = _age def age_= (x: Int): Unit = { if(x &lt; 0) throw new IllegalArgumentException(&quot;&quot;) else _age = x } } // 나이는 마이너스가 될 수 없기 때문에 에러가 뜬다 val person = new Person() person.age = -1 // person: Person = Person@3d3cd9b9 // java.lang.IllegalArgumentException: // at Person.age_$eq(&lt;console&gt;:16) // ... 40 elided . case class Person(name:String, age: Int) val p1 = new Person(&quot;Brandon&quot;, 40) p1.name p1.age // res0: String = Brandon // res1: Int = 40 . // 주생성자 this를 반드시 다시 써줘야 case class Person(name:String, age: Int){ def this(name: String) { this(name, 40) } def this(name: String, age: Int, c: Char){ this(name, age) } } . // 상호간의 비공개 필드에도 접근할 수 있음 // 동반 객체 // object에는 유틸, 자바로 치면 Static 매소드를 모아둠 object MyClass{ } // 동반 클래스 // 클래스 인스턴스 메소드들을 모아둠 class MyClass{ } . 레퍼런스 . Scala Documenation | Programming in Scala | Scala for Java Developers | Scala for impatient | Scala School | .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/05/Scala-%EA%B5%AC%EC%A1%B0_(1).html",
            "relUrl": "/scala/2019/03/05/Scala-%EA%B5%AC%EC%A1%B0_(1).html",
            "date": " • Mar 5, 2019"
        }
        
    
  
    
        ,"post250": {
            "title": "[Spark] Spark Core",
            "content": "Spark Core . Spark Application Structure . Spark Context 생성 -&gt; RDD 생성 -&gt; RDD Transformation -&gt; Action | . Spark Context . val conf = new SparkConf().setAppName(appName).setMaster(masterURL) val sc = new SparkContext(conf) . appName: Application 이름 | masterURL : Spark Master URL | . Spark Mater URL . local : 하나의 Worker thread로 로컬 실행(parallelism 아님) | local[n] : N개의 worker thread로 로컬 실행(core 개수로 설정) | local[*] : 가능한 최대의 worker thread로 로컬 실행(최대 core 수) | spark://HOST:PORT : Spark standalone cluster URL | mesos://HOST:PORT : Mesos cluster url | mesos://zk://HOST:PORT : Zookeeper를 사용하는 mesos cluster URL | yarn-client : Yarn cluster(client mode) | yarn-cluster : Yarn cluster(cluster mode) | . RDD 생성 . Parallelized Collection : Collection을 이용하여 병렬화 된 RDD 생성 . paralleize function의 두번째 인자는 파티션 개수, 지정하지 않으면 클러스터의 CPU에 기반하여 자동할당 | . val data = Array (1, 2, 3, 4, 5) // parallelize 메소드를 사용하여 RDD로 만듬 val disData = sc.parallelize(data) // RDD가 되었기 때문에 first나 count 같은 RDD 명령어를 사용할 수 있음 distData.first // res4: Int = 1 distData.count // res5: Long = 5 val data 1 to 100000 // 5개의 파티션으로 나뉜 RDD 생성 val distData = sc.parallelize(data, 5) . Exteranl Datasets : 외부 저장소로부터 RDD 생성 . local file system, HDFS, Casandara, Hbase, Amazon S3, ElasticSearh 등 | textFile Function의 두번쨰 인자는 파티션 개수(기본값: 각 block 당 1개, 64MB) | 두번째 인자는 block보다 작게 지정할 수 없음 | . val file = sc.testFile(&quot;/tmp/data.txt&quot;) val file = sc.textFile(&quot;/directory&quot;) val file = sc.textFile(&quot;/directory/*.txt&quot;) val file = sc.textFile(&quot;/directory/*.gz&quot;, 5) val file: RDD[String] = sc.textFile(&quot;/tmp&quot;) val file: RDD[String, String] = sc.wholeTextFile(&quot;/tmp&quot;) . // spark home 디렉토리에 있는 모든 RDD를 읽어옴 val textFile = sc.textFile(&quot;..&quot;) // RDD의 처음 확인, 에러 나옴, 각기 다른 형태의 파일이기 때문에 textFile.first // java.lang.RuntimeException: Error while running command to get file permissions // wholeTextFiles는 파일이름을 키로, 그 파일의 내용을 밸류로 갖는 RDD를 생성하기 때문 그 디렉토리 안에 여러 다른 파일들이 섞여 있어도 RDD 오퍼레이션이 문제 없이 수행 된다 val wtextFile = sc.wholeTextFiles(&quot;..&quot;) wtextFile.first . Transformation Operation . RDD를 변형시켜서 새로운 Opertaion을 만들어 냄 | Action Operation는 RDD의 실제 동작이 일어나게 함 | . map . 함수를 통하여 소스의 각 요소를 전달하여 만든 새로운 RDD 생성 | . def map [U: ClassTag](f: =&gt; U): RDD[U] . rdd.map(_*2).collect // Array[Int] = Array(2, 4, 6, 8, 10)| rdd.map(=&gt;(x.toString, (x*x*x).toDouble)).collect| // Array[(String, Double)] = Array((1, 1.0), (2.8, 0), (3, 27.0), (4, 64.0), (5, 125.0)| . // map 예제 // 숫자 1부터 5까지의 RDD 생성 val rdd = sc.parallelize(1 to 5) // action operator의 하나 rdd에 있는 내용을 리스트로 변환해서 반환하라는 의미 rdd.map(_*3).collect // rdd.map(x =&gt; x*3).collect // res9: Array[Int] = Array(3, 6, 9, 12, 15) val newrdd = rdd.map(_*3) newrdd.collect // res10: Array[Int] = Array(3, 6, 9, 12, 15) . filter . 함수가 참을 반환하는 소스의 각 요소를 선택하여 만든 RDD 생성 | . def filter (f : T =&gt; Boolean) : RDD[T] . rdd.filter(_%2!=0).collect // Array[Int] = Array(1, 3, 5) . // filter 예제 // 짝수인 것만 찾음 rdd.filter(_%2 == 0).collect // res11: Array[Int] = Array(2, 4) . flatMap . map과 비슷하지만 함수의 결과가 하나 이상이 나올 수 있음 | Function은 단일 item이 아닌 Sequence를 반환해야 함 | . def fatMap [U: ClassTag](f: T =&gt; TraversableOnce[U]) : RDD[U] . rdd.flatMap(1 to _).collect // Array[Int] = Array(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5) rdd.map(x =&gt; x) vs. rdd.flatMap(x =&gt; x) rdd.map(x =&gt; List(x)) vs. rdd.flatMap(x =&gt; List(x)) . // flatMap 예제 // base rdd 생성 val rdd = sc.parallelize(1 to 5) // 기존의 rdd를 map 명령어로 바꿔서 rdd.map(1 to _).collect // res12: Array[scala.collection.immutable.Range.Inclusive] = Array(Range(1), Range(1, 2), Range(1, 2, 3), Range(1, 2, 3, 4), Range(1, 2, 3, 4, 5)) rdd.flatMap(1 to _).collect // res13: Array[Int] = Array(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5) rdd.map(x=&gt;x).collect // res15: Array[Int] = Array(1, 2, 3, 4, 5) // 시퀀스 요소가 아니라 단일 요소를 리턴하고 있기 때문에 flatMap을 사용할 수 없다. rdd.flatMap(x=&gt;x).collect // &lt;console&gt;:26: error: type mismatch; // found : Int // required: TraversableOnce[?] // rdd.flatMap(x=&gt;x).collect rdd.map(x=&gt;List(x)).collect // res18: Array[List[Int]] = Array(List(1), List(2), List(3), List(4), List(5)) rdd.flatMap(x=&gt;List(x)).collect // res19: Array[Int] = Array(1, 2, 3, 4, 5) . mapPartitions . 각 파티션(블록)별로 각자 수행되는 map fuction, 각 파티션의 모든 content는 입력함수(f: Iterator[T])를 통해 값들의 sequence로 변환될 수 있어야 하며 그 함수는 Iterator[U]를 반환해야 한다 | . def mapPartitions [U: ClassTag](f: Iterator[T] =&gt; Iterator[U], preservesPartitioning : Boolean = false) : RDD[U] . def myfunc[T](iter: Iterator[T]): Iterator[(T, T)] = { val tc = TaskContext.get() // mapPartitionWithContext println(&quot;PartitionID : %s, Attempt ID : %s&quot;.format(tc.partitionId(), tc.attempId())) var res = List[(T, T)](); var pre = iter.next while (iter.hasNext) { val cur = iter.next; res.::=(pre, cur); pre = cur; } res.iterator } rdd.mapPartition(myfunc_).collect val rdd = sc.parallelized(1 to 9, 3); rdd.mapPartitions(myfunc).collect . // mapPartitions 예제 import org.apache.spark.SparkContext. object RddOperationSuit extends App { val conf = new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;RddOperation&quot;) val sc = new SparkContext(conf) def myfunc[T](iter: Iterator[T]): Iterator[(T, T)] = { val tc = TaskContext.get() print(&quot;Partition ID: %s, Attempt ID: %s&quot;.format(tc.partitionId(), tc.attemptId())) var res = List[(T, T)]() var pre = iter.next while (iter.hasNext){ val cur = iter.next res .:: = (pre, cur) pre = cur } res.iterator } val rdd = sc.parallelize(List(1, 2, 3, 4, 5, 6, 7, 8, 9), 3) val mapPartitionRdd = rdd.mapPartitions(myfunc_).collect mapPartitionRdd.foreach(println) def myfunc2(index: Int, iter: Iterator[Int]): Iterator[String] = { println(&quot;Partition ID: %s&quot;.format(index)) iter.toList.map(x =&gt; index + &quot;,&quot; + x).iterator } val mapPartitionsWithindexRdd = rdd.mapPartitionsWithIndex(myfunc2).collect mapPartitionsWithIndexRdd.foreach(println) } . mapPartitionsWithIdex . f 함수의 첫번째 인자 : 파티션 번호 | . def mapPartitionsWithIndex[U: ClassTag](f: (Int, Iterator[T]) =&gt; Iterator[U], preservesPartitioning: Boolean = false): RDD[U] . def myfunc(index: Int, Iter: Iterator[Int]): Iterator[String] = { iter.toList.map(x=&gt; index + &quot;,&quot; + x).iterator } rdd.mapPartitionsWithIndex(myfunc).collect // Array(0,1, 0,2, 1,3, 1,4, 1,5, 2,6, 2,7, 3,8, 3,9, 3,10) . sample . Fraction과 seed를 이용하여 RDD의 item들을 무작위로 선택하여 새로운 RDD 생성, withReplacement가 true이면 값이 여러번 나올 수 있음 | . def sample(withReplacement: Boolean, fraction: Double, seed: Int): RDD[T] . rdd.sample(false, 0.5, 1).collect // Array(2, 4, 5, 6, 7, 8) rdd.sample(true, 0,5, 1).collect // Array(1, 6, 6, 7, 7, 9, 10) . // sample 예제 val rdd = sc.parallelize(1 to 20) rdd.collect // res95: Array[Int] = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) // 전체 수의 50% 정도를 샘플링 rdd.sample(false, 0.5, 1) // res97: Array[Int] = Array(1, 6, 8, 10, 12, 15, 16, 17, 19, 20) . union . def union(other:[RDD[T]]): RDD[T] | 합집합 | . a.union(b).collect; (a ++ b).collect . intersection . def intersection(other: RDD[T], numPartitions: Int): RDD[T] | 교집합 | . // HashPartitioner를 이용하여 3의 파티션에 저장 rdd.interaction(other, 3) // myPart를 이용하여 파티션에 저장 rdd.interaction(other, myPart) . distinct . def distinct(): RDD[T] | 중복제거 | . groupBy . def groupByK: ClassTag: RDD[(K, Iterable[T])] | 함수에 따른 그룹화 | . rdd.groupBy(x =&gt; x % 2 match {case 0 =&gt; &quot;even&quot;; case_ =&gt; &quot;odd&quot;}).collect // Array[(String, Iterable[Int])] = Arry((even, CompactBuffer(2, 4, 6, 8, 10)), (odd, CompactBuffer(1, 3, 5, 7 ,9))) . // groupBy 예제 rdd.groupBy(x =&gt; x % 2 match { case 0 =&gt; &quot;even&quot; case _ =&gt; &quot;odd&quot; }).collect // res105: Array[(String, Iterable[Int])] = Array((even,CompactBuffer(2, 4)), (odd,CompactBuffer(1, 3, 5))) . groupByKey . def groupByKey(): RDD[(K, Iterable[V])] | def groupByKey(numPartitions: Int): RDD[(K, Iterable[V])] | def groupByKey(partitioner: Partitioner): RDD[(K, Iterable[V])] | 그룹화를 위한 함수를 제공하지 않고 partitioner에 의한 자동 분류 | 주의: 각 키마다의 집계(합 또는 평균 같은)를 수행하기 위해 군집화를 수행하려 한다면, reduceByKey나 comebineByKey를 사용하는 것이 성능이 좋을 것이다 | 주의: 기본적으로, 출력의 병렬화 수준은 부모 RDD의 파티션 숫자에 의존한다 | . val myPartitioner = rdd.keyBy(_%2) myPartitioner.groupByKey.collect // Array[(Int, Iterable[Int])] = Array((0, CompactBuffer(2,4,6,8,10)),(1,CompactBuffer(1,3,5,7,9))) . // groupByKey 예제 val part = rdd.keyBy(_%2) part.collect // res108: Array[(Int, Int)] = Array((1,1), (0,2), (1,3), (0,4), (1,5)) part.groupByKey.collect // res110: Array[(Int, Iterable[Int])] = Array((0,CompactBuffer(2, 4)), (1,CompactBuffer(1, 3, 5))) . reduce (Action Operation) . def reduce(f: (T, T) =&gt; T): T | Reduce 함수, 항상 동일한 결과를 얻으려면 함수 f는 반드시 commutative 해야 함 | . // 순서가 섞이기 때문에 -는 실행할 때마다 결과가 달라질 수 있다 rdd.reduce(_+_); rdd.reduce(_-_) . reduceByKey . def reduceByKey(func: (V, V) =&gt; V): RDD[(K, V)] | def reduceByKey(func: (V, V) =&gt; V, numPartitions: Int): RDD[(K, V)] | def reduceByKey(partitioner: Partitioner, func: (V, V) =&gt; V): RDD[(K, V)] | def reduceByKeyLocally(func: (V, V) =&gt; V): Map[K, V] | RDD[(K, V)]에 대한 reduce 함수 | . val mappedRdd = rdd.map(x =&gt; (x%2, x)) mappedRdd.reduceByKey(_+_).collect // Array[(Int, Int)] = Array((0, 30), (1, 25)) . // reduceByKey val pair = rdd.map(x =&gt; x%2, x) pair.collect // res113: Array[(Int, Int)] = Array((1,1), (0,2), (1,3), (0,4), (1,5)) pair.reduceByKey(_+_).collect // res116: Array[(Int, Int)] = Array((0,6), (1,9)) . aggregate (Action Operation) . def aggregateU: ClassTag(seqOp: (U, T) =&gt; U, combOp: (U, U) =&gt; U): U | RDD 각 파티션의 데이터를 seqOp함수로 reduce하여 combOp 함수로 combine. 이 떄, zeroValue는 각 파티션에서 reduce의 처음에서 적용되고 combine 시 다시 한번 적용 | . val z = sc.parallelize(List(1, 2, 3, 4, 5, 6), 2) z.aggregate(0)(math.max(_,_),_+_) // 9 val z = sc.parallelize(List(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;), 2) z.aggregate(&quot;&quot;)(_+_, _+_) // xxdefxabc . // aggregate 예제 // 파티션이 2개기 때문에 1번째 파티션에는 1,2,3이 2번째 파티션에는 4,5,6이 들어가 있다 val z = sc.parallelize(List(1, 2, 3, 4, 5, 6), 2) z.collect // res119: Array[Int] = Array(1, 2, 3, 4, 5, 6) // 파티션1의 max값은 3, 파티션2의 max값은 6이다 // 0 + 3 + 6 z.aggregate(0)(math.max(_,_), _+_) // res123: Int = 9 // 1 + 3 + 6 z.aggreate(1)(math.max(_,_), _+_) // res127: Int = 10 // 10이 가장 크다 // 10 + 10 + 10 = 30 z.aggreate(10)(math.max(_,_), _+_) // res125: Int = 30 . agrregateByKey . def aggregateByKeyU: ClassTag(seqOp: (U, V) =&gt; U, combOp: (U, U) =&gt; U): RDD[(K, U)] | def aggregateByKeyU: ClassTag(seqOp: (U, V) =&gt; U, combOp: (U, U) =&gt; U): RDD[(K, U)] | def aggregateByKeyU: ClassTag(seqOp: (U, V) =&gt; U, combOp: (U, U) =&gt; U): RDD[(K, U)] | RDD[(K, V)]에 대한 aggregate 함수 | . val mappedRdd = rdd.map(x =&gt; (x%2, x)) mappedRdd.aggregateByKey(0)(math.max(_,_), _+_).collect // Array((0, 18), (1, 17)) . sortBy . def sortByK(implicit ord: Ordering[K], ctag: ClassTag[K]): RDD[T] | 정렬 | . val z = sc.parallelize(Array((&quot;H&quot;, 10), (&quot;A&quot;, 26), (&quot;Z&quot;, 1), (&quot;L&quot;, 5))) z.sortBy(c =&gt; c._1, true).collect // Array((A, 26), (H, 10), (L, 5), (Z, 1)) z.sortBy(c =&gt; c._2, true).collect // Array((Z, 1), (L, 5), (H, 10), (A, 26)) . sortByKey . def sortByKey(ascending: Boolean = true, numPartions: Int = self.partitions.size): RDD[P] | RDD[(K, V)]에 대한 sortBy 함수 | . val a = sc.parallelize(List(&quot;dog&quot;, &quot;cat&quot;, &quot;owl&quot;, &quot;gnu&quot;, &quot;ant&quot;), 2) val b = sc.parallelize(1 t0 a.count.toInt, 2) val c = a.zip(b) c.sortByKey(true).collect //Array((ant, 5), (cat, 2), (dog, 1), (gnu, 4), (owl, 3)) c.sortByKey(false).collect // Array((owl, 3), (gnu, 4), (dog, 1), (cat, 2), (ant, 5)) . join, leftOuterJoin, rightOuterJoin, fullOuterJoin . def joinW: RDD[(K, (V, W))] | def joinW: RDD[(K, (V, W))] | def joinW: RDD[(K, (V, W))] | RDD[(K, V)]에 대한 inner Join 함수 | . val a = sc.parallelize(List(&quot;dog&quot;, &quot;salmon&quot;, &quot;salmon&quot;, &quot;rat&quot;, &quot;elephant&quot;), 3) val b = a.keBy(_.length) val c = sc.parallelize(List(&quot;dog&quot;, &quot;cat&quot;, &quot;gnu&quot;, &quot;salmon&quot;, &quot;rabbit&quot;, &quot;turkey&quot;, &quot;wolf&quot;, &quot;bear&quot;, &quot;bee&quot;), 3) val d = c.KeyBy(_.lenght) b.join(d).collect b.leftOuterJoin(d) b.rightOuterJoin(d) b.fullOuterJoin(d) . cogroup (groupWith) . def cogroupW: RDD[(K, (Iterable[V], Iterable[W]))] | def cogroupW1, W2: RDD[(K, (Iterable[V]))] | 3 key-value RDD 생성 | . . Action Operation . collect(toArray) . def collect(): Array[T] | def collectU: Classtag: RDD[U] | 드라이버 프로그램에서 RDD의 모든 데이터를 List로 반환 | . count . def count(): Long | RDD 데이터 개수 반환 | . first . def first(): T | RDD의 첫 번째 데이터 반환 (= take(1)) | . take . def take(num: Int): Array[T] | RDD의 n번째 데이터 반환 | . takeOrdered . def takeOrdered(num: Int)(implicit ord: Ordering[T]): Array[T] | RDD의 데이터를 정렬하여 처음 n개의 데이터 반환 | . val b = sc.parallelize(List(&quot;dog&quot;, &quot;cat&quot;, &quot;ape&quot;, &quot;salmon&quot;, &quot;gnu&quot;), 2) b.takeOrdered(2) // Array(ape, cat) . takeSample . def takeSample(withReplacement: Boolean, num: Int, seed: Int): Array[T] | Sample과 유사하지만 takeSample은 정확히 num개의 데이터를 무작위 순위로 Array로 반환 | . rdd.takeSample(true, 3, 1) // Array(9, 4, 7) . saveAsTextFile . def saveAsTextFile(path: String) | def saveAsTextFile(path: String, codec: Class[_ &lt;: CompressionCodec]) | RDD를 로컬 파일 시스템, HDFS 또는 다른 하둡 지우너 파일 시스템에 저장, 파티션 개수 만금 파일 생성 | . rdd.saveAsTextFIle(&quot;c:/temp/rdd&quot;) import org.apache.hadoop.io.compress.GzipCodec rdd.saveAsTextFile(&quot;mydata_b&quot;, classOf[GzipCodec]) // 입측 . saveAsObjectFile . def saveAsObjectFile(path: String) | RDD를 직렬화하여 바이너리 형태로 저장 | . rdd.saveAsObjectFile(&quot;objFile&quot;) val loadRdd = sc.objectFile(&quot;objFile&quot;) . saveAsSequenceFile . def saveAsSequenceFile(path: String, codec: Option[Class[_ &lt;: CompressionCodec]] = None) | RDD를 Hadoop sequence 파일로 저장 | . countByKey . def countByKey(): Map[K, Long] | RDD[(Km V)]에 대한 count 함수 | . countByValue . def countByValue(): Map[T, Long] | Value 값과 그 값이 나타나는 회수에 대한 Map 반환, 단일 reducer에서 aggregation이 일어남 | . val b = sc.parallelize(List(1,2,3,4,5,6,7,8,2,4,2,1,1,1,1,1)) b.countByValue // Map(5 -&gt; 1, 8-&gt; 1, 3 -&gt; 1, 6 -&gt; 1, 1 -&gt; 6, 2 -&gt; 3, 4 -&gt; 2, 7 -&gt; 1) . foreach . def foreach(f: T =&gt; Unit) | RDD의 각 데이터에 대하여 f 함수 실행 | . rdd.foreach(x=&gt; println(x)) rdd.foreach(println(_)) rdd.foreach(println) . foreachPartition . def foreachPartition(f: Iterator[T] =&gt; Unit) | RDD의 각 파티션에서 f 수행 | . . Spark Application . Spark Application 작성준비 . idea 실행 | Create New Project &gt; maven | Scala library 확인 | pom.xml 작성 - Spark Dependency 추가 | Add Framework Support &gt; Scala 추가 | New &gt; Scala class &gt; 이름 입력 &gt; Object 선택 | Coding | IntelliJ에서 Maven으로 새 프로젝트를 생성한다. . | Maven Projects nedd to be imported라는 팝업이 뜨고 Import Changes와 Enable auto import를 선택할 수 있게 나오는 데, 여기서는 Enable Auto-Import를 선택한다. Maven의 pom.xml이 변경될 때 마다 자동으로 관련 라이브러리들이 다운로드되게 된다. . | scr/pom.xml을 열고 필요한 dependecy를 추가한다. 여기서는 spark 라이브러리 dependency를 추가한다. 아래 코드를 pom.xml에 끼워 넣으면 된다. 자동으로 관련 라이브러리들이 다운로드 된다. . | . &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_2.11&lt;/artifactId&gt; &lt;version&gt;2.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; . &lt;!-- 위 코드와 동일하지만 이렇게 쓸 수도 있다 --&gt; &lt;properties&gt; &lt;scala.version&gt;2.11.12&lt;/scala.version&gt; &lt;scala.compat.version&gt;2.11.12&lt;/scala.compat.version&gt; &lt;scala.binary.version&gt;2.11&lt;/scala.binary.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_${scala.binary.version}&lt;/artifactId&gt; &lt;version&gt;2.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; . scala를 사용할 것이기 때문에 일단 main 디렉토리 밑에 scala 디렉토리를 생성한다. scala 디렉토리를 마우스 우클릭 후, Mark directory As에서 Sources Root를 선택한다. . | scala 디렉토리 안에 org.kodb.spark라는 package를 생성한다. . | 기본적으로 Maven에서는 scala 프레임워크를 사용할 수 없다. Scala를 실행하기 위해 root 디렉토리(여기서는 sample 폴더)를 우클릭하고 Add Framework Support를 클릭 후 Scala를 체크 해준다. . | 이제 위에서 생성한 org.kodb.spark package를 마우스 우클릭 후 New에 보면 Scala class를 생성할 수 있게 된다. Scala Class를 선택 후 Name에는 First, Kind에는 Class에서 Object로 바꿔 준다. . | App 이라는 어플리케이션을 extends하면 Main 매소드를 따로 작성하지 않고도 패키지를 실행할 수 있다. . | intellJ에서는 alt + enter를 누르면 자동으로 import 문이 뜬다. . | spark conf를 생성하고 그 spark conf를 spark context 생성자에 전달 . | SparkContext와 SparkConf를 import 한다. | 추가적으로 SparkContext 밑에 있는 모든 것을 import 한다. | spark에서는 암묵적으로 변환되는 것들이 많기 때문에 현재 사용되지 않는 것 같아 보여도 SparkContext에 있는 모든 것을 import한다. 그렇지 않으면 프로그램이 복잡해 질 때 문제가 발생할 여지가 있다. . | 현재는 분산환경이 아닌 로컬에서 실행하고 있다. | 로컬모드의 코어를 모두 사용할 수 있도록 local[*]을 setMaster 해준다. | argument로 받아서 수행하면 local 모드 cluster 모드 전부 실행이 가능한 프로그램을 작성할 수 있다. | . . 만약 이러한 에러가 뜬다면 이것은 Add Framework Support에서 scala를 추가할 때 버전을 맞추지 못해 발생하는 에러이다. 만약 스칼라 버전을 2.11.12으로 쓰고 있다면 2.11.12 버전을 다운받아 맞춰줘야 한다. | . Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: . MapReduce vs. Spark Application . // word count package com.raonbit.edu import org.apache.spark.SparkContext import org.apache.spark.SparkContext._ import org.apache.spark.SparkConf object WordCount { def main(args: Array[String]) { val conf = new SparkConf().setAppName(&quot;WordCount&quot;).setMaster(&quot;local[*]&quot;) val sc = new SparkContext(conf) val = file = sc.textFile(args(0)) val word = file.flatMap(_.splict(&quot;&quot;)).map(w =&gt; (w, 1)).cache() word.reduceByKey(_+_).saveAsTextFile(args(1)) } } . RDD Persistence(Caching) . rdd.persist() (== rdd.cache()) 를 통해 RDD를 저장, 인자로 저장 수준을 전달하지 않으면 메모리에만 저장 . cache() == cache(StroageLevel.MEMORY_ONLY) . MEMORY_ONLY : 기본값, RDD를 직렬화 하지 않은 객체로 메모리에 저장, RDD가 메모리 보다 크면 어떤 파티션은 저장되지 않고 필요할 때마다 재 산출 된다. | MEMORY_AND_DISK : RDD를 직렬화 하지 않은 객체로 메모리에 저장, RDD가 메모리 보다 크면 나머지 파티션들은 디스크에 저장하고 필요할 때 마다 읽어온다. | MEMORY_AND_SER : RDD를 직렬화 한 객체로 메모리에 저장, 공간이 적게 필요하지만 읽는데 CPU 소모가 많다 | MEMORY_AND_DISK_SER : RDD를 직렬화 한 객체로 메모리에 저장, RDD가 메로리 보다 크면 나머지 파티션들은 디스크에 저아하고 필요할 때마다 읽어온다. | DISK_ONLY : RDD를 디스크에만 저장 | MEMORY_ONLY_2, MEMORY_AND_DIS_2, .. : 위와 동일, 차이점은 각 피티션을 두 개의 클러스터 노드에 복제 | . 명시적으로 저장하지 않아도 reduceByKey와 같은 shuffle 연산 중에 중간 데이터 자동 저장 . 중간 데이터(RDD)를 재상용할 계획이라면 명시적으로 persist(cache) 호출 권장 . 저장 수준 선택 가이드 . RDD의 크기가 Memory 용량 보다 작으면 MEMORY_ONLY 사용, 가장 빠르고 효율적 | 그렇지 않으면, MEMORY_ONLY_SER 사용. 이때 Kryo serialization을 사용하면 빠른 접근 가능 | RDD를 생성하는데 아주 많은 자원을 사용하지 않거나 많은 양의 데이터를 필터링 하지 않는다면 디스크에 저장하지 말 것. 디스크에서 읽어 오는 것보다 재 산출이 보다 효율적 | 빠른 장애 복구를 원한다면 클러스터에 복제하는 저장 수준 사용 | . 오래된 데이터 파티션은 LRU(latest-recently-used)에 의해 제거 . 명시적으로 제거하려면 unpersist() 호출 . Broadcas Variables, Accumulator . Broadcast Variable . 읽기 전용 변수의 복사본을 클러스터 상의 각 take에 복사하여 보내는 대신 각 노드에 cache에 보관하는 것 | 큰 입력 데이터의 복사본을 각 노드에 효율적으로 보내는 데 사용 | . val broadcastVar = sc.broadcast(Array(1, 2, 3)) broadcastVar.value() // return [1, 2, 3] . Accumulator . associative 연산을 통하여 누적만 가능한 변수, counter나 sum을 병렬로 효율적으로 구현하는 데 상요 | 숫자 형과 standard mutable collection에 대해 accumulator를 기본 제공하고, 확장 가능 | driver 프로그램만이 accumulator 값을 읽을 수 있음 | . val accum = sc.accumulator(0) sc.parallelize(List(1, 2, 3, 4)).foreach(x =&gt; accum.add(x)) accum.value() . Spark Application Operator Graph . . val rdd = sc.textFile(&quot;../README.md&quot;) rdd.first rdd.flatMap(line =&gt; line.split(&quot; &quot;)) rdd.flatMap(line =&gt; line.split(&quot; &quot;)).map(w =&gt; (w, 1)) rdd.flatMap( line =&gt; line.split(&quot; &quot;)).map( w =&gt; (w, 1)).reduceByKey((a, b) =&gt; a + b) rdd.flatMap( line =&gt; line.split(&quot; &quot;)).map( w =&gt; (w, 1)).reduceByKey((a, b) =&gt; a + b).sortBy(_._2, false).take(10) rdd.flatMap(_.split(&quot; &quot;)).map(w =&gt; (w, 1)).reduceByKey(_+_).sortBy(_._2, false) rdd.flatMap(_.split(&quot; &quot;)).map(w =&gt; (w, 1)).count rdd.flatMap(_.split(&quot; &quot;)).map(w =&gt; (w, 1)).countByKey val rdd2 = rdd.flatMap(_.split(&quot; &quot;)) rdd.take(5) rdd2.take(5) val rdd3 = rdd2.map(w =&gt; (w, 1)) // 로컬파일: sc.textFile(&quot;file:///...&quot;) // HDFS: sc.textFile(&quot;hdfs://...&quot;) // Amazon S3: sc.textFile(&quot;s3://...&quot;) val rdd = sc.makeRDD(0 to 100000000) rdd.count rdd.filter(_ &gt; 10000000).count val rdd = sc.makeRDD(List((1, &quot;A&quot;), (1, &quot;B&quot;), (2, &quot;C&quot;), (2, &quot;D&quot;), (3, &quot;E&quot;))) rdd.collect rdd.groupBy(_._1).collect rdd.groupBy(_._1).collect.foreach(println) .",
            "url": "https://safenumz.github.io/blog/spark/2019/03/04/Spark-Spark_Core.html",
            "relUrl": "/spark/2019/03/04/Spark-Spark_Core.html",
            "date": " • Mar 4, 2019"
        }
        
    
  
    
        ,"post251": {
            "title": "[Scala] 기초 문법",
            "content": "Scala 기초 문법 . 연산자 . 다른 언어와 유사한 연산자 형식 + 풍부한 래퍼 . 관계 및 논리 연산자 . 각 연산자는 Boolean 값을 결과로 리턴 | 자바와 동일하게 역(!), 논리곱(&amp;&amp;), 논리합( |   | )도 같은 역할을 수행 | . | . 산술 연산자 . 1 + 2는 (1). + (2)와 동일 | Int에는 파라미터 타입에 따라 오버로드한 + 메소드가 여러 개 존재 | 자바는 연산자를 오버로드 할 수 없음 | 스칼라는 ++, –가 없고 대 +=1, -=을 사용함 Int 클래스 불변 | . | . 단일 파라미터를 가지는 모든 메소드는 중위 연산자를 활용할 수 있음 . 산술 연산자도 중위 연산자 | 예제 코드 : def. + (x int) | . 연산자 우선순위 . 모든 연산자는 우선순위가 있음 | 첫 번째 연산자로 판단함 2 + 2 * 2 | . | 할당 연산자(assignment operator)는 예외 x *= 2 + 2 | . | . 연산자 결합법칙 . 우선 순위가 같은 연산자가 오는 경우 . 마지막 글자를 기준으로 결합법칙을 정함 | ’:’으로 끝나는 메소드는 오른쪽 피연산자를 응답객체로 왼쪽 피연산자를 인자로 호출함 | 다른 문자로 끝난다면 반대로 수행함 | . // 콜론 쪽에서 반대로 호출 1 +: List(2, 3, 4) List(1,2, 3) :+ 5 List(2, 3, 4).+:(1) List(1, 2, 3) ::: List(4, 5, 6) // res0: List[Int] = List(1, 2, 3, 4) // res1: List[Int] = List(1, 2, 3, 5) // res2: List[Int] = List(1, 2, 3, 4) // res3: List[Int] = List(1, 2, 3, 4, 5, 6) . // 1부터 100까지의 합 : 5050 val sum_hundred = (1 to 100).toList (0 /: sum_hundred)(_ + _) (0 /: sum_hundred)((x, y) =&gt; x + y) (0 /: sum_hundred)((x: Int, y: Int) =&gt; x + y) . apply, update 연산자 . apply . “Hello”(4) | def apply(n: Int): Char | “Hello”.apply(4) | . update . greeting(1) = “Hello” | greeting.update(1, “Hello”) | . if-expression . if statement vs if expression . 자바는 코드를 분기하여 해당 블럭내에서 작동만 하는 것이 목표 | 스칼라는 if 표현식을 통해 객체를 도출(evaluate)하는 것을 좀 더 목표로 함 스칼라의 if에서는 블록의 마지막줄의 식이 반환 값음 | if 표현식 뿐만 아니라 다른 대부분의 코드들도 절차식 보다는 표현식임 | . | 명령문(Statement) : 무엇인가를 행동하라는 코드 ex: GOTO 100 | 표현식(Expression) : 값을 계산하라는 어떤 것 ex: 1+2/x | . // Java boolean b = new Random().nextBoolean(); if (b) { System.out.println(&quot;True&quot;); } else { System.out.println(&quot;False&quot;); } . // Scala val b = Random().nextBoolean if(b) { println(&quot;Ture&quot;) } else { println(&quot;False&quot;) } . import scala.util.Random val b = Random.nextBoolean() val res = if(b) { &quot;True&quot; } else { &quot;False&quot; } println(res) . for loop . if 표현식과 같이 분기보다는 값이나 식을 얻어내는 것이 목표임 | 자바와 달리 여러 collection에 대해 iterating이 가능함 | 자바의 가장 기본적인 형태를 지원하지 않음 for (initialize; test; update) | ex : . for (int i; i &lt; greeting.length(); i++){ Sysetem.out.println(greeting[i]) } . | . | . val ns = 1 to 10 val result = for(i &lt;- ns) { println(i) } result // for문을 안돌리고 이렇게 간단하게 구현할 수도 있다. ns.foreach(println) . // 이중 For문 val ns = 1 to 10 val result = for{i &lt;- ns; j &lt;- ns} println(i+ &quot;, &quot; +j) result . val ns = 1 to 10 val result = for(n &lt;- ns) yield n * 2 result // res0: scala.collection.immutable.IndexedSeq[Int] = Vector(2, 4, 6, 8, 10, 12, 14, 16, 18, 20) . foreach, map, flatten, flatMap 으로 for문을 거의 대부분 치환할 수 있다. | . While loop . While은 자바와 거의 동일함 | ex : . var i = 0; while(i&lt; args.length){ println(args(i)) i += 1 } . | 그러나 간결하지 않기 때문에 for에서 언급한 것과 같이 foreach를 더 선호함 | . foreach . args.foreach(arg =&gt; println(arg)) . args에 있는 foreach 메소드를 호출하고 그 인자를 함수로 넘김 | arg는 파라미터를 받는 함수 리터럴을 사용함 | args.foreach((arg: String)) =&gt; println(arg) | args.foreach(println) // 인자를 하나만 받는 경우 | . try catch . try{ throwsException(); } catch{ case ioe: IOException =&gt; println(&quot;IOException&quot;) case e: Exception =&gt; println(&quot;Exception&quot;) } finally { println(&quot;finally&quot;) } . breakable . 스칼라에는 break와 continue문이 없음 | scala.util.control의 Breaks 클래스 . import scala.util.control.Break._ breakabe{ for(...){ if(...) break; ... } } . | . 파일 읽기 . Source.fromFile(“File”).getLines.toArray . 파일 내용을 이터레이터 형태로 반환 | import scala.io.Source | val input = Source.fromFile(“fileName.txt”, “UTF-8”) . | val lines = source.getnLines.toArray | val contents = source.mkString | . -- 텍스트 파일 읽고 각각 대문자로 변환 import scala.io.Source object MainClass { def main(args: Array[String]) { val lines = Source.fromFile(&quot;Loremlpsum.txt&quot;).getLines lines.map(_.toUpperCase).foreach(println) } } . 파일 쓰기 . 내장된 파일 쓰기는 없으며, java.io.PrinterWriter를 가져와서 사용 . val fileOut = new PrintWriter(“fileName.txt”) | for (i &lt;- 1 to 100) fileOut.println(i) | fileOut.close() | .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/04/Scala-%EA%B8%B0%EC%B4%88_%EB%AC%B8%EB%B2%95.html",
            "relUrl": "/scala/2019/03/04/Scala-%EA%B8%B0%EC%B4%88_%EB%AC%B8%EB%B2%95.html",
            "date": " • Mar 4, 2019"
        }
        
    
  
    
        ,"post252": {
            "title": "[Scala] 기본 문법",
            "content": "Scala 기본 문법 . 기본 . // 가능한 변수 variable(var)대신 불변 value(val)로 사용함 val greeting = &quot;Hello World&quot; var greeting2 = &quot;Hello World&quot; greeting = &quot;Hello Scala&quot; // Error:(4, 18) reassignment to val // greeting = &quot;Hello Scala&quot; greeting2 = &quot;Hello Scala&quot; // greeting2: String = Hello Scala var ls = List(1, 2, 3) import scala.collection.mutable var ls = mutable.MutableList(1, 2, 3) ls += 4 def ls = List(1, 2, 3) ls(1) // res0: Int = 2 // 0이란 요소를 리스트의 앞에 추가함 val ls = List(1, 2, 3) val res = 0 +: ls // res: List[Int] = List(0, 1, 2, 3) val myMap = Map(&quot;One&quot; -&gt; 1, &quot;Two&quot; -&gt; 2) myMap(&quot;One&quot;) // res0: Int = 1 // get을 넣으면 Some이 나옴, 만약에 없는 요소를 불러오면 오류가 나지만 get을 넣으면 오류 대신 None이 나옴 myMap.get(&quot;One&quot;) // es0: Option[Int] = Some(1) val greeting: String = &quot;Hello Scala&quot; var greeting2: String = &quot;Hello Scala&quot; def greeting3: String = &quot;Hello Scala&quot; // greeting: String = Hello Scala // greeting2: String = Hello Scala // greeting3: String // 재귀함수인 경우에는 반드시 타입을 명시해줘야 에러가 안뜸 def greeting3(x: String): String = greeting3(x) . 모든 것은 객체 . 객체지향의 모든 것은 객체 | . // 1도 객체 1+2 1.+(2) // res0: Int = 3 // res1: Int = 3 // 2와 3을 비교 val m = 2 max 3 m // res0: Int = 3 . 스칼라 함수의 특징 . 함수 결과 타입 생략 가능 . 그러나 재귀 함수의 결과 타입은 명시해야 함 중괄호 생략 가능 . | 단, 코드가 한 줄일 경우 | ex) def greet() = println(“Hello, Workld”) | . // scala에서 리턴문은 사용하지 않는다 def max(x: Int, y: Int): Int = { if (x &gt; y) { x } else { y } } val myMax = max(2, 3) val myMax2 = max(3, 2) // myMax: Int = 3 // myMax2: Int = 3 // Unit는 리턴하지 않는 다는 의미 def unitop(x: Int, y: Int): Unit = { println(x+y) } . 자주 사용되는 타입 . 자바와 공통점 . 자주 사용되는 타입 | Short, Int, Long, Float, Double Byte, Char, String, Boolean | 추가로 자바의 타입을 가져다 쓰기도 함 | . 자바와 차이점 . 스칼라는 Primitive type과 Reference type을 구분하지 않음 | 모든 값은 객체이며, 클래스의 인스턴스 | . // String 타입 println(&quot;Hello Scala&quot;.getClass) // class java.lang.String // 대문자 변경 println(&quot;Hello Scala&quot;.map(_.toUpper)) // HELLO SCALA . Predef : WrappedString . 1 == 1 1 != 1 List(1, 2, 3) == List(1, 2, 3) &quot;Hello World&quot; == &quot;Hello World&quot; // res1: Boolean = true // res2: Boolean = false // res3: Boolean = true // res4: Boolean = true List(1, 2, 3) eq List(1, 3, 3) List(1, 2, 3) ne List(1, 2, 3) // res0: Boolean = false // res1: Boolean = true . import scala.collection.mutable val ls = mutable.MutableList(1, 2, 3) ls += 4 ls // 위 방법 보다는 아래 방법 권장 val ls = List(1, 2, 3) val ls1 = ls :+ 4 // ls1: List[Int] = List(1, 2, 3, 4) . 자바 코드가 가질 수 있는 위험 . 아래 코드에서 doSomething 메소드가 어떻게 작동하는지 알지 못할 때, 배열의 요소가 추가되거나 삭제 될 수 있음 | . int[] arr = {1, 2, 3}; doSomething(arr); doNext(arr); . List 조작 . 빈 리스트 생성 . List.empty | List() | Nil | . 리스트 확인 . List.empty == List() // true | List.empth == Nill // true | List() == Nill // ture | . // 빈 리스트 정의 List.empty[Int] Nil == List() // res0: Boolean = true . List 조작 . 리스트 붙이기 . val ls1 = 1 :: 2 :: 3 :: Nil // List[Int] = List(1, 2, 3) | val ls2 = 0 :: ls //&gt; ls2 = List(0, 1, 2, 3) | val ls3 = ls2 :+ r //&gt; ls3 = List(0, 1, 2, 3, 4) | val l1 = List(1, 2, 3) | val l2 = List(4, 5, 6) | l1 ::: l2 //&gt; List(1, 2, 3, 4, 5, 6) | l2 ::: (l2) //&gt; List(4, 5, 6, 1, 2, 3) | . val ls1 = 1 :: 2 :: 3 :: Nil val ls2 = 0 +: ls1 val ls3 = ls2 :+ 4 val ls4 = ls3.updated(2, &quot;Two&quot;) // ls1: List[Int] = List(1, 2, 3) // ls2: List[Int] = List(0, 1, 2, 3) // ls3: List[Int] = List(0, 1, 2, 3, 4) // ls4: List[Any] = List(0, 1, Two, 3, 4) // 리스트 안에 리스트가 들어감 val l1 = List(1, 2, 3) val l2 = List(4, 5, 6) l1 +: l2 // l1: List[Int] = List(1, 2, 3) // l2: List[Int] = List(4, 5, 6) // res0: List[Any] = List(List(1, 2, 3), 4, 5, 6) val l1 = List(1, 2, 3) val l2 = List(4, 5, 6) l1 ::: l2 // l1: List[Int] = List(1, 2, 3) // l2: List[Int] = List(4, 5, 6) // res0: List[Int] = List(1, 2, 3, 4, 5, 6) // _는 PlaceHoder val x = List(1, 2, 3) x.map(_*2) // res0: List[Int] = List(2, 4, 6) // 둘다 쓸 수 있음 val x = List(1, 2, 3) val doubler = (n : Int) =&gt; n + 2 def doubler2(n : Int) = n * 2 x.map(doubler) x.map(doubler2) // 순회하면서 모든 값 프린트 val x = List(1, 2, 3) x.foreach((n : Int) =&gt; println(n)) x.foreach(n =&gt; println(n)) x.foreach(println(_)) x.foreach(println) // 1 // 2 // 3 x.head x.tail // res0: Int = 1 // res1: List[Int] = List(2, 3) x.init x.last // res2: List[Int] = List(1, 2) // res3: Int = 3 // 일반적으로 함수선언을 이렇게 하는 게 편함 val myFunc = (x: Int) =&gt; x val myFunc2 = (x: Int) =&gt; (y: Int) =&gt; x + y myFunc2(1)(2) // myFunc2: Int =&gt; (Int =&gt; Int) = &lt;function&gt; // res0: Int = 3 . Tuple . List와 마찬가지로 immutable이지만 각기 다른 타입의 변수를 저장할 수 있음 | val hostPort = (“localhost”, 80) hostPort: (String, Int) = (localhost, 80) | 접근방법은 숫자를 이용하며 0이 아닌 1부터 시작 hostPort._1 res0: String = localhost | hostPort._2 res1: Int = 80 | . | 1-&gt; 2 res0: (Int, Int) = (1, 2) | . def myFunc(x : Int, y : Int):(Int, String) = { val res1 = x / y val res2 = x % y (res1, res2.toString) } val result = myFunc(10, 3) result._1 result._2 // result: (Int, String) = (3,1) // res0: Int = 3 // res1: String = 1 // 같은 결과 나타남 (1, 2) (1 -&gt; 2) . val person = (&quot;Brandon&quot;, 20) val name = person._1 val age = person._2 val (name, age) = person name age // name: String = Brandon // age: Int = 20 // res0: String = Brandon // res1: Int = 20 val (name, age) = (&quot;Brandon&quot;, 20) . Set, Seq . Set . 중복을 허용하지 않음 | Set(1, 1, 2) | scala.collection.immutable.Set[Int] = Set(1, 2) | . Seq . 순서가 존재함 | Seq(1, 1, 2) | Seq[Int] = List(1, 1, 2) | . val ls = List(1, 2, 3, 3) ls.toSet // res0: scala.collection.immutable.Set[Int] = Set(1, 2, 3) // List와 Sequence는 거의 같다고 봐도 됨, 성능에 약간 차이가 있음, 속도 면에서 List가 약간 손해 볼 수 있음 List(1, 2, 3).toSeq Seq(1, 2, 3) . for (i &lt;-0 to 10) println(i) (0 to 10).foreach(println) (0 until 10) (0 to 10) (0 to -10 by -1) // res2: scala.collection.immutable.Range = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) // res3: scala.collection.immutable.Range.Inclusive = Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) // res4: scala.collection.immutable.Range = Range(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10) val list = List(1, 2, 3, 4) list.filter((x: Int) =&gt; x &lt; 3) val testNumber1 = (x: Int) =&gt; x &lt; 3 list.filter(testNumber1) list.filter((x) =&gt; x &lt; 3) // target typing list.filter(x =&gt; x &lt; 3) list.filter(_ &lt; 3) // placeholder def testNumber2 (x: Int) = x &lt; 3 // function list.filter(x =&gt; testNumber2(x)) list.filter(testNumber2(_)) list.filter(testNumber2 _) list.filter(testNumber2) // list: List[Int] = List(1, 2, 3, 4) // res0: List[Int] = List(1, 2) // // testNumber1: Int =&gt; Boolean = &lt;function1&gt; // res1: List[Int] = List(1, 2) // // res2: List[Int] = List(1, 2) // res3: List[Int] = List(1, 2) // res4: List[Int] = List(1, 2) // // testNumber2: (x: Int)Boolean // // res5: List[Int] = List(1, 2) // res6: List[Int] = List(1, 2) // res7: List[Int] = List(1, 2) // res8: List[Int] = List(1, 2) . 스칼라 클래스 계층도 .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/03/Scala-%EA%B8%B0%EB%B3%B8_%EB%AC%B8%EB%B2%95.html",
            "relUrl": "/scala/2019/03/03/Scala-%EA%B8%B0%EB%B3%B8_%EB%AC%B8%EB%B2%95.html",
            "date": " • Mar 3, 2019"
        }
        
    
  
    
        ,"post253": {
            "title": "[Scala] Scala 설치하기",
            "content": "Scala 설치 . Scala 설치 순서 . JDK 설치 . JDK 1.6이상 버전이 설치되어야 함 | . Scala 설치 . 설치 파일: http://www.scala-lang.org/download/ | . scala와 scalac 경로 설정 . OS 환경에 따라 두 실행파일의 경로 등록 | . // tab 대신 space bar 두번으로 대체 // MyFirstScala.scala로 저장 object MyFirstScala { def main(args: Array[String]){ println(&quot;Hello Scala&quot;) } } . MyFirstScala.scala가 저장된 디렉토리로 이동하여 아래 명령어를 실행하면 &quot;Hello Scala&quot;를 출력할 수 있다 $ scalac MyFirstScala.scala $ scala -classpath . MyFirstScala . 스칼라를 위한 프로그래밍 도구 . Scala Interpreter . 파이썬 등과 같이 인터프리터를 제공함 | 즉각적인 피드백을 주기 때문에 작은 모듈 작성이나 분석용으로 활용하기 좋음 | RELP(read-eval-print loop) | 엄밀히 말하면 인터프리터가 아니라 내부적으로 코드를 빠르게 컴파일한 후 바이트코드를 JVM(자바 가상 머신)에서 실행 | . 외부도구 . IntelliJ | TypeSafe Activator | Scala IDE | SBT | . Intellij 실습 . Intellij 설치 . https://www.jetbrains.com/idea/download/ | . 장점 . code completion | interpolitate String | inpection | SBT project auto-import | . 실습 . IntelliJ를 설치하고 Project를 생성 | scala Worksheet 생성하여 실습 진행 | src 밑에 Scala class 파일 object 생성(MainClass.scala) | . object MainClass { def main(args: Array[String]) { println(&quot;Hello IntelliJ IDEA&quot;) } } . // 1부터 10까지 range 1 to 10 // 리스트 생성 List(1, 2, 3) // 1. 을 입력하고 ctrl+space를 누르면 호출할 수 있는 메서드를 네비게이션 할 수 있음 .",
            "url": "https://safenumz.github.io/blog/scala/2019/03/02/Scala-Scala_%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html",
            "relUrl": "/scala/2019/03/02/Scala-Scala_%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html",
            "date": " • Mar 2, 2019"
        }
        
    
  
    
        ,"post254": {
            "title": "[Linux] Mac, Linux 간에 자소분리 현상",
            "content": "NFC와 NFD 서로 변환하기 . OS/X는 NFD 형식으로 파일 이름을 저장한다. 이 파일을 다른 OS로 복사했을 때 해당 OS에서 NF이를 NFC로 바꾸기 위해서는 convmv을 사용하면 된다. | . 1. 설치 . OS/X 에서는 brew을 이용해서 설치하는 것이 편하다. | . $ brew install convmv . Debian/Linux 에서는 아래 명령으로 간단하게 설치할 수 있다. | . $ sudo apt-get install convmv . 2. 사용법 . 2.1 NFD를 NFC로 . 대상 파일 시스템이 utf-8를 쓴다고 가정하면 | . $ convmv -f utf-8 -t utf-8 --nfc -notest 파일명 . 2.2 NFC를 NFD로 . 원본 파일 시스템이 utf-8을 쓴다고 가정하면 | . $ convmv -f utf-8 -t utf-8 --nfd -notest 파일명 .",
            "url": "https://safenumz.github.io/blog/linux/2019/03/01/Linux-Mac_Linux_%EA%B0%84_%EC%9E%90%EC%86%8C%EB%B6%84%EB%A6%AC_%ED%98%84%EC%83%81.html",
            "relUrl": "/linux/2019/03/01/Linux-Mac_Linux_%EA%B0%84_%EC%9E%90%EC%86%8C%EB%B6%84%EB%A6%AC_%ED%98%84%EC%83%81.html",
            "date": " • Mar 1, 2019"
        }
        
    
  
    
        ,"post255": {
            "title": "[Zeppelin] Zeppeline 세부기능",
            "content": "Apache Zeppeline 세부기능 . 특징 . 협업 가능 | 마크다운 문법 가능 | 코드 숨기기, 결과 숨기기 가능 | 대시 보드로 활용 가능 | 트위터에서는 사내에서 수백명이 Zeppeline을 사용하고 있다. | . Interpreter Settings . 맨 위에 있는 것이 기본 : 우선순위 설정 가능 | %md : 마크다운 문법을 쓰겠다는 의미 | %sql : spark sql를 쓰겠다는 의미 | %python : 파이썬 코드 | . Tip . 코드를 작성할 때 ${} 안에 변수를 넣어주면 그래프 위에 그 변수를 변경할 수 있게 할 수 있는 박스가 나온다. 그 박스의 값을 변경하면 바로 그래프에 반영된다. | sql은 기본결과가 테이블인데 Display System 부분에서 변경할 수 있다. | 데이터는 1000개까지 기본적으로 보여진다. | 피봇차트를 쓸 수 있다. x축과 y축을 바꿔가며 분석이 가능하다. | . %sql select age, job, count(1) value from bank group by age, job order by age, job . 그래프를 area로 선택하고 settings에서 Keys에 age, groups에 job, values에 sum을 넣으면 다음과 같은 그래프가 그려진다. | . . csv 등의 파일로 다운로드 가능하다. | HTML 코드도 가능, 이미지 넣을 수 있다. | Angular : 따로 서버가 없어도 간단히 UI 만들어서 사용 가능하다. | NGINX 보안기능 제공 | .",
            "url": "https://safenumz.github.io/blog/devops/2019/02/14/Zeppelin-Apache_Zeppline_%EC%84%B8%EB%B6%80%EA%B8%B0%EB%8A%A5.html",
            "relUrl": "/devops/2019/02/14/Zeppelin-Apache_Zeppline_%EC%84%B8%EB%B6%80%EA%B8%B0%EB%8A%A5.html",
            "date": " • Feb 14, 2019"
        }
        
    
  
    
        ,"post256": {
            "title": "[Zeppelin] Zeppeline을 위한 Spark 튜토리얼",
            "content": "Spark 튜토리얼 . Transformations . map() | filter() | flatMap() | mapPartition() | intersection() | distinct() | groupByKey() | reduceByKey() : 키와 밸류로 구성된 데이터가 있을 때 | sortByKey() | join() | coalesce() | . Actions . reduce() | collect() : 데이터가 작을 때만 써야 함 수백mb 이내 | count() : 숫자 세기 | first() : 첫번째만 봄 | take() | takeSample() | foreach() | countByKey() | . // rdd 생성 val list = List(1, 2, 3) val rdd = sc.parallelize(list) // scala는 size를 사용 list.size . res12: Int = 3 . // spark rdd는 count를 쓴다 rdd.count . res14: Long = 3 . list.filter(x =&gt; x &gt; 1).size . res16: Int = 2 . rdd.filter(x =&gt; x &gt; 1).count . res20: Long = 2 . // 데이터가 아무리커도 데이터를 불러오지 않기 때문에 바로바로 됨 rdd.filter(x =&gt; x &gt; 1).map(x =&gt; x * 2).map(x =&gt; x * 3).count . res24: Long = 2 . rdd.collect . res26: Array[Int] = Array(1, 2, 3) . map . rdd.map(x =&gt; x * 2).collect . res28: Array[Int] = Array(2, 4, 6) . filter . rdd.filter(x =&gt; x &gt; 2).collect . res30: Array[Int] = Array(3) . flatMap . 리스트의 리스트를 하나의 리스트로 줄이는 것 | . val list2 = List(List(1, 2), List(3, 4)) val rdd2 = sc.parallelize(list2) rdd2.flatMap(list =&gt; list).collect . res34: Array[Int] = Array(1, 2, 3, 4) . intersection . 교집합 | . val rdd1 = sc.parallelize(List(1, 2, 3)) val rdd2 = sc.parallelize(List(2, 3, 4)) rdd1.intersection(rdd2).collect . res36: Array[Int] = Array(3, 2) . distinct . 중복 제거 | . val rdd3 = sc.parallelize(List(1, 1, 1, 2, 3)) rdd3.distinct.collect . res46: Array[Int] = Array(1, 3, 2) . join . 공통된 1 키를 기준으로 조인 | . val rdd1 = sc.parallelize(List((1, &quot;A&quot;), (2, &quot;B&quot;))) val rdd2 = sc.parallelize(LIst((1, &quot;C&quot;), (3, &quot;D&quot;))) rdd1.join(rdd2).collect . res49: Array[(Int, (String, String))] = Array((1,(A,C))) . reduce . 순차적으로 누적 계산, 문자를 합칠 수도 있는 데 합쳐지는 순서를 보장해주지는 않음 | . val rdd = sc.parallelize(List(1, 2, 3, 4)) rdd.reduce((a, b) =&gt; a + b) . // res53: Int = 10 . reduceByKey . reduceByKey는 Action이 아닌 Transforms이다 | . val file = spark.textFile(&quot;hdfs://;...&quot;) val counts = file.flatMap(line =&gt; line.split(&quot; &quot;)).map(word =&gt; (word, 1)).reduceByKey(_ + _) counts.saveAsTextFile(&quot;hdfs://...&quot;) .",
            "url": "https://safenumz.github.io/blog/devops/2019/02/12/Zeppelin-Apache_Zeppeline%EC%9D%84_%EC%9C%84%ED%95%9C_Spark_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC.html",
            "relUrl": "/devops/2019/02/12/Zeppelin-Apache_Zeppeline%EC%9D%84_%EC%9C%84%ED%95%9C_Spark_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC.html",
            "date": " • Feb 12, 2019"
        }
        
    
  
    
        ,"post257": {
            "title": "[Zeppelin] Zeppeline을 위한 Spark 개요",
            "content": "빅데이터 분석의 시초 . 빅데이터? . 빅데이터란 기존 데이터베이스 관리도구의 능력을 넘어서는 대량의 정형 또는 심지어 데이터베이스 형태가 아닌 비정형의 데이터 집합조차 포함한 데이터로부터 가치를 추출하고 결과를 분석하는 기술이다 . SQL 기반의 데이터베이스 | 주로 컴퓨터 1대에서 돌아감, 고성능이 필요하면 좋은(비싼 컴퓨터) 필요 | 대량 : 컴퓨터 1대로 처리할 수 없는 양(수십 TB 이상) | 3V (by IBM) : Volume, Velocity, Variety . | 기술 - 컴퓨터 1대로 처리하지 못하므로, 여러대를 연결해서 데이터를 저장하고 처리하자. | 주로 구글 등 검색엔진 회사들이 웹 전체를 저장하고 처리하려다보니 기술 개발이 필요하게 됨 | 구글이 이끌고, 야후 등이 오픈소스를 통해 (하둡) 적극 지원, 접근하기 쉬워지고 널리 쓰이기 시작 | SQL 기반의 데이터는 거의 행렬 형태로 정형화된 데이터였으나 일반 문서(웹 문서) 등과 같이 비정형화 데이터도 초점 . | 데이터를 저장만 해서는 쓸모가 없음 | 데이터를 읽어들이고 변환하고 핵심을 추출하는 것도 마찬가지고 컴퓨터 1대로 할 수 있는 것보다 훨씬 빨라져야 함 | 맵리듀스 (MapReduce) : 분산 데이터 처리 | 현재는 스파크 (Apache Spark) 가 널리 쓰임 | . GFS(Google File System) 논문 (2003) . 막대한 양의 웹 문서를 저장 조회해야 하는데, 컴퓨터 1대로는 당연히 처리가 불가능 | 저렴한 하드웨어를 사용하면서, 대신 중복저장을 통해 파일 유실을 방지 | 파일을 새로 추가하는데 집중, 삭제나 파일 덮어쓰기는 어려움 | Latency보다 Throughput을 중시 | 클러스터 갯수를 늘릴수록 저장용량과 throughput이 점점 올라감 | 여러 컴퓨터를 연결하여 저장용량과 I/O 성능을 scale | 이를 구현한 오픈소스 프로젝트인 Hadoop HDFS | . MapReduce 논문 (2004) . Google MapReduce (2004) | 여러대의 분산 저장소에 존재하는 데이터를 변환하거나 계산하기 위한 프레임 워크 | Functional Programming의 Map() 함수와 Reduce() 함수를 조합하여 효율적으로 분산 환경에서 다양한 계산을 함 | Map과 Reduce 연산을 조합하여 클러스터에서 실행, 큰 데이터를 처리 | 이를 구현한 오픈소스 프로젝트인 Hadoop MapReduce | . Hadoop . GPS(2003)과 MapReduce(2004) 논뭉를 보고, Doug Cutting과 Mike Cafarella가 이를 오픈소스로 구현 | 야후에서 프로젝트를 하던 중 그 한 부분으로 만듬, 이후 오픈소스로 공개 (2006) | Hadoop : 아들의 노란 코끼리 장난감의 이름을 따 만듬 | . Hive . SQL로 분석 쿼리를 실행하면, 이를 MapReduce 코드로 변환해주는 도구 | MapReduce 코드는 작성하기 아주 불편하므로 큰 인기를 끔 | 쿼리로 MapReduce의 거의 모든 기능을 표현할 수 있다 | HDFS등에 있는 파일을 읽어들여 쿼리로 분석 수행 | HiveQL을 작성하면 MapReduce 코드로 변환되어 실행 | . 그렇게 10년이 지나고, 지금까지도 MapReduce와 Hive는 많이 사용되고 있는 빅데이터 기술입니다 MR, Hive에 도전하는 기술들 Impala, Pheonix, Pig, Tez 등등 . 하둡 생태계의 많은 프로젝트들 . pig . Pig Latin이라는 하이레벨 언어로 MapReduce를 실행할 수 있는 도구 | Netflix 등에서 사용하면서 주목을 받았고, 현재는 거의 사용되지 않음 | . Tez . MapReduce의 성능적, 표현적 한계를 극복하고자 하는 실행엔진 | Spark의 급부상으로 거의 주목을 받지 못함 | . Impala . MapReduce 기반의 Hive의 느린 응답성을 개선한 도구 | Spark의 급부상으로 (Spark SQL) 초기에 약간 주목을 받다가 현재는 거의 사용되지 않음 | . MapReduce/Hive 장단점 . 장점 . 빅데이터 시대를 열어준 선구적인 기술 | 거대한 데이터를 안정적으로 처리 | 많은 사람드이 사용 중 | . 단점 . 오래된 기술이다 보니, | 발전이 느리다 | 불편한 점이 많다 | . MapReduce의 문제점 . MapReduce는 Map의 입출력 및 Reduce의 입출력 및 Reduce의 입출력을 매번 HDFS에 쓰고 읽는다 - 느리다 | MapReduce 코드는 작성하기 불편하다 - 좀 더 좋은 인터페이스가 있으면 좋겠다 | . Apache Spark . 비교적 최근에 (2012) 등장하여 선풍적인 인기를 얻고 있는 분산처리 프레임워크 | 메모리 기반의 처리를 통한 고성능과 Functional Programming 인터페이스를 활용한 편리한 인터페이스가 특징 | 핵심 개념 : RDD (Resilient Distributed Dataset) | 인터페이스 : Scala | 인메모리, 메모리 상에 데이터를 올려 놓은 상태로 데이터 처리 | . 단순한 연산인 경우 데이터를 읽고 연산하는 방식이 나쁘지 않지만 반복연산일 수록 효율이 떨어진다. 다단계의 연산이나 반복 연산의 경우 중간 결과를 메모리에 저장하면 매번 디스크에 쓰는 것보다 훨씬 빠르다 . RDD . Resilient Distributed Dataset - 탄력적으로 분산된 데이터셋 오류 자동복구 기능이 포함된 가상의 리스트 | 다양한 계산을 수행 가능, 메모리를 활용하여 높은 성능을 지님 | . | 클러스터에 분산된 메모리를 활용하여 계산되는 List | 데이터를 어떻게 구해낼지를 표현하는 Transformation을 기술한 Lineage(계보)를 interactive하게 만들어 낸 후, Action을 통해 lazy하게 값을 구해냄 | 클러스터 중 일부의 고장등으로 작업이 중간에 실패하더라도, Lineage를 통해 데이터를 복구 | . Interface - Scala . 매우 간결한 표현이 가능한 모던 프로그래밍 언어 | REPL(aka Shell) 제공, interactive하게 데이터를 다루는 것이 가능 | Functional Programming이 가능하므로 MapReduce와 같은 functional한 개념을 표현하기에 적합함 | . val file = spark.textFile(&quot;hdfs://...&quot;) val counts = file.flatMap(line =&gt; line.split(&quot; &quot;)) .map(word = word, 1) .reduceByKey(_ + _) counts.saveAsTextFile(&quot;hdfs://...&quot;) . 확장 프로젝트들 . Spark SQL : Hive와 비슷하게 SQL로 데이터 분석 | Spark Streaming : 실시간 분석 | MLlib : 머신러닝 라이브러리 | GraphX : 페이지랭크같은 그래프 분석 | SparkR | Zeppelin | . 장점들 . 시간과 비용을 아껴준다 . 수십대의 Hadoop Cluster를 10대 이하의 Cluster로 대체할 수 있다 | 수십분 기다려야 하던 작업이 1분만에 완료된다 | . 작업 능률 향상 . MR 작업 코드 만들고, 패키징하고, submit하고 하던 복잡한 과정이, shell에서 코드 한줄 치는 것으로 대체된다 | 처음 접하는 사람도 배우기 쉽다 | . 다양한 제품을 조합해야 했던 작업이 Spark으로 다 가능하다 .",
            "url": "https://safenumz.github.io/blog/devops/2019/02/11/Zeppelin-Apache_Zeppeline%EC%9D%84_%EC%9C%84%ED%95%9C_Spark_%EA%B0%9C%EC%9A%94.html",
            "relUrl": "/devops/2019/02/11/Zeppelin-Apache_Zeppeline%EC%9D%84_%EC%9C%84%ED%95%9C_Spark_%EA%B0%9C%EC%9A%94.html",
            "date": " • Feb 11, 2019"
        }
        
    
  
    
        ,"post258": {
            "title": "[Zeppelin] Zeppeline 설치",
            "content": "Apache Zeppeline 설치 . Zeppelin 디렉토리 구조 . zeppelin conf : 설정파일들이 저장되어 있음 zeppelin-env.cmd.template : 윈도우 유저, 원하는 부분을 주석 풀어서 사용 | zeppelin-env.sh.template : 리눅스 또는 맥 유저 | . | bin zeppelin.cmd | . | . | . Zeppelin 실행 . 윈도우즈는 bin 폴더 내에 zeppelin.cmd를 실행(맥이나 리눅스는 zeppelin-demon.sh start)하고 | http://localhost:8080 에 접속하면 zeppelin notebook으로 진입할 수 있다 | . 만약 8080 포트가 이미 점유 되어 있다면 포트를 변경할 수 있다 . conf 폴더로 진입 | . // zeppelin-site.xml.template를 복제 후 tempate 확장자 제거 $ cp zeppelin-site.xml.template zeppelin-site.xml // zeppelin-site.xml를 열어 8080 포트를 다른 포트로 변경할 수 있다 $ vi zeppelin-site.xml .",
            "url": "https://safenumz.github.io/blog/devops/2019/02/10/Zeppelin-Apache_Zeppeline_%EC%84%A4%EC%B9%98.html",
            "relUrl": "/devops/2019/02/10/Zeppelin-Apache_Zeppeline_%EC%84%A4%EC%B9%98.html",
            "date": " • Feb 10, 2019"
        }
        
    
  
    
        ,"post259": {
            "title": "[Python numpy] set functions",
            "content": "numpy set functions . unique(x): 배열 내 중복된 원소 제거 후 유일한 원소를 정렬하여 반환 | intersect1d(x, y): 두 개의 배열 x, y의 교집합을 정렬하여 반환 | union1d(x, y): 두 개의 배열 x, y의 합집합을 정렬하여 반환 | in1d(x, y): 첫번째 배열 x가 두번째 배열 y의 원소를 포함하고 있는지 여부의 불리언 배열을 반환 | setdiff1d(x, y): 첫번째 배열 x로부터 두번째 배열 y를 뺀 차집합을 반환 | setxor1d(x, y): 두 배열 x, y의 합집합으로부터 교집합을 뺀 대칭차집합을 반환 | . np.unique(x) . 배열 내 중복된 원소 제거 후 유일한 원소를 정렬하여 반환 | . import numpy as np x = np.array([1, 2, 3, 1, 2, 4]) # sorted(set(x))과 동일한 연산 np.unique(x) . array([1, 2, 3, 4]) . np.interset1d(x, y) . 두 개의 배열 x, y의 교집합을 정렬하여 반환 | . x = np.array([1, 2, 3, 4]) y = np.array([3, 4, 6, 5]) np.interset1d(x, y) . array([3, 4]) . np.union1d(x, y) . 두 개의 배열 x, y의 합집합을 정렬하여 반환 | . x = array([1, 2, 3, 4]) y = array([3, 4, 6, 5]) np.union1d(x, y) . array([1, 2, 3, 4, 5, 6]) . np.in1d(x, y) . 첫 번째 배열이 두번째 배열의 원소를 포함하고 있는지 여부의 불리언 배열을 반환 | . x = np.array([1, 2, 3, 4, 5, 6]) y = np.array([2, 4]) np.in1d(x, y) . array([False, True, False, True, False, False]) . np.setdiff1d(x, y) . 첫번째 배열 x로부터 두번째 배열 y를 뺀 차집합을 반환 | . x = np.array([1, 2, 3, 4]) y = np.array([3, 4, 5, 6]) np.setdiff1d(x, y) . array([1, 2]) . np.setxor1d(x, y) . 두 배열 x, y의 합집합에서 교집합을 뺀 대칭차집합을 반환 | . x = np.array([1, 2, 3, 4]) y = np.array([3, 4, 5, 6]) np.setxor1d(x, y) . array([1, 2, 5, 6]) .",
            "url": "https://safenumz.github.io/blog/python/2019/01/14/Python_numpy-%EC%A7%91%ED%95%A9%ED%95%A8%EC%88%98.html",
            "relUrl": "/python/2019/01/14/Python_numpy-%EC%A7%91%ED%95%A9%ED%95%A8%EC%88%98.html",
            "date": " • Jan 14, 2019"
        }
        
    
  
    
        ,"post260": {
            "title": "커맨드창에서 C, java 실행하기",
            "content": "커맨드창에서 C 실행하기 . # 파일 생성하고 코드 작성하고 :wq로 저장 및 종료 $ vi hello.c # gcc로 hello.c 파일을 컴파일하면 동일 디렉토리 내에 hello.out 파일이 생성된다 $ gcc hello.c -o hello.out # hello.out 실행 $ ./hello.out . 커맨드창에서 java 실행하기 . # hell.java 파일 hello.class로 컴파일 $ javac hello.java # 실행 $ java hello .",
            "url": "https://safenumz.github.io/blog/etc/2019/01/02/%EC%BB%A4%EB%A7%A8%EB%93%9C%EC%B0%BD%EC%97%90%EC%84%9C_C%EC%96%B8%EC%96%B4_%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0.html",
            "relUrl": "/etc/2019/01/02/%EC%BB%A4%EB%A7%A8%EB%93%9C%EC%B0%BD%EC%97%90%EC%84%9C_C%EC%96%B8%EC%96%B4_%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0.html",
            "date": " • Jan 2, 2019"
        }
        
    
  
    
        ,"post261": {
            "title": "Windows 환경설정",
            "content": "Windows10 포맷 후 환경설정 전체 과정 . 윈도우 포맷 후 환경설정을 일괄적으로 진행하기 위해 기록해 둡니다. . windows10 설치 . 설치 완료 후 cmd 관리자 권한으로 실행 | . $ slmgr/ipk W269N-WFGWX-YVC9B-4J6C9-T83GX $ slmgr /skms kms.digiboy.ir $ slmgr /ato . windows 원격접속 설정 . 설정 &gt; 시스템 &gt; 원격데스트톱 &gt; 원결 데스크톱 활성화 체크(3389 내부포트 열림) | 공유기 포트포워드의 내부포트(3389), 외부포트(접속할 사용자 지정 포트) 설정 | . WOL설정 및 포트포워드 설정 . 외부에서 컴퓨터에 원격접속하기 위한 설정 | 외부에서 컴퓨터를 켜고 끄는 것이 가능해짐 | 공유기 WOL에 MAC 주소 등록, 포트포워드에 IP 주소 등록 | . IPv4 주소 및 물리적 주소(MAC 주소) 확인 $ ipconfig/all . conEmu 설치 . cmd 대체 | . git 설치 . github 연결 . $ cd ~/.ssh $ ls #ls 명령어를 통해 확인해보면 .pub 파일이 생성된다. $ ssh-keygen -t rsa -C hotehrud@naver.com # cat 명령어를 통해 공개키를 출력하여 복사한다. $ cat /root/.ssh/id_rsa.pub # 그 후 Github 페이지에서 Setting 부분에서 SSH keys에 키를 추가하면 git push가 가능해진다. . Ruby 설치 . https://rubyinstaller.org/downloads// . Ruby+Devkit 2.5.3-1 (x64) 다운로드 | 환경변수 설정 | . jekyll 설치 . ruby가 설치되어 있어야 한다. | . # ruby 설치되어 있는지 확인 $ ruby -v # jekyll 설치 $ gem install jekyll bundler $ gem install jekyll-paginate bundler # jekyll 버전 확인 $ jekyll -v . python2 설치 . https://www.python.org/downloads/ 로 이동하여 Python 2.7.16 버전 다운로드 | 설치할 때 Customize Python 2.7.16에서 Add python.exe to Path를 Will be installed on local hard drive로 바꿔주어야 환경변수가 자동으로 등록됨 | . python3 설치 . https://repo.continuum.io/archive/index.html | Anaconda3-4.2.0-Windows-x86 | 파이썬 3.5.0 버전 (아나콘다 4.2.0 버전)을 32bit로 설치 (Stock api와 연동을 위해) | . Jupyter Notebook Setting . ~/.jupyter/custom/custom.css 파일 수정을 통해 jupyter notebook에서 실행할 폰트를 지정할 수 있다. 만약 ~/.jupyter 내부에 custom 폴더 및 custom.css 파일이 없다면 콘솔에서 다음 명령어를 입력하면 ~/.jupyter/ 내부에 custom/custom.css이 생성된다. . $ jupyter notebook --generate-config . #notebook, .CodeMirror pre, .output pre { font-family: NanumGothicCoding, Consolas; font-size: 1.9rem !important; line-height: 140% !important; } .dataframe, table { font-family: NanumGothicCoding, Consolas; font-size: 1.5rem !important; } .input { flex-direction: column !important; } .prompt_container { flex-direction: row !important; } @media (max-width: 1100px) { #notebook-container { padding: 0 !important; } .container { width: auto; } } .end_space { height: 75vh; } . 기타 파이썬 패키지 설치 . $ conda install seaborn $ conda install pandas-datareader $ conda install pandasql $ pip install missingno . xgboost 설치 . $ conda install -c conda-forge xgboost $ conda install -c conda-forge/label/gcc7 xgboost $ conda install -c conda-forge/label/cf201901 xgboost . lightgbm 설치 . $ conda install -c conda-forge lightgbm $ conda install -c conda-forge/label/cf201901 lightgbm . catboost 설치 . $ conda install -c conda-forge catboost $ conda install -c conda-forge/label/cf201901 catboost . The Best Way to Install TensorFlow with GPU Support on Windows 10 (Without Installing CUDA) . https://www.pugetsystems.com/labs/hpc/The-Best-Way-to-Install-TensorFlow-with-GPU-Support-on-Windows-10-Without-Installing-CUDA-1187/ . Update Your base Anaconda Packages . # conda 업데이트 # $ conda update -n base conda $ conda update conda $ conda update anaconda $ conda update python #설치된 파이썬 패키지를 모두 최신 버전으로 업데이트 $ conda update --all . Create a Python “Virtual environment” for TensorFlow using conda . $ conda install tensorflow-gpu keras-gpu $ conda create --name tf-gpu $ conda activate tf-gpu (tf-gpu) C: Users a&gt; conda install -c aaronzs tensorflow-gpu (tf-gpu) C: Users a&gt; conda install -c anaconda cudatoolkit (tf-gpu) C: Users a&gt; conda install -c anaconda cudnn . Check That TensorFlow is working with your GPU . &gt;&gt;&gt; import tesorflow as tf &gt;&gt;&gt; hello = tf.constant(&#39;Hello, TensorFlow!&#39;) &gt;&gt;&gt; sess = tf.Session() &gt;&gt;&gt; print(sess.run(hello)) . Create a Jupyter Notebook Kernel for the TensorFlow Environment . (tf-gpu) C: Users a&gt; conda install ipykernel (tf-gpu) C: Users a&gt; python -m ipykernel install --user --name tf-gpu --display-name &quot;TensorFlow-GPU&quot; . An Example using Keras with TensorFlow Backend . # Install Keras (tf-gpu) C: Users a&gt; &gt;conda install keras-gpu # Launch a Jupyter Notebook (tf-gpu) C: Users a&gt; jupyter notebook . Look at the job run with TensorBoard . # You will need &quot;bleach&quot; for TensorBoard so install it first (tf-gpu) C: Users a&gt; conda install bleach # Start TensorBoard (tf-gpu) C: Users a&gt; tensorboard --logdir=./logs --port 6006 # It will give you an address similar to http://stratw:6006 Open that in your browser and you will be greeted with (the wonderful) TensorBoard. These are the plots it had for that job run, . rstudio 설치 . Anaconda 내에서 rstudio 채널에 rstudio 설치 | jupyter notebook에서 r을 사용하기 위해 r커널 설치 | . $ conda activate rstudio # R 패키지 설치 - 기본적인 패키지들이 설치 됨 $ conda install -c r r-essentials # R 커널 설치 $ conda install r-irkernel1 . Node.js 설치 . https://nodejs.org/download/release/latest-v8.x/ . 10 버전 대가 아니라 8 버전대로 다운받음 | node-v8.15.1-win-x64.zip 파일을 C드라이버에 압축해제 | 환경변수 등록: C://node-v8.15.1-win-x64 | . Install Javascript on Jupyter Notebook . 8 버전대 Nodejs가 필요함 (10 버전부터는 에러뜰 수 있음) | . # nodejs가 제대로 설치되었는지 확인 $ node -v # ijavascript 설치 $ npm install -g ijavascript $ ijsinstall # 주피터 노트북 실행 $ ijs . MinGW 설치 . https://osdn.net/projects/mingw/downloads/68260/mingw-get-setup.exe/ . mingw32-base, mingw32-gcc-g++ 체크 | Installation &gt; Apply Charges 클릭 | 환경변수 등록 C: MinGW bin | . Java 설치 . Java SE 11버전 설치 . https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html . Java 환경변수 설정 . 제어판 &gt; 시스템 및 보안 &gt; 시스템 &gt; 고급 시스템 설정 &gt; 환경변수 설정 &gt; 시스템 변수 추가 | 사용자 변수가 아니라 시스템 변수에 추가해야 함 | 변수는 JAVA_HOME, 값은 C: Java jdk-11.0.2 등록 | 변수 path에 값 %JAVA_HOME% bin 등록 | . Ijava kernel . https://github.com/SpencerPark/IJava . 자바는 9버전 이상 설치되어 있어야 한다. . $ java -version . https://github.com/SpencerPark/IJava/releases . ijava-1.2.0.zip을 임시 폴더에 다운받고 압축을 푼다. 압축을 풀게 되면 install.py 파일과 java 폴더가 있다. install.py 파일을 파이썬3로 실행시킨다. . - Pass the -h option to see the help page $ python3 install.py -h . java kernel이 생성되었는지 확인한다. . $ jupyter kernelspec list . Visual Studio 2013용 Visual C++ 재배포 가능 패키지 설치 . https://www.microsoft.com/ko-kr/download/details.aspx?id=40784 | 64비트 중 32비트 윈도우 운영체제와 동일한 비트 선택 | . MySQL 설치 . https://dev.mysql.com/downloads/ . MySQL Community Server 설치 . MySQL 커뮤니티 에디션 &gt; MySQL Community Server 설치 | 5.7.24버전 64비트 다운 | mysql-5.7.24-winx64.zip 를 c드라이브에 압축해제 | 환경변수 등록: C://mysql-5.7.24-winx64/bin | . MySQL 설정 파일 생성 . MySQL이 설치된 폴더 내부에 data 폴더 생성 | MySQL이 설치된 폴더 내부에 my.ini 파일 생성하고 아래 코드 작성 후 저장 | . [mysqld] # MySQL이 설치된 디렉토리 basedir = C: mysql-8.0.15-winx64 # 데이터가 저장될 경로 datadir = C: mysql-8.0.15-winx64/data # 기본 포트 번호 port = 3306 # SQL모드 sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES . # mysqld --console #만약 에러가 뜨면 data 폴더 안에 있는 내용을 지우고 다시 시도 $ mysqld --initialize-insecure $ mysqld --install $ net start mysql . 윈도우 서비스 확인 . services.msc | MYSQL 속성의 시작유형 자동 확인 | 시작 유형을 자동으로 설정하면 컴퓨터를 부팅할 때마다 MySQL이 자동으로 실행 | . MySQL 접속하기 . $ mysql -uroot -p . MySQL root 패스워드 설정하기 . exit로 mysql 접속 해제 후 진행 | mysqladmin -u아이디 -p기존패스워드 password 신규패스워드 | 만약 아이디 root, 신규패스워드 root 지정 시 | . $ mysqladmin -uroot -p password root . MySQL Connectors 설치 . Connector/Python 선택 | Select Operation System에서 반드시 Miscrosoft Windows가 아니라 Platform Independent를 선택하여 다운로드 | . $ pip install mysql-connector-python-8.0.15.zip # 만약 에러나면 아래 명령어로 설치 $ pip install mysql-connector-python . TA-Lib 설치 . 기술적 지표 제공 | Unofficial Windows Binaries for Python Extension Packages https://www.lfd.uci.edu/~gohlke/pythonlibs/ | TA_Lib-0.4.17-cp35-cp35m-win32 | python version과 동일하게 맞춰준다. (python 3.5 버전 기준으로 다운) | . # TA library 설치 $ pip install TA_lib-0.4.10-cp35-cp35m-win32.whl . HeidiSQL 설치 . https://www.heidisql.com/ . pycharm 설치 . https://www.jetbrains.com/pycharm/?fromMenu . Scala 설치 . 절대로 기본 경로로 설치하면 안된다. 그냥 다음 버튼을 누르다보면 program fils에 설치되는데 spark은 중간에 띄어쓰기가 들어간 경로를 인식하지 못한다. C://에 설치하도록한다. | . 인텔리j 설치 . 이클립스도 상관없음 | . Maven 설치 . http://maven.apache.org/download.cgi . apache-maven-3.6.0-bin.zip | 환경변수 등록 : | . Spark 설치 . 2.4.0 버전, Pre-built for Apache Hadoop 2.7 and later 다운받아 C:// 에 저장 | . # pyspark 설치 $ pip install pyspark . Zeppelin 설치 . 다운받아 C:// 에 저장 | . Atom 설치 . Settings . Settings &gt; Editor에서 Scroll Past End 체크 | Settings &gt; Packages에서 autocomplete plus를 disabled 시킴 | . Packages . markdown-preview-enhanced . Code Block Theme -&gt; gitbub.css 선택 | Preview Theme -&gt; medium.css 선택 | Revealjs Theme -&gt; black.css 선택 | Mermaid Theme -&gt; default 선택 | . script . Ensime . Hydrogen . atom-beautify . atom-html-preview . atom-runner . autocomplete-clang . autocomplete-python . autocomplete-sql . language-scala . browser-plus . emmet . gpp-compiler . MinGW 설치 https://osdn.net/projects/mingw/downloads/68260/mingw-get-setup.exe/ | mingw32-base, mingw32-gcc-g++ 체크 | Installation &gt; Apply Charges 클릭 | 환경변수 등록 C: MinGW bin | . liter-gcc . highlight-selected . hyperclick . atom-ide-ui . zentabs . intentions . kite . linter . linter-ui-default . busy-signal . Java 설치 . 기타 프로그램 . 엔비디아 그래픽 드라이버 설치 | 크롬 | 알집 | 알약 | 곰플레이어 | 꿀뷰 | Miscrosoft Remote Desktop 설치 | Actual Multiple Monitors | 4t Tray Minimizer | 로지텍 옵션 | epson L4150 드라이버 설치 | slack | 나눔고딕코딩 폰트 설치 | Naver Live Streaming | .",
            "url": "https://safenumz.github.io/blog/etc/2019/01/02/Windows_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html",
            "relUrl": "/etc/2019/01/02/Windows_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html",
            "date": " • Jan 2, 2019"
        }
        
    
  
    
        ,"post262": {
            "title": "[Project] Austion Animal Shelter Classification Analysis",
            "content": "",
            "url": "https://safenumz.github.io/blog/project/2019/01/01/animal.html",
            "relUrl": "/project/2019/01/01/animal.html",
            "date": " • Jan 1, 2019"
        }
        
    
  
    
        ,"post263": {
            "title": "[MySQL] INTERMEDIATE (2)",
            "content": "7. INDEX . 테이블에서 데이터를 검색할때 빠르게 찾을 수 있도록 해주는 기능 | WHERE 절에 들어가는 컬럼을 INDEX로 설정해 놓으면 설정할 컬럼을 조건으로 검색할 때 빠르게 검색할 수 있음 | 자주 검색하는 조건은 INDEX로 설정해 놓으면 좋지만 너무 많은 인덱스가 설정되게 되면 데이터가 입력될때마다 INDEX에 데이터를 넣어야 함으로 데이터 입력시 속도가 느려질 수 있음 | 그러므로 인덱스는 검색 조건으로 자주 사용하는 컬럼에 설정해 놓으면 좋음 | . 7.1 syntax . CREATE INDEX 인텍스이름 ON 테이블이름 (컬럼이름1, 컬럼이름2) . 7.2 example . -- city 테이블에 Population 컬럼을 인덱스로 추가 CREATE INDEX Population ON city (Population) -- city 테이블에 Population 인덱스 제거 DROP INDEX Population ON city . 7.3 explain . query를 실행하기 전에 index로 검색을 하는지 확인할 수 있음 | . -- 100만이 넘는 도시의 데이트를 출력의 실행계획을 확인 EXPLAIN SELECT * FROM city WHERE population &gt; 1000000 . Extra 컬럼에 Index가 없으면 Using where로 검색이 되지만 Index가 있으면 Using index로 검색됨을 확일할 수 있음 | Type 컬럼의 값이 ALL이면 Index를 사용하지 않고 있다는 의미 . | 검색절차 : 스토리지(Index + Data) -&gt; (row) -&gt; Mysql 엔진(필터링 전) -&gt; (filtered) -&gt; Mysql 엔진 (필터링후) | . 7.4 emplyees의 salaries로 테스트 . employees.sql을 데이터 베이스에 저장 | employee.sql 파일을 strp를 이용하여 ubuntu 서버로 이동 | ubuntu 서버에서 musql 로그인 | . $ mysql -u root -p mysql&gt; create database employee; mysql&gt; use employees; mysql&gt; source employees.sql . -- employees 데이터 베이스로 이동 USE employees -- salaries 테이블에 fdate 인덱스 제거 DROP INDEX fdate ON salaries -- 실행계획 확인 및 쿼리 실행 EXPLATIN SELECT * FROM salaries WHERE from_date&lt;&#39;1985-02-01&#39; -- 여러개의 조건을 인덱스로 설정 -- 여러개의 조건이 올때는 여러개의 컬럼을 함께 인덱스로 사용하는게 좋음 CREATE INDEX ftdate ON salaries (from_date, to_date) -- salaries 테이블에 ftdate 인덱스 제거 DROP INDEX fdate ON salaries -- 실행계획 확인 및 쿼리 실행 EXPLAION SELECT * FROM salaries WHERE from_date&lt;&#39;1985-02-01&#39; and to_date&lt;&#39;1990-01-01&#39; . 8. View . 가상 테이블로 특정 데이터만 보고자 할때 사용함 | 실제 데이터를 저장하고 있지는 않음 | 한번 생성된 뷰는 수정이 불가능하며 인덱스 설정이 불가능함 | . 8.1 syntax . CREATE VIEW &lt;뷰이름&gt; AS (QUERY) . 8.2 example . -- 국가코드와 국가이름이 있는 뷰 생성 CREATE VIEW code_name AS SELECT code, name FROM country -- city 테이블에 국가 이름 추가 SELECT * FROM city JOIN code_name ON city.countrycode=code_name.code .",
            "url": "https://safenumz.github.io/blog/sql/2018/12/06/MySQL_INTERMEDIATE(2).html",
            "relUrl": "/sql/2018/12/06/MySQL_INTERMEDIATE(2).html",
            "date": " • Dec 6, 2018"
        }
        
    
  
    
        ,"post264": {
            "title": "[MySQL] INTERMEDIATE (1)",
            "content": "1. CEIL, ROUND, TRUNCATE . CEIL, ROUND, TRUNCATE는 소수점 올림, 반올림, 버림 함수임 | . 1.1 CEIL . CEIL은 실수 데이터를 올림할 때 사용 | . -- 12.345를 올림하여 정수로 나타냄 SELECT CEIL(12.345) -- 국가별 언어 사용비율을 소수 첫번째자리에서 올림하여 정수로 나타냄 SELECT CountryCode, Language, Percentage, CEIL(Percentage) FROM countrylanguage . 1.2. ROUND . ROUND는 실수 데이트를 반올림할 때 사용 | . -- 12.345를 소수 둘째자리까지 나타내고 소수 셋째자리에서 반올림 SELECT ROUND(12.345, 2) -- 국가별 언어 사용비율을 소수 첫번째 자리에서 반올림하여 정수로 나타냄 SELECT CountryCode, Language, Percentage, ROUND(Percentage, 0) FROM countrylanguage . 1.3. TRUNCATE . TRUNCATE는 실수데이터를 버림할 때 사용 | . -- 12.345를 소수 둘째자리까지 나타내고 소수 셋째자리에서 버림 SELECT TRUNCATE(12.345, 2) -- 국가별 언어 사용비율을 소수 첫번째 자리에서 버림하여 정수로 나타냄 SELECT CountryCode, Language, Percentage, TRUNCATE(Percentage, 0) FROM countrylanguage SELECT CountryCode, Language, Percentage, ROUND(Percetage, 0), TRUNCATE(Percentage, 0) FROM countrylagnuage . 2. Conditional . SQL에서도 다른 언어에서 처 조건문 사용이 가능함. | . 2.1 IF . syntax : IF(조건, 참, 거짓) | . -- 도시의 인구가 100만이 넘으면 &#39;big city&#39; 그렇지 않으면 &#39;small city를 출력하는 city_scale 칼럼을 추가 SELECT name, population, IF(population &gt; 1000000, &#39;big city&#39;, &#39;samll city&#39;) AS city_scale FROM city . 2.2 IFNULL . syntax : IFNULL(참, 거짓) | . -- 독립연도가 없는 데이터는 0으로 출력 SELECT IndepYear, IFNULL(IndepYear, 0) as IndepYear FROM country . 2.3 CASE . syntax | . CASE WHEN (조건1) THEN (출력1) WHEN (조건2) THEN (출력2) END AS (컬럼명) . -- 나라별로 인구가 10억 이상, 1억이상, 1억 이하인 컬럼을 추가하여 출력 SELECT name, population, CASE WHEN population &gt; 1000000000 THEN &#39;upper 1 bilion&#39; WHEN populat4444444444444444444444on &gt; 100000000 THEN &#39;upper 100 milion&#39; ELSE &#39;below 100 milion&#39; END AS result FROM country . 3. DATA_FORMAT . DATE_FORMAT은 날짜 데이터에 대한 포맷을 바꿔줌 | . SELECT DATE_FORMAT(payment_date, &#39;%Y-%m&#39;) AS mounthly, SUM(amount) AS amount FROM paymnet GROUP BY monthly . 4. MAKE TEST TABLE &amp; DATA . JOIN은 여러개의 테이블에서 데이터를 모아서 보여줄 때 사용. JOIN에는 INNER JOIN, LEFT JOIN, RIGHT JOIN이 있음 | . 4.1 MAKE TEST TABLE &amp; DATA . -- create table &amp; data CREATE TABLE user ( user_id int(11) unsigned NOT NULL AUTO_INCREMENT, name varchar(30) DEFAULT NULL, PRIMARY KEY (user_id) ) ENGINE=InnoDB DEFAULT CHARSET=uft8; CREATE TABLE addr ( id int(11) unsigned NOT NULL AUTO_INCREMENT, addr varchar(30) DEFAULT NULL, user_id int(11) DEFAULT NULL, PRIMARY KEY(id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO user(name) VALUES (&#39;jin&#39;), (&#39;po&#39;), (&#39;alice&#39;), (&#39;petter&#39;); INSERT INTO addr(addr, user_id) VALUES (&#39;seoul&#39;, 1), (&#39;pusan&#39;, 2), (&#39;deajeon&#39;, 3), (&#39;deagu&#39;, 5), (&#39;seoul&#39;, 6); . 4.2 INNER JOIN . 두 테이블 사이에 공통된 값이 없는 row는 출력하지 않음 | . -- 두 테이블을 합쳐 id, name, addr 출력 SELECT id, user.name, addr.addr FROM user JOIN addr ON user.user_id = addr.user_id -- world 데이터베이스에서 도시이름과 국가이름을 출력 SELECT country.name AS city_name, city.name AS country_name FROM city JOIN country ON city.CountryCode = country.code . 4.3 LEFT JOIN . 왼쪽 테이블을 기준으로 왼쪽 테이블의 모든 데이터가 축적되고 매핑되는 키값이 없으면 NULL을 출력함 | . -- 두 테이블을 합쳐 id, name, addr 출력 SELECT id, user.name, addr.addr FROM user LEFT JOIN addr ON user.user_id = addr.user_id . 4.4 RIGHT JOIN . 오른쪽 테이블을 기준으로 왼쪽 테이블의 모든 데이터가 출력되고 매핑되는 키값이 없으면 NULL을 출력함 | . -- 두 테이블을 합쳐 id, name, addr 출력 SELECT id, user.name, addr.addr FROM user RIGHT JOIN addr ON user.user_id = addr.user_id . 5. UNION . UNION은 SELECT문의 결과 데이터를 하나로 합쳐서 출력함 | 컬럼의 갯수와 타입 순서가 같아야 함 | UNION은 자동으로 distinct를 하여 중복을 제거해 줌 | 중복제거를 안하고 컬럼데이터를 합치고 싶으면 UNION ALL을 사용함 | 또한 UNION을 이용하면 Full Outer Join을 구현할 수 있음 | . 5.1 UNION . -- user 테이블의 name 칼럼과 addr의 데이터를 하나로 합쳐서 출력 SELECT name FROM user UNION SELECT addr FROM ADDR . 5.2 UNION ALL . -- 중복데이터를 제거하지 않고 결과 데이터 합쳐서 출력 SELECT name FROM user UNION ALL SELECT addr FROM addr . 5.3 FULL OUTER JOIN . union을 이용하여 full outer join 구현 | . -- union을 이용하여 full outer join 구현 SELECT id, user.name, addr.addr FROM user LEFT JOIN addr ON user.user_id = addr.user_id UNION SELECT id, user.name, addr.addr FROM user RIGHT JOIN addr ON user.user_id = addr.user_id . 6. Sub-Query . sub query는 query 문 안에 있는 query를 의미함. SELECT절 FROM절, WHERE 등에 사용이 가능함 | . -- 전체 나라수, 전체 도시수, 전체 언어수를 출력 (SELECT 절에 사용) SELECT (SELECT count(name) FROM city) AS total_city, (SELECT count(name) FROM country) AS total_country, (SELECT count(DISTINCT(Language)) FROM countrylanguage) AS total_language FROM DUAL -- 800만 이상도는 도시의 국가코드, 이름, 도시인구수를 출력 (FROM 절에 사용) SELECT * FROM (SELECT coutrycode, name, population FROM city WHERE population &gt; 8000000) AS CITY JOIN (SELECT code, name FROM country) AS coungry ON city.countrycode = country.code -- 800만 이상 도시의 국가코드, 국가이름, 대통령이름을 출력(WHERE 절에 사용) SELECT code, name, HeadOfState FROM country WHERE code IN ( SELECT DISTINCT(countrycode) FROM city WHERE population &gt; 8000000 ) .",
            "url": "https://safenumz.github.io/blog/sql/2018/12/05/MySQL_NTERMEDIATE(1).html",
            "relUrl": "/sql/2018/12/05/MySQL_NTERMEDIATE(1).html",
            "date": " • Dec 5, 2018"
        }
        
    
  
    
        ,"post265": {
            "title": "[Java] 10) Collections",
            "content": "Collections . 배열과 같이 자료(데이터)를 효율적으로 관리하기 위한 방법 | . List . List는 인터페이스로 이를 구현한 클래스는 인덱스를 이용해서 데이터를 관리 | 인덱스를 이용하며 데이터 중복이 가능 | Vector, ArrayList, LinkedList | . import java.util.ArrayList; public class MainClass { public static void main(String[] args) { // ArrayList 객체 생성 ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); System.out.println(&quot;list.size : &quot; + list.size()); // 데이터 추가 list.add(&quot;Hello&quot;); list.add(&quot;Java&quot;); list.add(&quot;World&quot;); System.out.println(&quot;list.size : &quot; + list.size()); System.out.println(&quot;list : &quot; + list); // 데이터 추가 list.add(2, &quot;Programming&quot;); System.out.println(&quot;list : &quot; + list); // 데이터 변경 list.set(1, &quot;C&quot;); System.out.println(&quot;list : &quot; + list); // 데이터 추출 String str = list.get(2); System.out.println(&quot;list.get(2) : &quot; + str); System.out.println(&quot;list : &quot; + list); // 데이터 제거 str = list.remove(2); System.out.println(&quot;list.remove(2) : &quot; + str); System.out.println(&quot;list : &quot; + list); // 데이터 전체 제거 list.clear(); System.out.println(&quot;list : &quot; + list); // 데이터 유무 boolean b = list.isEmpty(); System.out.println(&quot;list.isEmpty() : &quot; + b); System.out.println(&quot; ============================ &quot;); } } . Map . Map은 인터페이스로 이를 구현한 클래스는 Key를 이용해 데이터를 관리 | 중복되지 않은 Key를 이용하며, 데이터 중복이 가능 | . import java.util.ArrayList; public class MainClass { public static void main(String[] args) { HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;(); System.out.println(&quot;map.size() : &quot; + map.size()); map.put(5, &quot;Hello&quot;); map.put(6, &quot;Java&quot;); map.put(7, &quot;World&quot;); System.out.println(&quot;map : &quot; + map); System.out.pritnln(&quot;map.size() : &quot; + map.size()); map.put(8, &quot;!!&quot;); System.out.println(&quot;map : &quot; + map); // 데이터 교체 map.put(6, &quot;C&quot;); System.out.println(&quot;map: &quot; + map); // 데이터 추출 str = map.get(5); System.out.println(&quot;map.get(5) : &quot; + str); // 데이터 제거 map.remove(8); System.out.println(&quot;map: &quot; + str) // 특정 데이터 포함 유무 b = map.containsKey(7); System.out.println(&quot;map.containsKey(7) : &quot; + b); b = map.containsValue(&quot;World&quot;); System.out.println(&quot;map.containsValue( &quot;World &quot;) : &quot; + b); map.clear(); System.out.println(&quot;map: &quot; + map); // 데이터 유무 b = map.isEmpty(); System.out.println(&quot;map.isEmpty() : &quot; + b); } } .",
            "url": "https://safenumz.github.io/blog/java/2018/10/27/Java-10)_Collection.html",
            "relUrl": "/java/2018/10/27/Java-10)_Collection.html",
            "date": " • Oct 27, 2018"
        }
        
    
  
    
        ,"post266": {
            "title": "[Java] 09) 문자열 클래스",
            "content": "문자열 클래스 . 문자열을 다루는 String 클래스와 이를 보완한 StringBuffer, StringBuilder 클래스 | . String 객체와 메모리 . 문자열을 다루는 String 클래스 (객체)는 데이터가 변하면 메모리상의 변화가 많아 속도가 느림 | 문자열이 변경되면 기존의 객체를 버리고, 새로운 객체를 메모리에 생성, 기존 객체는 gc에 의해서 메모리 회수가 이뤄짐 | . String str = &quot;JAVA&quot;; str = str + &quot;_8&quot;; . StringBuffer, StringBuilder . String 클래스의 단점을 보완한 클래스로 데이터가 변경되면 메모리에서 기존 객체를 재활용 | 속도는 StringBuilder가 조금 더 빠르며, 데이터 안정성은 StringBuffer가 조금 더 좋음 | . StringBuffer sf = new StringBuffer(&quot;JAVA&quot;); sf.append(&quot;_8&quot;); . public class MainClass { public static void main(String[] args) { //String str = &quot;JAVA&quot;; String str = new String(&quot;JAVA&quot;); System.out.println(&quot;str : &quot; + str); str = str + &quot;_8&quot;; System.out.println(&quot;str: &quot; + str); // StringBuffer StringBuffer sf = new StringBuffer(&quot;JAVA&quot;); System.out.println(&quot;sf: &quot; + sf); sf.append(&quot; World&quot;); System.out.println(&quot;sf : &quot; + sf); System.out.println(&quot;sf.length() : &quot; + sf.length()); // 맨 마지막에 추가 sf.insert(sf.length(), &quot;____&quot;); // 4~8 부분 삭제 sf.delete(4, 8); StringBuilder sb = new StringBuilder(&quot;JAVA World!&quot;); System.out.println(&quot;sb : &quot; + sb); } } .",
            "url": "https://safenumz.github.io/blog/java/2018/10/26/Java-09)_%EB%AC%B8%EC%9E%90%EC%97%B4_%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "relUrl": "/java/2018/10/26/Java-09)_%EB%AC%B8%EC%9E%90%EC%97%B4_%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "date": " • Oct 26, 2018"
        }
        
    
  
    
        ,"post267": {
            "title": "[Java] 08) 람다식",
            "content": "람다식 . 기존의 객체지향이 아닌 함수 지향으로 프로그래밍 | 익명 함수(annoymous function)을 이용해서 익명 객체를 생성하기 위한 식 | . LambdaInterface1.java . public interface LambdaInterface1 { public void method(String s1, String s2, String s3); } . LambdaInterface2.java . public interface LambdaInterface1 { public void method(String s1); } . LambdaInterface3.java . public interface LambdaInterface1 { public void method(); } . LambdaInterface4.java . public interface LambdaInterface1 { public int method(int x, int y); } . MainClass.java . public class MainClass { public static void main(String[] args) { // 매개변수와 실행문만으로 작성한다.(접근자, 반환형, return 키워드 생략) LambdaInterface1 li1 = (String s1, String s2, String s3) -&gt; { System.out.println(s1 + &quot; &quot; + s2 + &quot; &quot; + s3);}; li1.method(&quot;Hello&quot;, &quot;java&quot;, &quot;World&quot;); System.out.println(); // 매개변수가 1개이거나 타입이 같을 때, 타입을 생략할 수 있다. LambdaInterface2 li2 = (s1) -&gt; { System.out.println(s1); }; li2.method(&quot;Hello&quot;); // 실행문이 1개일 때 &#39;{}&#39;를 생략할 수 있다. LambdaInterface2 li3 = (s1) -&gt; System.out.println(s1); li3.method(&quot;Hello&quot;); // 매개변수와 실행문이 1개일 때, &#39;()&#39;와 &#39;{}&#39;를 생략할 수 있다. LambdaInterface2 li4 = s1 -&gt; System.out.println(s1); li4.method(&quot;Hello&quot;); // 매개변수가 없을 때 &#39;()&#39;만 작성한다. LambdaInterface3 li5 = () -&gt; System.out.println(&quot;no parameter&quot;); // 반환값이 있는 경우 LambdaInterface4 li6 = (x, y) -&gt; { int result = x + y; return result; } System.out.printf(&quot;li6.method(10, 20) : %d n&quot;, li6.method(10, 20)); li6 = (x, y) -&gt; { int result = x * y; return result; } System.out.printf(&quot;li6.method(10, 20) : %d n&quot;, li6.method(10, 20)); li6 = (x, y) -&gt; { int result = x - y; return result; } System.out.printf(&quot;li6.method(10, 20) : %d n&quot;, li6.method(10, 20)); } } .",
            "url": "https://safenumz.github.io/blog/java/2018/10/25/Java-08)_%EB%9E%8C%EB%8B%A4%EC%8B%9D.html",
            "relUrl": "/java/2018/10/25/Java-08)_%EB%9E%8C%EB%8B%A4%EC%8B%9D.html",
            "date": " • Oct 25, 2018"
        }
        
    
  
    
        ,"post268": {
            "title": "[Java] 07) 추상클래스",
            "content": "추상클래스 . 인터페이스와 비슷한 형태로 구체화되지 않은 맴버를 이용해서 클래스를 만드는 방법에 대해 학습 | . 추상클래스 구현 . 클래스의 공통된 부분을 뽑아서 별도의 클래스 (추상클래스)로 만들어 놓고, 이것을 상속해서 사용 | 클래스 상속과 마찬가지로 extends 키워드를 이용해서 상속하고 abstract(추상) 매서드를 구현 | . abstract 클래스의 특징 . 맴버변수를 가짐 | abstract 클래스를 상속하기 위해서는 extends를 이용 | abstract 매서드를 가지며, 상속한 클래스에서 반드시 구현해야 함 | 일반 메서드도 가질 수 있음 | 일반 클래스와 마찬가지로 생성자도 있음 | . AbstractClassEx.java . public abstract class AbstractClassEx { int num; String str; public AbstractClassEx() { System.out.println(&quot;AbstractClassEx constructor&quot;); } public AbstractClassEx(int i, String s) { System.out.println(&quot;AbstractClassEx constructor&quot;); this.num = i; this.str = s; } public void fun1() { System.out.println(&quot; -- fun1() START -- &quot;); } // 추상클래스는 상속을 받고 있는 클래스에서 반드시 구현해야 함 public abstract void fun2(); } . ClassEx.java . public class ClassEx extends AbstractClassEx { public ClassEx() { System.out.println(&quot;ClassEx constructor&quot;); } public ClassEx(int i, String s) { super(i, s); } // 재정의 @Override public void fun2() { System.out.println(&quot; -- fun2() START -- &quot;); } } . MainClass.java . public class MainClass { public static void main(String[] args) { AbstractEx ex = new ClassEx(10, &quot;java&quot;); ex.fun1(); ex.fun2(); } } . Bank 추상클래스 . Bank.java . public abstract class Bank { String name; String account; int totalAmount; public Bank() { System.out.println(&quot;Bank constructor&quot;); } public Bank(String name, String acoount, int totalAmount) { System.out.println(&quot;Bank constructor&quot;); this.name = name; this.account = account; this.totalAmount = totalAmount; } // 예금 public void deposit() { System.out.println(&quot; -- deposit() START -- &quot;); } // 출금 public void withdraw() { System.out.println(&quot; -- withdraw() START -- &quot;); } // 적금 public abstract void installmentSavings(); // 해약 public abstract void cancellation(); // 정보출력 public void getInfo() { System.out.printf(&quot;name : %s n&quot;, name); System.out.printf(&quot;account : % n&quot;, account); System.out.printf(&quot;totalAmount : % n&quot;, totalAmount); } } . MyBank.java . public class MyBank extends Bank { public MyBank(String name, String account, int totalAmount) { super(name, account, totalAmount); } @Override public void installmentSavings() { System.out.println(&quot; -- installmentSavings() START -- &quot;); } @Override public void cancellation() { System.out.println(&quot; -- cancellation() START -- &quot;); } } . MainClass.java . public class MainClass { public static void main(String[] args) { Bank myBank = new MyBank(&quot;박찬호&quot;, &quot;123-456-932348&quot;, 10000); myBank.deposit(); myBank.withdraw(); myBank.installmentSavings(); myBank.cancellation(); System.out.println(); myBank.getInfo(); } } . 인터페이스 vs 추상클래스 . 공통점 . 추상 매서드를 가짐 | 객체 생성이 불가하며 자료형(타입)으로 사용 | . 차이점 . 인터페이스 추상클래스 . 상수, 추상매서드만 가짐 | 클래스가 가지는 모든 속성과 기능을 가짐 | . 추상 매서드를 구현만 하도록 함 | 추상 매서드 구현 및 상속의 기능을 가짐 | . 다형성을 지원 | 단일 상속만 지원함 | .",
            "url": "https://safenumz.github.io/blog/java/2018/10/24/Java_07)_%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "relUrl": "/java/2018/10/24/Java_07)_%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "date": " • Oct 24, 2018"
        }
        
    
  
    
        ,"post269": {
            "title": "[Java] 06) 인터페이스",
            "content": "인터페이스 . 객체가 다양한 데이터 타입을 가질 수 있는 방법에 대해 학습 | . 인터페이스 . 클래스와 달리 객체를 생성할 수 없으며, 클래스에서 구현해야 하는 작업 명세서 | 객체가 다양한 자료형(타입)을 가질 수 있기 때문에 인터페이스를 사용 | class 대신 interface 키워드를 사용하며, extends 대신 implements 키워드를 이용 | . public class ImplementClass implements InterfaceA, InterfaceB, InterfaceC, InterfaceD { public InplementClass() { System.out.println(&quot;ImplementClass constructor&quot;); } } . InterfaceA ia = new ImplementClass(); InterfaceB ib = new ImplementClass(); InterfaceC ic = new ImplementClass(); InterfaceD id = new ImplementClass(); . 인터페이스 구현 . interfaceA . // interface는 정의부가 없음 // 선언만 해 놓음 public interface InterfaceA { public void funA(); } . interfaceB . public interface InterfaceB { public void funB(); } . interface class . public class Interfaceclass implements InterfaceA, InterfaceB { public Interfaceclass() { System.out.println(&quot; -- Interfaceclass constructor --&quot;) } @Override public void funA() { System.out.println(&quot; -- funA() -- &quot;); } @Override public void funB() { System.out.println(&quot; -- funB() -- &quot;); } } . main class . public class MainClass { public static void main(String[] args) { InterfaceA ia = new Interfaceclass(); InterfaceB ib = new Interfaceclass(); ia.funA(); ib.funB(); } } . 장난감 인터페이스 . Toy robot = new ToyRobot(); Toy airplane = new ToyAirplane(); Toy toys[] = {robot, airplane}; for (int i = 0; i &lt; toy.length; i++) { toys[i].walk(); toys[i].run(); toys[i].alarm(); toy[i].light(); System.out.println(); } . Toy.java . public interface Toy { public void walk(); public void run(); public void alarm(); public void light(); } . ToyAirplane.java . public class ToyAirplane implements Toy { @Override public void walk() { System.out.println(&quot;The airplane can not walk&quot;); } @Override public void run() { System.out.println(&quot;The airplane can not run.&quot;); } @Override public void alarm() { System.out.println(&quot;The airplane has alarm function.&quot;); } @Override public void light() { System.out.println(&quot;The airplane has no light function.&quot;) } } . ToyRobot.java . public class ToyRobot implements Toy { @Override public void walk() { System.out.println(&quot;The robot can walk&quot;); } @Override public void run() { System.out.println(&quot;The robot can run&quot;); } @Override public void alarm() { System.out.println(&quot;The robot has no alarm function.&quot;); } @Override public void light() { System.out.println(&quot;The robot has light function.&quot;) } } . MainClass.java . import com.java.toy.Toy; public class MainClass { public static void main(String[] args) { Toy robot = new ToyRobot(); Toy airplane = new ToyAirplane(); // 데이터 타입이 Toy로 통일되었기 때문에 배열에 담길 수 있음 Toy toys[] = {robot, airplane}; for (int i = 0; i &lt; toys.length; i++) { toys[i].walk(); toys[i].run(); toys[i].alarm(); toys[i].light(); System.out.println(); } } } .",
            "url": "https://safenumz.github.io/blog/java/2018/10/24/Java_06)_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4.html",
            "relUrl": "/java/2018/10/24/Java_06)_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4.html",
            "date": " • Oct 24, 2018"
        }
        
    
  
    
        ,"post270": {
            "title": "[Java] 06) 내부클래스와 익명클래스",
            "content": "내부 클래스와 익명 클래스 . 클래스 안에 또 다른 클래스를 선언하는 방법과 이름이 없는 클래스를 선언하는 방법에 대해서 학습 | . 내부 (inner) 클래스 . 클래스 안에 또 다른 클래스를 선언하는 것으로 이렇게 하면 두 클래스의 맴버에 쉽게 접근할 수 있음 | . public class OuterClass { int num = 10; String str1 = &quot;java&quot;; static String str11 = &quot;world&quot;; public OuterClass() { System.out.println(&quot;OuterClass constructor&quot;); } class InnerClass { int num = 100; String str2 = str1; public InnerClass() { System.out.println(&quot;InnerClass constructor&quot;); } } static class SInnerClass { int num = 1000; String str3 = str1; public SInnerClass() { System.out.println(&quot;static InnerClass constructor&quot;); } } } . Main class . public class MainClass { public static void main(String[] args) { OuterClass oc = new OuterClass(); System.out.println(&quot;oc.num : &quot; + oc.num); System.out.println(&quot;oc.str1 : &quot; + oc.str1); System.out.println(); // 맴버 inner 클래스 OuterClass.InnerClass in = oc.new InnerClass(); System.out.println(&quot;ln.num : &quot; + in.num); System.out.println(&quot;in.str2 : &quot; + in.str2); System.out.prinln(); // static inner 클래스 OuterClass.SInnerClass si = new OuterClass.SInnerClass(); System.out.println(&quot;si.num : &quot; + si.num); System.out.println(&quot;si.str3 : &quot; + si.str3); System.out.println(); } } . 익명(annoymous) 클래스 . 이름이 없는 클래스로 주로 매서드를 재정의 하는 목적으로 사용 | . public class AnoymousClass { public AnonymousClass() { System.out.println(&quot;AnonymousClass constructor&quot;); } public void method() { System.out.println(&quot; -- AnonymousClass&#39;s method START -- &quot;); } } . new AnonymousClass() { @Override public void method() { System.out.println(&quot; -- AnonymousClass&#39;s Override method START -- &quot;); } }.method(); // AnonymousClass constructor // -- AnonymousClass&#39;s Override method START -- // 재정의한 매서드를 바로 호출해서 사용 .",
            "url": "https://safenumz.github.io/blog/java/2018/10/24/Java_05)_%EB%82%B4%EB%B6%80%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80_%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "relUrl": "/java/2018/10/24/Java_05)_%EB%82%B4%EB%B6%80%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80_%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "date": " • Oct 24, 2018"
        }
        
    
  
    
        ,"post271": {
            "title": "[Java] 04) 상속 및 클래스",
            "content": "상속 . 상속 : 부모 클래스를 상속받은 자식 클래스는 부모 클래스의 속성과 기능도 이용할 수 있음 | 상속의 필요성 : 기존의 검증된 클래스를 이용해서 빠르고 쉽게 새로운 class를 만들 수 있음 | . 상속 구현 . extends 키워드를 이용해서 상속을 구현 | 단일 상속만 지원 | . package lect18Pjt001; public class ParentClass { public ParentClass() { System.out.println(&quot;ParentClass constructor&quot;); } public void parentFun() { System.out.println(&quot;-- parentFun() START -- &quot;); } } . package lect18Pjt001; public class ChildClass extends ParentClass { public ChildClass() { System.out.println(&quot;ChildClass constructior&quot;); } public void childFun() { System.out.println(&quot;-- childFun() START -- &quot;); } } ChildClass child = new ChildClass(); child.parentFun(); child.childFun(); . parent class . public class ParentClass { public ParnetClass() { System.out.println(&quot;ParentClass constructor&quot;); } public void parentFun() { System.out.println(&quot;parentFun()&quot;); } } . child class . public class ChildClass extends ParentClass { pulbic ChildClass() { System.out.println(&quot;CHidlCLass Contructor&quot;); } public void childFun() { System.out.println(&quot;childFun()&quot;); } } . main class . public class MainClass { public static void main(String[] args) { ChildClass childClass = new ChildClass(); childClass.childFun(); childClass.parentFun(); } } . 부모 클래스의 private 접근() . 자식 클래스는 부모 클래스의 모든 자원을 사용할 수 있지만 private 접근자의 속성과 매서드는 사용할 수 없음 | . parent class . public class ParentClass { private void privateFun() { System.out.println(&quot;privateFun()&quot;); } } . main class . public class MainClass { public static void main(String[] args) { ChildClass childClass = new ChildClass(); childClass.parentFun() } } // invisible 접근 불가 . 상속 특징 . 상속관계에 있는 클래스의 특징들에 대해 학습 | . 매서드 오버라이드 . 부모 클래스의 기능을 자식 클래스에서 재정의해서 사용 | . parent class . public class ParentClass { public void makeJJajang() { System.out.println(&quot; -- makeJJajang() START -- &quot;); } } . child class . public class Child extends ParentClass { @Override public void makeJJajang() { System.out.println(&quot; -- more delicious makeJJajang() START --&quot;); } } . main class . ChildClass child = new ChildClass(); child.makeJJajang(); // -- more delicious makeJJajang() START -- . 자료형(타입) . 기본 자료형 처럼 클래스도 자료형 | . parent class . public class ParentClass { public void makeJJajang() { System.out.println(&quot; -- makeJJajang() START -- &quot;); } } . first child class . public class FirstChildClass extends ParentClass { @Override public void makeJJajang() { System.out.println(&quot; -- FirstChildClass&#39;s makeJJajang() START --&quot;); } } . second child class . public class SecondChildClass extends ParentClass { @Override public void makeJJajang() { System.out.println(&quot; -- SecondChildClass&#39;s makeJJajang() START--&quot;); } } . main class . ParentClass child[] = new ParentClass[2]; child[0] = new FirstChildClass(); child[1] = new SecondChildClass(); for (int i = 0; i &lt; childs.length; i++) { child[i].makeJJajang(); } . Object 클래스 . 모든 클래스의 최상위 클래스는 Object 클래스 | ctrl + t : 상속 현황 보여줌 | . public class FirstChildClass extends ParentClass { @Override public void makeJJajang() { System.out.println(&quot; -- FirstChildClass&#39;s makeJJajang() START --&quot;); } } . public class SecondChildClass extends ParentClass { @Override public void makeJJajang() { System.out.println(&quot; -- SecondChildClass&#39;s makeJJajang() START --&quot;); } } . super 클래스 . 상위 클래스를 호출할 때 super 키워드를 이용 | . parent class . int openYear = 1995; public void makeJJajang() { System.out.println(&quot; -- makeJJajang() START --&quot;); } . child class . int openYear = 2000; public void getOpenYear(){ System.out.println(&quot;ChildClass&#39;s Open year : &quot; + this.openYear); // super 키워드를 통해 보모 클래스 호출 System.out.println(&quot;ParentClass&#39;s Open year : &quot; + super.openYear); } .",
            "url": "https://safenumz.github.io/blog/java/2018/10/23/Java_04)_%EC%83%81%EC%86%8D_%EB%B0%8F_%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "relUrl": "/java/2018/10/23/Java_04)_%EC%83%81%EC%86%8D_%EB%B0%8F_%ED%81%B4%EB%9E%98%EC%8A%A4.html",
            "date": " • Oct 23, 2018"
        }
        
    
  
    
        ,"post272": {
            "title": "[Java] 03) 객체지향 프로그래밍",
            "content": "객체지향 프로그래밍 . 객체 . 세상에 존재하는 모든 것을 뜻하며, 프로그래밍에서 속성과 기능을 가지는 프로그램 단위 | 객체 : 날씨 프로그램 속성 : 온도 미세먼지 | 기능 : 날씨예보 | . | . 클래스 . 객체를 생성하기 위한 틀로 모든 객체는 클래스로부터 생성 | . 틀 ⇒ 그랜저 (속성: 색상, 바퀴 | 기능: 배기량) ↓ 복제 상품 ⇒ 그래저 (색상(검정), 바퀴(일반), 배기량(2000cc)) . 틀은 그대로 있고 이를 복제하여 원하는 상품을 만듬, 이런 틀을 클래스라고 함 | 클래스는 속성(멤버 변수)와 기능(매서드)로 구성됨 | . 객체 : 자전거 속성(멤버 변수) : 안장, 핸들, 바구니, 기어, 패탈 기능(매서드) : 기어 변속, 가속, 브레이크 . 클래스 제작과 객체 생성 . 클래스를 만들고 클래스로부터 객체를 생성하는 방법 | . 클래스 제작 . package lect11Pjt001; // 클래스 이름: 일반적으로 첫글자는 대문자로 함 public class Grandeur { // 멤버 변수(속성) public String color; public String gear; public int price; // 생성자 : 클래스의 이름과 동일한 매서드 public Grandeur() { System.out.println(&quot;Grandeur constructor&quot;); } // 매서드 (기능) void는 return이 없을 때 씀 public void run() { System.out.println(&quot;-- run --&quot;); } // 매서드 (기능) public void stop() { System.out.println(&quot;-- stop --&quot;); } } . 객체 생성 . 클래스로부터 ‘new’를 이용해서 객체를 생성함 | . Granduer myCar1 = new Granduer(); myCar1.color = &quot;red&quot;; myCar1.gear = &quot;auto&quot;; myCar1.price = 30000000; myCar1.run() myCar1.stop() myCar1.info() Granduer myCar2 = new Granduer(); myCar2.color = &quot;blue&quot;; myCar2.gear = &quot;manual&quot;; myCar2.price = 25000000; myCar2.run() myCar2.stop() myCar2.info() . 생성자 . 클래스에서 객체를 생성할 때 가장 먼저 호출 | . public class Bicycle { public Stirng color; public int price; // 생성자 public Bicycle() { System.out.println(&quot; Bicycle constructor - 1&quot;); } // 생성자 public Bicycle(String c, int p) { System.out.println(&quot; Bicycle constuctor - 2&quot;); color = c; price = p; } public void info() { System.out.println(&quot; -- info() -- &quot;); System.out.println(&quot;color :&quot; + color) System.out.println(&quot;price :&quot; + price) } } public class MainClass { public stati void main(String[] args ) { Bicycle myBicycle1 = new Bicycle(); myBicycle1.info(); Bicycle myBicycle2 = new Bicycle(&quot;red&quot;, 100000); myBicycle2.info(); } } . 매서드 . 호출부, 선언부, 정의부 | public void getInfo() | public : 접근자 | void : 반환형 | getInfo() : 매개변수 | () : 파라미터 부분 | . // 매서드 선언 및 정의 public void getInfo() { System.out.println(&quot;i = &quot; + i); System.out.prrinln(&quot;b = &quot; + b); } // 매서드 호출 ChildClass childClass = new Child ChildClass(); childClass.getInfo(); . public class ChildClass { public String name; public String gender; public int age; public ChildClass() { System.out.println(&quot;-- ChildClass constructor --&quot;); } public void getInfo() { System.out.pringln(&quot; name : &quot; + name); System.out.println(&quot; gender :&quot; + gender); System.out.println(&quot; age : &quot; + age) } } public class MainClass { public static void main(String[] args) { ChildClass child1 = new ChildClass(); child1.name = &quot;hong gil dong&quot;; child1.gender = &quot;M&quot;; child1.age = 20; child1.getInfo(); } } . 매개변수(parameter) . public class ChildClass { public String name; public String gender; public int age; public void setInfo(String n, String g, int a) { System.out.println(&quot; --setInfo() START -- &quot;); name = n; gender = g; age = a; } } public class MainClass { public void main(String[] args) { ChildClass child1 = new ChildClass(); child1.setInfo(&quot;hong gil dong&quot;, &quot;M&quot;, 20); } } . 중복 매서드(overloading) . 이름은 같고, 매개변수의 개수 또는 타입이 다른 매서드를 만들 수 있음 | . public void getInfo() { System.out.println(&quot;--getInfo - 1 --&quot;); } public void getInfo(int x, int y) { System.out.println(&quot;--getInfo - 2 --&quot;); System.out.println(&quot;parameter --&gt; x : %d, y : %d n&quot;, x, y); } public void getInfo(String s1, String s2) { System.out.println(&quot;--getInfo -3 --&quot;); System.out.println(&quot;parameter --&gt; s1 : %s, s2 : %s n&quot;, s1, s2) } . 접근자 . 매서드를 호출할 때 접근자에 따라서 호출이 불가할 수 있음 | public 매서드 : 외부에서 호출할 수 있는 매서드 | private 매서드 : 내부에서만 쓸 수 있는 매서드, 외부에서 접근 불가 | . public class ChildClass { private void mySecret() { System.out.println(&quot; mySecret() &quot;); } } public class Mainclass { public void main(String[] args) { ChildClass child1 = new ChildClass(); // 접근이 안됨 child1.mySecret(); } } . 객체와 메모리 . 메모리에서 개게 생성(동적생성) . 객체는 메모리에서 동적으로 생성되며 객체가 더 이상 필요없게 되면 GC(Garbage Collector)에 의해서 제거됨 | . // child는 메모리 주소값만 들어 있음 : 레퍼런스 // new라는 매서드를 통해 객체 생성 // object(객체)는 ChildClass ChildClass child = new ChildClass(); . 레퍼런스(가리킨다) . 생성한 객체의 주소를 변수에 저장하는 것을 레퍼런스라고 함 | . ObjectClass obj1 = new ObjectClass(); ObjectClass obj2 = new ObjectClass(); ObjectClass obj3 = new ObjectClass(); System.out.println(&quot;obj1 -&gt; &quot; + obj1); System.out.println(&quot;obj2 -&gt; &quot; + obj2); System.out.println(&quot;obj3 -&gt; &quot; + obj3); . 자료형이 같아도 다른 객체 . 자료형이 같아도 다른 공간에 존재하는 객체는 다른 객체 | . ObjectClass obj1 = new ObjectClass(); ObjectClass obj2 = new ObjectClass(); ObjectClass obj3 = new ObjectClass(); if (obj1 == obj2) { System.out.println(&quot;obj1 == obj2&quot;); } else { System.out.println(&quot;obj1 != obj2&quot;); } if (obj2 == obj3) { System.out.println(&quot;obj2 == obj3&quot;); } else { System.out.println(&quot;obj2 != obj3&quot;); } if (obj1 == obj3) { System.out.println(&quot;obj1 == obj3&quot;); } else { System.out.println(&quot;obj1 != boj3&quot;); } . null과 NullPointException . 레퍼런스에 null이 저장되면 객체의 연결이 끊기며, 더 이상 객체를 이용할 수 없음 | . System.out.println(&quot;obj1 -&gt; &quot; + obj1); obj1.getInfo(); obj1 = null; System.out.println(&quot;obj1 -&gt; &quot; + obj1); obj1.getInfo(); // Exception in thread &quot;main&quot; java.lang.NullPointerExcetption 오류 뜸 . 생성자와 소멸자 그리고 this 키워드 . 디폴트 생성자 . 객체가 생성될 때 가장 먼저 호출되는 생성자로, 만약 개발자가 명시하지 않아도 컴파일 시점에 자동 생성 | . ObjectEx obj1 = new ObjectEx(); // 호출 // 디폴트 생성자 public ObjectEx() { System.out.println(&quot;Defaut constructor&quot;); } . ObjectEx obj1 = new ObjectEx(); // 호출 // 디폴트 생성자가 없는 경우 컴파일러가 자동 생성 public ObjectEx() { } . 사용자 정의 생성자 . 디폴트 생성자 외에 특정 목적에 의해서 개발자가 만든 생성자로, 매개변수에 차이가 있음 | . ObjectEx obj2 = new ObjectEx(10); // 호출 // 사용자 정의 생성자 public ObjectEx(int i) { System.out.println(&quot;UserDefined constructor&quot;); } . int arr[] = {10, 20, 30}; ObjectEx obj3 = new ObjectEx(&quot;Java&quot;, arr); // 호출 // 사용자 정의 생성자 public ObjectEx(String s, int i[]) { System.out.println(&quot;UserDefined constructor&quot;); str = s; nums = i; } . 소멸자 . 객체가 GC에 의해서 메모리에서 제거 될 때 finalize() 매서드가 호출 | System.gc();를 사용한다고 해서 GC가 바로 작동하는 것이 아니라, 가급적 빨리 작동하도록 요청하는 것 | java는 기본적으로 메모리를 개발자가 직접 관리하지 않으므로 일반적으로 System.gc();를 사용하는 경우는 드뭄 | . // 동일한 객체가 생성되면 이전 것은 gc에 의해 소멸; ObjectEx obj4; obj4 = new ObjectEx(); obj4 = new ObjectEx(); System.gc(); . @Override protected void finalize() throws Throwable { System.out.println(&quot; -- finalize method -- &quot;); super.finalize(); } . this 키워드 . 현재 객체를 가리킬 때 this를 사용 | . public ObjectEx(int i, String s, int is[]) { System.out.println(&quot;UserDefined constructor&quot;); this.num = i; this.srt = s; this.nums = is; } . // this 키워드 int ints[] = {10, 20, 30}; ObjectEx obj5 = new ObjectEx(10, &quot;Java&quot;, ints); . public class ObjectClass { // 전역 변수 x, y public int x; public int y; public ObjectClass(String s, int[] iArr) { System.out.println(&quot; -- ObjectClass() -- &quot;); System.out.println(&quot;s -&gt; &quot; + s); System.out.println(&quot;iArr -&gt; &quot; + iArr); } // 매개변수 x, y public ObjectClass(int x, int y) { // 전역변수 x, y this.x = x; this.y = y; } public void getInfo() { // 전역변수 x, y System.out.println(&quot;x -&gt; &quot; + x); System.out.println(&quot;y -&gt; &quot; + y); } } . public class MainClass { public static void main(String[] args) { ObjectClass obj1 = new ObjectClass(10, 20); obj1.getInfo(); } } . 패키지와 static . class 파일을 효율적으로 관리하기 위한 방법과 객체 간에 속성 또는 기능 공유하는 방법에 대해 학습 | . 패키지 . java 프로그램은 많은 클래스로 구성되고, 이러한 클래스를 폴더 형식으로 관리하는 것을 패키지라고 함 | new - package - Name ( com.java.[패키지이름] ) | package Name은 com.java.[패키지이름] 또는 kr.co.[회사이름] 등으로 함 | package에서 class를 만듬 | . 패키지 이름 결정 요령 . 패키지 이름은 패키지에 속해 있는 클래스가 최대한 다른 클래스와 중복되는 것을 방지하도록 만듬 | 패키지 이름은 일반적으로 도메인을 거꾸로 이용 | 개발 중에 패키지의 이름과 구조는 변경될 수 있음 | 패키지 이름만 보고도 해당 패키지 안에 있는 클래스가 어떤 속성과 기능을 가지고 있는 예상이 될 수 있도록 이름을 만듬 | . import . 다른 패키지에 있는 클래스를 사용하기 위해서는 import 키워드를 이용 | . // dailyJournal 패키지 안에 있는 DailyJournal 클래스를 사용하고 싶을 때 import com.java.dailyJournal.DailyJournal; // dailyJournal 패키지 안에 있는 모든 클래스를 사용하고 싶을 때 import com.java.dailyJournal.*; // import 없이 매번 코드를 다 적어줘도 됨 com.java.dailyJournal.DailyJournal journal = new com.java.dailyJournal.DailJournal() . package com.java.main; import com.java.dailyJournal.DailyJournal; import com.java.employee.Employee; import com.java.pay.Payment; import com.java.pay.fullTime.FullTime; import com.java.util.Util; import com.java.welfare.Welfare; public class MainClass { public static MainClass { DailyJournal dailyJournal = new DailyJournal(); Emplyee employee = new Emplyee(); Payment payment = new Payment(); FullTime fullTime = new FullTime(); com.java.pay.parTime.PartTime partTime = new com.java.pay.partTime.PartTime(); Util util = new Util(); Welfare welfare = new Welfare(); } } . static . 클래스의 속성과 메서드에 static 키워드를 사용하면 어디서나 속성과 메서드를 공유할 수 있음 | . package com.java.employeeBank; . public static void main(String[] args) { DailyJournal dailyJournal = new DailyJournal(); Emplyee employee = new Employee(); Payment payment = new Payment(); FullTime fullTime = new FullTime(); PartTime partTimt = new PartTime(); Util util = new Util(); Welfare welfare = new Welfare(); System.out.println(); EmployeeBank parkBank = new EmployeeBank(&quot;박찬호&quot;); parkBank.saveMoney(100); EmployeeBank leeBank = new EmployeeBank(&quot;이승엽&quot;); leeBank.saveMoney(300); leeBank.getBankInfo(); partBank.spendMoney(400); leeBank.getBankInfo(); } . package com.java.emplyeeBank; public class EmplyeeBank { // 속성이 변경되지 않도록 private 설정 private String name; static int amount = 0; public EmployeeBank(String name) { this.name = name; } public void saveMoney(int money) { amount += money; System.out.println(&quot;amount :&quot; + amount); } public void spendMoney(int money) { amount -= money; System.out.println(&quot;amount : &quot; + amount); } public void getbankInfo() { System.out.println(&quot;Emplyee name : &quot; + this.name); System.out.println(&quot;amount : &quot; + amount); } } . 데이터 은닉 . 객체가 가지고 있는 데이터를 외부로부터 변질되지 않게 보호하는 방법에 대해 학습 | . 맴버변수의 private 설정 . 맴버 변수(속성)는 주로 private으로 설정해서, 외부로부터 데이터가 변질 되는 것을 막음 | . 데이터(속성) 변질이 우려되는 시나리오 . 직원 급여 프로그램에서, 급여 담당자가 실수로 급여액을 잘못 입력하는 경우 | 변경될 수 없는 사번이 변경되는 경우 | . package com.java.emplyee; public class Employee { // 외부에서 쉽게 데이터를 변경할 수 있음 String name; String no; int pay; public Employee(String name, String no, int pay) { this.name = name; this.no = no; this.pay = pay; } } . setter, getter . 맴버 변수를 외부에서 변경할 수 있도록 하는 매서드 | . public class MainClass { public static void main(String[] args) { Student student1 = new Student(&quot;홍길동&quot;, 90); student1.getInfo(); student1.setScore(100); student1.getInfo(); } } . public class Student { private String name; private int score; public Student(String n, int s) { this.name = n; this.score = s; } public void getIn() { System.out.println(&quot; -- getInfo() -- &quot;); System.out.println(&quot; name : &quot; + name ); System.out.println(&quot; score : &quot; + score); } // getter setter public String getName() { return name; } public void setName(String name) { this.name = name; } public int getScore() { return score; } public void setScore(int score) { // 안전장치를 만들 수 있음 if(score &gt; 50) { this.score = score; } } } .",
            "url": "https://safenumz.github.io/blog/java/2018/10/22/Java_03)_%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.html",
            "relUrl": "/java/2018/10/22/Java_03)_%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.html",
            "date": " • Oct 22, 2018"
        }
        
    
  
    
        ,"post273": {
            "title": "[Java] 02) 기초문법 (2)",
            "content": "배열 . 배열 . 인덱스를 이용해서 자료형이 같은 데이터를 관리하는 것 | 배열의 크기가 한번 선언하면 변경이 불가 | . // 배열 선언 후 초기화 int[] arr1 = new int[5]; // 배열 선언 단계 arr1[0] = 100; arr1[1] = 200; arr1[2] = 300; arr1[3] = 400; arr1[4] = 500; System.out.println(&quot;arr1[0] :&quot; + arr1[0]); System.out.println(&quot;arr1[1] :&quot; + arr1[1]); System.out.println(&quot;arr1[2] :&quot; + arr1[2]); System.out.println(&quot;arr1[3] :&quot; + arr1[3]); System.out.println(&quot;arr1[4] :&quot; + arr1[4]); // 배열 선언과 초기화를 동시에 int[] arr2 = {10, 20, 30, 40, 50} System.out.println(&quot;arr2[0] :&quot; + arr2[0]); System.out.println(&quot;arr2[1] :&quot; + arr2[1]); System.out.println(&quot;arr2[2] :&quot; + arr2[2]); System.out.println(&quot;arr2[3] :&quot; + arr2[3]); System.out.println(&quot;arr2[4] :&quot; + arr2[4]); . package lec07Pjt001; import java.util.Arrays; import java.util.Scanner; public class MainClass { public static void main(String[] args) { // 배열 선언 후 초기화 int[] arr1 = new int[5]; arr1[0] = 100; arr1[1] = 200; arr1[2] = 300; arr1[3] = 400; arr1[4] = 500; System.out.println(&quot;arr1[0] : &quot; + arr1[0]); System.out.println(&quot;arr1[1] : &quot; + arr1[1]); System.out.println(&quot;arr1[2] : &quot; + arr1[2]); System.out.println(&quot;arr1[3] : &quot; + arr1[3]); System.out.println(&quot;arr1[4] : &quot; + arr1[4]); System.out.println(); // 배열 선언과 초기화를 동시에 int[] arr2 = {10, 20, 30, 40, 50}; System.out.println(&quot;arr2[0] : &quot; + arr2[0]); System.out.println(&quot;arr2[1] : &quot; + arr2[1]); System.out.println(&quot;arr2[2] : &quot; + arr2[2]); System.out.println(&quot;arr2[3] : &quot; + arr2[3]); System.out.println(&quot;arr2[4] : &quot; + arr2[4]); System.out.println(); // 배열을 이용한 학사관리 String[] name = {&quot;박찬호&quot;, &quot;이승엽&quot;, &quot;박병호&quot;, &quot;이병규&quot;, &quot;류현진&quot;}; int[] score = new int[5]; Scanner scanner = new Scanner(System.in); System.out.printf(&quot;%s의 점수를 입력하시오. : &quot;, name[0]); score[0] = scanner.nextInt(); System.out.printf(&quot;%s의 점수를 입력하시오. : &quot;, name[1]); score[1] = scanner.nextInt(); System.out.printf(&quot;%s의 점수를 입력하시오. : &quot;, name[2]); score[2] = scanner.nextInt(); System.out.printf(&quot;%s의 점수를 입력하시오. : &quot;, name[3]); score[3] = scanner.nextInt(); System.out.printf(&quot;%s의 점수를 입력하시오. : &quot;, name[4]); score[4] = scanner.nextInt(); System.out.printf(&quot;%s 점수 : t%.2f n&quot;, name[0], (double)score[0]); System.out.printf(&quot;%s 점수 : t%.2f n&quot;, name[1], (double)score[1]); System.out.printf(&quot;%s 점수 : t%.2f n&quot;, name[2], (double)score[2]); System.out.printf(&quot;%s 점수 : t%.2f n&quot;, name[3], (double)score[3]); System.out.printf(&quot;%s 점수 : t%.2f n&quot;, name[4], (double)score[4]); double ave = (double)(score[0] + score[1] + score[2] + score[3] + score[4]) / 5; System.out.printf(&quot;-- n평 점 : t%.2f&quot;, ave); scanner.close(); System.out.println(); // 배열 기본속성 int[] arrAtt1 = {10, 20, 30, 40, 50, 60}; int[] arrAtt2 = null; int[] arrAtt3 = null; // 배열 길이 System.out.println(&quot;arrAtt1.length : &quot; + arrAtt1.length); // 배열 요소 출력 System.out.println(&quot;arrAtt1 : &quot; + Arrays.toString(arrAtt1)); // 배열 요소 복사 arrAtt3 = Arrays.copyOf(arrAtt1, arrAtt1.length); System.out.println(&quot;arrAtt3 : &quot; + Arrays.toString(arrAtt3)); // 배열 레퍼런스 arrAtt2 = arrAtt1; System.out.println(&quot;arrAtt1 : &quot; + arrAtt1); System.out.println(&quot;arrAtt2 : &quot; + arrAtt2); System.out.println(&quot;arrAtt3 : &quot; + arrAtt3); System.out.println(); // 다차원 배열 int[][] arrMul = new int[3][2]; arrMul[0][0] = 10; arrMul[0][1] = 100; arrMul[1][0] = 20; arrMul[1][1] = 200; arrMul[2][0] = 30; arrMul[2][1] = 300; System.out.println(&quot;arrMul[0] : &quot; + Arrays.toString(arrMul[0])); System.out.println(&quot;arrMul[1] : &quot; + Arrays.toString(arrMul[1])); System.out.println(&quot;arrMul[2] : &quot; + Arrays.toString(arrMul[2])); } } . 배열과 메모리 . 배열을 구성하는 데이터의 자료형에 따라서 배열의 메모리 크기가 결정됨 | 기본 자료형 데이터를 담고 있는 변수와 달리 배열 변수는 배열 데이터의 주소만을 담고 있음 | . // int형이 4byte니까 arr은 12byte int[] arr = new int[3]; // i라는 메모리에 데이터가 저장됨 int i = 10; // 배열 변수는 배열 데이터의 주소만을 담고 있음 int[] i = new int[3]; . // 배열 기본 속성 int[] arrAtt1 = {10, 20, 30, 40, 50, 60}; int[] arrAtt2 = null; int[] arrAtt3 = null; // 배열 길이 System.out.println(&quot;arrAtt1.length :&quot; + arrAtt1.length); // 배열 요소 출력 System.out.println(&quot;arrAtt1 :&quot; + Arrays.toString(arrAtt1)); // 배열 요소 복사 // 배열1과 배열3은 가리키고 있는 메모리가 다름 arrAtt3 = Arrays.copyOf(arrAtt1, arrAtt1.length); System.out.println(&quot;arrAtt3 :&quot; + Arrays.toString(arrAtt3)); // 배열 레퍼런스 arrAtt2 = arrAtt1; System.out.println(&quot;arrAtt1 :&quot; + arrAtt1); System.out.println(&quot;arrAtt2 :&quot; + arrAtt2); System.out.println(&quot;arrAtt3 :&quot; + arrAtt3); . 다차원 배열 . 배열 안에 또 다른 배열 존재 | 3차원부터는 메모리가 급격하게 늘어나기 때문에 사용하지 않음 | . // 다차원 배열 int[][] arrMul = new int[3][2]; arrMul[0][0] = 10; arrMul[0][1] = 100; arrMul[1][0] = 20; arrMul[1][1] = 200; arrMul[2][0] = 30; arrMul[2][1] = 300; System.out.println(&quot;arrMul[0] :&quot; + Arrays.toString(arrMul[0])); System.out.println(&quot;arrMul[1] :&quot; + Arrays.toString(arrMul[1])); System.out.println(&quot;arrMul[2] :&quot; + Arrays.toString(arrMul[2])); . 조건문 . 조건문이란? . 프로그램이 조건의 결과에 따라 양자 택일 또는 다자 택일을 진행하는 것 | 양자택일 : 주로 if문 | 다자택일 : 주로 switch문 | . if문 . int num1 = 10; int num2 - 20; // if(조건식) if (num1 &lt; num2) { System.out.println(&quot;num1은 num2보다 작다.&quot;); } System.out.println(); // if(조건식) else if (num1 &lt; num2) { System.out.println(&quot;num1은 num2보다 작다&quot;); } else { System.out.println(&quot;num1은 num2보다 크거나 같다.&quot;) } System.out.println(); // if(조건식) else if(조건식) if (num1 &lt; num2){ System.out.println(&quot;num1은 num2보다 작다.&quot;); } else if (num1 &gt; num2){ System.out.println(&quot;num1은 num2보다 크다.&quot;); } else { System.out.println(&quot;num1과 num2는 같다.&quot;); } . switch문 . 비교대상이 되는 결과값과 선택사항이 많을 경우 주로 사용 | . // switch문 System.out.print(&quot;점수를 입력하세요. :&quot;); Scanner inputNum = new Sacanner(System.in); int score = inputNum.nextInt(); switch (score) { case 100: case 90: System.out.println(&quot;수&quot;); break; case 80: System.out.println(&quot;우&quot;); break; case 70: System.out.println(&quot;미&quot;); break; default: System.out.println(&quot;try again!!&quot;); break; } inputNum.close(); . 반복문 . 프로그램이 반복적으로 실행되는 방법 | 프로그램 진행을 특정 조건에 따라 반복적으로 진행하는 것 | . for문 . // for 문 System.out.print(&quot;INPUT NUMBER :&quot;); Scanner scanner = new Scanner(System.in); int inputNum = scanner.nextInt(); for (int i = 1; i &lt; 10; i++) { System.out.printf(&quot;%d * %d = %d n&quot;, inputNum, i, (inputNum * i)); } . while문 . // while문 System.out.print(&quot;INPUT NUMBER : &quot;); int num = scanner.nextInt(); int i = 1; while (i &lt; 10) { System.out.printf(%d * %d = %d n, num, i, (num * i)); i++ } . do ~ while문 . while문과 비슷하며, 차이점은 조건 결과에 상관없이 | . int i = 10; do { System.out.println(&quot;무조건 1번은 실행됩니다.&quot;); i++; } while (i &lt; 13); .",
            "url": "https://safenumz.github.io/blog/java/2018/10/21/Java_02)_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95_(2).html",
            "relUrl": "/java/2018/10/21/Java_02)_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95_(2).html",
            "date": " • Oct 21, 2018"
        }
        
    
  
    
        ,"post274": {
            "title": "[Java] 01) 기초문법 (1)",
            "content": "환경 설정 . 환경변수 설정 . java.exe(JVM 구동 명령), javac.exe(컴파일러)를 다른 디렉토리에서도 실행할 수 있도록 하기 위해 환경변수(Path)에 bin 경로를 등록 | 내컴퓨터 - 속성 - 설정 변경 - 환경변수 - 시스템 변수 - 새로 만들기 | C: Program Files Java jdk1.8.0_201 추가 | path 변수에 C: Program Files Java jdk1.8.0_201 bin 추가 | . $ java -version . java 소스 작성 부터 프로그램 실행까지의 순서 . java 소스(xxx.java) - java 컴파일러(javac.exe) | 바이트 코드 파일(xxx.class) - JVM 구동(java.exe) LINK(메모리 로딩 / 실행 준비 / 실행 결정 / 초기화) | 기계어 | 실행 | compiler $ javac.exe JavaWorld.java JVM 구동 $ java JavaWorld . 변수 및 기본자료형 . 변수 . 데이터(자료)를 임시로 담을 수 있는 상자(메모리 공간) | . package pjtTest; public class MainClass { public static void main(String[] args){ // 선언과 초기화를 동시에 int i = 10; // 선언 int j; // 초기화 j = 100; System.out.pringln(&quot;i + j = &quot; + (i+j)) } } . 기본자료형 . 기본 자료형은 데이터가 변수에 직접 저장되고, 객체 자료형은 객체 메모리 주소가 변수에 저장됨 | C계열에서 포인터라고 하고, Java에서는 레퍼런스라고 함 | 정수형(byte, char, short, int, long), 실수형(float, double), 논리형(boolean)이 있음 | String str은 객체 자료형 | . package pjtTest; public class MainClass { public static void main(String[] args) { char c = &#39;a&#39;; System.out.println(&quot;c = &quot; + c); int i = 10; System.out.println(&quot;i = &quot; + i); double d = 10.123; System.out.println(&quot;d = &quot; + d); boolean b = false; System.out.println(&quot;b = &quot; + b); String s = &quot;Hello Java World!!!&quot;; System.out.println(&quot;s = &quot; + s); s = &quot;Good&quot;; System.out.println(&quot;s = &quot; + s); } } . c = a i = 10 d = 10.123 b = false s = Hello Java World!!! s = Good . 형 변환 . 자동(묵시적) 형 변환 : 작은 공간의 메모리에서 큰 공간의 메모리로 이동 | . byte by = 10; int in = by; System.out.pringln(&quot;in = &quot; + in); . 명시적 형 변환: 큰 공간의 메모리에서 작은 공간의 메모리로 이동 | . // 4byte int iVar = 100; byte bVar = (byte)iVar; System.out.println(&quot;bVar = &quot; + bVar) iVar = 123456; // 큰 공간에서 작은 공간으로 들어가기 때문에 데이터가 누실 될 수 있음 bVar = (byte)iVar; System.out.println(&quot;bVar = &quot; + bVar); . 특수문자와 서식문자 . 특수문자 . t : 탭 | n : 줄바꿈 | ’ : 작은 따옴표 | ” : 큰 따옴표 | : 역슬래쉬 | // : 주석 | . // 주석 /* * 여러줄 주석, 컴파일러가 컴파일하지 않음 */ package pjtTest; public class MainClass { public static void main(String[] args) { System.out.println(&quot;Good t t tMorning~&quot;); System.out.println(&quot;Good nMorning&quot;); } } . 서식문자 . %d : 10진수 | %o : 8진수 | %x : 16진수 | %c : 문자 | %s : 문자열 | %f : 실수 | . // 서식문자 System.out.println(&quot;오늘의 기온은 %d도 입니다. n&quot;, 10); int num1 = 20; System.out.println(&quot;오늘의 기온은 &quot; + num1 + &quot;도 입니다.&quot;); System.out.pringln(&quot;오늘의 기온은 %d도 입니다. n&quot;, num1); System.out.println(&quot;홍길동&#39;s Info. : %d학년 %d반 %d번 n&quot;, 6, 2, 10); // 정수 int num2 = 30; System.out.printf(&quot;num2(10진수) : %d n&quot;, num2); System.out.printf(&quot;num2(8진수) : %o n&quot;, num2); System.out.printf(&quot;num2(16진수) : %x n&quot;, num2); // 문자 System.out.println(&quot;소문자 &#39;%c &#39;의 대문자는 &#39;%c &#39;입니다. n&quot;, &quot;java&quot;, &quot;JAVA&quot;); // 문자열 System.out.println(&quot; &#39;%s &#39;을 대문자로 바꾸면 &#39;%s &#39;입니다. n&quot;, &quot;java&quot;, &quot;JAVA&quot;); // 실수 float f = 1.23f; System.out.printf(&quot;f = %f n&quot;, f) double d = 1.23456d; System.out.printf(&quot;d = %f n&quot;, d); . 서식 문자의 정렬과 소수점 제한 기능 . // 서식 문자 정렬 기능 System.out.printf(&quot;%d n&quot;, 123); System.out.printf(&quot;%d n&quot;, 1234); System.out.printf(&quot;%d n&quot;, 12345); System.out.println(); // 123 // 1234 // 12345 System.out.printf(&quot;%5d n&quot;, 123); System.out.printf(&quot;%5d n&quot;, 1234); System.out.printf(&quot;%5d n&quot;, 12345); System.out.println(); // 123 // 1234 // 12345 // 서식문자 소수점 제한 기능 System.out.printf(&quot;%f n&quot;, 1.23); System.out.printf(&quot;%.0f n&quot;, 1.23); System.out.printf(&quot;%.1f n&quot;, 1.23); System.out.printf(&quot;%.2f n&quot;, 1.23); System.out.printf(&quot;%.3f n&quot;, 1.23); // 1.230000 // 1 // 1.2 // 1.23 // 1.230 . 연산자 . 프로그램이 실행될 때 컴퓨터(CPU)에게 계산(연산)업무를 시키기 위한 방법 | . 피연산자 개수에 의한 연산자 구분 . 단항 연산자 : 피연산자가 하나 존재 +x, -x, !x (x를 부정) | . | 이항 연산자 : 피연산자가 두개 존재 x = y, x &lt; y, x! = y | . | 삼항 연산자 : 피연산자가 세개 존재 조건식: true ? false | . | . 대입 연산자 . int x = 10; int y = 20; // 대입 연산자 System.out.println(&quot;x = &quot; + x); System.out.println(&quot;y = &quot; + y); x = y; System.out.println(&quot;x = &quot; + x); System.out.println(&quot;y = &quot; + y); // x = 10 // y = 20 // x = 20 // y = 20 . 산술 연산자 . 피연산자를 이용해서 +, -, *, /, % 등을 수행함 | % : 나머지 | . x = 100 y = 10 System.out.println(&quot;x % y = &quot; + (x % y)); // 소수점까지 계산하려면 형변환해야 함 x % y = 10 . 복합대입 연산자 . 산술 연산자와 대입 연산자를 결합한 연산자 | += : 더하고 대입 | -= : 빼고 대입 | *= : 곱하고 대입 | /= : 나누고 대입 | %= : 나머지를 대입 | . int x = 10; System.out.println(&quot;x += 10 :&quot; + (x += 10)); x = 10; System.out.println(&quot;x -= 10 :&quot; + (x -= 10)); x = 10; System.out.println(&quot;x *= 10 :&quot; + (x *= 10)); x = 10; System.out.println(&quot;x /= 10 :&quot; + (x /= 10)); x = 10; System.out.println(&quot;x %= 10 :&quot; + (x %= 10)); x = 10; // x += 10 :20 // x -= 10 :0 // x *= 10 :100 // x /= 10 :1 // x %= 10 :0 . 관계 피연산자 . 두개의 피연산자를 비교해서 참/거짓의 결론을 도출 | . x = 10; y = 20; System.out.println(&quot;x &gt; y :&quot; + (x &gt; y)); System.out.println(&quot;x &lt; y :&quot; + (x &lt; y)); System.out.println(&quot;x &gt;= y :&quot; + (x &gt;= y)); System.out.println(&quot;x &lt;= y :&quot; + (x &lt;= y)); System.out.println(&quot;x == y :&quot; + (x == y)); System.out.println(&quot;x != y :&quot; + (x != y)); . 증감 연산자 . 1만큼 증가 하거나 감소를 수행함 | ++ : 1만큼 증가 | – : 1만큼 감소 | 전위연산자 : 1더하고 계산 | 후위연산자 : 일단 계산하고 1 더함 | . x = 10; System.out.println(&quot;++x :&quot;, + (++x)); x = 10; System.out.println(&quot;--x :&quot; + (--y)); x = 10; System.out.println(&quot;x++ :&quot; + (x++)); System.out.println(&quot;x :&quot; + x); x = 10; System.out.println(&quot;x-- :&quot; + (x--)); System.out.println(&quot;x :&quot; + x); . 논리 연산자 . &amp;&amp; : a와 b 모두 참이면 참 | || : a와 b 중 하나라도 참이면 참 | ! : a의 상태를 부정 | . boolean b1 = false; boolean b2 = true; System.out.println(&quot;b1 &amp;&amp; b2 :&quot; + (b1 &amp;&amp; b2)); System.out.println(&quot;b1 || b2 :&quot; + (b1 || b2)); System.out.println(&quot;!b1 : &quot; + !b1); System.out.println(&quot;!b2 : &quot; + !b2); // b1 &amp;&amp; b2 :false // b1 || b2 :true // !b1 : true // !b2 : false . 조건(삼항) 연산자 . 조건식 ? 식1 : 식2 | 조건식이 참이면 식1이 실행되고, 조건식이 거짓이면 식2가 실행됨 | . x = 10; y = 20; int result = 0; result = (x &gt; y) ? 100 : 200; System.out.println(&quot;result :&quot; + result); result = (x &lt; y) ? 100 : 200; System.out.println(&quot;result :&quot; + result); resutl = (x == y) ? 100 : 200; System.out.println(&quot;result :&quot; + result); . 비트 연산자 . 데이터를 비트(bit) 단위로 환산하여 연산을 수행하며, 다른 연산자보다 연산 속도가 향상 | a &amp; b : a와 b가 모두 1이면 1 | a | b : a와 b중 하나라도 1이면 1 | a^b: a와 b가 같지 않으면 1 | . // 비트 연산자 x = 2; y = 3; System.out.println(&quot;x &amp; y :&quot; + (x &amp; y)); System.out.println(&quot;x | y :&quot; + (x | y)); System.out.println(&quot;x ^ y :&quot; + (x ^ y)); .",
            "url": "https://safenumz.github.io/blog/java/2018/10/21/Java_01)_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95_(1).html",
            "relUrl": "/java/2018/10/21/Java_01)_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95_(1).html",
            "date": " • Oct 21, 2018"
        }
        
    
  
    
        ,"post275": {
            "title": "[Python] numpy",
            "content": "array . 차원과 모양 . ndim : 행렬의 차원 | shape : 행렬의 모양 | . &gt;&gt;&gt; array = np.array( [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], ) &gt;&gt;&gt; print(array.ndim, array.shape) 3 (2, 2, 3) . reshape . &gt;&gt;&gt; na = np.array(range(10)) &gt;&gt;&gt; na.reshape(2, 5) &gt;&gt;&gt; np.reshape(na, (2, 5)) array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]) . zeros . 행렬을 만들고 0을 채움 | . &gt;&gt;&gt; z = np.zeros(2, 3, 2), dtype = int) &gt;&gt;&gt; z, z.dim, z.shape . ones . 행렬을 만들고 1을 채움 | . &gt;&gt;&gt; one = np.ones((4, 3), dtype = int) &gt;&gt;&gt; one array([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]) . eye . 단위행렬을 만들때 사용 | . &gt;&gt;&gt; np.eye(5) array([[1., 0., 0., 0., 0.], [0., 1., 0., 0., 0.], [0., 0., 1., 0., 0.], [0., 0., 0., 1., 0.], [0., 0., 0., 0., 1.]]) . like . 행렬안에 있는 모든 숫자를 0 또는 1로 변경 | . &gt;&gt;&gt; np.ones_like(z) &gt;&gt;&gt; np.zeros_like(one) .",
            "url": "https://safenumz.github.io/blog/python/2018/10/11/Python-Numpy.html",
            "relUrl": "/python/2018/10/11/Python-Numpy.html",
            "date": " • Oct 11, 2018"
        }
        
    
  
    
        ,"post276": {
            "title": "[MySQL] 07) 프로그래밍과 연동",
            "content": "프로그래밍과 연동 . 프로그래밍과 데이터베이스는 무관 | 데이터베이스는 독립적인 시스템 | 프로그래밍과 결합해 더 많은 일을 할 수 있음 | . API . 데이터베이스는 API를 제공 | PHP와 같은 프로그래밍 언어들은 이 API를 이용해서 데이터베이스를 이용함 | PHP와 MySQL : 가장 많이 사용되는 조합 | . STEP1. 데이터 만들기 . 데이터베이스의 내용을 웹페이지로 출력하기 . CREATE DATABASE `class` CHARACTER SET utf8 COLLATE utf8_general_ci; USE class; DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` tinyint(4) NOT NULL AUTO_INCREMENT, `name` char(4) NOT NULL, `address` varchar(50) NOT NULL, `department` enum(&#39;국문과&#39;, &#39;영문과&#39;, &#39;컴퓨터공학과&#39;, &#39;전자공학과&#39;, &#39;물리학과&#39;) NOT NULL, `introduction` text NOT NULL, `number` char(255) NOT NULL, PRIMARY KEY (`id`), UNIQUE KEY `idx_number` (`number`) USING BTREE, KEY `idx_department` (`department`), KEY `idx_department_name` (`department`, `address`), FULLTEXT KEY `idx_introduction` (`introduction`) ) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8; INSERT INTO `student` VALUES (1, &#39;이숙경&#39;, &#39;청주&#39;, &#39;컴퓨터공학과&#39;, &#39;저는 컴퓨터 공학과에 다닙니다. computer&#39;, &#39;0250304&#39;); INSERT INTO `student` VALUES (2, &#39;박재숙&#39;, &#39;서울&#39;, &#39;영문과&#39;, &#39;저는 영문과에 다닙니다.&#39;, &#39;0512321&#39;); INSERT INTO `student` VALUES (3, &#39;백태호&#39;, &#39;경주&#39;, &#39;컴퓨터공학과&#39;, &#39;저는 컴퓨터 공학과에 다니고 경주에서 왔습니다.&#39;, &#39;0340534&#39;); INSERT INTO `student` VALUES (4, &#39;김경훈&#39;, &#39;제천&#39;, &#39;국문과&#39;, &#39;제천이 고향이고 국문과에 다닙니다.&#39;, &#39;9813413&#39;); INSERT INTO `student` VALUES (6, &#39;김경진&#39;, &#39;제주&#39;, &#39;국문과&#39;, &#39;이번에 국문과에 입학한 김경진이라고 합니다. 제주에서 왔습니다.&#39;, &#39;0412543&#39;); INSERT INTO `student` VALUES (7, &#39;박경호&#39;, &#39;제주&#39;, &#39;국문과&#39;, &#39;박경호 입니다. 잘부탁드립니다.&#39;, &#39;0134511&#39;); INSERT INTO `student` VALUES (8, &#39;김정인&#39;, &#39;대전&#39;, &#39;영문과&#39;, &#39;김정인입니다. 대전에서 왔고 영문과에 다닙니다.&#39;, &#39;015038&#39;); . STEP2. 웹페이지 만들기 . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot; &gt; &lt;style&gt; table{border:1px solid gray; border-collapse:collapse;} td{border:1px solid gray;padding:5px;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;?php // localhost에 아이피주소, root 계정명, 1234 비밀번호 $conn = mysql_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;1234&quot;); mysql_query(&#39;SET NAMES utf8&#39;); if (!$conn) { echo &quot;Unable to connect to DB: &quot; . mysql_error(); exit; } if (!mysql_select_db(&quot;class&quot;)) { echo &quot;Unable to select mydbname: &quot; . mysql_error(); exit; } $sql = &quot;SELECT * FROM student LIMIT 10&quot;; $result = mysql_query($sql); if (!$result) { echo &quot;Could not successfully run query ($sql) from DB: &quot; . mysql_error(); exit; } if (mysql_num_rows($result) == 0) { echo &quot;No rows found, nothing to print so am exiting&quot;; exit; } // While a row of data exists, put that row in $row as an associative array // Note: If you&#39;re expecting just one row, no need to use a loop // Note: If you put extract($row); inside the following loop, you&#39;ll // then create $userid, $fullname, and $userstatus echo &quot;&lt;table&gt;&quot;; while ($row = mysql_fetch_assoc($result)) { echo &quot;&lt;tr&gt;&lt;td&gt;{$row[&#39;id&#39;]}&lt;/td&gt;&lt;td&gt;{$row[&#39;name&#39;]}&lt;/td&gt;&lt;td&gt;{$row[&#39;department&#39;]}&lt;/td&gt;&lt;/tr&gt;&quot;; } echo &quot;&lt;/table&gt;&quot;; mysql_free_result($result); ?&gt; &lt;/body&gt; &lt;/html&gt; . // 우분투 경우 $ cd /var/www/ $ ls -al $ rm list.php $ vi list.php //list.php에 위 php 코드 복사 붙여넣기 //localhost/list.php 을 웹브라우저에 치면 웹브라우저를 통해 데이터베이스를 확인 할 수 있음 . // 윈도우즈 APM 사용 경우 // 웹페이지에 localhost 입력 후 phpMyAdin 접속 // 위 코드를 C://APM_Setup/htdocs에 list.php 파일을 생성 후 저장 // localhost/list.php 를 웹에 입력하면 데이터베이스가 뜸 .",
            "url": "https://safenumz.github.io/blog/sql/2018/10/09/MySQL_07)_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC_%EC%97%B0%EB%8F%99.html",
            "relUrl": "/sql/2018/10/09/MySQL_07)_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC_%EC%97%B0%EB%8F%99.html",
            "date": " • Oct 9, 2018"
        }
        
    
  
    
        ,"post277": {
            "title": "[MySQL] 06) 사용자 관리",
            "content": "사용자 관리 . 권한 . 사용자에 따라서 접근할 수 있는 데이터와 사용할 수 있는 기능을 제한 | . GRANT 권한 ON 데이터베이스.테이블 TO &#39;아이디&#39;@&#39;호스트&#39; IDENTIFIED BY &#39;비밀번호&#39; . 사용자의 제한 . 아이디@호스트 중에서 호스트는 접속자가 사용하는 머신의 IP를 의미함, IP를 특정하지 않으로면 ‘%’를 이용 | . egoing@123.100.100.100 : IP 123.100.100.100인 머신에서 접속한 ID egoing egoing@% : IP관계없이 ID가 egoing인 사용자 . 대상의 제한 . 사용자가 제어할 대상이 되는 데이터베이스, 테이블을 지정 | *를 사용하면 모든 데이터베이스, 테이블을 제어대상으로 함 | . &lt;!-- class 데이터베이스에 student 테이블에 권한을 줌 --&gt; GRANT all ON class.student GRANT all ON * GRANT . &lt;!-- ID가 dev, 비밀번호가 1234인 사용자가 class 데이터베이스만 접근하게 하려면 아래와 같이 함 --&gt; GRANT DELETE, INSERT, SELECT, UPDATE ON class.* TO `dev`@`%` IDENTIFIED BY `1234`; &lt;!-- ID가 archi, 비밀번호가 1234인 사용자에게 모든 데이터베이스에 대해 해당 권한을 부여 --&gt; GRANT ALTER, CREATE, DELETE, DROP, INDEX, INSERT, SELECT, UPDATE, DELETE ON *.* TO `archi`@`100.100.100.100` IDENTIFIED BY `1234` . SHOW GRANTS . 사용자의 권한을 확인 | 문법 : SHOW GRANTS [FOR 사용자] | . &lt;!-- dev라는 아이디를 가지고 있는 사용하의 권한 체크 --&gt; SHOW GRANTS FOR dev; . REVOKE . 사용자의 권한을 제거 | 문법: REVOKE 권한 ON 데이터베이스.테이블 FROM 사용자 | . &lt;!-- 사용자 dev의 데이터베이스 class의 DELETE 권한을 제거 --&gt; REVOKE DELETE on class.* FROM dev; . DROP USER . 사용자를 삭제 | DROP USER user [,user] … | . DROP USER `dev`@`%`; .",
            "url": "https://safenumz.github.io/blog/sql/2018/10/08/MySQL_06)_%EC%82%AC%EC%9A%A9%EC%9E%90_%EA%B4%80%EB%A6%AC.html",
            "relUrl": "/sql/2018/10/08/MySQL_06)_%EC%82%AC%EC%9A%A9%EC%9E%90_%EA%B4%80%EB%A6%AC.html",
            "date": " • Oct 8, 2018"
        }
        
    
  
    
        ,"post278": {
            "title": "[MySQL] 05) JOIN",
            "content": "JOIN . 여러개의 테이블 사용하기 . 데이터의 규모가 커지면서 하나의 테이블로 정보가 수용하기가 어려워지면 테이블을 분할하고 테이블 간의 관계성을 부여함 | . -- 데이터 프레임 작성 DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` tinyint(4) NOT NULL, `name` char(4) NOT NULL, `sex` enum(&#39;남자&#39;, &#39;여자&#39;), `address` varchar(50) NOT NULL, `distance` INT NOT NULL, `birthday` datetime NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `student` VALUES (2, &#39;박재숙&#39;, &#39;남자&#39;, &#39;서울&#39;, 10, &#39;1985-10-26&#39;); INSERT INTO `student` VALUES (1, &#39;이숙경&#39;, &#39;여자&#39;, &#39;청주&#39;, 200, &#39;1982-11-16&#39;); INSERT INTO `student` VALUES (3, &#39;백태호&#39;, &#39;남자&#39;, &#39;경주&#39;, 350, &#39;1989-2-10&#39;); INSERT INTO `student` VALUES (4, &#39;김경훈&#39;, &#39;남자&#39;, &#39;제주&#39;, 400, &#39;1990-10-1&#39;); INSERT INTO `student` VALUES (8, &#39;김정인&#39;, &#39;남자&#39;, &#39;제주&#39;, 400, &#39;1979-11-4&#39;); INSERT INTO `student` VALUES (6, &#39;김경진&#39;, &#39;여자&#39;, &#39;제천&#39;, 190, &#39;1985-1-1&#39;); INSERT INTO `student` VALUES (7, &#39;박경호&#39;, &#39;남자&#39;, &#39;영동&#39;, 310, &#39;1981-2-3&#39;); . 위의 예제 중 address는 distance와 관련되어 있기 때문에 location이라는 별도의 테이블로 분할할 수 있다. . DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` tinyint(4) NOT NULL, `name` char(4) NOT NULL, `sex` enum(&#39;남자&#39;, &#39;여자&#39;) NOT NULL, `location_id` tinyint(4) NOT NULL, `birthday` datetime NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; DROP TABLE IF EXISTS `location`; CREATE TABLE `location` ( `id` tinyint UNSIGNED NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL, `distance` tinyint UNSIGNED NOT NULL, PRIMARY KEY (`id`) ); -- 데이터 구조 확인 DESC student; DESC location; INSERT INTO `location` VALUES (1, &#39;서울&#39;, 10); INSERT INTO `location` VALUES (2, &#39;청주&#39;, 200); INSERT INTO `location` VALUES (3, &#39;경주&#39;, 255); INSERT INTO `location` VALUES (4, &#39;제천&#39;, 190); INSERT INTO `location` VALUES (5, &#39;대전&#39;, 200); INSERT INTO `location` VALUES (6, &#39;제주&#39;, 255); INSERT INTO `location` VALUES (7, &#39;영동&#39;, 255); INSERT INTO `location` VALUES (8, &#39;광주&#39;, 255); INSERT INTO `student` VALUES (1, &#39;이숙경&#39;, &#39;여자&#39;, 1, &#39;1982-11-16&#39;); INSERT INTO `student` VALUES (2, &#39;박재숙&#39;, &#39;남자&#39;, 2, &#39;1985-10-26&#39;); INSERT INTO `student` VALUES (3, &#39;백태호&#39;, &#39;남자&#39;, 3, &#39;1989-2-10&#39;); INSERT INTO `student` VALUES (4, &#39;김경훈&#39;, &#39;남자&#39;, 4, &#39;1979-11-4&#39;); INSERT INTO `student` VALUES (6, &#39;김경진&#39;, &#39;여자&#39;, 5, &#39;1985-1-1&#39;); INSERT INTO `student` VALUES (7, &#39;박경호&#39;, &#39;남자&#39;, 6, &#39;1981-2-3&#39;); INSERT INTO `student` VALUES (8, &#39;김정인&#39;, &#39;남자&#39;, 5, &#39;1990-10-1&#39;); SELECT * FROM location; -- +-+--+-+ -- | id | name | distance | -- +-+--+-+ -- | 1 | 서울 | 10 | -- | 2 | 청주 | 200 | -- | 3 | 경주 | 255 | -- | 4 | 제천 | 190 | -- | 5 | 대전 | 200 | -- | 6 | 제주 | 255 | -- | 7 | 영동 | 255 | -- | 8 | 광주 | 255 | -- +-+--+-+ -- 8 rows in set (0.00 sec) SELECT * FROM student; -- +-+--+--+-++ -- | id | name | sex | location_id | birthday | -- +-+--+--+-++ -- | 1 | 이숙경 | 여자 | 1 | 1982-11-16 00:00:00 | -- | 2 | 박재숙 | 남자 | 2 | 1985-10-26 00:00:00 | -- | 3 | 백태호 | 남자 | 3 | 1989-02-10 00:00:00 | -- | 4 | 김경훈 | 남자 | 4 | 1979-11-04 00:00:00 | -- | 6 | 김경진 | 여자 | 5 | 1985-01-01 00:00:00 | -- | 7 | 박경호 | 남자 | 6 | 1981-02-03 00:00:00 | -- | 8 | 김정인 | 남자 | 5 | 1990-10-01 00:00:00 | -- +-+--+--+-++ -- 7 rows in set (0.00 sec) . JOIN . 테이블간의 관계성에 따라서 복수의 테이블을 결합, 하나의 테이블인 것처럼 결과를 출력 | . JOIN의 종류 . OUTTER JOIN : 매칭되는 행이 없어도 결과를 가져오고 매칭되는 행이 없는 경우 NULL로 표시함 | INNER JOIN : 조인하는 두개의 테이블 모두에 데이터가 존재하는 행에 대해서만 결과를 가져옴 | . -- LEFT JOIN : OUTTER JOIN의 한 형태 SELECT s.name, s.location_id, l.name AS address, l.distance FROM student AS s LEFT JOIN location AS l ON s.location_id = l.id; -- +--+-++-+ -- | name | location_id | address | distance | -- +--+-++-+ -- | 이숙경 | 1 | 서울 | 10 | -- | 박재숙 | 2 | 청주 | 200 | -- | 백태호 | 3 | 경주 | 255 | -- | 김경훈 | 4 | 제천 | 190 | -- | 김경진 | 5 | 대전 | 200 | -- | 박경호 | 6 | 제주 | 255 | -- | 김정인 | 5 | 대전 | 200 | -- +--+-++-+ -- 7 rows in set (0.01 sec) . SELECT s.name, s.location_id, l.name AS address, l.distance FROM student AS S LEFT JOIN location AS l ON s.location_id = l.id WHERE l.distance=10; -- +--+-++-+ -- | name | location_id | address | distance | -- +--+-++-+ -- | 이숙경 | 1 | 서울 | 10 | -- +--+-++-+ -- 1 row in set (0.00 sec) SELECT s.name, s.location_id, l.name AS address, l.distance FROM student AS S LEFT JOIN location AS l ON s.location_id = l.id WHERE s.location_id=3; -- +--+-++-+ -- | name | location_id | address | distance | -- +--+-++-+ -- | 백태호 | 3 | 경주 | 255 | -- +--+-++-+ -- 1 row in set (0.01 sec) . OUTTER JOIN과 INNER JOIN의 차이 . -- location에서 제주를 삭제 후 OUTTER JOIN(LEFT JOIN)과 INNER JOIN의 차이를 비교 DELETE FROM location WHERE name=&#39;제주&#39;; -- OUTTER JOIN SELECT s.name, s.location_id, l.name AS address, l.distance FROM student AS s LEFT JOIN location AS l ON s.location_id=l.id; -- +--+-++-+ -- | name | location_id | address | distance | -- +--+-++-+ -- | 이숙경 | 1 | 서울 | 10 | -- | 박재숙 | 2 | 청주 | 200 | -- | 백태호 | 3 | 경주 | 255 | -- | 김경훈 | 4 | 제천 | 190 | -- | 김경진 | 5 | 대전 | 200 | -- | 박경호 | 6 | NULL | NULL | -- | 김정인 | 5 | 대전 | 200 | -- +--+-++-+ -- 7 rows in set (0.00 sec) -- INNER JOIN SELECT s.name, s.location_id, l.name AS address, l.distance FROM student AS s INNER JOIN location AS l ON s.location_id=l.id; -- +--+-++-+ -- | name | location_id | address | distance | -- +--+-++-+ -- | 이숙경 | 1 | 서울 | 10 | -- | 박재숙 | 2 | 청주 | 200 | -- | 백태호 | 3 | 경주 | 255 | -- | 김경훈 | 4 | 제천 | 190 | -- | 김경진 | 5 | 대전 | 200 | -- | 김정인 | 5 | 대전 | 200 | -- +--+-++-+ -- 6 rows in set (0.00 sec) .",
            "url": "https://safenumz.github.io/blog/sql/2018/10/07/MySQL_05)_JOIN.html",
            "relUrl": "/sql/2018/10/07/MySQL_05)_JOIN.html",
            "date": " • Oct 7, 2018"
        }
        
    
  
    
        ,"post279": {
            "title": "[MySQL] 04) index",
            "content": "index . index . 색인, 조회할 때 원하는 행을 빠르게 찾을 수 있게 준비해 둔 데이터 | . 인덱스의 종류 . primary : 중복되지 않은 유일한 키 | normal : 중복을 허용하는 인덱스 | unique : 중복을 허용하지 않은 유일한 키 | foreign : 다른 테이블과의 관계성을 부여하는 키 | full text : 자연어 검색, myisam에서만 지원 | . DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` tinyint(4) NOT NULL AUTO_INCREMENT, `name` char(4) NOT NULL, `address` varchar(50) NOT NULL, `department` enum(&#39;국문과&#39;, &#39;영문과&#39;, &#39;컴퓨터공학과&#39;, &#39;전자공학과&#39;, &#39;물리학과&#39;) NOT NULL, `introduction` text NOT NULL, `number` char(255) NOT NULL, PRIMARY KEY(`id`), UNIQUE KEY `idx_number` (`number`) USING BTREE, KEY `idx_department` (`department`, `address`), FULLTEXT KEY `idx_introduction` (`introduction`) ) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8; INSERT INTO `student` VALUES (1, &#39;이숙경&#39;, &#39;청주&#39;, &#39;컴퓨터공학과&#39;, &#39;저는 컴퓨터공학과에 다닙니다. cumputer&#39;, &#39;0240132&#39;); INSERT INTO `student` VALUES (2, &#39;박재숙&#39;, &#39;서울&#39;, &#39;영문과&#39;, &#39;저는 영문과에 다닙니다&#39;, &#39;0512321&#39;); INSERT INTO `student` VALUES (3, &#39;백태호&#39;, &#39;경주&#39;, &#39;컴퓨터공학과&#39;, &#39;저는 컴퓨터공학과에 다니고 경주에서 왔습니다.&#39;, &#39;0239531&#39;); INSERT INTO `student` VALUES (4, &#39;김경훈&#39;, &#39;제천&#39;, &#39;국문과&#39;, &#39;제천이 고향이고 국문과에 다닙니다.&#39;, &#39;9813413&#39;); INSERT INTO `student` VALUES (6, &#39;김경진&#39;, &#39;제주&#39;, &#39;국문과&#39;, &#39;이번에 국문과에 입학한 김경진이라고 합니다. 제주에서 왔습니다.&#39;, &#39;9382958&#39;); INSERT INTO `student` VALUES (7, &#39;박경호&#39;, &#39;제주&#39;, &#39;국문과&#39;, &#39;박경호입니다. 잘 부탁드립니다.&#39;, &#39;0145511&#39;); INSERT INTO `student` VALUES (8, &#39;김정민&#39;, &#39;대전&#39;, &#39;영문과&#39;, &#39;대전에서 왔고 연문과에 다닙니다.&#39;, &#39;05030503&#39;); . primary key . = 테이블 전체를 통틀어서 중복되지 않는 값을 지정해야 함 . WHERE문을 이용해서 데이터를 조회할 때 가장 고속으로 데이터를 가져올 수 있음 | 테이블마다 딱 하나의 PRIMARY KEY를 가질 수 있음 | . SELECT * FROM student WHERE id=3; . unique key . 테이블 전체를 통틀어서 중복되지 않는 값을 지정해야 함 | 고속으로 데이터를 가져올 수 있음 | 여러개의 unique key를 지정할 수 있음 | . SELECT * FROM student WHERE number=9382958; . normal key . 중복을 허용함 | primary, unique 보다 속도가 느림 | 여러개의 키를 지정할 수 있음 | . SELECT * FROM student WHERE department=&#39;국문과&#39;; . Full Text . mysql의 기본설정 (ft_min_word_len)이 4로 되어 있기 때문에 최소 4글자 이상을 입력하거나 이 값을 조정해야 함 | mysql은 전문 검색 엔진이 아니기 때문에 한글 검색이 잘 안됨 | 전문검색엔진으로 lucene, sphinx 참고 | 스토리지 엔진 중 myisam에서만 사용가능 | . SELECT introduction, MATCH(introduction) AGAINST(&#39;영문과에&#39;) FROM student WHERE MATCH (introduction); . 중복키 . 하나의 키에 여러개의 칼럼을 포함 | . SELECT * FROM student WHERE departent=&#39;국문과&#39; AND address=&#39;제주&#39;; . 인덱스의 정의 방법 . 자주 조회되는 칼럼에 적용 | 조회 시 오랜시간을 소모하는 컬럼에 적용 | 데이터가 긴 경우 인덱스를 사용하지 않음 | .",
            "url": "https://safenumz.github.io/blog/sql/2018/10/06/MySQL_04)_index.html",
            "relUrl": "/sql/2018/10/06/MySQL_04)_index.html",
            "date": " • Oct 6, 2018"
        }
        
    
  
    
        ,"post280": {
            "title": "[MySQL] 02) 그룹핑, 정렬",
            "content": "그룹핑, 정렬 . 그룹핑 . SELECT * FROM 테이블명 GROUPBY 그룹핑 할 기준 칼럼명 . DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` tinyint(4) NOT NULL, `name` char(4) NOT NULL, `sex` enum(&#39;남자&#39;, &#39;여자&#39;) NOT NULL, `address` varchar(50) NOT NULL, `distance` INT NOT NULL, `birthday` datetime NOT NULL, PRIMARY KEY(`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `student` VALUES (2, &#39;박재숙&#39;, &#39;남자&#39;, &#39;서울&#39;, 10, &#39;1985-12-2&#39;); INSERT INTO `student` VALUES (1, &#39;이숙경&#39;, &#39;여자&#39;, &#39;청주&#39;, 200, &#39;1949-12-1&#39;); INSERT INTO `student` VALUES (3, &#39;백태호&#39;, &#39;남자&#39;, &#39;경주&#39;, 359, &#39;2001-2-3&#39;); INSERT INTO `student` VALUES (4, &#39;김경훈&#39;, &#39;남자&#39;, &#39;청주&#39;, 400, &#39;1993-2-6&#39;); INSERT INTO `student` VALUES (8, &#39;김정인&#39;, &#39;남자&#39;, &#39;대전&#39;, 200, &#39;1990-4-19&#39;); INSERT INTO `student` VALUES (6, &#39;김경진&#39;, &#39;여자&#39;, &#39;제주&#39;, 400, &#39;1985-10-29&#39;); INSERT INTO `student` VALUES (7, &#39;박경후&#39;, &#39;남자&#39;, &#39;영동&#39;, 310, &#39;1971-6-25&#39;); -- +-+--+--++-++ -- | id | name | sex | address | distance | birthday | -- +-+--+--++-++ -- | 1 | 이숙경 | 여자 | 청주 | 200 | 1949-12-01 00:00:00 | -- | 2 | 박재숙 | 남자 | 서울 | 10 | 1985-12-02 00:00:00 | -- | 3 | 백태호 | 남자 | 경주 | 359 | 2001-02-03 00:00:00 | -- | 4 | 김경훈 | 남자 | 청주 | 400 | 1993-02-06 00:00:00 | -- | 6 | 김경진 | 여자 | 제주 | 400 | 1985-10-29 00:00:00 | -- | 7 | 박경후 | 남자 | 영동 | 310 | 1971-06-25 00:00:00 | -- | 8 | 김정인 | 남자 | 대전 | 200 | 1990-04-19 00:00:00 | -- +-+--+--++-++ -- sex를 기준으로 groupby SELECT sex FROM student GROUP BY sex; SELECT sex, sum(distance), avg(distance) FROM student GROUP BY sex; -- +--+++ -- | sex | sum(distance) | avg(distance) | -- +--+++ -- | 남자 | 1279 | 255.8000 | -- | 여자 | 600 | 300.0000 | -- +--+++ -- 2 rows in set (0.00 sec) . 정렬 (ORDER) . SELECT * FROM 테이블명 ORDER BY 정렬의 기준으로 사용할 열 [DESC|ASC] . -- distance 기준으로 작은 것부터 큰순으로 정렬 (오름차순) SELECT * FROM student ORDER BY distance ASC; -- distance 기준으로 내림차순 정렬하고, 같은 것이있으면 address 기준으로 오름차순 정렬 SELECT * FROM student ORDER BY distance DESC, address ASC; -- +-+--+--++-++ -- | id | name | sex | address | distance | birthday | -- +-+--+--++-++ -- | 6 | 김경진 | 여자 | 제주 | 400 | 1985-10-29 00:00:00 | -- | 4 | 김경훈 | 남자 | 청주 | 400 | 1993-02-06 00:00:00 | -- | 3 | 백태호 | 남자 | 경주 | 359 | 2001-02-03 00:00:00 | -- | 7 | 박경후 | 남자 | 영동 | 310 | 1971-06-25 00:00:00 | -- | 8 | 김정인 | 남자 | 대전 | 200 | 1990-04-19 00:00:00 | -- | 1 | 이숙경 | 여자 | 청주 | 200 | 1949-12-01 00:00:00 | -- | 2 | 박재숙 | 남자 | 서울 | 10 | 1985-12-02 00:00:00 | -- +-+--+--++-++ -- 7 rows in set (0.00 sec) .",
            "url": "https://safenumz.github.io/blog/sql/2018/10/05/MySQL_03)_%EA%B7%B8%EB%A3%B9%ED%95%91_%EC%A0%95%EB%A0%AC.html",
            "relUrl": "/sql/2018/10/05/MySQL_03)_%EA%B7%B8%EB%A3%B9%ED%95%91_%EC%A0%95%EB%A0%AC.html",
            "date": " • Oct 5, 2018"
        }
        
    
  
    
        ,"post281": {
            "title": "[MySQL] 02) 삽입, 변경, 삭제, 조회",
            "content": "삽입, 변경, 삭제 . 삽입 . INSERT INTO table_name VALUES (value1, value2, value2, ...) INSERT INTO table_name (column1, column2, colum3, ...) VALUES (value1, value2, value3) . INSERT INTO `class`.`student` VALUES (&#39;2&#39;, &#39;leez&#39;, &#39;여자&#39;, &#39;서울&#39;, &#39;2000-10-26&#39;); INSERT INTO `class`.`student` (`id`, `name`, `sex`, `address`, `birthday`) VALUES (&#39;1&#39;, &#39;egoi&#39;, &#39;남자&#39;, &#39;seoul&#39;, &#39;2000-10-20&#39;); select * from student; . 변경 . UPDATE 테이블명 SET 컬럼1=컬럼1의 값, 컬럼2=컬럼2의 값 WHERE 대상이 될 컬럼명=컬럼의 값 . DROP TABLE IF EXISTS &#39;student&#39;; CREATE TABLE `student` ( `id` tinyint(4) NOT NULL, `name` char(4) NOT NULL, `sex` enum(&#39;남자&#39;, &#39;여자&#39;) NOT NULL, `address` varchar(50) NOT NULL, `birthday` datetime NOT NULL, PRIMARY KEY(`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `student` VALUES (1, &#39;이숙경&#39;, &#39;여자&#39;, &#39;청주&#39;, &#39;1982-11-16&#39;); INSERT INTO `student` VALUES (2, &#39;박재숙&#39;, &#39;남자&#39;, &#39;서울&#39;, &#39;1985-10-26&#39;); INSERT INTO `student` VALUES (3, &#39;백태호&#39;, &#39;남자&#39;, &#39;경주&#39;, &#39;1989-2-10&#39;); INSERT INTO `student` VALUES (4, &#39;김경훈&#39;, &#39;남자&#39;, &#39;제천&#39;, &#39;1979-11-4&#39;); INSERT INTO `student` VALUES (8, &#39;김정인&#39;, &#39;남자&#39;, &#39;대전&#39;, &#39;1990-10-1&#39;); INSERT INTO `student` VALUES (6, &#39;김경진&#39;, &#39;여자&#39;, &#39;제주&#39;, &#39;1985-1-1&#39;); INSERT INTO `student` VALUES (7, &#39;박경호&#39;, &#39;남자&#39;, &#39;영동&#39;, &#39;1981-2-3&#39;); UPDATE `student` SET address=&#39;서울&#39;; UPDATE `student` SET name=&#39;이진경&#39; WHERE id=1; UPDATE `student` SET name=&#39;이고잉&#39;, birthday=&#39;2001-4-1&#39; WHERE id=3; . 삭제 . DELETE FROM 테이블 [WHERE 삭제하려는 칼럼 명=값]; . DELETE FROM student WHERE id=2; . TRUNCATE . 테이블의 전체 데이터를 삭제 | 데이블에 외부키(foreign key)가 없다면 DLETE보다 훨씬 빠르게 삭제됨 | . TRUNCATE 테이블명 . TRUNCATE student; . DROP TABLE . 테이블을 삭제 | . DROP TABLE 테이블명 . DROP TABLE student; . 조회 . SELECT 칼럼명1, 칼럼명2 [FROM 테이블명] [GROUP BY 칼럼명] [ORDER BY 칼럼명 [ASC|DESC]] [LIMIT offset, 조회할 행의 수] . -- 모든 컬럼의 데이터 조회 SELECT * FROM student; -- name, birthday colum만 선택 SELECT name, birthday FROM student; -- id값이 3인 데이터 조회 SELECT * FROM student WHERE id=3; -- 성별이 남자이고 서울에사는 학생 조회 SELECT * FROM student WHERE sex=&#39;남자&#39; AND address=&#39;서울&#39;; -- 성별이 여자이거나 서울에사는 학생 조회 SELECT * FROM student WHERE sex=&#39;여자&#39; OR address=&#39;서울&#39;; -- 앞에 3개만 보여줌 SELECT * FROM student LIMIT 3; -- offset 0(1번째 행)부터 2개(2개의 행) 출력 SELECT * FROM student LIMIT 0,2; -- 남자 데이터 중 2개만 가져옴 SELECT * FROM student WHERE sex=&#39;남자&#39; LIMIT 2; .",
            "url": "https://safenumz.github.io/blog/sql/2018/10/04/MySQL_02)_%EC%82%BD%EC%9E%85_%EB%B3%80%EA%B2%BD_%EC%82%AD%EC%A0%9C_%EC%A1%B0%ED%9A%8C.html",
            "relUrl": "/sql/2018/10/04/MySQL_02)_%EC%82%BD%EC%9E%85_%EB%B3%80%EA%B2%BD_%EC%82%AD%EC%A0%9C_%EC%A1%B0%ED%9A%8C.html",
            "date": " • Oct 4, 2018"
        }
        
    
  
    
        ,"post282": {
            "title": "[MySQL] 01) 데이터관리-SQL",
            "content": "DATABASE 기본 명령어 . -- 생성, &#39;(단따옴표)가 아니라 `(물결표시 있는 버튼)임에 주의 CREATE DATABASE `데이터베이스명` CHARACTER SET utf8 COLLATE utf8_general_ci; -- 삭제 DROP DATABASE `데이터베이스명` -- 열람 SHOW DATABASES; -- 선택 USE `데이터베이스명` . -- class 라는 데이타베이스 생성 CREATE DATABASE `class` CHARACTER SET utf8 COLLATE utf8_general_ci; -- class 데이타베이스 삭제 DROP DATABASE `class` -- class 데이타베이스 사용 use class; . Table . 데이터가 실질적으로 저장되는 저장소 | 스키마(schema) : 데이블에 적재될 데이터의 구조와 형식을 정의 하는 것 | . CREATE TABLE table_name ( 칼럼명1 data_type, 칼럼명2 data_type, ) . -- NOT NULL은 반드시 데이터가 들어와야 함 CREATE TABLE `student` ( `id` tinyint NOT NULL, `name` char(4) NOT NULL, `sex` enum(&#39;남자&#39;, &#39;여자&#39;) NOT NULL, `address` varchar(50) NOT NULL, `birthday` datetime NOT NULL, PRIMARY KEY(`id`) ); -- 생성된 데이터베이스 확인 show tables; -- student -- student table의 description 확인 desc student; . 데이터타입 . CHAR() : 0 to 255 고정문자 길이, 많이 사용됨, 고정문자, 4글자나 1글자나 메모리 용량 차지 같음, 검색의 성능이 더 좋음 | VARCHAR() : 0~255 가변문자 길이, 많이 사용됨, 가변문자, 데이터 용량 유리 | TINYTEXT : 최대 255 문자길이 | TEXT : 최대 65535 문자길이, 많이 사용됨 | BLOB : 최대 65535 문자길이 | MEDIUMTEXT : 최대 16777215 문자길이 | MEDIUMBLOB : 최대 16777215 문자길이 | LOGTEXT : 최대 429496295 문자길이 | LOGBLOB : 최대 429496295 문자길이 . | TINYINT() : -128~127 정수형, 0~255 정수형, UNSIGNED(음수를 사용할 수 없지만 0~255를 사용할 수 있음) | SMALLINT() | MEDIUMINT() | INT() : 0 ~ 4294967295 정수형, 많이 쓰임 | BIGINT() | FLOAT() : 작은 부동소수점 | DOUBLE(.) : 큰 부동소수점 | DECIMAL(.) . | DATA : YYYY-MM-DD | DATETIME : YYYY-MM-DD HH:MM:SS | TIMESTAMP : YYYYMMDDHHSS. | TIME : HH:MM:SS. . | ENUM : 선택지가 있는 데이터 ex) enum(‘남자’, ‘여자’) | SET | .",
            "url": "https://safenumz.github.io/blog/sql/2018/10/03/MySQL_01)_%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B4%80%EB%A6%AC-SQL.html",
            "relUrl": "/sql/2018/10/03/MySQL_01)_%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B4%80%EB%A6%AC-SQL.html",
            "date": " • Oct 3, 2018"
        }
        
    
  
    
        ,"post283": {
            "title": "[Project] Bike Sharing Demand Regression Analysis",
            "content": "",
            "url": "https://safenumz.github.io/blog/project/2018/10/01/bike.html",
            "relUrl": "/project/2018/10/01/bike.html",
            "date": " • Oct 1, 2018"
        }
        
    
  
    
        ,"post284": {
            "title": "[WEB] 18) fontello 서비스 사용하기",
            "content": "Fontello . Fontello 서비스 . http://fontello.com | 이모티콘 서비스 | icon-emo-coffee | 0xe808을 &amp;#xe808로 변경 | 방식을 사용하면 font-faily를 지정안해도 됨 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;../../assets/fontello.css&quot;&gt; &lt;style&gt; body { font-family: &quot;fontello&quot;; color: red; font-size: 100px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- &amp;#xe808&lt;br&gt; --&gt; &lt;i class=&quot;icon-emo-coffee&quot;&gt;&lt;/i&gt; &lt;/body&gt; &lt;/html&gt; . content로 문자 삽입하면 검색엔진에서는 검색 안됨 | animation 입력 : | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;../../assets/fontello.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;../../assets/animation.css&quot;&gt; &lt;style&gt; body { font-size: 100px; } #test:before{ content: &quot;s&quot;; color: red; font-size: 30px; } #test:after{ content:&quot;e&quot; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;test&quot;&gt; A &lt;/div&gt; &lt;i class=&quot;icon-emo-coffee animation-spin&quot;&gt;&lt;/i&gt; &lt;/body&gt; &lt;/html&gt; . Font 만들기 . https://thenounproject.com | thenownproject 홈페이지에 들어가서 마음에 드는 이미지를 svg 포맷으로 다운, Fontello 사이트에 드래그하면 업로드되고 font&gt; 다운로드 할 수 있음 | Fontello사이트에서 config.json 파일을 import 하면 이전에 선택했던 이미지가 나옴 | . &lt;link rel=&quot;stylesheet&quot; href=&quot;../../assets/fontello/css/science.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;../../assets/fontello/css/animation.css&quot;&gt; &lt;i class=&quot;icon-emo-coffee animation-spin&quot;&gt;&lt;/i&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/03/WEB_18)_fontello_%EC%84%9C%EB%B9%84%EC%8A%A4_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html",
            "relUrl": "/web/2018/09/03/WEB_18)_fontello_%EC%84%9C%EB%B9%84%EC%8A%A4_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html",
            "date": " • Sep 3, 2018"
        }
        
    
  
    
        ,"post285": {
            "title": "[WEB] 17) CSS 뛰어넘기",
            "content": "Preprocessor . Stylus . http://lesscss.org/ (온라인 변환기) | http://sass-lang.com/ | http://stylus-lang.com/ (온라인 변환기) | . body { font:14px; #logo { border-radius: 5px; } } . Stylus Preprocessor가 CSS 문법에 없는 위 코드를 아래 코드로 바꿔 줌 | . body { font:14px; } body #logo { border-radius: 5px; } . out: css 파일로 out | compress:true : minify 기능 | . pp.styl . // out: pp.css, compress:ture body { color: red; h1 { font-size: 10px; } } . pp.css . body {color: #00f;}bdy h1{font-size:10px;} . &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;pp.css&quot;&gt; &lt;/head&gt; . 명령어로 compile 하기 . /* stylus 설치 */ $ sudo npm install stylus -g /* compile */ /* -w는 컴퓨터가 watch하고 있다가 style.styl이 변경되면 자동으로 style.css 변경*/ $ stylus -w style.styl -o style.css .",
            "url": "https://safenumz.github.io/blog/web/2018/09/03/WEB_17)_CSS_%EB%9B%B0%EC%96%B4%EB%84%98%EA%B8%B0.html",
            "relUrl": "/web/2018/09/03/WEB_17)_CSS_%EB%9B%B0%EC%96%B4%EB%84%98%EA%B8%B0.html",
            "date": " • Sep 3, 2018"
        }
        
    
  
    
        ,"post286": {
            "title": "[WEB] 16) 유지보수",
            "content": "유지보수 . Link Import . 외부에 있는 css 파일을 html로 로드 | . style.css . h1 { color: red; } . link_1.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;page1&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . link_2.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;page2&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . . style 내에서 import할수도 있음 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; @import url(&quot;style.css&quot;) &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;page1&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . 경량화 (Minify) . https://adam.id.au/clean-css-online/ | Brackets editor의 확장기능 : JS CSS Minifier | . minify.css . body{} h1 { color: tomato; } . minify.min.css | . h1{color: tomato;} . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;minify.min.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello Minify&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . cleancss 명령어를 통해 minify | nodejs : 자바스크립트를 서버쪽에서도 사용가능하게 한 툴 | . /* cleancss 설치 */ $ sudo npm install -g clean-css /* css 파일 minify */ $ cleancss -o public-min.css public.css .",
            "url": "https://safenumz.github.io/blog/web/2018/09/03/WEB_16)_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98.html",
            "relUrl": "/web/2018/09/03/WEB_16)_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98.html",
            "date": " • Sep 3, 2018"
        }
        
    
  
    
        ,"post287": {
            "title": "[WEB] 15) 그래픽",
            "content": "그래픽 . Bacground . background-color | background-image : url() | background-repeat : repeat, no-repeat, repeat-x, repeat-y | background-attachment : scroll, fixed | background-size : cover(이미지 짤려도 화면 전체 커버), contain(이미지 손실 없이 최대 크기), 500px 100px | background-position : center center (화면 가운데 이미지 위치) | 축약형 : background: tomato url(‘run.png’) no-repeat fixed center; | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; div { font-size: 100px; height: 500px; border: 5px solid gray; background-color: tomato; background-image: url(&#39;run.png&#39;); background-repead: no-repeat; /* background-attachment: fixed; background-size: contain; */ background-position: left bottom; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; gogh &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Filter . 필터는 이미지에 다양한 효과를 주는 것 | CSS Filters Playground : https://bennettfeely.com/filters/ | codepen.io : css 필터를 이용해 만든 예제 확인 | filter : grayscale(10%)(그레이), blur(3px)(흐리게) | img:hover : 마우스를 올렸을 때 효과 적용 | transition : all 1s; 1초 동안 장면전환 효과 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; img { transition: all 1s; } img:hover { -webkit-filter: grayscale(100%) blur(3px); -o-filter: grayscale(100%) blur(3px); filter: grayscale(100%) blur(3px); } h1 { -webkit-filter: blur(3px); -o-filter: blur(3px); filter: blur(3px); } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Mountain&lt;/h1&gt; &lt;img src=&quot;sample.mt.jpg&quot; alt=&quot;&quot;&gt; &lt;/body&gt; &lt;/html&gt; . Transform . scaleX(0.5), scaleY(0.5), scale(0.5, 0.5) : 1배가 기본값, 크기 조정 | rotate(45deg) : 45도 회전 | skewX, skewY, skew(45deg) : 기울게 하기 | translate(45px), translateX, translateY : 45px만큼 이동 | matrix | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; h1 { backround-color: deepskyblue; color: white; display: inline-block; padding: 5px; font-size: 3rem; margin: 100px; transform: scaleX(0.5) scaleY(0.5); } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello Transform!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . . Transition . transition-duration, transition-property . a:active{transform: translate(20px, 20px);} | a:active는 block이거나 inline-block에서만 동작, 클릭하면 이동 | transition-property : 어떤 속성에 대해 transition할 것인가 all: 모두 지정, 예) 글씨가 이동함과 동시에 글씨 크기가 동시에 작아짐 | transfrom : tranform에만 지정 | 복수의 효과 지정 : font-size transfrom | . | transition-duration : 장면 전환이 실행되는 시간 | transition: all 0.1s : 모든 transition에 대해 1초동안 장면전환 함 | transition: font-size 1s, transform 0.1s; | transition-delay : 효과를 지연하고 싶을 때 | . &lt;html&gt; &lt;head&gt; &lt;style&gt; a { font-size: 3rem; display: inline-block; /* transition-property: all; transition-duration: 1s; */ transition: font-size 1s, transform 0.1s; transition-delay: 1s; } a:active{ transform: translate(20px, 20px); } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; a href=&quot;#&quot;&gt;Click&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; . transition-timing-function . https://matthewlein.com/ceaser/ | easy | linear | cubic-bezier : 탄성을 가짐 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; div { backround-color: black; transition: all 1s; color: white; padding: 10px; width: 100px height: 50px transition: height 1s; transition-timing-function: linear; -webkit-transition: all 500ms cubic-bezier(0.645, 0.045, 0.355, 1.000); -moz-transition: all 500ms cubic-bezier(0.645, 0.045, 0.355, 1.000); -o-transition: all 500ms cubic-bezier(0.645, 0.045, 0.355, 1.000); transition: all 500ms cubic-bezier(0.645, 0.045, 0.355, 1.000); /* easeInOutCubic */ -webkit-transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000); -moz-transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000); -o-transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000); transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000); /* easeInOutCubic */ } div:hover { height: 400px; } &lt;/style&gt; &lt;/head&gt; &lt;body onload=&quot;documnet.querySelector(&#39;body&#39;).syle.backorundColor=&#39;white&#39;;&quot;&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/02/WEB_15)_%EA%B7%B8%EB%9E%98%ED%94%BD.html",
            "relUrl": "/web/2018/09/02/WEB_15)_%EA%B7%B8%EB%9E%98%ED%94%BD.html",
            "date": " • Sep 2, 2018"
        }
        
    
  
    
        ,"post288": {
            "title": "[WEB] 14) 레이아웃 활용",
            "content": "FLEX . FLEX . container : dispaly, flex-direction, flex-wrap, flex-flow, jestify-content, align-items, align-content | item : order, flex-grow, flex-shrink, flex-basis, flex, align-self | . flex-direction . row: 기본 값 | row-reverse: row 기준 reverse 정렬 | column : column 기준 정렬 | column-reverse : 컬럼 기준 reverse 정렬 | . flex-basis . flex의 크기 | . flex-grow . 기본 값 0 | 1로 주면 각각의 엘리먼트들이 전체 크기를 동일한 크기로 나눠 갖음 | . flex-shink . 기본 값 1 | 0로 주면 화면 크기와 상관없이 자신의 크기 유지 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; .container { background-color: powderblue; display: flex; flex-direction: row-reverse; } .item { background-color: tomato; color: white; border: 1px solid white; flex-grow: 1; } .item:nth-child(1){ flex-basis: 150px; flex-shrink: 1; } .item:nth_child(2) { flex-basis: 200px /* flex-grow: 2; */ flex-shrink: 2; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;5&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Holy Grail Layout . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; .container { display: flex; flex-direction: column; } header { border-bottom: 1px solid gray; padding-left: 20px; } footer { border-top: 1px solid gray; padding: 20px; text-align: center; } .content { display: flex; } .content nav { border-right: 1px solid gray; } .contetn aside { border-left: 1px solid gray; } nav, aside { flex-basis: 150px; flex-shrink: 0; } main { padding: 10px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;header class=&quot;container&quot;&gt; &lt;h1&gt;생활코딩&lt;/h1&gt; &lt;/header&gt; &lt;section class=&quot;conetent&quot;&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;html&lt;/li&gt; &lt;li&gt;css&lt;/li&gt; &lt;li&gt;javascript&lt;/li&gt; &lt;/ul&gt; &lt;main&gt; 생활코딩은 일반인을 위한 코딩 수업입니다. &lt;/main&gt; &lt;aside&gt; AD &lt;/aside&gt; &lt;/nav&gt; &lt;/section&gt; &lt;footer&gt; &lt;a href=&quot;https://opentutorial.com&quot;&gt;홈페이지&lt;/a&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . flex 기타 속성들 . https://opentutorials.org/module/2367/13526 | flex-direction : row, row-reverse, column, column-reverse | flex-wrap : nowrap, wrap, wrap-reverse | align-items : stretch, flex-start, flex-end, center, baseline | justify-content : flex-start, flex-end, space-between, center, space-around | align-content : flex-start, flex-end, center, space-between, space-around, stretch | align-self : auto, flex-start, flex-end, center, baseline, stretch | flex : flex-grow [flex-shrink] [flex-basis]; | order : -1로 주면 코드 순서를 바꾸지 않아도 앞으로 오게 할 수 있음 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; body { display: flex; align-items: center; justify-content: center; } .container { display: flex; flex-direction: column; width: 800px; } header { border-bottom: 1px solid gray; padding-left: 20px; } footer { border-top: 1px solid gray; padding: 20px; text-align: center; } .content { display: flex; } .content nav { border-right: 1px solid gray; } .contetn aside { border-left: 1px solid gray; } nav, aside { flex-basis: 150px; flex-shrink: 0; } main { padding: 10px; } nav { order: -1; } main { order: 1; } aside { order: 2; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;header class=&quot;container&quot;&gt; &lt;h1&gt;생활코딩&lt;/h1&gt; &lt;/header&gt; &lt;section class=&quot;conetent&quot;&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;html&lt;/li&gt; &lt;li&gt;css&lt;/li&gt; &lt;li&gt;javascript&lt;/li&gt; &lt;/ul&gt; &lt;main&gt; 생활코딩은 일반인을 위한 코딩 수업입니다. &lt;/main&gt; &lt;aside&gt; AD &lt;/aside&gt; &lt;/nav&gt; &lt;/section&gt; &lt;footer&gt; &lt;a href=&quot;https://opentutorial.com&quot;&gt;홈페이지&lt;/a&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Media Query . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;head&gt; &lt;style&gt; @media (max-width: 600px) { body { backgrond-color: green; } } @media (max-width: 500px) { body { background-color: red; } } @media (min-width: 601px) { body { background-color: blue; } } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; . Media Query 응용 . &lt;!doctype&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; .container{ display: flex; flex-direction: column; } header{ border-bottom:1px solid gray; padding-left:20px; } footer{ border-top:1px solid gray; padding:20px; text-align: center; } .content{ display:flex; } .content nav{ border-right:1px solid gray; } .content aside{ border-left:1px solid gray; } @media(min-width: 500px) { .content { flex-direction: column; } .content nav, .content aside { border: none; flex-basis: auto; } main { order: 0; } nav { order: 1; } aside { order: 2; display: none; } } nav, aside{ flex-basis: 150px; flex-shrink: 0; } main{ padding:10px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;header&gt; &lt;h1&gt;생활코딩&lt;/h1&gt; &lt;/header&gt; &lt;section class=&quot;content&quot;&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;html&lt;/li&gt; &lt;li&gt;css&lt;/li&gt; &lt;li&gt;javascript&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;main&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. Reiciendis veniam totam labore ipsum, nesciunt temporibus repudiandae facilis earum, sunt autem illum quam dolore, quae optio nemo vero quidem animi tempore aliquam voluptas assumenda ipsa voluptates. Illum facere dolor eos, corporis nobis, accusamus velit, similique cum iste unde vero harum voluptatem molestias excepturi. Laborum beatae, aliquid aliquam excepturi pariatur soluta asperiores laudantium iste, architecto ducimus fugiat sed, saepe quaerat recusandae exercitationem sapiente, impedit nostrum error. Doloremque impedit, eos in quos assumenda illo eum dicta. Voluptatum quaerat excepturi consectetur, doloremque esse deleniti commodi natus, maxime sit? Officia rerum quibusdam porro dolorum numquam harum soluta ex quo! Vero, nam? Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? Perferendis culpa nostrum repellendus dolores repudiandae assumenda, tempora laudantium in quibusdam placeat facilis ex voluptatem provident velit iusto fuga eum nobis deserunt enim minus. Explicabo vel labore, eum doloremque, impedit recusandae aut illum corporis quis atque sit vero quasi tempore placeat ipsam similique quo delectus provident animi distinctio debitis eligendi voluptatum! &lt;/main&gt; &lt;aside&gt; AD &lt;/aside&gt; &lt;/section&gt; &lt;footer&gt; &lt;a href=&quot;https://opentutorials.org/course/1&quot;&gt;홈페이지&lt;/a&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Float . float: left; : 이미지 왼쪽에 이미지와 겹치지 않게 텍스트 표시 | float를 무시하고 싶은 부분이 있으면 style=”clear:both”; 추가 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; img { width: 300px; float: left; margin: 20px; } p { border: 1px solid gray; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=&quot;sample.mt.jpg&quot; alt=&quot;&quot;&gt; &lt;p&gt; Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? Perferendis culpa nostrum repellendus dolores repudiandae assumenda, tempora laudantium in quibusdam placeat facilis ex voluptatem provident velit iusto fuga eum nobis deserunt enim minus. Explicabo vel labore, eum doloremque, impedit recusandae aut illum corporis quis atque sit vero quasi tempore pl aceat ipsam similique quo delectus provident animi distinctio debitis eligendi voluptatum! &lt;/p&gt; &lt;p style=&quot;clear:both;&quot;&gt; Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? Perferendis culpa nostrum repellendus dolores repudiandae assumenda, tempora laudantium in quibusdam placeat facilis ex voluptatem provident velit iusto fuga eum nobis deserunt enim minus. Explicabo vel labore, eum doloremque, impedit recusandae aut illum corporis quis atque sit vero quasi tempore pl aceat ipsam similique quo delectus provident animi distinctio debitis eligendi voluptatum! &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . Float Holy Grail Layout . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; * { box-sizing:border-box; } .container { width: 540px; border: 1px solid gray; margin: auto; } header { border-bottom: 1px solid gray; } nav, article, aside { border: 1px solid gray; } nav { float: left; width: 120px; border-right: 1px solid gray; } article { float: left; width: 300px; border-left: 1px solid gray; border-right: 1px solid gray; margin-left: -1px; } aside { float: left; width: 120px; border-left: 1px solid gray; margin-left: -1px } footer { clear: both; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;header&gt; &lt;h1&gt; CSS &lt;/h1&gt; &lt;/header&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;position&lt;/li&gt; &lt;li&gt;float&lt;/li&gt; &lt;li&gt;flex&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;article&gt; Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? &lt;/article&gt; &lt;aside&gt; &lt;/aside&gt; &lt;footer&gt; copyright &lt;/footer&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Multi Column . 신문과 같은 레이아웃 | column-count : 4로하면 최대 4 column까지만 생성 | column-width : 화면이 커짐에 따라 해당 px마다 column이 새로 생성됨 | column-gap : column 사이의 간격 | column-rule-style : solid(단선), dotted(점선), dashed(절취선) | column-rule-width : 선 굵기 | column-rule-color : 선 색 | column-span : all로 지정하면 column에 구애받지 않고 자신의 영역을 유지, 일반적으로 제목에 적용 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;author&quot; content=&quot;egoing&quot;&gt; &lt;style&gt; .column { text-align: justify; column-count: 4; column-width: 200px; column-gap: 30px column-rule-style: dashed; column-rule-width: 5px; column-rule-color: red; } h1 { column-span: all; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;column&quot;&gt; Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/02/WEB_14)_%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83_%ED%99%9C%EC%9A%A9.html",
            "relUrl": "/web/2018/09/02/WEB_14)_%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83_%ED%99%9C%EC%9A%A9.html",
            "date": " • Sep 2, 2018"
        }
        
    
  
    
        ,"post289": {
            "title": "[WEB] 13) 레이아웃 기본",
            "content": "Box Model . Inline block . display : inline(화면 전체를 쓰지 않음), block(화면 전체를 씀) | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; h1, a { border: 1px solid red; } h1 { display: inline; } a { display: block; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello world&lt;/h1&gt; 안녕하세요. &lt;a href=&quot;https://opentutorials.org&quot;&gt;생활코딩&lt;/a&gt;입니다. &lt;/body&gt; &lt;/html&gt; . Box Model . border | padding | margin | width | height | inline방식에서는 a태그에서는 width와 height가 무시된다. | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; p, ㅁ { /* border-width: 10px; border-style: solid; border-color: red; */ border: 10px solid red; padding: 20px; margin: 40px; width: 120px; height: 50px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? &lt;/p&gt; &lt;p&gt; Necessitatibus rem hic perferendis maiores obcaecati voluptate sunt autem id doloribus, similique repudiandae nesciunt vel facere ex accusantium ipsum provident iste itaque? &lt;/p&gt; 안녕하세요. &lt;a hre=&quot;https://a.com&quot;&gt;생활코딩&lt;/a&gt;입니다. &lt;/body&gt; &lt;/html&gt; . Box Sizing . content-box : content 크기 기준으로 width와 height가 결정 | border-box : border를 기준으로 크기 지정 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; * { box-sizing: border-box; } div { margin: 10px; width: 150px; box-sizing: border-box; } #small { border: 10px solid black; } #large { border: 30px solid black; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;small&quot;&gt;&lt;/div&gt; &lt;div id=&quot;large&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . 마진 겹침 . 동일 태그의 각 요소 간의 마진은 하나만 적용 | 부모 엘리먼트가 시각적 요소가 없는 상태일 때, 부모 엘리먼트의 마진값과 자식 엘리먼트의 마진값 둘 중에 큰 값으로 마진값이 설정됨 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; #parent { border: 1px solid tomato; margin-top: 100px; } #child { background-color: powderblue; marign-top: 50px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;parent&quot;&gt; &lt;div id=&quot;child&quot;&gt; Hello world &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; #empty { margin-top: 50px; margin-bottom: 100px; border: 1px solid tomato; } #normal { background-color: powderblue; margin-top: 50px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;empty&quot;&gt;&lt;/div&gt; &lt;div id=&quot;normal&quot;&gt;normal&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Position . relative vs static . static : top, left 등을 무시하고 자신이 위치해야 하는 곳에 있음 | relative : 원래 자신이 있어야 하는 곳 기준으로 top, left, right, bottom 등으로 이동 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; html { border: 1px solid gray; } div { border: 5px solid tomato; margin: 10px; } #me { position: relative; left: 100px; top: 100px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;other&quot;&gt;other&lt;/div&gt; &lt;div id=&quot;parent&quot;&gt; parent &lt;div id=&quot;me&quot;&gt;me&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . absolute . html 왼쪽 상단 맨 끝으로 부터 위치 설정 | 부모와의 링크가 끊김 | 자식 position이 absolute이고, relative를 가진 부모가 있으면 그 위치를 기준으로 위치가 설정됨 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; #parent, #other { border: 5px solid tomato; } #grand { position: relative; } #me { background-color: black; color: white; position: absolute; left: 50px; top: 50px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;other&quot;&gt;other&lt;/div&gt; &lt;div id=&quot;grand&quot;&gt; &lt;div id=&quot;parent&quot;&gt; parent &lt;div id=&quot;me&quot;&gt;me&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . fixed . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; body { padding-top: 30px; } #parent, #other { border: 5px solid tomato; } #me { background-color: black; color: white; position: fixed; right: 0; top: 0; width: 100%; heigth: 30px; text-align: center; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;other&quot;&gt;other&lt;/div&gt; &lt;div id=&quot;parent&quot;&gt; parent &lt;div id=&quot;me&quot;&gt;me&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;large&quot;&gt;large&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/02/WEB_13)-_%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83_%EA%B8%B0%EB%B3%B8.html",
            "relUrl": "/web/2018/09/02/WEB_13)-_%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83_%EA%B8%B0%EB%B3%B8.html",
            "date": " • Sep 2, 2018"
        }
        
    
  
    
        ,"post290": {
            "title": "[WEB] 12) 서체 다루기",
            "content": "Font . Font Size . px : 고정된 크기 지정 | em : | rem : 사용자 환경에 따라서 폰트의 크기 가변적 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; #px {font-size:16px;} #rem {font-size:1rem;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;px&quot;&gt;PX&lt;/div&gt; &lt;div id=&quot;rem&quot;&gt;REM&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Font Color . color name : red, tomato, powderblue | hex : #FF0000, 16진수 표현 | rgb : rgb(255, 0, 0) | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; h1 {color:red;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;hello world&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . Text Align . test-align(텍스트 정렬) : right, center, left, justify(왼쪽 오른쪽 균등 분배) | border(테두리) : 1px solid gray | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; p { text-align: right; border: 1px solid gray; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; text &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . Font . font-family | Sans-serif (장식 없는 것), Serif (장식 있는 것), monospace(고정폭) | font-weight: bold | line-height(자간) : 기본값 1.2(폰트 사이즈의 1.2배만큼 간격이 나옴) | font : 여러 속성을 축약형으로 한번의 표시 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; #type1 { font-size: 5rem; font-family: arial, Verdana, &quot;Helvetica Neue&quot; serif; font-weight: bold; line-height: 2; } type2 { font: bold 5rem/2 arial, verdana, &quot;Helvetica Neue&quot;, serif; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;#type1&quot;&gt; Hello World &lt;/p&gt; &lt;p id=&quot;type2&quot;&gt; Hello World &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . Web Font . 폰트의 용량 고려해야 함 | https://fonts.goole.com | font face generator : 구글폰트에서 제공하지 않는 폰트는 직접 만들어 활용할 수 있음 | https://www.web-font-generator.com | preview.html의 @font-face 부분 확인 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;link href=&quot;https://fonts.googleapis.com/css?family=PT+Mono&quot; rel=&quot;stylesheet&quot;&gt; &lt;head&gt; #font1 { font-family: &#39;PT Mono&#39;, monospace; } &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;font1&quot;&gt; 웹 폰트 적용 확인1 &lt;/p&gt; &lt;p id=&quot;Font2&quot;&gt; 웹 폰트 적용 확인2 &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/02/WEB_12)_%EC%84%9C%EC%B2%B4_%EB%8B%A4%EB%A3%A8%EA%B8%B0.html",
            "relUrl": "/web/2018/09/02/WEB_12)_%EC%84%9C%EC%B2%B4_%EB%8B%A4%EB%A3%A8%EA%B8%B0.html",
            "date": " • Sep 2, 2018"
        }
        
    
  
    
        ,"post291": {
            "title": "[WEB] 11) 적용 순서",
            "content": "적용 순서 . inherit . 폰트의 컬러는 상속, 테두리는 상속이 되지 않음 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; /* li {color:red;} h1 {color:red;} */ html {color:red;} #select {color:black;} body {border: 1px solid red;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;수업내용&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;html&lt;/li&gt; &lt;li&gt;css&lt;/li&gt; &lt;li id=&quot;selectr&quot;&gt;javascript&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; . Cascading . CSS : Cascading Sytle Sheet | 우선순위: !important &gt; style attribute &gt; id selector &gt; class selector &gt; tag selector | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; li {color:red;} #idsel{color:blue;} .classsel{color:green;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;html&lt;/li&gt; &lt;li id=&quot;idsel&quot; class=&quot;classsel&quot; style=&quot;color:powderblue&quot;&gt;css&lt;/li&gt; &lt;li&gt;javascript&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/01/WEB_11)_%EC%A0%81%EC%9A%A9_%EC%88%9C%EC%84%9C.html",
            "relUrl": "/web/2018/09/01/WEB_11)_%EC%A0%81%EC%9A%A9_%EC%88%9C%EC%84%9C.html",
            "date": " • Sep 1, 2018"
        }
        
    
  
    
        ,"post292": {
            "title": "[WEB] 10) Selector",
            "content": "Selector . Selector 요소 . Property (font-size) | Value (12px) | Value-Property separator (:) | Decalaration Separator (;) | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; li { color:red; text-decoration:underline; } #select { font-size:100px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;HTML&lt;/li&gt; &lt;li id=&quot;select&quot;&gt;CSS&lt;/li&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; . 부모 자식 선택자 . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; ul li { color:red; } #lecture&gt;li { border:1px solid red; color:blue; } ul, ol { background-color: powderblue; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;li&gt;HTML&lt;/li&gt; &lt;li&gt;CSS&lt;/li&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;/ul&gt; &lt;ol id=&quot;lecture&quot;&gt; &lt;li&gt;HTML&lt;/li&gt; &lt;li&gt;CSS&lt;/li&gt; &lt;ol&gt; &lt;li&gt;selector&lt;/li&gt; &lt;li&gt;decoration&lt;/li&gt; &lt;/ol&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt; . pseudo class Selector . active : 클릭했을 때 | hover : 마우스 롤오버했을 때 | link : 방문하지 않은 것 | visited : 방문한 것 | focus: 강조, 맨 마지막에 씀 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; a:link{ color:black; } a:visited { color:red; } a:hover { color:yellow; } a:active{ color:green; } a:focus { color:white; } input:focus{ background-color:black; color:white; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;a hre=&quot;https://opentutorials.org&quot;&gt;방문함&lt;/a&gt; &lt;a href=&quot;https://a/a&quot;&gt;방문안함&lt;/a&gt; &lt;input type=&quot;text&quot;&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/01/WEB_10)_%EC%84%A0%ED%83%9D%EC%9E%90.html",
            "relUrl": "/web/2018/09/01/WEB_10)_%EC%84%A0%ED%83%9D%EC%9E%90.html",
            "date": " • Sep 1, 2018"
        }
        
    
  
    
        ,"post293": {
            "title": "[WEB] 09) 미디어쿼리",
            "content": "미디어쿼리 . 반응형 디자인: 화면에 크기에 따라서 웹페이지의 디자인이 자동으로 변경 | . 미디어쿼리 . 특정 조건을 만족할 때만 화면 설정 반영 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; div { border:10px solid green; font-size:60px; } @media(min-width:800px) { div{ display:none; } } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; Responsive &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . 화면의 크기가 800px 이상이면 display:none으로 변경 . &lt;style&gt; @media(min-width:800px) { div{ display:none; } } &lt;/style&gt; . 미디어쿼리 써먹기 . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;WEB - CSS&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; body{ margin:0; } a{ color:black; text-decoration: none; } h1{ font-size:45px; text-align:center; border-bottom:1px solid gray; margin:0; pedding:20px; } ol{ border-right:1px solid gray; width:100px; margin:0; padding:20px; } #grid{ display: grid; gird-template-columns: 150px 1fr; } #grid ol{ paddig-left:33px; } #grid #article{ padding-left:25px; } @media(max-width:800px){ #gird{ display: block; } ol { border-right:none; } h1{ border-bottom:none; } } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;WEB&lt;/a&gt;&lt;/h1&gt; &lt;div&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;div id=&quot;article&quot;&gt; &lt;h2&gt;CSS&lt;/h2&gt; &lt;p&gt;CSS는 중요하다...&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . CSS 코드의 재사용 . style.css 파일을 불러와서 스타일을 씀 | style.css 파일만 수정하면 전체 웹페이지에 효과를 줄 수 있음 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/09/01/WEB_09)_%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC.html",
            "relUrl": "/web/2018/09/01/WEB_09)_%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC.html",
            "date": " • Sep 1, 2018"
        }
        
    
  
    
        ,"post294": {
            "title": "[WEB] 08) 그리드",
            "content": "그리드 . div: 디자인적인 구분 | span : | grid-template-columns을 1fr로 설정 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; #grid{ border:5px solid pink; display:grid; grid-template-columns: 150px 1fr; } div{ border:5px solid gray; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;gird&quot;&gt; &lt;div&gt;NAVIGATION&lt;/div&gt; &lt;p&gt;네이게이션은 ...&lt;/p&gt; &lt;div&gt;ARTICLE&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;WEB - CSS&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; body{ margin:0; } a{ color:black; text-decoration: none; } h1{ font-size:45px; text-align:center; border-bottom:1px solid gray; margin:0; pedding:20px; } #grid{ display: grid; gird-template-columns: 150px 1fr; } #grid ol{ paddig-left:33px; } #grid #article{ padding-left:25px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;WEB&lt;/a&gt;&lt;/h1&gt; &lt;div&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;div id=&quot;article&quot;&gt; &lt;h2&gt;CSS&lt;/h2&gt; &lt;p&gt;CSS는 중요하다...&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/08/26/WEB_08)_%EA%B7%B8%EB%A6%AC%EB%93%9C.html",
            "relUrl": "/web/2018/08/26/WEB_08)_%EA%B7%B8%EB%A6%AC%EB%93%9C.html",
            "date": " • Aug 26, 2018"
        }
        
    
  
    
        ,"post295": {
            "title": "[WEB] 07) 박스모델",
            "content": "박스모델 . 박스 그리기 . &lt;style&gt; /* block level element */ h1 { border-width:5px; border-color:red; border-style: solid; /* display:inline; */ } /* inline element */ a { border-width: 5px; border-color:red; border-style: solid; display:block; } &lt;/style&gt; . 이렇게 간단하게 쓸 수도 있다 . &lt;style&gt; h1, a { border: 5px solid red; } &lt;/style&gt; . 간격 설정 . padding : 테두리와 content 사이의 간격 | border: 테두리 굵기 | margin: 테두리와 테두리 사이의 간격 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; h1, a { border: 5px solid red; padding:20px; margin:20px; display:block; width:100px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;CSS&lt;/h1&gt; &lt;h1&gt;CSS&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . 박스모델 써먹기 . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;WEB - CSS&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; body{ margin:0; } #active { color:red; } .saw{ color:gray; } a { color:black; text-decoration: none; } h1 { font-size:45px; text-align:center; border-bottom:1px solid gray; margin:0; pedding:20px; } ol { border-right:1px solid gray; width:100px; margin:0; padding:20px; } &lt;/style&gt; &lt;/haed&gt; &lt;body&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;WEB&lt;/a&gt;&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot; class=&quot;saw&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot; style=&quot;color:red;text-decoration:underline&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot; class=&quot;saw&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;CSS&lt;/h2&gt; &lt;p&gt;css는 ...&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/08/25/WEB_07)_%EB%B0%95%EC%8A%A4%EB%AA%A8%EB%8D%B8.html",
            "relUrl": "/web/2018/08/25/WEB_07)_%EB%B0%95%EC%8A%A4%EB%AA%A8%EB%8D%B8.html",
            "date": " • Aug 25, 2018"
        }
        
    
  
    
        ,"post296": {
            "title": "[WEB] 06) CSS의 등장",
            "content": "CSS의 등장 . CSS . 디자인과 관련된 부분 | CSS는 하나의 코드를 바꾸는 것으로 전체 WEB의 디자인을 변경할 수 있음 | font tag를 사용할 때 발생하는 코드 중복을 제거할 수 있음 | 선택자 (Selector), 효과 (Declaration), Property Value | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;WEB - CSS&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; a { color:black; text-decoration: none; } h1 { font-size:60px; text-align:center; } &lt;/style&gt; &lt;/haed&gt; &lt;body&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;WEB&lt;/a&gt;&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot; class=&quot;saw&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot; style=&quot;color:red;text-decoration:underline&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot; class=&quot;saw&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt; &lt;!-- &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;&lt;font color=&quot;red&quot;&gt;WEB&lt;/font&gt;&lt;/h1&gt; --&gt; . Selector (선택자) . class는 .으로 구분 | class는 여러개의 태그를 제어 가능 | id는 #으로 구분 | id의 값은 단 한번만 등장해야 함 | 우선순위: id selector &gt; class selector &gt; tag selector | 마지막에 등장한 선택자가 더 큰 영향력을 갖음 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;WEB - CSS&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;style&gt; #active{ color:blue; } .saw { color:gray; } .active{ color:red; } a { color:black; text-decoration: none; } h1 { font-size:60px; text-align:center; } &lt;/style&gt; &lt;/haed&gt; &lt;body&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;WEB&lt;/a&gt;&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot; class=&quot;saw&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot; class=&quot;saw&quot; id=&quot;active&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/web/2018/08/25/WEB_06)_CSS%EC%9D%98_%EB%93%B1%EC%9E%A5.html",
            "relUrl": "/web/2018/08/25/WEB_06)_CSS%EC%9D%98_%EB%93%B1%EC%9E%A5.html",
            "date": " • Aug 25, 2018"
        }
        
    
  
    
        ,"post297": {
            "title": "[WEB] 05) HTML5",
            "content": "Input tpye . Input type . input type : 입력 타입을 규제 | 유효하지 않은 정보를 입력하면 거부 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;form.php&quot;&gt; &lt;input type=&quot;number&quot; min=10 max=15&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . date . 연도-월-일 | . &lt;input type=&quot;date&quot; name=&quot;datev&quot;&gt; . . month . -년-월 | . &lt;input type=&quot;month&quot; name=&quot;monthv&quot;&gt; . . week . 주 | . &lt;input type=&quot;week&quot; name=&quot;weekv&quot;&gt; . . time . 시간, 1시, 2시 | . &lt;input type=&quot;time&quot; name=&quot;timev&quot;&gt; . . email . &lt;input type=&quot;email&quot; name=&quot;emailv&quot;&gt; . . search . 검색 | . &lt;input type=&quot;search&quot; name=&quot;searchv&quot;&gt; . . tel . 전화번호 | . &lt;input type=&quot;tel&quot; name=&quot;telv&quot;&gt; . . url . url | . &lt;input type=&quot;url&quot; name=&quot;range&quot;&gt; . . range . &lt;input type=&quot;range&quot; name=&quot;rangev&quot; min=&quot;0&quot; max=&quot;10&quot;&gt; . . datetime . 국제표준시 | . . 속성 . autocomplete . on으로 처리하면 자동완성 기능이 활성화 | 예전에 검색했던 기록들이 저장 | 비밀번호 같이 민감한 부분은 off로 설정 | . placeholder . input type을 설명 | 사용자가 정보를 입력하면 지워짐 | . autofocus . 사용자가 페이지에 접근했을 때 커서 위치 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;login.php&quot; autocomplete=&quot;on&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot; placeholder=&quot;id를 입력해주세요&quot; autofocus&gt; &lt;input type=&quot;password&quot; name=&quot;password&quot; autocomplete=&quot;off&quot; placeholder=&quot;비밀번호를 입력해주세요&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . . . Form validation . 입력 값의 유효성 체크 | . required . 필수적으로 입력해야 하는 input | . pattern . pattern의 속성값은 정규표현식이 들어가야 함 | [a-zA-Z] : a부터 z까지, a~z, A~Z | . : 모든 문자 | [a-zA-Z]. : 첫번째 문자는 알파벳, 두번째 문자는 모든문자 | : 모든문자가 하나 이상 와야 함 | . | [0-9] : 0부터 9까지 숫자 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;register.php&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot; placeholder=&quot;아이디를 입력해주세요&quot; required pattern=&quot;[a-zA-Z]&quot;&gt; &lt;input type=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;이메일&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . .",
            "url": "https://safenumz.github.io/blog/web/2018/08/25/WEB_05)_HTML5.html",
            "relUrl": "/web/2018/08/25/WEB_05)_HTML5.html",
            "date": " • Aug 25, 2018"
        }
        
    
  
    
        ,"post298": {
            "title": "[WEB] 04) 정보로서의 HTML, 검색엔진 최적화",
            "content": "정보로서의 HTML . meta tag . 어떤 데이터를 설명하는 TAG | keywords : 주요 단어 | author : 작가 | http-equiv=”refresh” content=”30” : 30초 간격으로 refresh | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;description&quot; content=&quot;생활코딩의 소개자료&quot;&gt; &lt;meta name=&quot;keywords&quot; content=&quot;코딩,coding,생활코딩,프로그래밍,html,css,javascript&quot;&gt; &lt;meta name=&quot;author&quot; content=&quot;jason&quot;&gt; &lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt; &lt;/head&gt; &lt;body&gt; 생활코딩은 일반인에게 프로그래밍을 알려주는 온라인/오프라인 강의입니다. &lt;/body&gt; &lt;/html&gt; . semantic tag . 의미론적인 | html5가 되면서 특별한 기능은 없지만 header인지, footer인지 등의 정보를 나타내주는 태그들이 등장 | header : 화면의 상단에 위치하는 사이트나 문서의 전체적인 정보를 정의 | footer : 화면의 하단에 위치하는 사이트나 문서의 전체적인 정보를 정의 | nav : 무서의 네비게이션 항목을 정의 | section : 문서의 구획들을 정의 | article : 본문 | aside : 광고와 같이 페이지의 내용과는 관계가 적은 내용들 | figure : 삽화나 다이어그램과 같은 부가적인 요소를 정의 | main : 무서에서 가장 중심이 되는 컨텐츠를 정의 | mark : 참조나 하이라이트 표시를 필요로 하는 문자를 정의 | time : 시간을 정의 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;HTML&lt;/a&gt;&lt;/h1&gt; &lt;/header&gt; &lt;nav&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;기술소개&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;기본문법&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;하이퍼텍스트와 속성&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;4.html&quot;&gt;리스트와 태그의 중첩&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/nav&gt; &lt;article&gt; &lt;h2&gt;선행학습&lt;/h2&gt; 본 수업을 효과적으로 수행하기 위해서는 ... &lt;/article&gt; &lt;footer&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;privacy.html&quot;&gt;개인보호정책&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;about.html&quot;&gt;회사소개&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; . 검색엔진 최적화 . meta tag . title : 제목을 title로 감싸주는 것이 좋음 | content : 검색결과에 대한 짧은 설명 | url 주소를 알아보기 좋은 형태로 구성, 검색 엔진이 문서를 크롤링하기 쉬워짐 . | 단순 디렉토리 구조 만들기 | 같은 컨텐츠가 다른 여러 주소를 가질 때 : rel=”canonical” 링크 속성을 이용 | . &lt;head&gt; &lt;link rel=&quot;canonical&quot; href=&quot;http://localhost/1.html&quot;/&gt; &lt;/head&gt; . 사이트의 이동은 JavaScript를 사용하지 않고 HyperText를 이용 | 검색엔진이 JavaScript를 이해 못함 | . 이미지와 제목 . alt : alternative, 스크린리더와 같은 프로그램에 그림에 대한 정보를 제공 | alt를 기반으로 이미지 검색됨 | 이미지만 보관하는 폴더에 저장 | 그림파일 이름에도 의미가 있도록 지정 | . &lt;a href=&quot;1.html&quot;&gt;&lt;ing src=&quot;images/datascience.png&quot; alt=&quot;생활코딩 로고&quot;&gt;&lt;/a&gt; . robotstxt &amp; sitemap . 로봇의 접근을 제어, 정중한 요청 방식이기 때문에 악의적인 접근을 차단하지는 못함 | 사이트 맵 loc 사용 | sitemap.xml | . &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/ai/2022/11/05/ai-deepfm-implementation.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/ai/2022/11/03/ai-neural-collaborative-filtering-implementation.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/11/02/paper-deep-youtube.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/english/2022/10/30/bloomberg-surveillance.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/10/11/paper-multitask-youtube.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/10/09/paper-session-based-rnn.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/10/02/paper-recurrent-recommender.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/09/30/paper-deep-autoencoders.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/english/2022/09/21/bloomberg-surveillance.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/09/21/paper-autorec.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/09/14/paper-deepfm.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/09/10/paper-wide-and-deep.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/09/03/paper-factorization-machines.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/english/2022/08/31/bloomberg-surveillance.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/08/29/paper-neural-collaborative-filtering.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/english/2022/08/26/fed-powell-jackson-hole.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/english/2022/08/12/bloomberg-surveillance.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/paper/2022/08/10/paper-bayesian-personalized-ranking.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2022/08/01/macos-finder-sftp-connection.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2022/08/01/mac-afloat.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/project/2022/06/13/public_bicycle.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/kuberntetes/2022/06/02/kubernetes-pod.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/kuberntetes/2022/06/01/kuberntetes-rbac.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2022/05/11/pyspark-gpu-xgboost-Copy1.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2022/05/10/pyspark-pandas-api.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2022/05/01/jupyter-dl-docker-setting.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2022/05/01/spark_cluster_on_docker_swarm.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2022/05/01/spark-cluster-jupyter.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2022/04/10/docker-mysql-phpmyadmin.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2022/03/27/pyspark-minio-error.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2022/01/27/Pyspark-minio-connection.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/ml/2021/01/06/ml-bagging-boosting.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/ml/2021/01/05/ml-normalization.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2020/07/16/mysql_replication.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2020/07/01/docker_machine.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/05/21/pyspark-ml-recommendation.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/05/20/pyspark-ml-classification.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/05/18/pyspark-ml-unsupervised-learning.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/05/17/pyspark-ml-regression.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/05/12/pyspark-ml-feature-engineering.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/04/15/Linux-ssh_setting.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/04/14/Linux-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8_%EC%97%86%EC%9D%B4_%EB%8B%A4%EB%A5%B8_%EB%A8%B8%EC%8B%A0%EC%97%90_%EC%A0%91%EC%86%8D.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/kuberntetes/2020/04/05/kubeadm-upgrade.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/kuberntetes/2020/04/04/kubernetes-etcd.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/kuberntetes/2020/04/03/kubernetes-config.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/hadoop/2020/02/04/Hadoop_%EB%AA%85%EB%A0%B9%EC%96%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2020/01/30/AWS-EMR_Zeppelin.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2020/01/30/AWS-Athena_Presto.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2020/01/29/AWS-S3_Glue.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2020/01/29/AWS-MySQL_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2020/01/29/AWS-DynaoDB_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/27/pyspark-conf.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2020/01/27/Python-minio-connection.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/26/Spark-sortWithinPartitions.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/26/Spark-jupyter-basic-option.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/26/Spark-coalese-repartition.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2020/01/26/Python-user_hostname_path.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2020/01/26/Python-logging.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/25/Pyspark-Spark_SQL.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2020/01/25/AWS-awscli_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/25/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%B5%EC%86%8C%EC%88%98_%EA%B3%84%EC%82%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/24/Pyspark-Join.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/24/ShellScript-%EB%B0%B0%EC%97%B4_(Array).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/23/Pyspark-UDF.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/23/Linux-%EC%8A%A4%ED%8A%B8%EB%A6%BC_%ED%8E%B8%EC%A7%91%EA%B8%B0_(sed).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/23/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%9E%99_(Heap).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/22/Pyspark-Select_Subset_Columns_Filter.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/22/Linux-%EB%82%A0%EC%A7%9C_%ED%98%95%EC%8B%9D_(date).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/22/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%8A%B8%EB%A6%AC_(Tree).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/21/Pyspark-DataFrame.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/20/PySpark-Spark_rdd.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/19/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%95%B4%EC%89%AC_%ED%85%8C%EC%9D%B4%EB%B8%94_(Hash_Table).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/19/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%A7%81%ED%81%AC%EB%93%9C_%EB%A6%AC%EC%8A%A4%ED%8A%B8_(Linked_List).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/18/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%81%90_(Queue).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/18/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%8A%A4%ED%83%9D_(Stack).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/17/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%B0%B0%EC%97%B4_(Array).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/16/ShellScript-Jupyter_notebook_html_%EB%B3%80%ED%99%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/15/ShellScript-%EC%9D%B8%EC%9E%90%EA%B0%92_%EB%B0%9B%EA%B8%B0_(getopts).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/15/ShellScript-%EB%8B%A4%EC%88%98%EC%9D%98_%ED%8C%A8%ED%82%A4%EC%A7%80_%EC%84%A4%EC%B9%98%EC%9E%90%EB%8F%99%ED%99%94.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2020/01/14/Python_pandas-isin.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2020/01/14/Python_numpy-%EC%B5%9C%EC%86%8C_%EC%B5%9C%EB%8C%80_%EC%A1%B0%EA%B1%B4_%EC%83%89%EC%9D%B8%EA%B0%92.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2020/01/14/Python-csv_npy_%ED%8C%8C%EC%9D%BC_%EB%8F%99%EC%9D%BC%EC%84%B1_%EA%B2%80%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/14/ShellScript-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4_%EB%B3%91%EB%A0%AC%EC%B2%98%EB%A6%AC_(wait).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/14/ShellScript-%ED%8C%8C%EC%9D%BC_%EB%B0%B1%EC%97%85_%EB%B0%8F_%EB%B3%B5%EA%B5%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/14/Linux-%ED%8C%8C%EC%9D%BC%EB%82%B4%EC%9A%A9_%EC%A0%95%EB%A0%AC_(sort).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/13/dynamic_programming_and_divide_and_conquer.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/12/complexity.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/11/recursive.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2020/01/10/Spark-java_net_BindException.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2020/01/10/sort.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/10/pyspark-data-type.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/05/ShellScript-%ED%8C%8C%EC%9D%BC_%EB%8F%99%EC%9D%BC%EC%84%B1_%EB%B9%84%EA%B5%90_(diff).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2020/01/05/ShellScript-%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80_%EB%A1%9C%EA%B7%B8%EC%A0%80%EC%9E%A5.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2020/01/01/pyspark-read-write.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/12/12/R_%ED%8C%A8%ED%82%A4%EC%A7%80_tidyr_-_gather_spread_seperate_unite.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/12/12/R_%ED%8C%A8%ED%82%A4%EC%A7%80_tidyr.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/12/01/R_dplyr_%ED%8C%A8%ED%82%A4%EC%A7%80_-_%EB%8B%A8%EC%9D%BC_%ED%85%8C%EC%9D%B4%EB%B8%94_%EA%B2%BD%EC%9A%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/24/R_sqldf_%ED%8C%A8%ED%82%A4%EC%A7%80.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/24/R_reshape_%ED%8C%A8%ED%82%A4%EC%A7%80.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/24/R_plyr_%ED%8C%A8%ED%82%A4%EC%A7%80.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/23/R_%EB%82%A0%EC%A7%9C_%EB%AC%B8%EC%9E%90%EC%97%B4_%EA%B0%84_%EB%B3%80%ED%99%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_%EC%A2%8C%ED%91%9C%EA%B3%84_%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_%EC%86%8C%EA%B0%9C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_color_fill.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/17/R_%ED%8C%A8%ED%82%A4%EC%A7%80_ggplot2_Bar_%EA%B7%B8%EB%9E%98%ED%94%84_%EA%B7%B8%EB%A6%AC%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/14/R_%EC%98%AC%EB%A6%BC_%EB%82%B4%EB%A6%BC_%EB%B0%98%EC%98%AC%EB%A6%BC_%EC%A0%88%EB%8C%93%EA%B0%92.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/14/R_%EC%88%98%EC%97%B4%EC%83%9D%EC%84%B1_rep_seq.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/14/R_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EA%B8%B8%EC%9D%B4_length_dim_nrow_ncol.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/14/R_sample_%EB%B9%84%EB%B3%B5%EC%9B%90%EC%B6%94%EC%B6%9C_%EB%B3%B5%EC%9B%90%EC%B6%94%EC%B6%9C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/14/R_rbind_cbind_merge.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/14/R_paste_paste0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/14/R_grep_grepl.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2019/11/11/R_%ED%8C%A8%ED%82%A4%EC%A7%80_quantmod.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/10/11/Git%EC%9D%98_LF_will_be_replaced_by_CRLF_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/10/11/git-gitignore_%EC%A0%81%EC%9A%A9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/10/11/CentOS%EC%97%90_Tensorflow-GPU_%EC%84%A4%EC%B9%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/10/10/Elasticsearch_vm.max_count_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/08/19/Zepplein%EC%9D%98_io.grpc.StatusRuntimeException.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/08/19/CentOS%EC%97%90%EC%84%9C_Zeppelin_Python_%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/hadoop/2019/08/12/Hive_Sqoop_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EA%B8%B0%EB%B3%B8_%EC%97%90%EC%A0%9C_%ED%85%8C%EC%8A%A4%ED%8A%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/08/10/CentOS%EC%97%90_Zeppelin_%EC%84%A4%EC%B9%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/08/10/CentOS%EC%97%90_Kafka_%EC%84%A4%EC%B9%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/08/10/CentOS%EC%97%90_ELK_Stack_%EC%84%A4%EC%B9%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2019/08/01/ShellScript-%EA%B8%B0%EC%B4%88_%EB%AC%B8%EB%B2%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2019/08/01/Linux-%EC%A0%91%EA%B7%BC%EA%B6%8C%ED%95%9C_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/project/2019/08/01/paper.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spring/2019/07/01/Spring-Spring_%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spring/2019/07/01/Spring-DI(Dependency_Injection).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/07/01/MacOS-Linux_ISO_%ED%8C%8C%EC%9D%BC%EC%9D%84_USB%EB%A1%9C_%EA%B5%BD%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/07/01/%EB%8D%B0%EC%9D%B4%ED%84%B0_%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8_%EA%B5%AC%EC%B6%95-%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%88%98%EC%A7%91.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/30/bootstrap.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/06/24/Mesos_build.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/06/22/Spark_%ED%8A%9C%EB%8B%9D.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/06/20/Spark_Dynamic_Allocation.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/19/Servlet.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/17/JSP_%ED%8F%BC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/17/JSP_%EC%BF%A0%ED%82%A4%EC%99%80_%EC%84%B8%EC%85%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/17/JSP_%EC%9E%90%EB%B0%94%EB%B9%88%EC%A6%88.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/17/JSP_Objects.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/06/16/Hadoop_%EA%B8%B0%EB%B3%B8_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/06/16/CentOS_Nvidia_smi_%EC%84%A4%EC%B9%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/06/14/JSP%EB%A5%BC_%ED%86%B5%ED%95%B4_Oracle_%EC%A0%91%EC%86%8D%EC%8B%9C_Tomcat_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/hadoop/2019/06/14/Hadoop_eco_%EC%A2%85%EB%A5%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/hadoop/2019/06/14/Hadoop_eco_%EC%8B%A4%ED%96%89_%EB%B0%8F_%EC%A4%91%EB%8B%A8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/06/12/CentOS_yum_update%EA%B0%80_%EB%90%98%EC%A7%80_%EC%95%8A%EC%9D%84_%EB%95%8C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/11/jQuery.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/06/10/Linux_sudo_%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A1%9C_root_%EA%B6%8C%ED%95%9C_%EC%96%BB%EC%A7%80_%EB%AA%BB%ED%95%98%EB%8A%94_%EA%B2%BD%EC%9A%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/06/09/Hadoop_Eco_System_%EA%B5%AC%EC%B6%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/06/03/Javascirpt_in_Web.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/project/2019/06/01/card.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/05/30/CSS_%EC%9D%B4%EB%A1%A0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/05/29/HTML5_%EC%98%88%EC%A0%9C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2019/05/28/HTML5_%EC%9D%B4%EB%A1%A0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/05/28/MongoDB_Cluster_%EA%B5%AC%EC%B6%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/nosql/2019/05/27/NoSQL_%EA%B0%9C%EB%85%90.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/nosql/2019/05/27/MongoDB_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/05/20/JDBC_%EC%97%B0%EB%8F%99_%EC%A0%88%EC%B0%A8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/05/17/DB-RDBMS.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/05/17/DB-MySQL_scott_hr.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/05/17/Mac_Oracle_IntelliJ_%EC%97%B0%EB%8F%99.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/16/Oracle_SQL_%EC%BF%BC%EB%A6%AC%EC%97%B0%EC%8A%B5.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/16/Oracle_SQL_Procedure_Function.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/16/Oracle_SQL_Partition.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/16/Oracle_SQL_PL-SQL.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/05/16/DB-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EC%8A%A4%ED%82%A4%EB%A7%88.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/05/16/DB-Oracle_sqlplus_%ED%99%94%EB%A9%B4%ED%81%AC%EA%B8%B0_%EC%A1%B0%EC%A0%88.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/15/Oracle_SQL_View.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/15/Oracle_SQL_Sequence_Index.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/05/15/DB-SQL_%EC%A0%95%EA%B7%9C%ED%99%94.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/14/Oracle_SQL_%EC%84%9C%EB%B8%8C%EC%BF%BC%EB%A6%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/14/Oracle_SQL_JOIN.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/10/Oracle_SQL_%ED%95%A8%EC%88%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/10/Oracle_SQL_%EA%B7%B8%EB%A3%B9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2019/05/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%86%8C%EC%88%98%EC%9D%98_%EA%B0%9C%EC%88%98_%EA%B5%AC%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/09/Oracle_SQL_%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/09/Oracle_SQL_%EC%A0%95%EA%B7%9C%EC%8B%9D.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/09/Oracle_SQL_SELECT.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/09/Oracle_DB_%EA%B3%84%EC%A0%95%EC%83%9D%EC%84%B1.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/05/09/DB-%EB%AC%B4%EA%B2%B0%EC%84%B1_%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2019/05/09/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%86%8C%EC%88%98%EC%9D%98_%ED%95%A9_%EA%B5%AC%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/05/08/Oracle_SQL_%EA%B0%9C%EC%9A%94.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/05/08/git-git_%EC%B4%88%EA%B8%B0%ED%99%94.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/05/07/Mac_sqldeveloper_%EC%A0%91%EC%86%8D%EC%8B%9C_locale_not_recognized_%EC%98%A4%EB%A5%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/05/07/Java_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/05/07/Java_thred.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/05/07/MacOS-IP%EC%A3%BC%EC%86%8C_%ED%99%95%EC%9D%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/05/03/CentOS%EC%97%90_Oracle_%EC%84%A4%EC%B9%98%EC%8B%9C_Swap_Space_%EB%B6%80%EC%A1%B1_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/05/03/Java_%ED%8C%8C%EC%9D%BC_%EC%9E%85%EC%B6%9C%EB%A0%A5.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/05/03/Windows_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/05/03/Ubuntu_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/05/03/CentOS_Oracle_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/05/02/Java_GUI_(2).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/05/01/MySQL%EC%9D%98_COM_MYSQL_JDBC_DRIVER_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2019/05/01/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Java_%EC%8A%A4%ED%85%8D%EA%B3%84%EC%82%B0%EA%B8%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/30/Java_GUI_(1).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2019/04/30/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EA%B3%84%EC%82%B0%EA%B8%B0_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/29/Java_collection.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2019/04/29/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_%EB%B0%B0%EB%8B%AC%EC%9D%8C%EC%8B%9D_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2019/04/28/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/26/Java_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/25/Java_%EC%83%81%EC%86%8D.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/24/Java_%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B0%B0%EC%97%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/23/Java_%EB%A9%94%EC%86%8C%EB%93%9C_%ED%81%B4%EB%9E%98%EC%8A%A4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/22/Java_%EB%A9%94%EC%86%8C%EB%93%9C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2019/04/20/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EC%88%AB%EC%9E%90%EC%95%BC%EA%B5%AC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/19/Java_%EB%B0%B0%EC%97%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/18/Java_%EC%A0%9C%EC%96%B4%EB%AC%B8_%EB%B0%8F_%EB%B0%B0%EC%97%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/17/Java_%EC%A0%9C%EC%96%B4%EB%AC%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/16/Java_%EC%97%B0%EC%82%B0%EC%9E%90.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2019/04/15/Java_%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD_%EB%B0%8F_%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2019/04/14/Linux-Mac_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95_%ED%8C%8C%EC%9D%BC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/04/14/Windows_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/04/14/Ubuntu_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/architecture/2019/04/14/CentOS_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/04/12/Jupyter_Notebook%EC%97%90%EC%84%9C_pyspark_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/04/11/Mac%EC%97%90%EC%84%9C_Docker_%EC%82%AC%EC%9A%A9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/04/07/MacOS-Terminal_%ED%85%8C%EB%A7%88_%EC%A0%81%EC%9A%A9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/04/05/Jupyter_notebook%EC%97%90%EC%84%9C_JavaScript_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/04/05/Jupyter_Notebook%EC%97%90%EC%84%9C_Scala_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/04/05/Jupyter_Notebook%EC%97%90%EC%84%9C_R_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2019/04/03/Python-input_vs_raw_input_%EC%B0%A8%EC%9D%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2019/04/03/Linux-%ED%99%94%EB%A9%B4_%EC%B6%9C%EB%A0%A5_%EB%B0%8F_%ED%8C%8C%EC%9D%BC_%EB%82%B4%EC%9A%A9_%EB%B3%B4%EA%B8%B0_(echo_cat_more).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/04/03/MacOS-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2019/04/01/Linux-Ubuntu_%ED%95%9C%EA%B8%80%ED%8F%B0%ED%8A%B8_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/04/01/Ubuntu_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/03/31/Windows10_open_ssh.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/03/31/Jupyter_Notebook_%EC%84%9C%EB%B2%84_%EC%9B%90%EA%B2%A9%EC%A0%91%EC%86%8D.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/03/29/Zeppelin%EC%9D%98_java.lang.NullPointerException_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/03/29/Spark-Shell%EC%9D%98_java.lang.ExceptionInInitializerError_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/03/29/MinGw_%EC%B5%9C%EC%8B%A0%EB%B2%84%EC%A0%84_%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/03/29/Jupyter_env.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/03/29/Jupyter_Notebook%EC%97%90%EC%84%9C_java_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/03/29/Jupyter_Notebook%EC%97%90%EC%84%9C_C_%EC%BD%94%EB%94%A9%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2019/03/28/Python_pandas-crosstab_%EA%B5%90%EC%B0%A8%ED%91%9C_%EB%A7%8C%EB%93%A4%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2019/03/28/Python-MySQL%EA%B3%BC_Python_%EC%97%B0%EB%8F%99.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/trouble/2019/03/25/Zeppeline%EC%9D%98_Spark_Interpreter_%EC%97%90%EB%9F%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/03/11/SQLD_03)_SQL_%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98_%EC%9B%90%EB%A6%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/03/10/SQLD_02)_SQL_%ED%99%9C%EC%9A%A9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2019/03/10/SQLD_01)_SQL_%EA%B8%B0%EB%B3%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/03/10/Atom_packages.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/09/Scala-%ED%85%8C%EC%8A%A4%ED%8A%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/08/Scala-%EC%A0%9C%EC%96%B4%EB%AC%B8_%EC%9D%91%EC%9A%A9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/03/08/git-git_%EB%AA%85%EB%A0%B9%EC%96%B4_%EC%A0%95%EB%A6%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/03/08/Jupyter_Notebook_%ED%8F%B0%ED%8A%B8_%EB%B0%8F_%ED%99%94%EB%A9%B4%EB%84%93%EC%9D%B4_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2019/03/07/Spark-Spark_Application_%EC%8B%A4%ED%96%89.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/07/Scala-%EA%B5%AC%EC%A1%B0_(2).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2019/03/06/Spark-Spark_SQL.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/06/Scala-%ED%95%A8%EC%88%98%EC%9D%91%EC%9A%A9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2019/03/05/Spark-Spark_Streaming.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/05/Scala-%EA%B5%AC%EC%A1%B0_(1).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2019/03/04/Spark-Spark_Core.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/04/Scala-%EA%B8%B0%EC%B4%88_%EB%AC%B8%EB%B2%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/03/Scala-%EA%B8%B0%EB%B3%B8_%EB%AC%B8%EB%B2%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2019/03/02/Scala-Scala_%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2019/03/01/Linux-Mac_Linux_%EA%B0%84_%EC%9E%90%EC%86%8C%EB%B6%84%EB%A6%AC_%ED%98%84%EC%83%81.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/02/14/Zeppelin-Apache_Zeppline_%EC%84%B8%EB%B6%80%EA%B8%B0%EB%8A%A5.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/02/12/Zeppelin-Apache_Zeppeline%EC%9D%84_%EC%9C%84%ED%95%9C_Spark_%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/02/11/Zeppelin-Apache_Zeppeline%EC%9D%84_%EC%9C%84%ED%95%9C_Spark_%EA%B0%9C%EC%9A%94.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2019/02/10/Zeppelin-Apache_Zeppeline_%EC%84%A4%EC%B9%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2019/01/14/Python_numpy-%EC%A7%91%ED%95%A9%ED%95%A8%EC%88%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/01/02/%EC%BB%A4%EB%A7%A8%EB%93%9C%EC%B0%BD%EC%97%90%EC%84%9C_C%EC%96%B8%EC%96%B4_%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/etc/2019/01/02/Windows_%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/project/2019/01/01/animal.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/12/06/MySQL_INTERMEDIATE(2).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/12/05/MySQL_NTERMEDIATE(1).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/27/Java-10)_Collection.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/26/Java-09)_%EB%AC%B8%EC%9E%90%EC%97%B4_%ED%81%B4%EB%9E%98%EC%8A%A4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/25/Java-08)_%EB%9E%8C%EB%8B%A4%EC%8B%9D.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/24/Java_07)_%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/24/Java_06)_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/24/Java_05)_%EB%82%B4%EB%B6%80%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80_%EC%9D%B5%EB%AA%85%ED%81%B4%EB%9E%98%EC%8A%A4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/23/Java_04)_%EC%83%81%EC%86%8D_%EB%B0%8F_%ED%81%B4%EB%9E%98%EC%8A%A4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/22/Java_03)_%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/21/Java_02)_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95_(2).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/10/21/Java_01)_%EA%B8%B0%EC%B4%88%EB%AC%B8%EB%B2%95_(1).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2018/10/11/Python-Numpy.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/10/09/MySQL_07)_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC_%EC%97%B0%EB%8F%99.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/10/08/MySQL_06)_%EC%82%AC%EC%9A%A9%EC%9E%90_%EA%B4%80%EB%A6%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/10/07/MySQL_05)_JOIN.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/10/06/MySQL_04)_&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/10/05/MySQL_03)_%EA%B7%B8%EB%A3%B9%ED%95%91_%EC%A0%95%EB%A0%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/10/04/MySQL_02)_%EC%82%BD%EC%9E%85_%EB%B3%80%EA%B2%BD_%EC%82%AD%EC%A0%9C_%EC%A1%B0%ED%9A%8C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/10/03/MySQL_01)_%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B4%80%EB%A6%AC-SQL.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/project/2018/10/01/bike.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/03/WEB_18)_fontello_%EC%84%9C%EB%B9%84%EC%8A%A4_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/03/WEB_17)_CSS_%EB%9B%B0%EC%96%B4%EB%84%98%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/03/WEB_16)_%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/02/WEB_15)_%EA%B7%B8%EB%9E%98%ED%94%BD.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/02/WEB_14)_%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83_%ED%99%9C%EC%9A%A9.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/02/WEB_13)-_%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83_%EA%B8%B0%EB%B3%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/02/WEB_12)_%EC%84%9C%EC%B2%B4_%EB%8B%A4%EB%A3%A8%EA%B8%B0.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/01/WEB_11)_%EC%A0%81%EC%9A%A9_%EC%88%9C%EC%84%9C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/01/WEB_10)_%EC%84%A0%ED%83%9D%EC%9E%90.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/09/01/WEB_09)_%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/26/WEB_08)_%EA%B7%B8%EB%A6%AC%EB%93%9C.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/25/WEB_07)_%EB%B0%95%EC%8A%A4%EB%AA%A8%EB%8D%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/25/WEB_06)_CSS%EC%9D%98_%EB%93%B1%EC%9E%A5.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/25/WEB_05)_HTML5.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/24/WEB_04)_%EC%A0%95%EB%B3%B4%EB%A1%9C%EC%84%9C%EC%9D%98_HTML,_%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/22/WEB_03)_%EC%9E%85%EB%A0%A5_%EC%96%91%EC%8B%9D_(Form).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/22/WEB_02)_%ED%91%9C_%EB%A7%8C%EB%93%A4%EA%B8%B0_(table).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/21/WEB_01)_HTML_%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC_%EA%B8%B0%EB%B3%B8_Tag.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/web/2018/08/21/WEB_00)_Intro.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/javascript/2018/06/08/JavaScript_06)_%EA%B0%9D%EC%B2%B4(Object).html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/javascript/2018/06/07/JavaScript_05)_%EB%B0%B0%EC%97%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/javascript/2018/06/06/JavaScript_04)_%ED%95%A8%EC%88%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/javascript/2018/06/05/JavaScript_03)_%EB%B0%98%EB%B3%B5%EB%AC%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/javascript/2018/06/04/JavaScript_02)_%EC%A1%B0%EA%B1%B4%EB%AC%B8.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/javascript/2018/06/03/JavaScript_01)_%EB%B3%80%EC%88%98%EC%99%80_%EB%B9%84%EA%B5%90.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2018/05/01/Linux-sudo_su_%EC%B0%A8%EC%9D%B4.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/r/2018/04/20/R_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EA%B8%B0%EC%B4%88.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/scala/2018/04/12/Scala-Scala_Programming.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/java/2018/04/12/Java_00)_%EC%98%A4%EB%A6%AC%EC%97%94%ED%85%8C%EC%9D%B4%EC%85%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/2018/04/12/Mac_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/python/2018/04/10/Python-Pandas.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/devops/2018/04/10/%ED%8F%AD%ED%8F%AC%EC%88%98_%EC%95%A0%EC%9E%90%EC%9D%BC.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/sql/2018/03/20/MySQL_00)_%EC%98%A4%EB%A6%AC%EC%97%94%ED%85%8C%EC%9D%B4%EC%85%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/algorithm/2018/03/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EB%8B%AC%EB%A0%A5_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/spark/2018/03/03/Spark-Apache-Spark-%EA%B0%9C%EC%9A%94.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2018/03/01/Linux-Ubuntu_WOL_%EC%84%A4%EC%A0%95.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/linux/2018/03/01/Linux-CentOS_WOL.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/project/2012/09/01/uic.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/404.html&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/about/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/search/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/categories/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page2/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page3/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page4/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page5/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page6/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page7/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page8/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page9/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page10/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page11/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page12/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page13/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page14/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page15/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page16/&lt;/loc&gt; &lt;/url&gt; &lt;url&gt; &lt;loc&gt;https://safenumz.github.io/page17/&lt;/loc&gt; &lt;/url&gt; &lt;/urlset&gt; . 페이지 랭크 . 다른 사이트들로부터 링크로 많이 연결될수록 사이트의 페이지 랭크가 높아짐 | 랭크가 놓은 A 사이트가 D 사이트에 링크를 건다면 D 사이트의 페이지 랭크가 올라감 | .",
            "url": "https://safenumz.github.io/blog/web/2018/08/24/WEB_04)_%EC%A0%95%EB%B3%B4%EB%A1%9C%EC%84%9C%EC%9D%98_HTML,_%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94.html",
            "relUrl": "/web/2018/08/24/WEB_04)_%EC%A0%95%EB%B3%B4%EB%A1%9C%EC%84%9C%EC%9D%98_HTML,_%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94.html",
            "date": " • Aug 24, 2018"
        }
        
    
  
    
        ,"post299": {
            "title": "[WEB] 03) 입력 양식 (Form)",
            "content": "Form . Form 기본 . input type : text, password, submit | form : action의 속성값 주소로 전송 | name : 서버 쪽으로 전송될 때 구분하기 위해 name 지정 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/login.php&quot;&gt; &lt;p&gt;아이디 : &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;&lt;/p&gt; &lt;p&gt;비밀번호 : &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/p&gt; &lt;p&gt;주소 : &lt;input type=&quot;text&quot; name=&quot;address&quot;&gt;&lt;/p&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . 아이디 : . 비밀번호 : . 주소 : . . 문자입력 . texarea : 여러 줄의 텍스트 입력 가능 | cols=”50” : 50개 문자 | rows=”10” : 10줄 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/login.php&quot;&gt; &lt;p&gt;text : &lt;input type=&quot;text&quot; name=&quot;id&quot; value=&quot;default value&quot;&gt;&lt;/p&gt; &lt;p&gt;password : &lt;input type=&quot;password&quot; name=&quot;pwd&quot; value=&quot;default value&quot;&gt;&lt;/p&gt; &lt;p&gt;textarea: &lt;textarea cols=&quot;50&quot; rows=&quot;10&quot;&gt;default value&lt;/textarea&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . text : . password : . textarea: default value . . dropdown list . select | option | value: 컴퓨터가 인식하기 쉬운 값으로 변환 | multiple : ctrl 키를 누르면 여러개 선택 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/color.php&quot;&gt; &lt;h1&gt;색상&lt;/h1&gt; &lt;select name=&quot;color&quot;&gt; &lt;option value=&quot;red&quot;&gt;붉은색&lt;/option&gt; &lt;option value=&quot;black&quot;&gt;검은색&lt;/option&gt; &lt;option value=&quot;blue&quot;&gt;파란색&lt;/option&gt; &lt;/select&gt; &lt;h1&gt;색상 2 (다중선택)&lt;/h1&gt; &lt;select name=&quot;color2&quot; multiple&gt; &lt;option value=&quot;red&quot;&gt;붉은색&lt;/option&gt; &lt;option value=&quot;black&quot;&gt;검은색&lt;/option&gt; &lt;option value=&quot;blue&quot;&gt;파란색&lt;/option&gt; &lt;/select&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . . 색상 . 붉은색 검은색 파란색 색상 2 (다중선택) . 붉은색 검은색 파란색 . radio, checkbox . radio : 같은 name으로 지정되면 하나만 선택가능하게 만들 수 있다 | checkbox : 다중으로 선택 가능 | checked : 디폴트 값 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/order.php&quot;&gt; &lt;p&gt; &lt;h1&gt;색상 (단일 선택)&lt;/h1&gt; 붉은색 : &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;red&quot;&gt; 검은색 : &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;black&quot; checked&gt; 파란색 : &lt;input type=&quot;radio&quot; name=&quot;color&quot; value=&quot;blue&quot;&gt; &lt;/p&gt; &lt;p&gt; &lt;h1&gt;사이즈 (다중 선택)&lt;/h1&gt; 95 : &lt;input type=&quot;checkbox&quot; name=&quot;size&quot; value=&quot;95&quot;&gt; 100 : &lt;input type=&quot;checkbox&quot; name=&quot;size&quot; value=&quot;100&quot; checked&gt; 105 : &lt;input type=&quot;checkbox&quot; name=&quot;size&quot; value=&quot;105&quot; checked&gt; &lt;/p&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . 색상 (단일 선택) . 붉은색 : 검은색 : 파란색 : . 사이즈 (다중 선택) . 95 : 100 : 105 : . . button . text | submit | button | JavaScript와 함께 씀, onclick | reset : 사용자가 입력한 텍스트 초기화 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action =&quot;http://localhost/form.php&quot;&gt; &lt;input type=&quot;text&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;전송&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;버튼&quot; onclick=&quot;alert(hello world)&quot;&gt; &lt;input type=&quot;reset&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . . hidden . 눈에 보이진 않지만 submit 했을 때 value 전송 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/hidden.php&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;hide&quot; value=&quot;egoing&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . . label . 무언가의 이름표라는 것을 기술 | for : 누구의 label인지 명시 | input에 id와 매칭 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/login.php&quot;&gt; &lt;p&gt; &lt;label for=&quot;id_txt&quot;&gt;text&lt;/label&gt; : &lt;input id=&quot;id_txt&quot; type=&quot;text&quot; name=&quot;id&quot; value=&quot;default value&quot;&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt;password : &lt;input type=&quot;password&quot; name=&quot;pwd&quot; value=&quot;default value&quot;&gt; &lt;/label&gt; &lt;/p&gt; &lt;p&gt; &lt;label for=&quot;comment&quot;&gt;textarea&lt;/label&gt;: &lt;textarea id=&quot;comment&quot; cols=&quot;50&quot; rows=&quot;10&quot;&gt;default value&lt;/textarea&gt; &lt;/p&gt; &lt;p&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;color&quot; value=&quot;red&quot;&gt; 붉은색 &lt;/label&gt; &lt;label for=&quot;color_blue&quot;&gt; &lt;input id=&quot;color_blue&quot; type=&quot;checkbox&quot; name=&quot;color&quot; value=&quot;red&quot;&gt; 파란색 &lt;/label&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . text : . password : . textarea: default value . 붉은색 파란색 . . method . get이 디폴트 값, url에 비밀번호 노출 문제 있음 | post로 지정하면 비밀번호 노출 문제 해결 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/method.php&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . . 파일 업로드 . file | enctype을 mutipart/form-data로 지정 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;http://localhost/upload.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;profile&quot;&gt; &lt;input type=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . .",
            "url": "https://safenumz.github.io/blog/web/2018/08/22/WEB_03)_%EC%9E%85%EB%A0%A5_%EC%96%91%EC%8B%9D_(Form).html",
            "relUrl": "/web/2018/08/22/WEB_03)_%EC%9E%85%EB%A0%A5_%EC%96%91%EC%8B%9D_(Form).html",
            "date": " • Aug 22, 2018"
        }
        
    
  
    
        ,"post300": {
            "title": "[WEB] 02) 표 만들기(table)",
            "content": "Table . td, tr . td : table data | tr : table row | border : 숫자가 커질 수록 두꺼워 짐 | 심미성을 신경쓴다면 css를 사용해야 함 | . thead, tbody, tfoot . th : thead 부문 문자 진하게 | . 셀 병합 . rowspan : 수직으로 병합 | colspan : 수평으로 병합 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;table border=&quot;2&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;이름&lt;/th&gt;&lt;th&gt;성별&lt;/th&gt;&lt;th&gt;주소&lt;/th&gt;&lt;th&gt;회비&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;최진혁&lt;/td&gt;&lt;td&gt;남&lt;/td&gt;&lt;td rowspan=&quot;2&quot;&gt;청주&lt;/td&gt;&lt;td&gt;1000&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;최유빈&lt;/td&gt;&lt;td&gt;여&lt;/td&gt;&lt;td&gt;500&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td colspan=&quot;3&quot;&gt;합계&lt;/td&gt;&lt;td&gt;1500&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . 이름성별주소회비 . 최진혁 | 남 | 청주 | 1000 | . 최유빈 | 여 | 500 | . 합계 | 1500 | . .",
            "url": "https://safenumz.github.io/blog/web/2018/08/22/WEB_02)_%ED%91%9C_%EB%A7%8C%EB%93%A4%EA%B8%B0_(table).html",
            "relUrl": "/web/2018/08/22/WEB_02)_%ED%91%9C_%EB%A7%8C%EB%93%A4%EA%B8%B0_(table).html",
            "date": " • Aug 22, 2018"
        }
        
    
  
    
        ,"post301": {
            "title": "[WEB] 01) HTML 기본문법과 기본 Tag",
            "content": "TAG . h1 . 제목 | . &lt;h1&gt;제목&lt;/h1&gt; &lt;h2&gt;소제목&lt;/h2&gt; . strong . 진하게 | . &lt;strong&gt;자신의 힘&lt;/strong&gt; . a . a : anchor, 링크 걸기 | target : 새로운 탭에서 열리게 하고 싶을 때 | title : 속성 | . &lt;a href=&quot;https://www.naver.com&quot; target=&quot;_blink&quot; title=&quot;네이버&quot;&gt;네이버&lt;/a&gt; . &lt;h1&gt;오늘의 명언&lt;/h1&gt; 우리 모두는 &lt;strong&gt;자신의 힘&lt;/strong&gt;으로 발견한 내용을 가장 쉽게 익힌다. &lt;a href=&quot;https://www.naver.com&quot; target=&quot;_blink&quot; title=&quot;네이버&quot;&gt;네이버&lt;/a&gt; . body, li, ul, ol . body : 웹브라우저의 본문 | li : list, 리스트 | ul : unordered list, 그룹핑 | ol : ordered list, 순서고려 | . &lt;body&gt; &lt;ol&gt; &lt;li&gt;기술 소개&lt;/li&gt; &lt;li&gt;기본 문법&lt;/li&gt; &lt;li&gt;하이퍼텍스트와 속성&lt;/li&gt; &lt;li&gt;리스트와 태그의 중첩&lt;/li&gt; &lt;/ol&gt; &lt;ul&gt; &lt;li&gt;최진혁&lt;/li&gt; &lt;li&gt;최유빈&lt;/li&gt; &lt;li&gt;한이람&lt;/li&gt; &lt;li&gt;한이은&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; . head, title . head : 웹브라우저의 부가적인 정보 | title : 타이틀 설정 | . &lt;head&gt; &lt;title&gt;수업 소개&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; . p . 단락 구분 | css로 띄는 정도를 조정할 수 있음 | . &lt;p&gt;단락1&lt;/p&gt; &lt;p&gt;단락2&lt;/p&gt; . br . 줄바꿈 | . 문장1&lt;br&gt;&lt;br&gt;문장2 . 이미지 삽입 . www.pixabay.com : 저작권에 구애 받지 않고 사용가능한 이미지 제공 | width, height | height만 지정하면 이미지의 왜곡을 막을 수 있음 | alt (alternative text) 속성 : 시각장애인에 도움 | title : 도움말 | . &lt;img src=&quot;/assets/images/datascience.png&quot; height=300 alt=&quot;산 이미지&quot; title=&quot;도움말&quot;&gt; . 웹사이트 만들기 . index.html . &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;title&gt;HTML - 수업소개&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;HTML&lt;/a&gt;&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;기술소개&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;기본문법&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;하이퍼텍스트와 속성&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;4.html&quot;&gt;리스트와 태그의 중첩&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt; . 1.html . &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;title&gt;HTML - 수업소개&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;HTML&lt;/a&gt;&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;기술소개&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;기본문법&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;하이퍼텍스트와 속성&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;4.html&quot;&gt;리스트와 태그의 중첩&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; &lt;/html&gt; . 3.html . &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;title&gt;HTML - 수업소개&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;HTML&lt;/a&gt;&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;기술소개&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;기본문법&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;하이퍼텍스트와 속성&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;4.html&quot;&gt;리스트와 태그의 중첩&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;리스트와 태그의중첩&lt;/h2&gt; 리스트는 li를 쓰고, ul이나 ol로 감싸서 사용합니다. &lt;/body&gt; &lt;/html&gt; . 4.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;HTML - 수업소개&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;a herf=&quot;index.html&quot;&gt;HTML&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;기술소개&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;기본문법&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;하이퍼텍스트와 속성&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;4.html&quot;&gt;리스트와 태그의 중첩&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/body&gt; . HTML 개발도구 . Atom | emmet package 설치 | 맥의 경우, project manager : 종료시 작업폴더 유지시키기 | .",
            "url": "https://safenumz.github.io/blog/web/2018/08/21/WEB_01)_HTML_%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC_%EA%B8%B0%EB%B3%B8_Tag.html",
            "relUrl": "/web/2018/08/21/WEB_01)_HTML_%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%EA%B3%BC_%EA%B8%B0%EB%B3%B8_Tag.html",
            "date": " • Aug 21, 2018"
        }
        
    
  
    
        ,"post302": {
            "title": "[WEB] 00) Intro",
            "content": "생활코딩 WEB1 . &lt;h1&gt;WEB&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;HTML&lt;/li&gt; &lt;li&gt;CSS&lt;/li&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;/ol&gt; html &lt;p&gt; HyperText Markup Language &lt;/p&gt; . HTML . HTML : HyperText Markup Language | 사람이 하는 일 (원인): Code, Source, Language | 기계가 하는 일 (결과): Application, App, Program, Webpage, Website | PUBLIC DOMAIN . | Windows ctrl + o : 파일 열기 | ctrl + s : 저장 | . | Mac cmd + o : 파일 열기 | cmd + s : 저장 | . | . TAG . strong : 진하게 | u : 밑줄 | . &lt;strong&gt;creating &lt;u&gt;web&lt;/u&gt; pages&lt;/strong&gt; . h1 ~ h6 : HTML Heading | 숫자가 커질 수록 글자 크기가 작아지고 두껍고 줄바꿈이 됨 | . &lt;h1&gt;HTML&lt;/h1&gt; &lt;h2&gt;HTML&lt;/h2&gt; &lt;h3&gt;HTML&lt;/h3&gt; &lt;h4&gt;HTML&lt;/h4&gt; &lt;h5&gt;HTML&lt;/h5&gt; &lt;h6&gt;HTML&lt;/h6&gt; . br : 줄바꿈 | p : 단락 나눔, br 태그보다 정보로서의 가치가 있음 | . 문장1&lt;br&gt;&lt;br&gt;문장2 &lt;p&gt;단락1&lt;/p&gt;&lt;p style=&quot;margin-top:40px;&quot;&gt;단락2&lt;/p&gt; &lt;h1&gt;HTML&lt;/h1&gt; &lt;h2&gt;HTML&lt;/h2&gt; &lt;h3&gt;HTML&lt;/h3&gt; &lt;h4&gt;HTML&lt;/h4&gt; &lt;h5&gt;HTML&lt;/h5&gt; &lt;h6&gt;HTML&lt;/h6&gt; . 사진 넣는 법 . www.unsplash.com : 저작권에 구애 받지 않는 이미지 소스 | . &lt;img src=&quot;coding.jpg&quot; width=&quot;100%&quot;&gt; . 부모 태그와 자식 태그 . &lt;parent&gt; &lt;child&gt;&lt;/child&gt; &lt;/parent&gt;&lt;li&gt;1. HTML&lt;/li&gt; &lt;li&gt;2. CSS&lt;/li&gt; &lt;li&gt;3. JavaScript&lt;/li&gt; &lt;li&gt;1. HTML&lt;/li&gt; &lt;li&gt;2. CSS&lt;/li&gt; &lt;li&gt;3. JavaScript&lt;/li&gt; &lt;ul&gt; &lt;li&gt;1. HTML&lt;/li&gt; &lt;li&gt;2. CSS&lt;/li&gt; &lt;li&gt;3. JavaScript&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;dd&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;1. HTML&lt;/li&gt; &lt;li&gt;2. CSS&lt;/li&gt; &lt;li&gt;3. JavaScript&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;dd&lt;/li&gt; &lt;/ul&gt; . ol을 써주면 숫자가 자동으로 태그된다 | ol : Ordered List | ul : Unordered List | . &lt;ol&gt; &lt;li&gt;HTML&lt;/li&gt; &lt;li&gt;CSS&lt;/li&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;/ol&gt; &lt;ol&gt; &lt;li&gt;HTML&lt;/li&gt; &lt;li&gt;CSS&lt;/li&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;/ol&gt; . title | . &lt;!doctype html&gt; &lt;html&gt; &lt;!-- head 태그로 묶음 --&gt; &lt;head&gt; &lt;!-- 제목이 무엇인지 설명 --&gt; &lt;title&gt;WEB1 - html&lt;/title&gt; &lt;!-- utf-8로 문자를 읽어라 --&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;!-- 본문은 body 태그로 묶어야 함 --&gt; &lt;body&gt; &lt;h1&gt;&lt;a href=&quot;index.html&quot;&gt;WEB&lt;/a&gt;&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;1.html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;2.html&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;3.html&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;HTML&lt;/h2&gt; &lt;!-- 링크 걸기 --&gt; &lt;p&gt;&lt;a href=&quot;www.naver.com&quot; target=&quot;_blank&quot; title=&quot;html5 specification&quot;&gt; HTML &lt;/a&gt; &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . &lt;title&gt;WEB1 - html&lt;/title&gt; . checkbox 만들기 . &lt;input type=&quot;checkbox&quot;&gt; . 댓글 서비스 . Disqus | LiveRe | . 채팅 서비스 . tawk | . 웹사이트 방문자 분석기 . google analytics | .",
            "url": "https://safenumz.github.io/blog/web/2018/08/21/WEB_00)_Intro.html",
            "relUrl": "/web/2018/08/21/WEB_00)_Intro.html",
            "date": " • Aug 21, 2018"
        }
        
    
  
    
        ,"post303": {
            "title": "[JavaScript] 06) 객체 (Object)",
            "content": "객체 (Object) . 배열의 인덱스는 숫자인데 객체의 인덱스는 문자라는 차이가 있음 | . var grades = {&#39;egoing&#39;: 10, &#39;k8805&#39;: 6, &#39;sorialigi&#39;: 80}; console.log(grades) // Object {&#39;egoing&#39;: 10, &#39;k8805&#39;: 6, &#39;sorialigi&#39;: 80} . var grades = {}; grades[&#39;egoing&#39;] = 10; grades[&#39;k8805&#39;] = 6; grades[&#39;sorialgi&#39;] = 80; console.log(grades[&#39;sorialgi&#39;]); // 80 console.log(grade[&#39;k88&#39; + &#39;05&#39;]) // 6 console.log(grade.K8805) // 6 . // for문 돌때 key 값이 나옴 var grades = {&#39;egoing&#39;: 10, &#39;k8805&#39;: 6, &#39;sorialgi&#39;: 80}; for(key in grades) { console.log(&quot;key : &quot; + key + &quot;value : &quot; + grades[key] + &lt;br /&gt;); } . JavaScript로 HTML 리스트를 만들 수 있음 | . &lt;!DOCTYPE html&gt; &lt;html&gt;&lt;body&gt; &lt;ul&gt; &lt;script type=&quot;text/javascript&quot;&gt; var grades = {&#39;egoing&#39;: 10, &#39;k8805&#39;: 6, &#39;sorialgi&#39;: 80}; for(var name in grades) { documnet.write(&quot;&lt;li&gt;key : &quot; + name + &quot;values : &quot; + grades[name] + &quot;&lt;/li&gt;&quot;); } &lt;/script&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; . 위 코드실행에 대한 결과는 다음과 같음 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;...&lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;script type=&quot;text/javascript&quot;&gt;...&lt;/script&gt; &lt;li&gt;key : egoing value : 10&lt;/li&gt; &lt;li&gt;key : k8805 value : 6&lt;/li&gt; &lt;li&gt;key : sorialgi value : 80&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; . 객체 지향 프로그래밍 . // 객체 내부에 함수를 넣을 수도 있음 // this는 함수를 소유하고 있는 객체를 가리키는 변수임 var grades = { &#39;list&#39; : {&#39;egoing&#39; : 10, &#39;k8805&#39; : 8, &#39;sorialgi&#39; : 80}, &#39;show&#39; : function() { for(var name in this.list) { console.log(name, this.list[name]); } } } alert(grades[&#39;lsit&#39;][&#39;egoing&#39;]) // 10 alert(grades[&#39;show&#39;]()) // egoing : 10 // k8805 : 8 // sorialgi : 80 grades.show(); // egoing : 10 // k8805 : 8 // sorialgi : 80 .",
            "url": "https://safenumz.github.io/blog/javascript/2018/06/08/JavaScript_06)_%EA%B0%9D%EC%B2%B4(Object).html",
            "relUrl": "/javascript/2018/06/08/JavaScript_06)_%EA%B0%9D%EC%B2%B4(Object).html",
            "date": " • Jun 8, 2018"
        }
        
    
  
    
        ,"post304": {
            "title": "[JavaScript] 05) 배열",
            "content": "배열 . 연관된 데이터를 모아서 통으로 관리하기 위새 사용하는 데이터 타입 | . 배열의 문법 . // 배열 var member = [&#39;egoing&#39;, &#39;k8805&#39;, &#39;sorialgi&#39;] alert(member[1]); // k8805 . function get_member1() { return &#39;egoing&#39;; } documnet.write(get_member1()); function get_member2() { return &#39;k8805&#39;; } documnet.write(get_member2()); function get_member3() { return &#39;sorialgi&#39;; } documnet.write(get_member3()); . function get_members(){ return [&#39;egoing&#39;, &#39;k8805&#39;, &#39;sorialgi&#39;]; } var members = get_members(); documnet.write(members[0]); documnet.write(members[1]); documnet.write(members[2]); . 배열과 반복문의 조우 . // 대문자로 바꿔주는 내장함수 var a = &#39;egoing&#39; a.toUpperCase(); // EGOING // 배열의 개수를 나타내주는 내장함수 var a = [&#39;egoing&#39;, &#39;k8805&#39;, &#39;sorialgi&#39;]; alert(a.length); // 3 . function get_members() { return [&#39;egoing&#39;, &#39;k8805&#39;, &#39;sorialgi&#39;]; } members = get_members(); for(var i = 0; i &lt; members.length; i ++) { document.write(members[i].toUpperCase()+&quot;&lt;br /&gt;&quot;); } . 배열의 제어 . // 배열의 뒤에 추가함 var li = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] li.push(&#39;f&#39;); alert(li); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;f&#39;] // 배열과 배열을 합침 li = li.concat([&#39;f&#39;, &#39;g&#39;]); alert(li); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;f&#39;, &#39;f&#39;, &#39;g&#39;] // 배열의 앞에 넣어줌 var li = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; li.unshift(&#39;z&#39;); alert(li); // [&#39;z&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;] // 1번 인덱스부터 1개의 원소, &#39;b&#39;를 삭제하고 그 위치에 &#39;x&#39;, &#39;y&#39;를 추가 함 var a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; a.splice(1, 1, &#39;x&#39;, &#39;y&#39;); alert(a); // [&#39;a&#39;, &#39;x&#39;, &#39;y&#39;, &#39;c&#39;] var li = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]; // 맨 앞의 원소를 제거하고 리턴함 li.shift(); alert(li); // &#39;a&#39; // 맨 뒤의 원소를 제거하고 리턴함 li.pop(); // &#39;e&#39; // 정렬 var li = [&#39;c&#39;, &#39;e&#39;, &#39;a&#39;, &#39;b&#39;, &#39;d&#39;]; li.sort(); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;] // 역순 정렬 li.reverse(); // [&#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;] // sortfunction : 사용자 지정 정렬 .",
            "url": "https://safenumz.github.io/blog/javascript/2018/06/07/JavaScript_05)_%EB%B0%B0%EC%97%B4.html",
            "relUrl": "/javascript/2018/06/07/JavaScript_05)_%EB%B0%B0%EC%97%B4.html",
            "date": " • Jun 7, 2018"
        }
        
    
  
    
        ,"post305": {
            "title": "[JavaScript] 04) 함수",
            "content": "함수 . 하나의 로직을 재실행 할 수 있도록 하는 것으로 코드의 재사용성을 높여줌 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; function numbering() { var i = 0; while(i &lt; 10){ documnet.write(i + &lt;br /&gt;); i += 1; } } numbering(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . 함수의 입력과 출력 . &lt;!-- 함수의 입력과 출력 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; function get_member1() { return &#39;egoing&#39;; return &#39;leezche&#39;; return &#39;graphittie&#39;; } alert(get_memger1()) &lt;/script&gt; . &lt;!-- 값 자체는 인자(argumnet), 값을 받는 변수 arg는 매개변수(parameter)라고 함 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; function get_argumnet(arg) { return arg*1000; } alert(get_argument(1)); alert(get_argument(2)); &lt;/script&gt; . &lt;script&gt; function get_argumnets(arg1, arg2) { return arg1 + arg2 } alert(get_arguments(10, 20)); alert(get_arguments(20, 30)); &lt;/script&gt; . &lt;!-- 함수를 변수로 받을 수도 있음 --&gt; &lt;script&gt; numbering = function() { i = 0; while(i &lt; 10) { documnet.write(i); i += 1; } } numbering(); &lt;/script&gt; . &lt;!-- 익명함수 : 이름이 필요없고 바로 실행이 필요할 때 사용 --&gt; &lt;script&gt; (fuction() { i = 0; while(i &lt; 10) { document.write(i); i += 1; } })() &lt;/script&gt; .",
            "url": "https://safenumz.github.io/blog/javascript/2018/06/06/JavaScript_04)_%ED%95%A8%EC%88%98.html",
            "relUrl": "/javascript/2018/06/06/JavaScript_04)_%ED%95%A8%EC%88%98.html",
            "date": " • Jun 6, 2018"
        }
        
    
  
    
        ,"post306": {
            "title": "[JavaScript] 03) 반복문",
            "content": "반복문 . while문 . while(조건){ 반복해서 실행할 코드 } . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; documnet.write(&quot;Coding everybody &lt;br /&gt;&quot;); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . while(ture){ document.write(&#39;Coding everybody &lt;br /&gt;&#39;); } . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var i = 0; while(i &lt; 10){ documnet.write(&quot;Coding everybody &quot; + i +&quot; &lt;br /&gt;&quot;); i = i + 1; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . for문 . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; for(var i = 0; i &lt; 10; i = i + 1) { document.write(&quot;Coding everybody &quot; + i + &quot;&lt;br /&gt;&quot;); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . 반복문의 제어 . break : 해당되는 부분에 반복문 종료 | continue : 해당되는 부분만 실행되지 않음 | . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; for(var i = 0; i &lt; 10; i++) { if(i===5){ continue; } documnet.write(&#39;coding everybody &#39; + i + &lt;br /&gt;); } &lt;/script&gt; &lt;body&gt; &lt;/html&gt; . 반복문의 중첩 . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; for(var i = 0; i &lt; 10; i++){ for(var j = 0; j &lt; 10; j++){ document.write(&#39;coding everybody&#39; + i + j + &lt;br /&gt;); } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://safenumz.github.io/blog/javascript/2018/06/05/JavaScript_03)_%EB%B0%98%EB%B3%B5%EB%AC%B8.html",
            "relUrl": "/javascript/2018/06/05/JavaScript_03)_%EB%B0%98%EB%B3%B5%EB%AC%B8.html",
            "date": " • Jun 5, 2018"
        }
        
    
  
    
        ,"post307": {
            "title": "[JavaScript] 02) 조건문",
            "content": "조건문 . 조건문 기초 . if(true) { alert(&#39;result : ture&#39;); } // true // 아무일도 일어나지 않음, false인 부분은 무시됨 if(false) { alert(&#39;result : false&#39;); } // if(true){ alert(1); alert(2); alert(3); alert(4); } alert(5); // 1 .. // 5 if(false){ alert(1); alert(2); alert(3); alert(4); } alert(5); // 5 . if(true){ alert(1); } else { alert(2); } if(false){ alert(1); } else { alert(2); } . if(false){ alert(1); } else if(true){ alert(2); } else if(true){ alert(3); } else{ alert(4); } // 2 . 변수와 비교연산자 . // 경고창 대신에 프롬프트 창이 뜸, 사용자로부터 정보를 받아낼 수 있는 기능 prompt(&#39;당신의 나이는?&#39;); // prompt가 먼저 실행되고 alert이 이어 실행됨 alert(prompt(&#39;당신의 나이는?&#39;)); . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&#39;utf-8&#39;&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var id = promt(&#39;아이디를 입력해주세요.&#39;); if(id=&#39;egoing&#39;){ var password = prompt(&#39;비밀번호를 입력해주세요&#39;); if(password == &#39;111111&#39;) { alert(&#39;로그인 하셨습니다.&#39; + id + &#39;님 반갑습니다.&#39;) } else { alert(&#39;비밀번호가 다릅니다.&#39;) } } else { alert(&#39;이이디가 일치하지 않습니다.&#39;); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . 논리 연산자 . // and와 같은 논리 연산자 if(true &amp;&amp; true) { alert(1); } // 1 . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&#39;utf-8&#39;&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; var id = promt(&#39;아이디를 입력해주세요.&#39;); var password = prompt(&#39;비밀번호를 입력해주세요&#39;); if(id == &#39;egoing&#39; &amp;&amp; password === &#39;111111&#39;){ alert(&#39;로그인 하셨습니다.&#39; + id + &#39;님 반갑습니다.&#39;) } else { alert(&#39;이이디가 일치하지 않습니다.&#39;); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . or 연산자 . 둘 중의 하나라도 참이면 참 | . if(true || false) { alert(1); } // 1 . var id = prompt(&#39;아이디를 입력해주세요.&#39;); password = promt(&#39;비밀번호를 입력해주세요.&#39;); if((id===&#39;egoing&#39; || id === &#39;k8805&#39; || id ===&#39;sorialgi&#39;) &amp;&amp; password===&#39;111111&#39;) { alert(&#39;인증 했습니다.&#39;); } else { alert(&#39;인증에 실패 했습니다.&#39;); } . if(!false &amp;&amp; !false){ alert(1); } // 1 . if(0){ alert(1); } // // JavaScript에서는 1을 True로 간주함 if(1) { alert(2) } // 2 . // 빈문자열인 경우에는 False로 간주함 if(&#39;&#39;){alert(&#39;빈문자열&#39;);} // if(&#39;egoing&#39;){alert(&#39;빈문자열&#39;);} // 빈문자열 // undefined, null, NaN는 False로 간주함 if(undefined){alert(&#39;undefined&#39;);} // if(!undefined){alert(&#39;undefined&#39;);} // undefined .",
            "url": "https://safenumz.github.io/blog/javascript/2018/06/04/JavaScript_02)_%EC%A1%B0%EA%B1%B4%EB%AC%B8.html",
            "relUrl": "/javascript/2018/06/04/JavaScript_02)_%EC%A1%B0%EA%B1%B4%EB%AC%B8.html",
            "date": " • Jun 4, 2018"
        }
        
    
  
    
        ,"post308": {
            "title": "[JavaScript] 01) 변수와 비교",
            "content": "변수 . var a = 1; alert(a+1); /// 2 var a = 2; alert(a+1) /// 3 alert(a+b); /// 3 . // 변수 안에는 문자도 들어갈 수 있음 var first = &quot;coding&quot;; alert(first + &#39;everybody&#39;); // 두번째 부터는 var를 안써줘도 됨 first = &quot;코딩&quot; // var을 한번만 써줘도 됨 var a = &quot;coding&quot;, b = &quot;everybody&quot;; alert(a+b); // conding everybody . 변수는 코드의 재활용성을 높여줌 (유지보수) | . a = 100; a = a + 10; alert(a); a = a / 10; alert(a); a = a - 10; alert(a); a = a * 10; alert(a); . 비교 . 연산자 : 어떤 작업을 컴퓨터에게 지시하기 위한 기호 | . 비교연산자 . 동등비교연산자(==) : 대입연산자(=)와 다름 | . alert(1==2); // false alert(&quot;one&quot; == &quot;one&quot;); // true alert(1 === &quot;1&quot;); // false alert(1 == &quot;1&quot;); // ture . 일치연산자 . 일치연산자(===) : strict equal operator | . // 변수 선언 var a; alert(a); // undefined var a = null; alert(a); // null // undefined와 null은 다름 alert(undefined === null); // false . alert(true == 1); // ture alert(true == 2); // false alert(true === 1); // false alert(NaN === NaN); // false . 비교연산자 . != : 같지 않음 | !== : 정확하게 같지 않음 | &gt; : 좌항이 우항보다 큼 | &gt;= : 좌항이 우항보다 크거나 같음 | . alert(1!=2); // true alert(1!=1); // false alert(&quot;one&quot;!=&quot;two&quot;); // true alert(&quot;one&quot;!=&quot;one&quot;); // false alert(10&gt;=10); // true .",
            "url": "https://safenumz.github.io/blog/javascript/2018/06/03/JavaScript_01)_%EB%B3%80%EC%88%98%EC%99%80_%EB%B9%84%EA%B5%90.html",
            "relUrl": "/javascript/2018/06/03/JavaScript_01)_%EB%B3%80%EC%88%98%EC%99%80_%EB%B9%84%EA%B5%90.html",
            "date": " • Jun 3, 2018"
        }
        
    
  
    
        ,"post309": {
            "title": "[Linux] su vs sudo",
            "content": "su와 sudo의 차이 및 root 계정 암호 설정 . su . Super User의 약자, 최상위 권한을 갖은 유저를 의미, 리눅스 운영체제에서는 최고 관리 권한을 갖는 계정은 root 계정이므로, 터미널에서 su 명령어를 입력하면 해당 터미널 세션에 한해서 일시적으로 root 계정처럼 사용할 수 있는 권한을 부여함 | . sudo . Super User do의 약자, 세션에 대한 권한이 아닌 하나의 명령에 대해 일시적으로 최고 관리 권한을 가짐, sudo의 경우에는 리눅스 기본 명령어가 아니기 때문에 sudo 명령어가 지원하는 지 확인해야 함, 우분투와 센토스의 경우에는 sudo를 지원함. | . root 계정 암호 설정하기 . $ sudo passwd root 현재 로그인 된 계정의 암호를 입력하면 root 계정의 암호를 설정할 수 있다. $ su .",
            "url": "https://safenumz.github.io/blog/linux/2018/05/01/Linux-sudo_su_%EC%B0%A8%EC%9D%B4.html",
            "relUrl": "/linux/2018/05/01/Linux-sudo_su_%EC%B0%A8%EC%9D%B4.html",
            "date": " • May 1, 2018"
        }
        
    
  
    
        ,"post310": {
            "title": "[R] 프로그래밍 기초",
            "content": "&lt;!DOCTYPE html&gt; . R_프로그래밍_기초 . R&#51032; &#44592;&#48376; &#47749;&#47161;&#50612; &#54805;&#49885;: &#50672;&#49328;, &#48320;&#49688; &#54624;&#45817;, &#47928;&#51088;&#50676; &#52376;&#47532;, &#44208;&#44284; &#52636;&#47141; &#48169;&#48277; &#46321;&#182; . &#44592;&#48376; &#50672;&#49328; &#44592;&#45733; (&#49688;&#49885;, &#49688;&#54617; &#54632;&#49688;, &#45212;&#49688; &#48156;&#49373;) &#48143; &#48320;&#49688; &#54624;&#45817;&#182; . In&nbsp;[6]: # 수식 연산 2 + 3 * 5 + (20 - 4)^2 . 273 In&nbsp;[7]: # 수학 함수 사용 2 * sqrt(5 + 3) + log(2 * 3) + sin(45) * exp(5) . 133.733893886346 In&nbsp;[8]: # x에 3을 할당함 x &lt;- 3 # 우변 계산 결과를 y에 할당함 y &lt;- 2 * (x - 2)^2 + 3 # y의 값을 출력함 y . 5 In&nbsp;[9]: # 논리형 변수 t &lt;- y &gt; 2 t . TRUE In&nbsp;[10]: # 0 ~ 1 사이의 난수 4개를 발생함 (Uniform distribution) runif(4) . &lt;ol class=list-inline&gt; 0.845837861066684 | 0.0469244844280183 | 0.0188606944866478 | 0.120258023031056 | &lt;/ol&gt; In&nbsp;[11]: # 표준 정규분포의 난수 4개를 발생함 (Normal distribution) rnorm(4) . &lt;ol class=list-inline&gt; -1.37576681371751 | 0.721034513834005 | -0.542655307291231 | -1.84355941529974 | &lt;/ol&gt; &#47928;&#51088;&#50676; &#52376;&#47532;&#182; . In&nbsp;[12]: # 변수 strA에 문자열 할당 strA &lt;- &quot;Hello&quot; strB &lt;- &quot;World&quot; # 문자열 strA와 strB를 합침, 합칠 때 공백 문자로 연결 str &lt;- paste(strA, strB, sep=&quot; &quot;) str . &#39;Hello World&#39; In&nbsp;[15]: # 변수 y의 데이터 타입 확인 class(y) . &#39;numeric&#39; In&nbsp;[16]: # 변수 t와 str의 데이터 타입 확인 class(t); class(str) . &#39;logical&#39; &#39;character&#39; In&nbsp;[17]: print(y) . [1] 5 . In&nbsp;[18]: cat(&quot;y 값은&quot;, y, &quot;입니다&quot;) . y 값은 5 입니다 . R&#51032; &#44592;&#48376; &#51088;&#47308;&#54805;: (1) &#48289;&#53552;&#182; . 벡터는 R 자료 구조의 가장 작은 단위로, Atomic Vector라 함. | . &#49707;&#51088;&#54805; (numeric) &#48289;&#53552; &#54624;&#45817;&#182; . In&nbsp;[20]: # x에 우변 값을 벡터로 할당함 x &lt;- c(13, 27, 29, 17, 19, 23, 15) # 1부터 7까지 1씩 증가한 숫자를 y에 벡터로 할당 y &lt;- 1:7 # 1부터 14까지 2씩 증가한 숫자를 z에 할당 z &lt;- seq(1, 14, 2) # 10을 7번 반복하여 u벡터에 할당 u &lt;- rep(10, 7) # 1부터 7사이의 랜덤 값을 s벡터에 할당 s &lt;- sample(1:7) x; y; z; u; s . &lt;ol class=list-inline&gt; 13 | 27 | 29 | 17 | 19 | 23 | 15 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 3 | 5 | 7 | 9 | 11 | 13 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 10 | 10 | 10 | 10 | 10 | 10 | 10 | &lt;/ol&gt; &lt;ol class=list-inline&gt; 1 | 7 | 2 | 3 | 5 | 6 | 4 | &lt;/ol&gt; In&nbsp;[21]: # x 벡터의 개별 요소 확인 x[1]; x[3] . 13 29 In&nbsp;[22]: # x벡터의 길이, 합계, 분산, 편차 length(x); sum(y); var(x); sd(x) . 7 28 36.9523809523809 6.07884700846969 &#48289;&#53552; &#50672;&#49328;&#182; . In&nbsp;[23]: # 벡터의 각 요소들을 연산함 x + y * 2 . &lt;ol class=list-inline&gt; 15 | 31 | 35 | 25 | 29 | 35 | 29 | &lt;/ol&gt; &#44208;&#52769;&#52824; (Not Available) &#52376;&#47532;&#182; . In&nbsp;[24]: # 2개의 결측치가 포함됨 x &lt;- c(13, 28, NA, 18, 19, NA, 15) # 요소 별로 결측치인지 아닌지 확인함 is.na(x) . &lt;ol class=list-inline&gt; FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | &lt;/ol&gt; In&nbsp;[25]: # 결측치가 아닌 정상적인 요소만 출력함 x[!is.na(x)] . &lt;ol class=list-inline&gt; 13 | 28 | 18 | 19 | 15 | &lt;/ol&gt; In&nbsp;[26]: # 결측치를 생략하고 출력함 na.omit(x) . &lt;ol class=list-inline&gt; 13 | 28 | 18 | 19 | 15 | &lt;/ol&gt; In&nbsp;[28]: # 결측치가 생략된 벡터를 출력함 as.vector(na.omit(x)) . &lt;ol class=list-inline&gt; 13 | 28 | 18 | 19 | 15 | &lt;/ol&gt; NA&#44032; &#54252;&#54632;&#46108; &#50672;&#49328;&#182; . In&nbsp;[30]: x &lt;- c(13, 27, NA, 17, 19, NA, 15) y &lt;- 1:7 # NA 부분은 연산 안됨 x + y . &lt;ol class=list-inline&gt; 14 | 29 | &lt;NA&gt; | 21 | 24 | &lt;NA&gt; | 22 | &lt;/ol&gt; In&nbsp;[31]: # x의 NA 부분 때문에 연산할 수 없음 sum(x) . &lt;NA&gt; In&nbsp;[32]: # x의 NA 부분을 제외하고 연산함 sum(x, na.rm=TRUE) . 91 In&nbsp;[33]: # 길이 7인 빈 벡터 생성 v &lt;- vector(mode=&#39;numeric&#39;, length=7) v # 초기값 0으로 설정됨 . &lt;ol class=list-inline&gt; 0 | 0 | 0 | 0 | 0 | 0 | 0 | &lt;/ol&gt; In&nbsp;[34]: # v 변수가 벡터형인지 확인함 is.vector(v) . TRUE In&nbsp;[35]: # x 벡터 맨 뒤에 20을 추가함 append(x, 20) . &lt;ol class=list-inline&gt; 13 | 27 | &lt;NA&gt; | 17 | 19 | &lt;NA&gt; | 15 | 20 | &lt;/ol&gt; In&nbsp;[36]: # x 벡터 맨 뒤에 20을 추가함 append(x, 35, after=3) . &lt;ol class=list-inline&gt; 13 | 27 | &lt;NA&gt; | 35 | 17 | 19 | &lt;NA&gt; | 15 | &lt;/ol&gt; In&nbsp;[37]: # x 벡터의 3번째 요소를 제외함 x[-3] . &lt;ol class=list-inline&gt; 13 | 27 | 17 | 19 | &lt;NA&gt; | 15 | &lt;/ol&gt; In&nbsp;[38]: # x 벡터의 마지막 요소를 제외함 x[-length(x)] . &lt;ol class=list-inline&gt; 13 | 27 | &lt;NA&gt; | 17 | 19 | &lt;NA&gt; | &lt;/ol&gt; &#47928;&#51088;&#50676; (character) &#48289;&#53552;&#182; . In&nbsp;[39]: # 문자열 벡터 할당 v &lt;- c(&quot;happy&quot;, &quot;new&quot;, &quot;year&quot;) v . &lt;ol class=list-inline&gt; &#39;happy&#39; | &#39;new&#39; | &#39;year&#39; | &lt;/ol&gt; In&nbsp;[40]: # 벡터인지 확인 is.vector(v) . TRUE In&nbsp;[41]: class(v) # v는 문자형 객체 . &#39;character&#39; In&nbsp;[42]: # v가 문자형인지 확인함 is.vector(v, mode=&#39;character&#39;) . TRUE In&nbsp;[43]: # v는 숫자형이 아님 is.vector(v, mode=&#39;numeric&#39;) . FALSE In&nbsp;[44]: # y 벡터에 a ~ j 까지 할당함 y &lt;- letters[1:10] y . &lt;ol class=list-inline&gt; &#39;a&#39; | &#39;b&#39; | &#39;c&#39; | &#39;d&#39; | &#39;e&#39; | &#39;f&#39; | &#39;g&#39; | &#39;h&#39; | &#39;i&#39; | &#39;j&#39; | &lt;/ol&gt; In&nbsp;[45]: # y 벡터의 내용을 대문자로 변환 toupper(y) . &lt;ol class=list-inline&gt; &#39;A&#39; | &#39;B&#39; | &#39;C&#39; | &#39;D&#39; | &#39;E&#39; | &#39;F&#39; | &#39;G&#39; | &#39;H&#39; | &#39;I&#39; | &#39;J&#39; | &lt;/ol&gt; In&nbsp;[46]: # 숫자와 문자를 같이 할당하면... y &lt;- c(1, 2, 3, &quot;abc&quot;) y . &lt;ol class=list-inline&gt; &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;abc&#39; | &lt;/ol&gt; In&nbsp;[47]: # 모두 문자형으로 할당됨 class(y) . &#39;character&#39; &#50836;&#51064; (Factor) &#54805;: &#50577;&#51201; &#45936;&#51060;&#53552; (&#49688;&#52824; &#45936;&#51060;&#53552;, &#47928;&#51088; &#45936;&#51060;&#53552;)&#47484; &#52852;&#53580;&#44256;&#47532; &#45936;&#51060;&#53552;&#47196; &#54364;&#54788;&#54632;. (ex: &quot;&#45224;&#51088;&quot; -&gt; M, &quot;&#50668;&#51088;&quot; -&gt; F)&#182; . &#49688;&#52824; &#48289;&#53552;&#51032; &#50836;&#51064;&#54868; (Factorizing)&#182; . In&nbsp;[48]: data &lt;- c(1, 2, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1) # data 벡터를 요인화함 fdata &lt;- factor(data) fdata . &lt;ol class=list-inline&gt; 1 | 2 | 2 | 3 | 1 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt; &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &lt;/ol&gt; In&nbsp;[50]: # Factor의 Level을 변경함 levels(fdata) &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) fdata . &lt;ol class=list-inline&gt; A | B | B | C | A | B | C | C | A | B | C | C | A | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt; &#39;A&#39; | &#39;B&#39; | &#39;C&#39; | &lt;/ol&gt; In&nbsp;[51]: # data 벡터를 A, B, C로 요인화함 fdata &lt;- factor(data, label = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)) fdata . &lt;ol class=list-inline&gt; A | B | B | C | A | B | C | C | A | B | C | C | A | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt; &#39;A&#39; | &#39;B&#39; | &#39;C&#39; | &lt;/ol&gt; In&nbsp;[52]: # fdata가 요인형인지 확인함 is.factor(fdata) . TRUE In&nbsp;[53]: # factor 형을 숫자형으로 변환 as.numeric(fdata) . &lt;ol class=list-inline&gt; 1 | 2 | 2 | 3 | 1 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | &lt;/ol&gt; In&nbsp;[54]: data . &lt;ol class=list-inline&gt; 1 | 2 | 2 | 3 | 1 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | &lt;/ol&gt; In&nbsp;[55]: # data 벡터의 요소들을 합산함 sum(data) . 27 In&nbsp;[56]: # data 벡터를 요인화함 fdata &lt;- factor(data) fdata . &lt;ol class=list-inline&gt; 1 | 2 | 2 | 3 | 1 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt; &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &lt;/ol&gt; In&nbsp;[57]: # Factor 자료형은 연산이 안됨 sum(fdata) . Error in Summary.factor(structure(c(1L, 2L, 2L, 3L, 1L, 2L, 3L, 3L, 1L, : ‘sum’ not meaningful for factors Traceback: 1. Summary.factor(structure(c(1L, 2L, 2L, 3L, 1L, 2L, 3L, 3L, 1L, . 2L, 3L, 3L, 1L), .Label = c(&#34;1&#34;, &#34;2&#34;, &#34;3&#34;), class = &#34;factor&#34;), . na.rm = FALSE) 2. stop(gettextf(&#34;%s not meaningful for factors&#34;, sQuote(.Generic))) . In&nbsp;[58]: # Factor 자료형을 수치 벡터로 변환하여 연산 sum(as.numeric(fdata)) . 27 In&nbsp;[59]: fdata . &lt;ol class=list-inline&gt; 1 | 2 | 2 | 3 | 1 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt; &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &lt;/ol&gt; In&nbsp;[60]: # factor를 정수형 벡터로 만든다. unclass(fdata) . &lt;ol class=list-inline&gt; 1 | 2 | 2 | 3 | 1 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | &lt;/ol&gt; &#44592;&#48376; &#44536;&#47000;&#54532;&#182; . 수치 벡터의 내용으로 기본그래프를 작성함 | plot(): 점과 선으로 그래프를 그림 | abline(): plot()으로 그린 그래프 위에 직선 그래프를 추가함 | barplot(): 막대 그래프를 그림 | . In&nbsp;[61]: x &lt;- c(13, 27, 29, 17, 19, 23, 15) plot(x) . In&nbsp;[62]: plot(x, type=&#39;b&#39;, col=&#39;red&#39;, ylim=c(10, 35)) . In&nbsp;[63]: plot(x, type=&#39;b&#39;, col=&#39;red&#39;, ylim=c(10, 35)) abline(v=3, col=&#39;blue&#39;, lty=2) abline(h=max(x), col=&#39;blue&#39;, lty=2) . In&nbsp;[64]: barplot(x, col=&#39;green&#39;) . R&#51032; &#44592;&#48376; &#51088;&#47308;&#54805; : (2) &#54665;&#47148;&#182; . 행과 열을 갖는 벡터형 ## 행렬 생성 및 조회 | . In&nbsp;[66]: # 2행 3열 행렬 생성 (행 순서로 배열) a &lt;- matrix(c(2, 4, 3, 1, 5, 7), nrow=2, ncol=3) a . 2 | 3 | 5 | . 4 | 1 | 7 | . In&nbsp;[67]: # 2행 3열 행렬 생성 (열 순서로 배열) a &lt;- matrix(c(2, 4, 4, 1, 5, 7), nrow=2, ncol=3, byrow=TRUE) a . 2 | 4 | 4 | . 1 | 5 | 7 | . In&nbsp;[69]: # 2행 3열의 요소 조회 a[2, 3] . 7 In&nbsp;[70]: # 2행 전체 요소 조회 a[2,] . &lt;ol class=list-inline&gt; 1 | 5 | 7 | &lt;/ol&gt; In&nbsp;[71]: # 3열 전체 요소 조회 a[,3] . &lt;ol class=list-inline&gt; 4 | 7 | &lt;/ol&gt; In&nbsp;[72]: # 1열과 3열 요소 조회 a[,c(1, 3)] . 2 | 4 | . 1 | 7 | . &#48289;&#53552; -&gt; &#54665;&#47148; &#48320;&#54872;&#182; . In&nbsp;[73]: # 벡터 생성 x &lt;- 1:15 # x 벡터를 3행 5열의 행렬로 변환 dim(x) &lt;- c(3, 5) x . 1 | 4 | 7 | 10 | 13 | . 2 | 5 | 8 | 11 | 14 | . 3 | 6 | 9 | 12 | 15 | . In&nbsp;[74]: # x 행렬의 1 ~ 2 행 조회 x[1:2,] . 1 | 4 | 7 | 10 | 13 | . 2 | 5 | 8 | 11 | 14 | . In&nbsp;[75]: # x 행렬의 3 ~ 5열 조회 x[, 3:5] . 7 | 10 | 13 | . 8 | 11 | 14 | . 9 | 12 | 15 | . &#54665; &#54841;&#51008; &#50676; &#52628;&#44032;, &#49325;&#51228;&#182; . In&nbsp;[76]: # 마지막 행에 행 벡터 추가 rbind(x, c(10, 15, 13, 19, 14)) . 1 | 4 | 7 | 10 | 13 | . 2 | 5 | 8 | 11 | 14 | . 3 | 6 | 9 | 12 | 15 | . 10 | 15 | 13 | 19 | 14 | . In&nbsp;[77]: # 2행 뒤에 행 벡터 추가 rbind(x[1:2,], c(2, 4, 3, 9, 2), x[3,]) . 1 | 4 | 7 | 10 | 13 | . 2 | 5 | 8 | 11 | 14 | . 2 | 4 | 3 | 9 | 2 | . 3 | 6 | 9 | 12 | 15 | . In&nbsp;[78]: # 마지막 열에 열 벡터 추가 cbind(x, c(1, 3, 2)) . 1 | 4 | 7 | 10 | 13 | 1 | . 2 | 5 | 8 | 11 | 14 | 3 | . 3 | 6 | 9 | 12 | 15 | 2 | . In&nbsp;[88]: # 2열 뒤에 열 벡터 추가 cbind(x[,1:2], c(1, 3, 2), x[,3:5]) . 1 | 4 | 1 | 7 | 10 | 13 | . 2 | 5 | 3 | 8 | 11 | 14 | . 3 | 6 | 2 | 9 | 12 | 15 | . &#54665;, &#50676;&#51032; &#51060;&#47492; &#51648;&#51221;&#182; . In&nbsp;[89]: # 행 이름을 알파벳으로 지정 rownames(x) &lt;- letters[1:3] # 열 이름을 월 약자로 지정 colnames(x) &lt;- month.abb[1:5] x . JanFebMarAprMay . a1 | 4 | 7 | 10 | 13 | . b2 | 5 | 8 | 11 | 14 | . c3 | 6 | 9 | 12 | 15 | . In&nbsp;[91]: # x의 전치 행렬 (Transpose) t(x) . abc . Jan 1 | 2 | 3 | . Feb 4 | 5 | 6 | . Mar 7 | 8 | 9 | . Apr10 | 11 | 12 | . May13 | 14 | 15 | . &#54665;&#47148; &#50672;&#49328;&#182; . In&nbsp;[93]: # 2 x 2 인 x 행렬 생성 x &lt;- 1:4 dim(x) &lt;- c(2, 2) # x와 동일한 행렬 y 생성 y &lt;- x x . 1 | 3 | . 2 | 4 | . In&nbsp;[94]: # 행렬의 각 요소끼리 더함 x + y . 2 | 6 | . 4 | 8 | . In&nbsp;[95]: # 행렬의 각 요소끼리 곱함 x * y . 1 | 9 | . 4 | 16 | . In&nbsp;[96]: # 행렬의 각 요소끼리 뻄 x - y . 0 | 0 | . 0 | 0 | . In&nbsp;[97]: # 행렬의 각 요소끼리 나눔 x / y . 1 | 1 | . 1 | 1 | . In&nbsp;[98]: # 행렬 곱셈 (%%는 특수 목적의 연산자임) x %*% y . 7 | 15 | . 10 | 22 | . &#45236;&#51201;&#44284; &#50669;&#54665;&#47148;&#182; . In&nbsp;[99]: # x&#39;y ~ x의 전치행렬과 y 행렬의 곱셈 crossprod(x, y) . 5 | 11 | . 11 | 25 | . In&nbsp;[100]: # x&#39;x ~ x 행렬의 전치행렬과 x 행렬의 곱셈 crossprod(x) . 5 | 11 | . 11 | 25 | . In&nbsp;[101]: install.packages(&#39;MASS&#39;) . Updating HTML index of packages in &#39;.Library&#39; Making &#39;packages.html&#39; ... done . In&nbsp;[102]: library(MASS) # x의 역행렬 ginv(x) . -2 | 1.5 | . 1 | -0.5 | . In&nbsp;[103]: # x 행렬의 행의 합계 rowSums(x) . &lt;ol class=list-inline&gt; 4 | 6 | &lt;/ol&gt; In&nbsp;[104]: # x 행렬의 행의 평균 rowMeans(x) . &lt;ol class=list-inline&gt; 2 | 3 | &lt;/ol&gt; In&nbsp;[105]: # x 행렬의 열의 평균 colSums(x) . &lt;ol class=list-inline&gt; 3 | 7 | &lt;/ol&gt; In&nbsp;[106]: # x 행렬의 열의 평균 colMeans(x) . &lt;ol class=list-inline&gt; 1.5 | 3.5 | &lt;/ol&gt; &#47532;&#49828;&#53944;(List)&#182; . 자료형이 다른 여러 벡터들로 구성된 자료 구조 | 벡터는 동일한 자료형만 가능하나(자료의 동질성) 리스트는 다른 자료형으로 구성된 벡터들을 포함함(자료의 이질성) | 리스트는 또 다른 리스트를 포함할 수 있음 -&gt; Recursive Vector | . &#47532;&#49828;&#53944; (List) &#49373;&#49457; &#48143; &#51312;&#54924;&#182; . In&nbsp;[107]: mylist &lt;- list(x=1:5, y=matrix(1:15, 3, 5), z=&quot;Hello World&quot;) mylist . $x &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; $y 1 | 4 | 7 | 10 | 13 | . 2 | 5 | 8 | 11 | 14 | . 3 | 6 | 9 | 12 | 15 | . $z &#39;Hello World&#39; In&nbsp;[109]: # 벡터 조회 mylist$x . &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; In&nbsp;[110]: # 벡터 요소 조회 mylist$x[2] . 2 In&nbsp;[111]: # 행렬 조회 (1행과 2행만 조회) mylist$y[c(1, 2),] . 1 | 4 | 7 | 10 | 13 | . 2 | 5 | 8 | 11 | 14 | . In&nbsp;[112]: # 행렬 요소 조회 mylist$y[2, 3] . 8 &#47532;&#49828;&#53944; &#50836;&#49548; &#52628;&#44032; &#48143; &#49325;&#51228;&#182; . In&nbsp;[114]: # new 요소 추가 (알파멧 a ~ e) mylist$new &lt;- letters[1:5] mylist . $x &lt;ol class=list-inline&gt; 1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; $y 1 | 4 | 7 | 10 | 13 | . 2 | 5 | 8 | 11 | 14 | . 3 | 6 | 9 | 12 | 15 | . $z &#39;Hello World&#39; $new &lt;ol class=list-inline&gt; &#39;a&#39; | &#39;b&#39; | &#39;c&#39; | &#39;d&#39; | &#39;e&#39; | &lt;/ol&gt; In&nbsp;[115]: # 특정 요소 삭제 mylist$new &lt;- NULL . In&nbsp;[118]: # 요소의 개수 (x, y, z 3개임) length(mylist) . 3 In&nbsp;[119]: # 리스트의 요소 이름 조회 names(mylist) . &lt;ol class=list-inline&gt; &#39;x&#39; | &#39;y&#39; | &#39;z&#39; | &lt;/ol&gt; In&nbsp;[117]: # mylist 개체가 리스트인지 확인 is.list(mylist) . TRUE &#45936;&#51060;&#53552; &#54532;&#47112;&#51076;(Data Frame)&#182; . 엑셀의 워크시트 같은 방식으로 행과 열의 형태로 데이터를 관리함 (행렬과는 다르다) | . &#45936;&#51060;&#53552; &#54532;&#47112;&#51076; &#49373;&#49457; &#48143; &#51312;&#54924;&#182; . In&nbsp;[120]: # 벡터 생성 grade.A &lt;- c(90, 80, 85, 78, 65) grade.B &lt;- c(84, 76, 64, 76, 60) grade.C &lt;- c(80, 96, 84, 84, 90) # 데이터 프레임 생성 (학생 별 점수) grade &lt;- data.frame(A=grade.A, B=grade.B, C=grade.C) grade . ABC . 90 | 84 | 80 | . 80 | 76 | 96 | . 85 | 64 | 84 | . 78 | 76 | 84 | . 65 | 60 | 90 | . In&nbsp;[121]: # 열 (Column)에 (학생) 이름을 지정함 colnames(grade) &lt;- c(&quot;Alice&quot;, &quot;Bob&quot;, &#39;Charlie&#39;) grade . AliceBobCharlie . 90 | 84 | 80 | . 80 | 76 | 96 | . 85 | 64 | 84 | . 78 | 76 | 84 | . 65 | 60 | 90 | . In&nbsp;[123]: # 행 (Row)에 (과목) 이름을 지정함 rownames(grade) &lt;- c(&quot;korean&quot;, &quot;english&quot;, &quot;mathmatics&quot;, &quot;science&quot;, &quot;history&quot;) grade . AliceBobCharlie . korean90 | 84 | 80 | . english80 | 76 | 96 | . mathmatics85 | 64 | 84 | . science78 | 76 | 84 | . history65 | 60 | 90 | . In&nbsp;[124]: # 학생 별 점수 조회 (벡터형으로 조회됨) grade$Alice . &lt;ol class=list-inline&gt; 90 | 80 | 85 | 78 | 65 | &lt;/ol&gt; In&nbsp;[125]: grade$Bob . &lt;ol class=list-inline&gt; 84 | 76 | 64 | 76 | 60 | &lt;/ol&gt; In&nbsp;[126]: grade$Charlie . &lt;ol class=list-inline&gt; 80 | 96 | 84 | 84 | 90 | &lt;/ol&gt; In&nbsp;[127]: # 행 이름으로 요소 조회 (학생 별 국어 점수) grade[&#39;korean&#39;,] . AliceBobCharlie . korean90 | 84 | 80 | . In&nbsp;[128]: # 행 이름과 열 이름으로 요소 조회 grade[&#39;korean&#39;, &#39;Alice&#39;] . 90 In&nbsp;[130]: # 행렬 방식으로 조회함. 1행의 모든 요소 조회 (데이터 프레임 형으로 조회됨) grade[1,] . AliceBobCharlie . korean90 | 84 | 80 | . In&nbsp;[131]: # 1열의 모든 요소 조회 (벡터 형으로 조회됨) grade[,1] . &lt;ol class=list-inline&gt; 90 | 80 | 85 | 78 | 65 | &lt;/ol&gt; In&nbsp;[132]: # 2행 3열의 요소 조회 grade[2, 3] . 96 In&nbsp;[133]: grade$Bob[2] . 76 In&nbsp;[134]: # 조건부 요소 조회 grade$Alice[grade$Alice &gt; 80] . &lt;ol class=list-inline&gt; 90 | 85 | &lt;/ol&gt; In&nbsp;[135]: # 1 ~ 2 행 조회 grade[1:2, ] . AliceBobCharlie . korean90 | 84 | 80 | . english80 | 76 | 96 | . In&nbsp;[136]: # 앞 부분부터 3개 행을 조회함 head(grade, 3) . AliceBobCharlie . korean90 | 84 | 80 | . english80 | 76 | 96 | . mathmatics85 | 64 | 84 | . In&nbsp;[137]: # 뒷 부분부터 3개 행을 조회함 tail(grade, 3) . AliceBobCharlie . mathmatics85 | 64 | 84 | . science78 | 76 | 84 | . history65 | 60 | 90 | . In&nbsp;[138]: # 행 개수 조회 nrow(grade) . 5 In&nbsp;[139]: # 열 개수 조회 ncol(grade) . 3 In&nbsp;[140]: # 데이터 프레임 -&gt; 행렬 변환 mgrade &lt;- as.matrix(grade) mgrade . AliceBobCharlie . korean90 | 84 | 80 | . english80 | 76 | 96 | . mathmatics85 | 64 | 84 | . science78 | 76 | 84 | . history65 | 60 | 90 | . In&nbsp;[142]: # mgrade는 행렬임 class(mgrade) . &#39;matrix&#39; In&nbsp;[143]: # 행렬 -&gt; 데이터 프레임 변환 dgrade &lt;- as.data.frame(mgrade) dgrade . AliceBobCharlie . korean90 | 84 | 80 | . english80 | 76 | 96 | . mathmatics85 | 64 | 84 | . science78 | 76 | 84 | . history65 | 60 | 90 | . In&nbsp;[144]: # dgrade는 데이터 프레임임 class(dgrade) . &#39;data.frame&#39; &#45936;&#51060;&#53552; &#54532;&#47112;&#51076;&#51032; &#54028;&#51068; &#51200;&#51109; &#48143; &#51069;&#44592;&#182; . In&nbsp;[145]: # csv 형식으로 저장함 write.csv(grade, &#39;grade.csv&#39;) . In&nbsp;[146]: # grade.csv 파일을 읽어 데이터 프레임에 할당함 # 첫 번쨰 열은 row 이름임 gr &lt;- read.csv(&#39;grade.csv&#39;, row.names=1) gr . AliceBobCharlie . korean90 | 84 | 80 | . english80 | 76 | 96 | . mathmatics85 | 64 | 84 | . science78 | 76 | 84 | . history65 | 60 | 90 | . 산술 연산자 | . . + | 덧셈 | . - | 뺄셈 | . * | 곱셈 | . / | 나눗셈 | . ^ or ** | 제곱 | . %*% | 행렬 곱셈 | . %/% | 나눈 후 정수 부분 | . %% | 나눈 후 나머지 | . &lt;- or -&gt; | 할당 연산자 | . &lt;&lt;- or -&gt;&gt; | 전역 변수 할당 연산자(함수에서 사용) | . 논리, 비교 연산자 | . . == | Equal | . != | Not Equal | . &lt; | Less than | . &gt; | Greater than | . &lt;= | Less than or equal | . &gt;= | Greater than or equal | . &amp; | AND (벡터 요소 전체에 적용) | . &amp;&amp; | AND (벡터 첫 번째 요소만 적용) | . | | OR (벡터 요소 전체에 적용) | . || | OR (벡터의 첫 번째 요소만 적용) | . ! | Not | . xor | Exclusive OR | . &#50672;&#49328;&#51088; &#49324;&#50857; &#50696;&#49884;&#182; . In&nbsp;[147]: # 2의 3제곱 계산 2^3; 2**3 . 8 8 In&nbsp;[148]: # 5 나누기 2 (결과는 실수) 5 / 2 . 2.5 In&nbsp;[149]: # 5를 2로 나눈 후 결과의 정수 부분 5 %/% 2 . 2 In&nbsp;[150]: # 5를 2로 나눈 후 남은 나머지 5 %% 2 . 1 In&nbsp;[151]: # 2 x 2 행렬 생성 x &lt;- 1:4; dim(x) &lt;- c(2, 2) x . 1 | 3 | . 2 | 4 | . In&nbsp;[152]: # 각 요소끼리 그냥 곱함 x * x . 1 | 9 | . 4 | 16 | . In&nbsp;[153]: # 행렬 곱셈 x %*% x . 7 | 15 | . 10 | 22 | . In&nbsp;[154]: # x 벡터의 모든 요소에 AND 연산 수행 x &lt;- 1:5 (x &gt; 1) &amp; (x &lt; 4) . &lt;ol class=list-inline&gt; FALSE | TRUE | TRUE | FALSE | FALSE | &lt;/ol&gt; In&nbsp;[155]: # x[1]에만 AND 연산 수행 (x &gt; 1) &amp;&amp; (x &lt; 4) . FALSE In&nbsp;[156]: # x 벡터 요소 중 1보다 크고, 4보다 작은 요소만 출력함 x[(x &gt; 1) &amp; (x &lt; 4)] . &lt;ol class=list-inline&gt; 2 | 3 | &lt;/ol&gt; &#51312;&#44148;&#47928;: if ~ else &#47928;, ifelse() &#54632;&#49688;&#182; . In&nbsp;[&nbsp;]: if (조건식 1) { 조건식이 참인 경우 수행되는 부분 } else if (조건식 2) { 조건식 2가 참인 경우 수행되는 부분 } else { 조건식 1, 2 가 모두 거짓인 경우 수행되는 부분 } # Conditional Element Selection ifelse(조건식, 조건식이 참인 경우 반환 값, 조건식이 거짓인 경우 반환 값) . &#51312;&#44148;&#47928; &#50696;&#49884;&#182; . In&nbsp;[157]: x &lt;- -5 if (x &gt; 0) print(&quot;Positive&quot;) else print(&quot;Negative&quot;) . [1] &#34;Negative&#34; . In&nbsp;[158]: if (x &gt; 0) { print(&quot;Positive&quot;) } else if (x &lt; 0) { print(&quot;Negative&quot;) } else { print(&quot;Zero&quot;) } . [1] &#34;Negative&#34; . In&nbsp;[159]: x &lt;- 1:5 # 벡터의 첫 번쨰 요소만 비교함 if (x %% 2 == 0) print(&quot;Even&quot;) else print(&quot;Odd&quot;) . Warning message in if (x%%2 == 0) print(&#34;Even&#34;) else print(&#34;Odd&#34;): “length &gt; 1 이라는 조건이 있고, 첫번째 요소만이 사용될 것입니다” . [1] &#34;Odd&#34; . &#47928;&#51088;&#50676; &#48708;&#44368;&#182; . In&nbsp;[160]: str &lt;- &quot;Hello World&quot; # 문자열 str의 위치 1부터 1까지 문자만 비교함 if (substr(str, 1, 1) == &#39;H&#39;) print(&quot;OK&quot;) else print(&quot;NOK&quot;) . [1] &#34;OK&#34; . In&nbsp;[161]: # 문자열 str의 위치 1부터 5까지의 문자열만 비교함 if (substr(str, 1, 5) == &#39;Hello&#39;) print(&quot;OK&quot;) else print(&quot;NOK&quot;) . [1] &#34;OK&#34; . Conditional Element Selection&#182; . In&nbsp;[162]: x &lt;- -5 y &lt;- ifelse(x &gt; 0, &quot;Positive&quot;, &quot;Negative&quot;) y . &#39;Negative&#39; &#48152;&#48373;&#47928;: for &#48152;&#48373;&#47928;, while &#48152;&#48373;&#47928;, next &#47928;, break &#47928;&#182; . R에는 반복문 대신 쓸 수 있는 표현이 많으므로 되도록 반복문을 쓰지 않는 것이 좋음 | 반복문은 속도가 느림 | . for &#48152;&#48373;&#47928;&#182; . In&nbsp;[&nbsp;]: for (변수명 in 벡터) { if (조건문) { break # for 문을 탈출함 } else { next # for 문의 다음 반복을 계속 수행함 } } . In&nbsp;[168]: x &lt;- 1:3 for (i in 1:length(x)) { if (x[i] %% 2 == 0) { cat(&quot;x[&quot;, i, &quot;] is even n&quot;, sep=&#39;&#39;) break # x 벡터에서 첫 번째 짝수를 만나면 for 문을 종료함 } else { cat(&quot;x[&quot;, i, &quot;] is odd n&quot;, sep=&#39;&#39;) } } . x[1] is odd x[2] is even . while &#48152;&#48373;&#47928;&#182; . In&nbsp;[&nbsp;]: while (조건식 1) { # 조건식 1이 참인 동안 while 루프를 수행함 if (조건식 2) { break # while 문을 탈출함 } else { next # while 문의 다음 반복을 계속 수행함 } } . In&nbsp;[170]: sum &lt;- 0; x &lt;- 0 # 1 ~ 10까지 합을 계산함 while (x &lt; 10) { x &lt;- x + 1 sum &lt;- sum + x } cat(&quot;1부터 10까지의 합은&quot;, sum, &quot;입니다. n&quot;) . 1부터 10까지의 합은 55 입니다. . In&nbsp;[&nbsp;]: x &lt;- 0 sum &lt;- 0 while (TRUE) { # 1 ~ 10까지 합을 계산함. 조건식은 항상 x &lt;- x + 1 # 참 (TRUE)이므로 무한 루프임 if (x &gt; 10) break # x가 10보다 크면 무한 루프를 탈출함 else { sum &lt;- sum + x next } } cat(&quot;1부터 10까지의 합은&quot;, sum, &quot;입니다. n&quot;) . &#54632;&#49688; &#51201;&#50857;&#47928;: apply(), lapply(), sapply(), tapply()&#182; . In&nbsp;[171]: df &lt;- data.frame(x=c(1, 2, 3), y=c(4, 5, 6), z=c(7, 8, 9)) df . xyz . 1 | 4 | 7 | . 2 | 5 | 8 | . 3 | 6 | 9 | . In&nbsp;[172]: # 각 행에 sum() 함수를 적용한 후 결과를 벡터로 반환 apply(df, 1, sum) . &lt;ol class=list-inline&gt; 12 | 15 | 18 | &lt;/ol&gt; In&nbsp;[173]: # 각 열에 sum() 함수를 적용한 후 결과를 벡터로 반환 apply(df, 2, sum) . &lt;dl class=dl-horizontal&gt; x 6 y 15 z 24 &lt;/dl&gt; In&nbsp;[174]: # 각 행(row)에 사용자 함수 (x * 2)를 적용한 후 결과를 행렬로 반환 apply(df, 1, function(x) {x * 2}) . x 2 | 4 | 6 | . y 8 | 10 | 12 | . z14 | 16 | 18 | . In&nbsp;[175]: # 각 열(column)에 사용자 함수 (x * 2)를 적용한 후 결과를 행렬로 반환 apply(df, 2, function(x) {x * 2}) . xyz . 2 | 8 | 14 | . 4 | 10 | 16 | . 6 | 12 | 18 | . In&nbsp;[178]: # 각 열 (column)에 sum() 함수를 적용한 후 결과를 list로 반환함 lapply(df, sum) . $x 6 $y 15 $z 24 In&nbsp;[179]: # lapply()와 유사하나 결과를 벡터로 반환 sapply(df, sum) . &lt;dl class=dl-horizontal&gt; x 6 y 15 z 24 &lt;/dl&gt; In&nbsp;[180]: # tapply() 예시 data(iris) head(iris, 3) . Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 4.7 | 3.2 | 1.3 | 0.2 | setosa | . In&nbsp;[181]: # Species는 요인 (factor) 자료형임 is.factor(iris$Species) . TRUE In&nbsp;[182]: # Species는 3개의 요인으로 구성됨 levels(iris$Species) . &lt;ol class=list-inline&gt; &#39;setosa&#39; | &#39;versicolor&#39; | &#39;virginica&#39; | &lt;/ol&gt; In&nbsp;[183]: # 요인의 수준 별로 mean() 함수를 적용함 tapply(iris$Sepal.Length, iris$Species, mean) . &lt;dl class=dl-horizontal&gt; setosa 5.006 versicolor 5.936 virginica 6.588 &lt;/dl&gt; .",
            "url": "https://safenumz.github.io/blog/r/2018/04/20/R_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EA%B8%B0%EC%B4%88.html",
            "relUrl": "/r/2018/04/20/R_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EA%B8%B0%EC%B4%88.html",
            "date": " • Apr 20, 2018"
        }
        
    
  
    
        ,"post311": {
            "title": "[Scala] Scala Programming",
            "content": "Scala Programming . 스칼라란? . Scalabel Language! | 간결한 표현과 강력한 기능을 통해 더 큰 프로그램을 만들기 위한 언어 | Scala가 가진 여러가지 특징들이 데이터 분석하기에 좋은 것들이 많다 | . Martin Odersky 교수 . 자바 Generics를 만듬 | 자바의 한계를 느끼고 함수형 언어의 장점을 반영한 스칼라를 만들었음 | . Scala는 확장 가능한 언어(Scalable Language) . JVM 위에서 실행 . JVM bytecode로 컴파일되어 실행 | 자바와 혼용 가능 | 자바와 동일한 성능 | . 스칼라의 특징 . 객체 지향과 함수형 언어의 특징을 모두 가지고 있음 . 객체지향 프로그래밍 . 컴퓨터 프로그래밍 패러다임의 하나로 프로그램을 명령어 리스트로 보는 것이 아닌 여러 개의 독립된 단위(객체)로 보는 것 | 객체는 데이터와 연산을 하나의 단위로 묶은 것이며 각 객체를 포함시키거나 넘기는 등이 자유로움 | 프로그램을 유연하고 변경이 유용한 구조 | 대규모 소프트웨어 개발에 유리함 | . 스칼라에서의 객체지향 프로그래밍 . 스칼라는 객체지향의 순수한 형태를 지니고 있음 | 모든 값은 객체고 모든 오퍼레이션은 메서드 호출 | 숫자, 함수 등도 모두 객체 | . 함수형 프로그래밍 정의 . 자료 처리를 수학적 함수의 계산으로 취급하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임 | . 함수형 프로그래밍의 특징 . 메소드 수행시 input 받고 output만 리턴하며, 값의 변경을 내부에서 하지 않음 -&gt; 값 변경 최소화는 버그의 가능성을 낮춰줌 | 함수는 1급 계층(First Class) 값 | . 스칼라에서의 함수형 프로그래밍 . def main(args: Array[String]){ ex1(printString) } def printString() { println(&quot;Test Functional Programming&quot;) } . 정적타입 시스템의 이점 . 검증할 수 있는 프로퍼티 : 런타임오류의 부재를 검증할 수 있음 | 안전한 리팩토링 | 문서화 | . 풍부한 표현력 . 1급 함수 | 클로저 | . 짧은 코드를 지향 . 간격한 코드는 버그 가능성을 줄여줌 | 타입 추론 | 강력한 리터럴 | 고수준 언어 | . Java와 Scala의 Class 정의 부분 코드 비교 . class SampleClass{ private int first; private String second; public SampleClass(int first, String second){ this.first=first; this.second=second; } } . /* 주생성자 (Primary Constructor) */ class Sample(first: int, second: String) . 소문자인지 대문자인지 판별하는 코드 비교 . boolean nameHasUpperCase = false; for (int loop 0; loop&lt;name.length(); loop++){ if (Character.isUpperCase(name.charAt(loop))){ nameHasUpperCase = ture; break; } } . val nameHasUpperCase = name.exists(_.isUpper) . 스칼라와 해외 사례 . Twitter | FourSquare | Tumblr | 링크드 인 | .",
            "url": "https://safenumz.github.io/blog/scala/2018/04/12/Scala-Scala_Programming.html",
            "relUrl": "/scala/2018/04/12/Scala-Scala_Programming.html",
            "date": " • Apr 12, 2018"
        }
        
    
  
    
        ,"post312": {
            "title": "[Java] 00) Java 소개",
            "content": "Java 프로그래밍이란? . 프로그래밍이란? . 프로그래머가 코딩한 소스를 컴파일러를 통해 기계가 이해할 수 있도록 기계어로 변환하는 과정 | . 개발자 코딩 &gt; 소스 &gt; 컴파일러 &gt; 기계어 . Java 언어의 탄생 . 1995년 Games Gosling에 의해 탄생 | Sun Microsystems에서 발표 | Oak 언어에서 시작해서 Java언어로 발전 | 가전제품에 탑재할 수 있는 프로그램을 개발하기 위한 목적으로 탄생 | . Java 언어의 특징 . 객체 지향 언어로 기능을 부품할 수 있음 | JRE를 이용해서 운영체제로부터 자유로움 | 웹 및 모바일 프로그래밍이 쉬움 | GC(Garbage Collector)를 통한 자동 메모리 관리를 지원 | 실행 속도가 많이 개선되어 빨라짐 | . Java 프로그래밍을 위한 기본 준비물 . JDK &gt; JRE &gt; API &gt; JVM | 프로그램을 사용하는 사용자는 JRE 설치하면 됨 | Java SE 11버전 설치 https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html | IDE(Integrated Development Environment: 통합개발환경) 설치 - eclipse | . Hello Java World!! . ctrl + space : eclipse template proposal | ctrl + f11 : 실행 | . package pjtTest; public class MainClass { public static void main(String[] args) { System.out.println(&quot;Hello Java World&quot;); } } .",
            "url": "https://safenumz.github.io/blog/java/2018/04/12/Java_00)_%EC%98%A4%EB%A6%AC%EC%97%94%ED%85%8C%EC%9D%B4%EC%85%98.html",
            "relUrl": "/java/2018/04/12/Java_00)_%EC%98%A4%EB%A6%AC%EC%97%94%ED%85%8C%EC%9D%B4%EC%85%98.html",
            "date": " • Apr 12, 2018"
        }
        
    
  
    
        ,"post313": {
            "title": "[MySQL] Mac에 MySQL 설치 및 설정",
            "content": "Environment . MacOS | . Mac에 MySQL 설치 . # Install $ brew install mysql@5.7 $ brew tap homebrew/services $ brew services start mysql@5.7 $ brew services list $ brew link mysql@5.7 --force $ mysql -V # Change Password $ mysqladmin -u root password &#39;yourpassword&#39; # Connect mysql server $ mysql -u root -p . Mac 현재 점유되고 있는 포트 확인 . $ lsof -i -P | grep -i &quot;listen&quot; .",
            "url": "https://safenumz.github.io/blog/2018/04/12/Mac_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/2018/04/12/Mac_MySQL_%EC%84%A4%EC%B9%98_%EB%B0%8F_%EC%84%A4%EC%A0%95.html",
            "date": " • Apr 12, 2018"
        }
        
    
  
    
        ,"post314": {
            "title": "[Python] pandas",
            "content": "pandas . crosstab . crosstab으로 교차표를 쉽게 만들 수 있다. . import pandas as pd import seaborn as sns tips = sns.load_dataset(&#39;tips&#39;) tips.tail() # total_bill tip sex smoker day time size # 239 29.03 5.92 Male No Sat Dinner 3 # 240 27.18 2.00 Female Yes Sat Dinner 2 # 241 22.67 2.00 Male Yes Sat Dinner 2 # 242 17.82 1.75 Male No Sat Dinner 2 # 243 18.78 3.00 Female No Thur Dinner 2 pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;]) # smoker Yes No # sex # Male 60 97 # Female 33 54 . 교차표에서 행 합, 열 합을 추가할 수도 있다. . pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;], margins=True) # smoker Yes No All # sex # Male 60 97 157 # Female 33 54 87 # All 93 151 244 . 구성비율 기준으로 교차표를 볼 수 있다. . pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;], normalize=True) # smoker Yes No # sex # Male 0.245902 0.397541 # Female 0.135246 0.221311 . 일반적으로 데이터분석에서는 조건부 확률에 대해 관심이 많기 때문에 crosstab이 div와 함께 쓰는 경우가 많다. crosstab과 div를 함께쓰면 남자일 경우에 흡연자일 확률, 여자일 경우에 흡연자일 확률을 각각 계산할 수 있다. . tab = pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;]) tab.div(tab.sum(1), axis=0) # smoker Yes No # sex # Male 0.382166 0.617834 # Female 0.379310 0.620690 . bar 차트로 시각화할 수 있다. . import matplotlib.pyplot as plt tab = pd.crosstab(tips[&#39;sex&#39;], tips[&#39;smoker&#39;]) tab.div(tab.sum(1), axis=0).plot(kind=&#39;bar&#39;, stacked=True) plt.show() . 성별에 따른 흡연자 비율",
            "url": "https://safenumz.github.io/blog/python/2018/04/10/Python-Pandas.html",
            "relUrl": "/python/2018/04/10/Python-Pandas.html",
            "date": " • Apr 10, 2018"
        }
        
    
  
    
        ,"post315": {
            "title": "폭포수 방법과 애자일",
            "content": "폭포수 방식과 애자일 방식 . 애자일과 폭포수 방식은 대립구조가 아니다 | 애자일의 사고방식과 변화를 수용하고자 하는 움직임을 따르고 한다 | 애자일의 궁극적인 목적은 기술 조직, 비즈니스 조직 그리고 고객이 상호 협력하여 해결책을 같이 고심하자는 것 | . 폭포수 . 각 공정 단계로 완료 후에는 이전 단계로 되돌아 갈 수 없다. | 단계간 커뮤니케이션은 주로 문서로 수행 | 개발을 시작하여 완료될 쯤엔 이미 시장환경이 변화를 따라갈 수가 없다. | . 폭포수 방법론 . 요구사항 분석 : 무엇을 만들지 이해 | 설계 : 어떻게 만들지 검토 | 구현 : 실제 소프트웨어로 작성 | 테스트 : 만들어진 것을 확인 | . 프로젝트가 실패하는 이유 . 각자가 생각하는 프로젝트 성공의 의미가 다르게 해석되는 경우가 많음 | 처음부터 의견이 일치되지 않은 상태에서 프로젝트가 시작 | . 프로젝트를 실패하지 않으려면? . 다른 팀원들과 소통 | 고객과의 지속적인 피드백으로 소통 | . 애자일 . 우선 순위가 높은 기능부터 개발 | 문서보다는 동작하는 소프트웨어 중심으로 대화 | 전체를 한 번에 만들지 않고 일부라도 동작하는 부분을 완성하여 고객에게 보여주고 피드백을 반영하여 발전시켜 나간다. | . . Scrum Master . 애자일 프로젝트 서포트해주는 사람 | . 용어 정리 . 스크럼 : 애자일 프로젝트를 관리하기 위한 프로젝트 관리 툴 | XP : 애자일 프로젝트에 필요한 핵심 소프트웨어 엔지지어링 실천 법 | . 스프린트(iteration) . 짧은 주기를 계속하는 개발 프로세스 | 1~4주 간격의 개발 기간 | 애자일의 반복 | 스플니트 계획 &gt; 일일스크럼 &gt; 스프린트 리뷰 &gt; 회고 | . 제품백로그 (마스터 스토리 리스트) . 개발해야 할 제품의 기능 목록 | 고객이 이해하는 언어로 작성 | 후에는 ‘사용자 스토리’ 형식으로 작성되는 경우가 맣음 | . 스프린트 백로그 . 제품 백로그에서 스프린트 중 개발한 기능 목록 | . 일일스크럼 . 스탠드업 미팅 (매일 15분 정도) | . 애자일 핵심 . 같은 공간에서 일하기 | 참여하는 고객 | 멀티플레이어가 가능한 팀플레이어 직원 | . 스프린트 (1~4주) . 큰 문제들을 작은 문제들로 세분화 | 가장 중요한 것에 먼저 집중하고, 다른 것들을 잊어버림 | 소프트웨어가 제대로 작동하는지 확인하고 또 확인 | 고객의 피드백을 구함 | 필요하다면 계획을 바꿈 | Inception Deck : 애자일 도구 중 하나 . Inception . 어떤 활동이나 단체를 시작, 설립하는 단계라는 사전적 의미 | 프로젝트 초기단계에 고객과 개발팀이 서로 알아가는 과정을 갖는 일정한 기간 | . Why? . 우리는 왜 모였는가? (반드시 고객과 함께) | 이 프로젝트의 엘리베이터 피치는 무엇인가? | 우리 제품을 광고한다면 어떻게 표현할까? | 우리가 하지 말라야 하는 것은 무엇이 있을까? | 프로젝트 관계자 중 우리가 알아두어야 할 사람은 누구인가? |",
            "url": "https://safenumz.github.io/blog/devops/2018/04/10/%ED%8F%AD%ED%8F%AC%EC%88%98_%EC%95%A0%EC%9E%90%EC%9D%BC.html",
            "relUrl": "/devops/2018/04/10/%ED%8F%AD%ED%8F%AC%EC%88%98_%EC%95%A0%EC%9E%90%EC%9D%BC.html",
            "date": " • Apr 10, 2018"
        }
        
    
  
    
        ,"post316": {
            "title": "[MySQL] 00) 오리엔테이션",
            "content": "데이터베이스와 MySQL . 데이터베이스란? . 데이터를 구조화하여 데이터를 쉽게 관리할 수 있게 해주는 데이터의 저장소 | . SELECT * FROM favorite; SELECT 아티스트, 길이 FROM favorite LIMIT 2; -- 길이 순서에 따라 정렬 SELECT 아티스트, 길이 FROM favorite ORDER BY 길이; -- 데이터 추가 INSERT INTO favorite VALUES(&#39;꿈&#39;, &#39;조용필&#39;, &#39;4:47&#39;, &#39;The Dreams&#39;); -- 전체 확인 SELECT * FROM favorite . 데이터베이스의 종류 . 관계형 데이터베이스 MySQL, oracle, mssql | . | nosql mongodb | http://nosql-database.org | . | . 설치 . 윈도우 . http://www.apmsetup.com/ | apm setup에 접속이 안된다면 bitnami를 설치하면 됨 | https://bitnami.com/stack/wamp | 여기서는 bitnami로 진행함 | . &lt;!-- $ vi /etc/profile 관리자 권한으로 cmd 실행 후 /etc/profile을 열고 마지막 줄에 export PATH=&quot;$PATH:C://Bitnami/wampstack-7.1.26-2/mysql/bin&quot; 코드를 넣어주고 source /etc/profile 를 입력하면 $ source /etc/profile 어느 디렉토리에서나 mysql을 이용할 수 있다고 하는데 현재 이건 잘 안되고 있음 --&gt; // C://Bitnami/wampstack-7.1.26-2/mysql/bin 경로로 이동 $ cd C://Bitnami/wampstack-7.1.26-2/mysql/bin // C://Bitnami/wampstack-7.1.26-2/mysql/bin 경로에서 mysql을 실행하면 되는데 cmd, powershell, git bash 창 마다 먹히는 명령어가 전부 다른 문제가 있음 // cmd의 경우 $ mysql -uroot -p // powershell의 경우 $ ./mysql -uroot -p // git bash의 경우 $ winpty ./mysql -uroot -p mysql&gt; . MySQL이나 MariaDB 는 초기 설치 시, 루트 계정의 비밀번호 세팅을 해줘야한다. 3가지 방법이 있다. 1. root 계정 접속 후, mysql database 의 user table 에서 비밀번호 업데이트 $ use mysql $ update user set password=password(&#39;비밀번호&#39;) where user=&#39;root&#39;; $ FLUSH PRIVILEGES; 2. root 계정 접속 후, 비밀번호 변경 $ set password for &#39;root&#39;@&#39;localhost&#39; = password(&#39;비밀번호&#39;); $FLUSH PRIVILEGES; 3. mysqladmin 유틸리티를 통한 쉘에서 비밀번호 변경 $ mysqladmin -u 계정 -p password &#39;비밀번호&#39; -&gt; set 이나, update 문에서 password() 함수를 통하여 비밀번호 암호화를 해주는 것이 좋다 4. 특정 데이터베이스에 대한 권한을 설정해준다. (로컬 데이터베이스를 기준으로함) $ grant all privileges on local_database.* to &#39;계정&#39;@&#39;localhost&#39; identified by &#39;비밀번호&#39;; $ FLUSH PRIVILEGES; ++추가 MySQL 5.7 이상 버전에서는 아래와 같이 해줘야함. $ update mysql.user SET authentication_string=PASSWORD(&#39;비밀번호&#39;) WHERE user=&#39;root&#39;; $ FLUSH PRIVILEGES; . 리눅스(우분투) . Apache 설치 $ sudo apt-get install apache2 mysql 인증 모듈 설치 $ sudo apt-get install libapache2-mod-auth-mysql mysql 설치 $ sudo apt install mysql-server mysql-client php 설치 $ sudo apt-get install php5-commom php5 libapache2-mod-php5 php-mysql 연동 모듈설치 $ sudo apt-get install php5-mysql 아파치 재시작 $ sudo /etc/init.d/apache2 restart mysql 관리자 비밀번호 설정 $ sudo mysqladmin -u root 비밀번호 새로운비밀번호 $ mysql $ mysql -uroot -p Enter password: root 계정의 패스워드 입력 mysql&gt; show database; mysql&gt; . 1. apache가 잘 설치되었는지 확인 // 파이어폭스 주소창에 localhost 치면 It works! 2. php가 잘 설치되었는지 확인 $ cd /var/www /var/www$ ls -ls /var/www$ cat index.html // It works! 출력 /var/www$ sudo vi phpinfo.php // phpinfo 수정 &lt;? phpinfo(); ?&gt; // shift + enter 누른 후 wq 눌러서 저장 /var/www$ cat phpinfo.php // 파이어폭스에서 localhost/phpinfo.php 입력하고 php 관련 정보 페이지 나오면 잘 설치됨 . 맥(Mac) . // mysql 홈페이지에서 mysql 설치 후 $ cd /usr/loca/mysql/bin $ sudo ./mssql mysql&gt; use mysql; mysql&gt; update user set password=password(&#39;관리자비밀번호지정&#39;) where user=&#39;root&#39;; mysql&gt; flush privileges; $ sudo ./mysql -uroot -p . MySQL 클라이언트 . mysql-monitor : mysq -u아이디 -p비밀번호 | mysql query brower : GUI | phpMyAdmin : 서버에 직접 설치하는 웹프로그램 | navicat : 유료 | . phpMyAdmin . 웹기반으로 mysql을 제어할 수 있는 mysql-client | . ubuntu에서 설치 . $ sudo apt-get install phpmyadmin // apache2 선택해 설치 // username은 root . navicat . gui 환경에서 백업, 데이터동기화, 모델링 도구 등 다양한 기능 | 유료 | .",
            "url": "https://safenumz.github.io/blog/sql/2018/03/20/MySQL_00)_%EC%98%A4%EB%A6%AC%EC%97%94%ED%85%8C%EC%9D%B4%EC%85%98.html",
            "relUrl": "/sql/2018/03/20/MySQL_00)_%EC%98%A4%EB%A6%AC%EC%97%94%ED%85%8C%EC%9D%B4%EC%85%98.html",
            "date": " • Mar 20, 2018"
        }
        
    
  
    
        ,"post317": {
            "title": "[알고리즘] Java 달력 알고리즘",
            "content": "달력 알고리즘 . // Calender.java public class Calender { //미리 기준 연도와 , 기준월을 정해서 출력하는 방법을 선택함. int base_year = 1980; // 기준 연도 int base_month = 1; // 기준 월 입니다. 실제로는 1980년 1월 1을 기준으로 계산 int total_sum = 0; // 기준 년과 월에서 입력받은 날짜까지 총 일수를 여기에 저장 int[] month_table = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }; //각 월마다 총 일수 public int is_leap_year(int n) { //윤년이 있는 년도를 조사하는 함수입니다. 윤년인경우는 1 if (n % 4 == 0) { //4의 배수는 윤년 if (n % 100 == 0) // 그런데 100의 배수는 윤년이 아님 { if (n % 400 == 0) //그중에서 400의 배수는 윤년 return 1; return 0; } return 1; } else return 0; } public int total_to_month(int total) // 기준 날짜부터 입력받은 날짜까지 총 일수를 구해서 반환, { boolean CHK = false; // 무한 루프를 돌리기위한 불리안 값입니다. int i = 0; // i변수는 월입니다. int cnt = 0; // 총 일수를 월로 바꾸어서 cnt 저장시킵니다. int chk_leap_year = base_year; // 총 일수를 월로 바꾸려면 윤년이 있는 날을 고려해야합니다. // 기준연도부터 시작해서 윤년을 조사합니다. while (CHK != true) { if (is_leap_year(chk_leap_year) == 1) //만약 지금 연도가 윤년이라면 month_table[1] = 29; //2월달은 하루가 더 늘어납니다. if (total &gt;= month_table[i]) // 총 일수가 month_table[]배열의 총일수 보다 작다면, { total -= month_table[i++]; // 총일수를 month_table 배열의 현재 월의 일수로 빼줍니다. // 그리고 i를 증가시킵니다. 즉 다음달로 증가됩니다. cnt++; // 그리고 월이 증가합니다. if (i == 12) // 만약 12월이된다면 계절이 변해 다시 제자리로 오는것처럼 { i -= 12; // 다시 12를빼서 0으로 만들어줍니다. chk_leap_year++; //그리고 12개월이 지났으니 연도도 증가시켜줘야함 } month_table[1] = 28; //윤년을 평년의 해로 바꾸어주어야합니다. } else break; } cnt %= 12; // 위의 무한루프를 통해 총일수를 총월수로 계산됨, 이제 12 나머지 연산을 해주면 // 몇년도 몇월이라는 값으로 바꿀수있습니다. return (cnt + 1); // 그리고 바꾼 월을 반환 } public int count_leap(int n) // 기준 연도부터 시작해서 입력받은 연도까지의 윤년이 있는날을 셉니다. { int i; //기준연도를 저장합니다. int cnt = 0; // 윤년의 개수입니다. for (i = base_year; i &lt; (base_year - n); i++) // i(기준연도) 부터 입력받은 연도까지 i를 증가시키며 윤년이낀 갯수를 구함. { if (is_leap_year(i) == 1) //위에서 구현한 윤년인지를 판단하는 함수를 사용 { cnt++; // 윤년이라면 총 윤년의 개수를 증가시킵니다. } } return cnt; //카운트한 윤년의 갯수를 리턴합니다. } public void convert_to_day(int nYear) { // 기준 연도부터 입력받은 연도까지 총일수를 구해서 리턴합니다. total_sum = ((nYear - base_year) * 365) + count_leap((base_year - nYear)); } void result(int nYear, int mth) { int i, j; // 카운트를 위한 변수입니다. int d = 0; int year = 0; int month; int sum = 0; int dy = count_leap(base_year - nYear); //dy는 기준연도부터 현재연도까지 낀 윤년의 갯수입니다. convert_to_day(nYear); // ★ 우선 기준연도부터 현재 연도까지 년 단위로 총일수를 구합니다. ★ int day; // 이변수는 요일을 결정하기위해 존재합니다.예를들어 기준일부터 현재일까지 차이가 7이고 // 기준일이 월요일이면 7로 나눠서 나머지가 0이되니까 월요일임을 알수 있듯이 // day는 숫자로서 요일을 결정할수있습니다. if (nYear &gt;= base_year) { if (is_leap_year(nYear) == 1) //윤달이 낀날의 2월은 하루 증가 month_table[1] = 29; for (i = 0; i &lt; (mth - base_month); i++) total_sum += month_table[i]; // 위에 ★ 에서 기준연도부터 현재연도까지의 일수를 구했습니다. // 이 for루프를 통해 나머지 기준월부터 현재월까지의 총일수를 구합니다. // 즉 이루프를 통해 기준 연도와 월부터 현재 연도와 월까지의 총일수를 구함. day = (total_sum + 2) % 7; // 현재까지의 총일수를 7의 나머지로 연산해줍니다. 2를 더해준 이유는 1980년도 1월 1일 = 화요일 System.out.println(&quot;총 일수 = &quot; + total_sum + &quot;윤달이 낀 숫자 = &quot; + dy); month = total_to_month(total_sum); // 입력받은 해당 날짜의 정확한 달을 구해서 저장합니다. System.out.println(+month + &quot; 월의 달력&quot;); System.out.println(&quot;일 월 화 수 목 금 토&quot;); for (i = 0; i &lt; day; i++) //day 변수는 요일 입니다. 갯수만큼 t로 공백을 만들어줍니다. System.out.print(&quot; t&quot;); for (j = 1; j &lt;= month_table[month - 1]; j++) // month변수에서 1을 빼준이유는 배열은 0부터 시작하기때문입니다. { System.out.print(j + &quot; t&quot;); // j를 증가시켜가며 차례데로 날짜를 출력합니다. if (((j + day) % 7) == 0) System.out.println(); // 그리고 처음 요일을 출력하기위한 공백만큼 계산해서 출력 } System.out.println(); month_table[1] = 28; //윤년이었다면 다시 평년으로 바꾸어줍니다. } } } . // CalenderUser.java import java.util.Scanner; public class CalenderUser { public static void main(String args[]) { int year, month; Scanner s = new Scanner(System.in); Calender cldUser = new Calender(); System.out.println(&quot;Year, Month&quot;); year = s.nextInt(); month = s.nextInt(); // 연도와 월을 입력받습니다. cldUser.result(year, month); // cldUser클래스의 result함수에매개변수 // year, month를 넘겨주면 cldUser클래스가 결과를 출력합니다. } } . 출저: https://kaspyx.tistory.com/53 .",
            "url": "https://safenumz.github.io/blog/algorithm/2018/03/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EB%8B%AC%EB%A0%A5_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "relUrl": "/algorithm/2018/03/10/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Java_%EB%8B%AC%EB%A0%A5_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.html",
            "date": " • Mar 10, 2018"
        }
        
    
  
    
        ,"post318": {
            "title": "[Spark] Apache Spark 개요",
            "content": "Apache Spark 개요 . 빠르고 범용적으로 사용할 수 있는 cluster computing platform | Berkely AMPLab의 BDAS(Berkeley Data Analytics Stack)의 일부분 | . Overview . Microsoft Dryad Paper를 기반으로 개발 | Scala로 작성(소스 코드 양 대폭 감소) | Scala, Java, Python API 제공 | In-memory Architecture | MapReduce에 비해 10배(disk) ~ 100배(memory)의 성능 | Hadoop과 완벽 호완 HDFS, SerDes, UDF | . | . RDD(Resilient Distributed Dataset) . Spark의 핵심 추상화 기법 | Immutable, recomputable, fault-tolerant partitioned collections of records | 클러스터 노드들 사이의 파티션을 표현 | Data Set의 병렬 처리를 가능하게 함 | 파티션은 메모리나 디스크에 존재 . | lazy-evaluation : transformation 연산은 실제 데이터를 가져와서 RDD를 만드는 대신 RDD를 생성할 수 있는 lineage 정보만 생성, action 연산이 실행되면 그 때 실제 데이터를 가져와서 RDD를 생성하고 연산 수행 | 자원을 효율적으로 분배하여 사용가능 | . RDD Dependency . Narrow Dependencies: map, filter, uion, join with inputs co-partitioned | Wide Dependencies(Shuffling) : groupByKey, join with inputs not co-partitioned | . Spark Execution Model . Parallel, Distributed | DAG-based : RDD operation은 여러개의 Task Stage, Tree 형태, 병렬로 실행되기도 하고 파이프라인 형태로 실행되기도 함 | Lazy evaluation | Optimizations Reduce disk I/O | Reduce shuffle I/O | Parallel execution | Task pipelining | . | 데이터의 위치 파악 | fault tolerance는 각 파티션의 RDD lineage graph를 이용 | . Spark Cluster . 지원 가능 Cluster : Standalone, Mesos, YARN | . 용어 정의 . Application : Spark으로 작성된 사용자 프로그램, 드라이버(Driver) 프로그램과 실행자들(Executors)로 구성 | Application jar : 사용자의 Spark 어플리케이션이 들어있는 Jar. 대부분 어플리케이션과 dependency jar들을 모두 포함하고 있는 “uber jar” 형태로 사용. Hadoop이나 Spark 라이브러리는 절대 포함되서는 안됨 그러나 이것들은 실행 시에 추가될 것임 | Driver Program : 어플리케이션의 main() 함술ㄹ 실행하고 SparkContext를 생성하는 프로세스 | Cluster manager : 클러스터의 리소스를 획득하기 위한 외부서비스(standalone manager, Mesos, YARN) | Deploy mode : 드라이버의 프로세스가 실행되는 곳 구분, 클러스터 모드에서 프레임워크는 클러스터 내의 드라이버를 런치함, 클러스터 모드에서는 클러스터 외부에 드라이버를 런치 함 | Worker node : 클러스터에서 어플리케이션 코드를 실행할 수 있는 노드 | Executor : 워커 노드에서 어플리케이션을 위해 런치된 프로세스, 태스크를 실행하고 메모리나 디스크에 데이터를 보관함, 각 어플리케이션은 자신의 실행자를 가지고 있음 | Task : 하나의 실행자에 보내지는 작업의 단위 | Job : Spark Action (예: save, collect)에 반응하여 만들어진 여러 개의 작업들로 구성된 병렬 계산, 이 용어를 드라이버 로그에서 볼 수 있음 | Stage : 각 job은 서로 의존성을 가지고 있고 stage라고 불리는 더 작은 작업의 집합으로 나뉨, (MapReduce 에서 map과 reduce stages와 비슷) 이 용어를 드라이버 로그에서 볼 수 있음 | . master는 어플리케이션들 사이에 리소스를 배분하기 위해 cluster manage에 접근, 클러스터 상에서 task를 수행하고 데이터를 cache할 수 있는 executor 획득 | app code를 executor에 전송 | task를 executor에 전송 | 각 application은 여러개의 thread에서 task를 수행하는 executor process를 획득 서로 다른 application들은 서로 독립적으로 수행(driver process, executor process 모두) | 따라서, 서로 다른 application들 사이에 데이터는 공유될 수 없음 | . | Spark은 특정 cluster manager에 종속적이지 않음 executro process들을 얻을 수 있고 그것들이 서로 통신할 수 있다면 어떠한 cluster manager도 사용 가능 | . | Driver가 cluster 상의 모든 작업에 대한 Scheduling을 담당 가능한 driver와 worker node는 로컬 네티워크 내에서 실행 | 원격으로 cluster에 요청을 보내고 싶다면, driver를 worker node와 먼 곳에서 실행하지 않고 RPC를 통해 worker node와 가까운 곳에서 드라이버에게 요청을 보내야 함 | . | . . Build Apache Spark . Maven(Maven 3.3.3+, Java 7+) . Build Profile . $ export MAVEN_OPTS=&quot;-Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m&quot; $ build/mvn -Pyarn -Phadoop-2.4 -Dhadoop.version=2.4.0 -DskipTests clean package . 다양한 Build 예제 . Apache Hadoop 2.2.X $ mvn -Pyarn Phadoop-2.2 -Dhadoop.version=2.2.0 -DskipTests clean package Cloudera CDH 4.2.0 $ mvn -Pyarn -Dhadoop.verson=2.0.0-cdh4.2.0 -DskipTests clean package Apache Hadoop 2.4.X with Hive 13 support $ mvn -Pyarn -Phadoop-2.4 -Dhadoop.version=2.4.0 -Phive -Phive-thriftserver -DskipTests clean package for Scala 2.11 $ mvn -Pyarn -Phadoop-2.4 -Dscala-2.11 -DskipTests clean package Debian Packages $ mvn -Pdeb -DskipTests clean package sbt build $ build/sbt -Pyarn -Phadoop2.3 assembly . Hadoop Free Build Version . Pre-build with user-provided Hadoop [can use with most Hadoop distributions] 다운 시에 아래 과정 진행 | 자신의 Hadoop 버전에 맞춰 spark 환경설정 가능 | . in/conf/spark-env.sh if &#39;hadoop&#39; binary is on your PATH $ export SPARK_DIST_CLASSPATH=$(dadoop classpath) With explicit path to &#39;hadoop&#39; binary $ export SPARK_DIST_CLASSPATH=$(/path/to/hadoop/bin/hadoop classpath) Passing a Hadoop configuration directory $ export SPARK_DIST_CLASSPATH=$(hadoop --config /path/to/configs classpath) . Spark Shell . Spark Shell: Interactive Analysis, Spark Context가 내장되어 있는 Scala Shell . spark 다운로드 된 폴더 밑에 bin 폴더 (바이너리) 진입 | ./spark-shell | . %SPARK_HOME% bin spark-shell scala&gt; val data = 1 to 10000; data.filter(_ &lt; 10).collect scala&gt; val distData = sc.parallelize(data); distData.filter(_ &lt; 10).collect scala&gt; val textFile = sc.textFile(&quot;README.md&quot;) // 파일로 부터 RDD 생성, sc.textFile(&quot;hdfs://... ...&quot;) textFile: org.apache.spark.rdd.RDD[String] = README.md MappedRDD[17] at textFile at &lt;console&gt;:12 scala&gt; textFile.count scala&gt; testFile.first scala&gt; val lineWithSpark = textFile.filter(line=&gt;line.contain(&quot;Spark&quot;)) scala&gt; textFile.filter(_.contains(&quot;Spark&quot;)).count scala&gt; val words = lineWithSpark.map(_.split(&quot; &quot;)).map(r =&gt; r(1)) scala&gt; words.cache scala&gt; words.toDebugString . val textFile = sc.textFile(&quot;README.md&quot;) textFile.count // 에러 발생 val textFile = sc.textFile(&quot;README.md&quot;) textFile.count // res3: Long = 105 textFile.first // res4: String = # Apache Spark // &quot;Spark&quot;이란 단어가 들어간 문장 찾기 val lineWithSpark = textFile.filter(line=&gt; line.contains(&quot;Spark&quot;)) lineWithSpark.first // res5: String = # Apache Spark // &quot;Spark&quot; 단어가 들어간 line의 갯수는 20 lineWithSpark.count // res6: Long = 20 // 메모리에 저장하라는 것을 의미 lineWithSpark.cache // lineWithSpark이 어떻게 생성됐는지에 대한 그 동안의 오퍼레이션들을 볼 수 있다 lineWithSpark.toDebugString . pyspark shell . # bin/pyspark &gt; textFile = sc.textFile(&quot;README.md&quot;) &gt; textFile.count . SparkR shell . # bin/sparkR &gt; df &lt;- createDataFrame(sqlContext, faithful) &gt; head(df) . SparkSQL shell . # bin/spark-sql spark-sql&gt; CREATE TEMPORARY TABLE people &gt; USING org.apache.spark.sql.json &gt; OPTIONS( path &quot;examples/src/main/resources/people.json&quot; ); spark-sql&gt; select * from people; . beeline shell . hive 서버에서 쿼리 실행하는 쉘 | . # bin/beeline -u &lt;url&gt; -n &lt;username&gt; -p &lt;password&gt; # bin/beeline -e &quot;query&quot; # bin/beeline -f &lt;query file&gt; . run-example shell . spark에 있는 예제 실행하는 쉘 | . # bin/run-example SparkPi # bin/run-example sql.RDDRelation . spark-submit shell . # bin/spark-submit --master local[*] --class org.apache.spark.examples.SparkPilib/spark-examples-1.5.1-hadoop2.6.0.jar # bin/spark-submit examples/src/main/python/pi.py # bin/spark-submit examples/scr/main/r/dataframe.R . $ build/mvn -Pyarn -Phadoop-2.4 -DskipTests cleasn package . Spark Pre-built Library . R : lib | . | bin conf : 환경변수가 들어가 있는 디렉토리 log4j.properties.template : 로그인 정보에 대한 설명 | slaves : spark 클러스터를 구성할 때 워커 노드의 이름들을 모아 얼마나 많은 클러스터를 구성하겠다라는 것들에 대한 정보를 기록 | spark-defaults.conf.tempate : 기본 환경변수, spark이 실행될 때 이 환경변수 읽어옴 | fairscheduler.xml.template : 잡스케쥴러 설정 | metrics.properties.template : spark에서 제공하는 metrics 관련 로그 정보 지정, 로그정보를 csv 파일 포맷으로 떨어뜨릴 수도 있고, 강글리아 같은 시스템 모니터링으로 보낼 수 있고, 데이터베이스로 보낼 수 있음 | spark-env.sh.template : spark cluster가 돌아가는 환경들을 지정할 수 있음, 마스터 ip를 바꾼다거나, 스파크의 디폴트 포트는 7077로 돌아가는 데 기존에 사용하고 있으면 포트를 여기서 변경할 수 있음, 디폴트로 돌아가는 워커의 메모리를 지정하거나, 코어의 개수를 지정할 때 사용 | . | data : 샘플 데이터가 들어 있음, 주로 머신러닝 데이터 | ec2 : 아마존의 ec2 서버 설정 | example : spark에서 기본 제공하는 example | lib : spark 라이브러리 자료, spark이 실행될 때 run되는 라이브러리들 | licenses : 라이센스 파일 | python : python 환경 | sbin : spark cluster 명령어 | . | . conf 폴더 아래에서 $ vi slaves localhost // 다음과 같이 지정하면 워커 노드가 뜬다 worker1.server.com worker2.server.com . // 7077 포트가 떠 있는지 확인 $ netstat -anp | grep 7077 // 8080 포트가 다른 서버에서 사용되고 있는지 확인 $ netstat -anp | grep 8080 // :::8080 :::; LISTEN 30610/java // 뭐가 포트를 점유하고 있는지 구체적으로 확인 $ ps -ef|grep 30610 // spark-env.sh.template 파일을 수정하여 다른 포트로 잡음 // template 파일은 실행이 안되기 때문에 template 확장자 제거 $ cp spark-env.sh.template spark-env.sh . // spark-env.sh 파일 내부 하단에 export 명령어 추가, 사용할 포트 변경 $ vi spark-env.sh export SPARK_MASTER_WEBUI_PORT=8099 . // sbin 폴더에서, 모든 클러스터 실행 $ ./start-all.sh . 웹브라우저에 106.248.46.183:8099 입력하면 Spark Master 확인 가능 | . // 모두 종료 $ ./stop-all.sh .",
            "url": "https://safenumz.github.io/blog/spark/2018/03/03/Spark-Apache-Spark-%EA%B0%9C%EC%9A%94.html",
            "relUrl": "/spark/2018/03/03/Spark-Apache-Spark-%EA%B0%9C%EC%9A%94.html",
            "date": " • Mar 3, 2018"
        }
        
    
  
    
        ,"post319": {
            "title": "[Linux] Linux WOL 설정",
            "content": "Ubuntu WOL 설정 . https://www.cyberciti.biz/tips/linux-send-wake-on-lan-wol-magic-packets.html | . Ubuntu wakeonlan 설치 . $ sudo dpkg --configure -&lt;사용자명&gt; # $ sudo aptitude install etherwake # $ sudo apt install etherwake $ sudo apt-get install net-tools ethtool wakeonlan . CentOS 7 net-tools 설치 . $ sudo yum install net-tools . MacOS wakeonlan 설치 . $ brew install wakeonlan . WOL 설정 . $ ifconfig # 인터페이스명 확인 $ sudo ethtool -s &lt;인터페이스명&gt; wol g $ sudo ethtool &lt;인터페이스명: enp3s0&gt; $ sudo vi /etc/network/interfaces . # 아래 내용을 넣어준다. post-up /sbin/ethtool -s wol g post-down /sbin/ethtool -s wol g &lt;/pre&gt; # 부팅시 F2키 연타하여 바이오스 진입 Advanced &gt; Advanced/APM Configuration Power On By PCI-E abled 설정 . ~~~shell $ sudo poweroff $ sudo reboot # 컴퓨터 종료 $ sudo shutdown -h now # 컴퓨터 재부팅 $ sudo shutdown -r now ~~~ # Magic Packets sh # Mac, Ubuntu # wakeonlan xx:yy:zz:11:22:33 # wakeonlan -i 192.168.1.255 -p 4242 mac $ wakeonlan # CentOS 7 $ ether-wake - 설정파일을 불러와서 매직패킷을 날릴 수도 있음 sh $ wakeonlan -f homelab.wol &gt; homelab.wol sh # homelab.wol # File structure # -- # - blank lines are ignored # - comment lines are ignored (lines starting with a hash mark &#39;#&#39;) # - other lines are considered valid records and can have 3 columns: # # Hardware address, IP address, destination port # # the last two are optional, in which case the following defaults # are used: # # IP address: 255.255.255.255 (the limited broadcast address) # port: 9 (the discard port) # 00:16:3e:a3:9d:a8 192.168.1.255 9 00:16:3e:08:ed:c6 255.255.255.255 f0:1f:af:1f:2c:60 .",
            "url": "https://safenumz.github.io/blog/linux/2018/03/01/Linux-Ubuntu_WOL_%EC%84%A4%EC%A0%95.html",
            "relUrl": "/linux/2018/03/01/Linux-Ubuntu_WOL_%EC%84%A4%EC%A0%95.html",
            "date": " • Mar 1, 2018"
        }
        
    
  
    
        ,"post320": {
            "title": "[Linux] CentOS7 WOL 설정",
            "content": "Environment . OS: CentOS 7 | MainBoard: biostar | . PME 부팅: 컴퓨터를 통하여 부팅하는 방법(원격부팅) . biostart bios 설정 . # WOL ON Advanced &gt; PME Wake up from S5 &gt; Enabled # 전력 관련 Chipset &gt; Eup Control &gt; Disabled # Advanced &gt; Restore AC Power Loss &gt; Last State . ethtool 설치 . $ yum install -y ethtool . 인터페이스명 확인 . 여기선 enp5s0, 인터페이스명은 사용자마다 다름 | . $ ifconfig | grep -e enp -e eth . enp5s0 . WOL ON . $ ethtool -s enp5s0 wol g . WOL 설정 확인 . Wake-on: d가 아닌 Wake-on: g로 나와야 함 | . $ ethtool enp5s0 | grep Wake-on . Wake-on: g . /etc/rc.local에 등록 . 재부팅해도 적용하기 위해 /etc/rc.local에 등록 | . $ vi /etc/rc.local . # /etc/rc.local /sbin/ethtool -s enp5s0 wol g . 아래 명령어를 반드시 해줘야 함, 아니면 WOL 작동 안함 | . $ chmod +x /etc/rc.d/rc.local . Trouble shooting . $ nmcli con show &quot;enp5s0&quot; | grep wake . 802-3-ethernet.wake-on-lan: magic . default가 아니라 magic으로 되어 있어야 함 | 만약 default로 되어 있다면, 아래 명령어로 수정 | . $ nmcli con modify &quot;enp5s0&quot; 802-3-ethernet.wake-on-lan magic . nmcli con show &quot;enp5s0&quot; | grep negotidate . 802-3-ethernet.auto-negotiate: yes . no가 아니라 yes로 되어 있어야 함 | 만약 no로 되어 있다면, 아래 명령어로 수정 | . $ nmcli con modify &quot;enp5s0&quot; 802-3-ethernet.auto-negotiate yes .",
            "url": "https://safenumz.github.io/blog/linux/2018/03/01/Linux-CentOS_WOL.html",
            "relUrl": "/linux/2018/03/01/Linux-CentOS_WOL.html",
            "date": " • Mar 1, 2018"
        }
        
    
  
    
        ,"post321": {
            "title": "[Project] 파라다이스 기업분석",
            "content": "",
            "url": "https://safenumz.github.io/blog/project/2012/09/01/uic.html",
            "relUrl": "/project/2012/09/01/uic.html",
            "date": " • Sep 1, 2012"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "인공지능과 데이터 엔지니어링을 학습하고 기록하는 블로그입니다. .",
          "url": "https://safenumz.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
  

  
      ,"page26": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://safenumz.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}